{
  "version": 3,
  "file": "bundle.css",
  "sources": [
    "About.svelte",
    "App.svelte",
    "Charge.svelte",
    "Editor.svelte",
    "EditorControlButtons.svelte",
    "EditorShift.svelte",
    "Gallery.svelte",
    "Navbar.svelte",
    "Ordinary.svelte",
    "Positions.svelte",
    "Switch.svelte",
    "Tooltip.svelte"
  ],
  "sourcesContent": [
    "<script>\n  import AnimatedCOA from './AnimatedCOA.svelte';\n  import {state} from './stores';\n  import {fade, fly} from 'svelte/transition';\n  const duration = 1000;\n</script>\n\n<div id=\"about\" transition:fade>\n  <span on:click={() => $state.about = 0} class=\"close\">&times;</span>\n  <div id=\"aboutCont\">\n    <AnimatedCOA {duration}/>\n    <div class=buttons in:fly=\"{{y:200, delay: duration, duration}}\">\n      <a target=_blank href=https://discord.com/invite/X7E84HU><span translate=\"no\">Discord</span></a>\n      <a target=_blank href=https://github.com/Azgaar/Armoria><span translate=\"no\">GitHub</span></a>\n      <a target=_blank href=https://www.patreon.com/azgaar><span translate=\"no\">Patreon</span></a>\n    </div>\n  </div>\n</div>\n\n<style>\n  #about {\n    height: 100%;\n    width: 100%;\n    position: fixed;\n    z-index: 1;\n    left: 0;\n    top: 0;\n    background-color: rgba(0,0,0, 0.9);\n    transition: .5s;\n    text-align: center;\n    user-select: none;\n  }\n\n  #aboutCont {\n    position: absolute;\n    top: 50%;\n    left: 50%;\n    transform: translate(-50%, -50%);\n  }\n\n  a, span {\n    display: inline-block;\n    cursor: pointer;\n    color: #ddd;\n  }\n\n  a:hover, span:hover {\n    color: #fff;\n  }\n\n  .buttons > a {\n    margin: 2em;\n    font-size: 1.2em;\n  }\n\n  span.close {\n    position: fixed;\n    top: 0em;\n    right: .5em;\n    font-size: 4em;\n    padding: .2em 0;\n  }\n</style>\n",
    "<script>\n  import Navbar from './Navbar.svelte';\n  import About from './About.svelte';\n  import Editor from './Editor.svelte';\n  import Gallery from './Gallery.svelte';\n  import Patterns from './Patterns.svelte';\n  import {generate} from './generator.js';\n  import {background, size, history, matrices, matrix, state, changes} from './stores.js';\n  import {download} from './download.js';\n\n  let n, w, h, gallery = [], coa;\n  $: [n, w, h] = defineGallerySize($size);\n  $: {\n    const l = $history.length;\n    // reroll is clicked\n    if (!$matrices[$matrix]) {\n      if ($state.edit) {\n        // generate new coa\n        $matrices[$matrix] = $matrices[$matrix-1].slice();\n        $matrices[$matrix][$state.i] = l;\n      } else {\n        // reroll gallery\n        $matrices[$matrix] = Array.from({length: n}, (_, i) => l+i++);\n      }\n    }\n\n    // update if of edited coa\n    if ($state.edit) {\n      $state.c = $matrices[$matrix][$state.i];\n      coa = $history[$state.c] || generate();\n      if (!$history[$state.c]) $history.push(coa);\n      changes.reset();\n    }\n\n    // add additional coas to matrix if size is smaller\n    if ($matrices[$matrix].length < n) {\n      const m = $matrices[$matrix];\n      $matrices[$matrix] = [...Array(n).keys()].map(i => m[i] || l+i);\n    }\n\n    gallery = $matrices[$matrix].slice(0, n);\n  };\n\n  // define number and size of coas to display\n  function defineGallerySize(desiredSize) {\n    const width = window.innerWidth;\n    const height = window.innerHeight - 60;\n    const numberX = Math.ceil(width / desiredSize);\n    const w = Math.floor(width / numberX);\n    const numberY = Math.floor(height / w);\n    const h = Math.floor(height / numberY);\n    return [numberX * numberY, w, h];\n  }\n\n  // keyboard shortcuts\n  function handleKeydown(event) {\n    const code = event.code;\n    const reserved = [\"Backspace\", \"Enter\", \"KeyZ\", \"KeyX\", \"KeyD\", \"F1\"];\n    if (!reserved.includes(code)) return;\n\n    const active = document.activeElement.tagName;\n    if (active === \"INPUT\" || active === \"SELECT\") return;\n\n    event.preventDefault();\n    if (code === \"Backspace\" && $matrix > 0) $matrix -= 1; else // Rollback\n    if (code === \"Enter\") $matrix += 1; else // Reroll\n    if (code === \"KeyZ\") changes.undo(); else // Undo\n    if (code === \"KeyX\") changes.redo(); else // Redo\n    if (code === \"KeyD\") download(); else // Download\n    if (code === \"F1\") $state.about = !$state.about; // About\n  }\n</script>\n\n<svelte:window on:keydown={handleKeydown}/>\n\n<main style=\"background-color: {$background}\">\n  <Navbar/>\n  {#if $state.about}<About/>{/if}\n  {#if $state.edit}<Editor {coa} c={$state.c}/>\n  {:else}<Gallery {gallery} {w} {h}/>{/if}\n  <div id=\"patterns\" style=\"position: absolute\">\n    <svg width=0 height=0 xmlns=\"http://www.w3.org/2000/svg\">\n      <defs><Patterns/></defs>\n    </svg>\n  </div>\n</main>\n\n<style>\n  main {\n    background-image: url(\"data:image/svg+xml,%3Csvg width='84' height='84' viewBox='0 0 84 84' xmlns='http://www.w3.org/2000/svg'%3E%3Cg fill='none'%3E%3Cg fill='%23222' fill-opacity='.2'%3E%3Cpath d='M84 23c-4.417 0-8-3.584-8-7.998V8h-7.002C64.58 8 61 4.42 61 0H23c0 4.417-3.584 8-7.998 8H8v7.002C8 19.42 4.42 23 0 23v38c4.417 0 8 3.584 8 7.998V76h7.002C19.42 76 23 79.58 23 84h38c0-4.417 3.584-8 7.998-8H76v-7.002C76 64.58 79.58 61 84 61V23zM59.05 83H43V66.95c5.054-.5 9-4.764 9-9.948V52h5.002c5.18 0 9.446-3.947 9.95-9H83v16.05c-5.054.5-9 4.764-9 9.948V74h-5.002c-5.18 0-9.446 3.947-9.95 9zm-34.1 0H41V66.95c-5.053-.502-9-4.768-9-9.948V52h-5.002c-5.184 0-9.447-3.946-9.95-9H1v16.05c5.053.502 9 4.768 9 9.948V74h5.002c5.184 0 9.447 3.946 9.95 9zm0-82H41v16.05c-5.054.5-9 4.764-9 9.948V32h-5.002c-5.18 0-9.446 3.947-9.95 9H1V24.95c5.054-.5 9-4.764 9-9.948V10h5.002c5.18 0 9.446-3.947 9.95-9zm34.1 0H43v16.05c5.053.502 9 4.768 9 9.948V32h5.002c5.184 0 9.447 3.946 9.95 9H83V24.95c-5.053-.502-9-4.768-9-9.948V10h-5.002c-5.184 0-9.447-3.946-9.95-9zM50 50v7.002C50 61.42 46.42 65 42 65c-4.417 0-8-3.584-8-7.998V50h-7.002C22.58 50 19 46.42 19 42c0-4.417 3.584-8 7.998-8H34v-7.002C34 22.58 37.58 19 42 19c4.417 0 8 3.584 8 7.998V34h7.002C61.42 34 65 37.58 65 42c0 4.417-3.584 8-7.998 8H50z'/%3E%3C/g%3E%3C/g%3E%3C/svg%3E\");\n  }\n</style>\n\n",
    "<script>\n  import {shields} from \"./dataModel.js\";\n  import {loadedCharges, state, changes, grid} from \"./stores\"\n  export let coa, charge, i, shield, colors, t;\n\n  $: shieldPositions = shields[shield] || shields.spanish;\n  $: positions = [...new Set(charge.p)].filter(p => shieldPositions[p]);\n\n  const defs = document.getElementById(\"charges\");\n  function getCharge(charge) {\n    if ($loadedCharges[charge] || defs.querySelector(\"#\"+charge)) return charge;\n    $loadedCharges[charge] = 1;\n\n    fetch(\"charges/\"+charge+\".svg\").then(response => response.text()).then(text => {\n      const el = document.createElement(\"html\");\n      el.innerHTML = text;\n      defs.insertAdjacentHTML(\"beforeend\", el.querySelector(\"g\").outerHTML);\n    });\n    return charge;\n  }\n\n  function getElTransform(shieldPositions, c, p) {\n    const [x, y] = shieldPositions[p];\n    const size = c.size || 1;\n    const scale = c.sinister || c.reversed ? `${c.sinister ? \"-\" : \"\"}${size}, ${c.reversed ? \"-\" : \"\"}${size}` : size;\n    return `translate(${x} ${y}) scale(${scale})`;\n  }\n\n  function addDrag(e, c) {\n    if (!$state.edit) return;\n    const el = e.currentTarget;\n    const [a0, x0, y0] = parseTransform(el.getAttribute(\"transform\"));\n    const x1 = e.x, y1 = e.y;\n    const sizeAdj = +el.closest(\"svg\").getAttribute(\"width\") / 200;\n\n    const angle = -a0 * (Math.PI / 180);\n    const cosAngle = Math.cos(angle);\n    const sinAngle = Math.sin(angle);\n\n    document.addEventListener(\"mousemove\", drag);\n    document.addEventListener(\"mouseup\", dragStop, {once: true});\n\n    function drag(e) {\n      document.body.style.cursor = \"move\";\n      const dx = x0 + (e.x - x1) / sizeAdj;\n      const dy = y0 + (e.y - y1) / sizeAdj;\n\n      const relX = (dx * cosAngle) - (dy * sinAngle);\n      const relY = (dx * sinAngle) + (dy * cosAngle);\n\n      c.x = Math.round(relX / $grid) * $grid;\n      c.y = Math.round(relY / $grid) * $grid;\n      const tr = getTransform(c);\n      if (tr) el.setAttribute(\"transform\", tr); else el.removeAttribute(\"transform\");\n    }\n\n    function dragStop() {\n      document.removeEventListener(\"mousemove\", drag);\n      document.body.style.cursor = \"auto\";\n      changes.add(JSON.stringify(coa));\n    }\n  }\n\n  function parseTransform(string) {\n    if (!string) {return [0,0,0,0,0,1];}\n    const a = string.replace(/[a-z()]/g, \"\").replace(/[ ]/g, \",\").split(\",\");\n    return [+a[0] || 0, +a[1] || 0, +a[2] || 0, +a[3] || 0, +a[4] || 0, +a[5] || 1];\n  }\n\n  function getTransform(c) {\n    if (!c.x && !c.y && !c.angle) return null;\n    return `rotate(${c.angle||0}) translate(${c.x||0} ${c.y||0})`;\n  }\n\n</script>\n\n<g class=\"charge\" {i} class:editable={$state.edit} charge={getCharge(charge.charge)} transform={getTransform(charge)} transform-origin=\"center\" stroke=\"#000\" on:mousedown={function(e) {addDrag(e, charge)}}>\n  {#each positions as p}\n    <use href=\"#{charge.charge}\" transform={getElTransform(shieldPositions, charge, p)} transform-origin=\"center\" fill=\"{colors[t]}\"></use>\n  {/each}\n</g>\n\n<style>\n  .editable {\n    cursor: move;\n  }\n</style>",
    "<script>\n  import COA from './COA.svelte';\n  import MenuItem from './MenuItem.svelte';\n  import EditorType from './EditorType.svelte';\n  import EditorSize from './EditorSize.svelte';\n  import EditorTincture from './EditorTincture.svelte';\n  import EditorShift from \"./EditorShift.svelte\";\n  import EditorControlButtons from \"./EditorControlButtons.svelte\";\n  import Switch from './Switch.svelte';\n  import Tooltip from './Tooltip.svelte';\n  import {slide, fly} from 'svelte/transition';\n  import {rw} from './utils.js';\n  import {changes, state, grid, showGrid} from './stores';\n  import {charges, tinctures, divisions, ordinaries, lines, positionsSelect} from \"./dataModel.js\";\n  import {getSize} from './generator.js';\n  export let coa, c;\n\n  const min = Math.min(window.innerWidth, window.innerHeight);\n  const ratio = window.innerHeight / window.innerWidth;\n  const coaSize = Math.round(min * .9);\n  let width = window.innerWidth < 600 || ratio > 1 ? 100 : Math.round((1.05 - ratio) * 100);\n  if (width / 100 * window.innerWidth < 300) width = 100;\n  const itemSize = width / 1000 * window.innerWidth - 3; // ~10 items in row\n\n  const patterns = [\"vair\", \"vairInPale\", \"vairEnPointe\", \"ermine\", \"chequy\", \"lozengy\", \"fusily\", \"pally\", \"barry\", \"gemelles\", \"bendy\", \"bendySinister\", \"palyBendy\", \"pappellony\", \"masoned\", \"fretty\"];\n  const chargeTypes = Object.keys(charges.types);\n  const ordinariesList = [\"no\"].concat(Object.keys(ordinaries.lined)).concat(Object.keys(ordinaries.straight));\n\n  let menu = {}, change = 0;\n\n  $state.transform = null;\n  $state.positions = null;\n\n  // on reroll\n  $: defineMenuState(c);\n\n  // on coa change\n  $: {\n    if (change) changes.add(JSON.stringify(coa));\n    change = 1;\n  }\n\n  // on undo or redo\n  $: {\n    if (changes.length()) {\n      coa = JSON.parse($changes[0]);\n      defineMenuState();\n      change = 0;\n    }\n  }\n\n  // define initial menu state, run only when new coa is passed\n  function defineMenuState() {\n    // Field\n    menu.field = getField();\n    function getField() {\n      const type = isSemy(coa.t1) ? \"semy\" : isPattern(coa.t1) ? \"pattern\" : \"tincture\";\n      let t1, t2, pattern = \"vair\", charge = \"lozenge\", semy = \"conventional\", size = \"standard\";\n\n      const field = coa.t1.split(\"-\"); // parsed field tincture\n\n      if (type === \"tincture\") {\n        t1 = coa.t1;\n        t2 = selectSecondTincture(coa.t1, \"field\");\n      } else {\n        t1 = field[1];\n        t2 = field[2];\n        size = field[3] || \"standard\"\n      }\n\n      if (type === \"pattern\") pattern = field[0];\n      else if (type === \"semy\") {\n        charge = getSemyCharge(field);\n        semy = getSemyType(field);\n      }\n\n      return {type, t1, t2, pattern, charge, semy, size}\n    }\n\n    // Division\n    menu.division = getDivision();\n    function getDivision() {\n      let type = \"tincture\", division = \"no\", line = \"straight\", t1, t2, pattern = \"vair\", charge = \"lozenge\", semy = \"conventional\", size = \"standard\";\n\n      if (coa.division) {\n        const tSplit = coa.division.t.split(\"-\"); // parsed division tincture\n        type = isSemy(coa.division.t) ? \"semy\" : isPattern(coa.division.t) ? \"pattern\" : \"tincture\";\n\n        division = coa.division.division;\n        line = coa.division.line || \"straight\";\n        t1 = type === \"tincture\" ? coa.division.t : tSplit[1];\n        t2 = type === \"tincture\" ? selectSecondTincture(t1, \"division\") : tSplit[2];\n        if (type === \"pattern\") pattern = tSplit[0];\n        if (type === \"semy\") {\n          charge = getSemyCharge(tSplit);\n          semy = getSemyType(tSplit);\n        }\n        size = tSplit[3] || \"standard\";\n      } else {\n        t1 = selectSecondTincture(menu.field.t1, \"division\");\n        t2 = selectSecondTincture(t1, \"division\");\n      }\n\n      return {division, line, type, t1, t2, pattern, charge, semy, size};\n    }\n\n    // Ordinary\n    menu.ordinary = getOrdinary();\n    function getOrdinary() {\n      let ordinary = \"no\", line = \"straight\", t, divided = \"\", size = 1, x = 0, y = 0, angle = 0;\n\n      if (coa.ordinary) {\n        ordinary = coa.ordinary.ordinary;\n        line = coa.ordinary.line || \"straight\";\n        t = coa.ordinary.t;\n        divided = coa.ordinary.divided || \"\";\n        size = coa.ordinary.size || 1;\n        x = coa.ordinary.x || 0;\n        y = coa.ordinary.y || 0;\n        angle = coa.ordinary.angle || 0;\n        if (angle) updateGrid(coa.ordinary);\n      } else {\n        t = rw(tinctures[\"colours\"][\"charge\"]);\n      }\n\n      return {ordinary, line, t, divided, size, x, y, angle}\n    }\n\n    // Charges\n    menu.charges = getCharges();\n    function getCharges() {\n      if (!coa.charges) return [];\n      const charges = coa.charges.map(c => {\n        const {charge, t, p, size} = c;\n        const type = getChargeType(charge);\n        const layer = c.layer || \"\";\n        const sinister = c.sinister || false;\n        const reversed = c.reversed || false;\n        const x = c.x || 0;\n        const y = c.y || 0;\n        const angle = c.angle || 0;\n        if (angle) updateGrid(c);\n        return {charge, type, layer, t, p, size, sinister, reversed, x, y, angle};\n      });\n\n      return charges;\n    }\n\n    function isPattern(string) {\n      return string?.includes(\"-\");\n    }\n\n    function isSemy(string) {\n      return string?.slice(0,4) === \"semy\";\n    }\n\n    function getSemyCharge(array) {\n      return array[0].split(\"_of_\")[1];\n    }\n\n    function getChargeType(charge) {\n      return chargeTypes.find(type => charges[type][charge]);\n    }\n\n    function getSemyType(array) {\n      const charge = getSemyCharge(array);\n      return getChargeType(charge);\n    }\n\n    function selectSecondTincture(t1, type) {\n      const metal = t1 === \"argent\" || t1 === \"or\";\n      const tincturesType = metal ? tinctures[\"colours\"] : tinctures[\"metals\"];\n      return rw(tincturesType[type]);\n    }\n\n    return menu;\n  }\n\n  function addCharge() {\n    const type = rw(charges.single);\n    const charge = rw(charges[type]);\n    const t = rw(tinctures[rw(tinctures.charge)].charge);\n    const с = {charge, t, p: \"e\", type, size: 1.5, sinister: false, reversed: false, x: 0, y: 0, angle: 0, layer: \"\"};\n    menu.charges = [...menu.charges, с];\n  }\n\n  // field attributes changed\n  $: {\n    if (menu.field.type === \"tincture\") coa.t1 = menu.field.t1; else {\n      const type = menu.field.type === \"semy\" ? \"semy_of_\" + menu.field.charge : menu.field.pattern;\n      const attibutes = [type, menu.field.t1, menu.field.t2];\n      if (menu.field.size !== \"standard\") attibutes.push(menu.field.size);\n      coa.t1 = attibutes.join(\"-\");\n    }\n  }\n\n  // division attributes changed\n  $: {\n    if (menu.division.division && menu.division.division !== \"no\") {\n      coa.division = {division: menu.division.division};\n      if (divisions[menu.division.division]) coa.division.line = menu.division.line;\n      if (menu.division.type === \"tincture\") coa.division.t = menu.division.t1;\n      else {\n        const attr0 = menu.division.type === \"semy\" ? \"semy_of_\" + menu.division.charge : menu.division.pattern;\n        const attibutes = [attr0, menu.division.t1, menu.division.t2];\n        if (menu.division.size !== \"standard\") attibutes.push(menu.division.size);\n        coa.division.t = attibutes.join(\"-\");\n      }\n    } else delete coa.division;\n  }\n\n  // ordinary attributes changed\n  $: {\n    const o = menu.ordinary;\n    if (o && o.ordinary !== \"no\") {\n      coa.ordinary = {ordinary: o.ordinary, t: o.t};\n      if (ordinaries.lined[o.ordinary]) coa.ordinary.line = o.line;\n      if (coa.division) coa.ordinary.divided = o.divided;\n\n      if (o.x || o.y) {coa.ordinary.x = o.x; coa.ordinary.y = o.y;}\n      if (o.angle) coa.ordinary.angle = o.angle;\n      if (o.size && o.size !== 1) coa.ordinary.size = o.size;\n    } else delete coa.ordinary;\n  }\n\n  // charges attributes changed\n  $: {\n    if (menu.charges.length) {\n      coa.charges = menu.charges.map(c => {\n        const item = {charge: c.charge, t: c.t, p: c.p, size: c.size};\n        if (c.layer) item.layer = c.layer;\n        if (c.sinister) item.sinister = 1;\n        if (c.reversed) item.reversed = 1;\n        if (c.x || c.y) {item.x = c.x; item.y = c.y;}\n        if (c.angle) item.angle = c.angle;\n        return item;\n      });\n    } else delete coa.charges;\n  }\n\n  // on grid change\n  $: localStorage.setItem(\"grid\", $grid);\n  $: localStorage.setItem(\"showGrid\", $showGrid);\n\n  function showSection(e) {\n    e.target.classList.toggle(\"expanded\");\n    const panel = e.target.nextElementSibling;\n    if (panel.style.maxHeight) panel.style.maxHeight = null;\n    else panel.style.maxHeight = panel.scrollHeight + \"px\";\n  }\n\n  function updateSection(e) {\n    const panel = e.currentTarget.closest(\".panel\");\n    setTimeout(() => panel.style.maxHeight = panel.scrollHeight + \"px\", 100);\n  }\n\n  function showPositions(c) {\n    $state.transform = `rotate(${c.angle||0}) translate(${c.x||0}, ${c.y||0})`;\n    $state.positions = c.p;\n  }\n\n  function updateGrid(c) {\n    $state.transform = `rotate(${c.angle||0})`;\n  }\n\n  function cap(string = \"no\") {\n    const split = string.split(/(?=[A-Z])/).join(\" \");\n    return split.charAt(0).toUpperCase() + split.slice(1);\n  }\n</script>\n\n<div id=\"editor\">\n  {#key coa}\n    <COA {coa} i=\"Edit\" w={coaSize} h={coaSize}/>\n  {/key}\n  <div id=\"menu\" in:fly={{x:500, duration:1000}} style=\"width:{width}%\">\n    <!-- Field -->\n    <div class=\"section\" class:expanded={false} on:click={showSection}>Field</div>\n    <div class=\"panel\">\n      <div class=\"subsection\">\n        <EditorType bind:type={menu.field.type} {updateSection}/>\n        {#if menu.field.type !== \"tincture\"}\n          <EditorSize bind:size={menu.field.size}/>\n        {/if}\n      </div>\n\n      <div class=\"subsection\">\n        <EditorTincture bind:t1={menu.field.t1} {itemSize}/>\n      </div>\n\n      {#if menu.field.type !== \"tincture\"}\n        <div class=\"subsection\">\n          <EditorTincture bind:t1={menu.field.t2} {itemSize}/>\n        </div>\n      {/if}\n\n      {#if menu.field.type === \"pattern\"}\n        <div class=\"subsection\">\n          <div>Pattern:</div>\n          {#each patterns.map(p => new Object({t1: `${p}-${menu.field.t1}-${menu.field.t2}-${menu.field.size}`, pattern: p})) as coa}\n            <div class=item class:selected={menu.field.pattern === coa.pattern} on:click={() => menu.field.pattern = coa.pattern}>\n              <MenuItem {coa} title={cap(coa.pattern)} {itemSize}/>\n            </div>\n          {/each}\n        </div>\n      {/if}\n\n      {#if menu.field.type === \"semy\"}\n        <div class=\"subsection\">\n          <div>Charge:\n            <select bind:value={menu.field.semy}>\n              {#each chargeTypes as type}\n                <option value={type}>{cap(type)}</option>\n              {/each}\n            </select>\n          </div>\n\n          {#each Object.keys(charges[menu.field.semy]).map(c => new Object({t1: `semy_of_${c}-${menu.field.t1}-${menu.field.t2}-${menu.field.size}`, charge: c})) as coa (coa)}\n            <div class=item class:selected={menu.field.charge === coa.charge} on:click={() => menu.field.charge = coa.charge}>\n              <MenuItem {coa} title={cap(coa.charge)} {itemSize}/>\n            </div>\n          {/each}\n        </div>\n      {/if}\n    </div>\n\n    <!-- Division -->\n    <div class=\"section\" on:click={showSection}>Division</div>\n    <div class=\"panel\">\n      <div class=\"subsection\" on:click={updateSection}>\n        {#each [\"no\"].concat(Object.keys(divisions.variants)).map(division => new Object({t1: coa.t1, division: {division, t: coa.division ? coa.division.t : menu.division.t1, line: menu.division.line}})) as coa (coa)}\n          <div class=item class:selected={menu.division.division === coa.division.division} on:click={() => menu.division.division = coa.division.division}>\n            <MenuItem {coa} title={cap(coa.division.division)} {itemSize}/>\n          </div>\n        {/each}\n      </div>\n\n      {#if divisions[coa.division?.division]}\n        <div class=\"subsection\">\n          <div>Line:</div>\n          {#each Object.keys(lines).map(line => new Object({t1: coa.t1, division: {division: menu.division.division, t: coa.division ? coa.division.t : menu.division.t1, line}})) as coa (coa)}\n            <div class=item class:selected={menu.division.line === coa.division.line} on:click={() => menu.division.line = coa.division.line}>\n              <MenuItem {coa} title={cap(coa.division.line)} {itemSize}/>\n            </div>\n          {/each}\n        </div>\n      {/if}\n\n      {#if coa.division}\n        <div class=\"subsection\">\n          <EditorType bind:type={menu.division.type} {updateSection}/>\n          {#if menu.division.type !== \"tincture\"}\n            <EditorSize bind:size={menu.division.size}/>\n          {/if}\n        </div>\n\n        <div class=\"subsection\">\n          <EditorTincture bind:t1={menu.division.t1} {itemSize}/>\n        </div>\n\n        {#if menu.division.type !== \"tincture\"}\n          <div class=\"subsection\">\n            <EditorTincture bind:t1={menu.division.t2} {itemSize}/>\n          </div>\n        {/if}\n\n        {#if menu.division.type === \"pattern\"}\n          <div class=\"subsection\">\n            <div>Pattern:</div>\n            {#each patterns.map(p => new Object({t1: `${p}-${menu.division.t1}-${menu.division.t2}-${menu.division.size}`, pattern: p})) as coa}\n              <div class=item class:selected={menu.division.pattern === coa.pattern} on:click={() => menu.division.pattern = coa.pattern}>\n                <MenuItem {coa} title={cap(coa.pattern)} {itemSize}/>\n              </div>\n            {/each}\n          </div>\n        {/if}\n\n        {#if menu.division.type === \"semy\"}\n          <div class=\"subsection\">\n            <div>Charge:\n              <select bind:value={menu.division.semy}>\n                {#each chargeTypes as type}\n                  <option value={type}>{cap(type)}</option>\n                {/each}\n              </select>\n            </div>\n\n            {#each Object.keys(charges[menu.division.semy]).map(c => new Object({t1: `semy_of_${c}-${menu.division.t1}-${menu.division.t2}-${menu.division.size}`, charge: c})) as coa (coa)}\n              <div class=item class:selected={menu.division.charge === coa.charge} on:click={() => menu.division.charge = coa.charge}>\n                <MenuItem {coa} title={cap(coa.charge)} {itemSize}/>\n              </div>\n            {/each}\n          </div>\n        {/if}\n      {/if}\n    </div>\n\n    <!-- Ordinary -->\n    <div class=\"section\" on:click={showSection}>Ordinary</div>\n    <div class=\"panel\">\n      {#if coa.division}\n        <div class=\"subsection\" on:click={updateSection}>\n          Divided:\n          <select bind:value={menu.ordinary.divided}>\n            <option value=\"\">No (standard)</option>\n            <option value=field>Crop by main field</option>\n            <option value=division>Crop by division</option>\n            <option value=counter>Сountercharged</option>\n          </select>\n        </div>\n      {/if}\n\n      <div class=\"subsection\" on:click={updateSection}>\n        {#each ordinariesList.map(ordinary => new Object({t1: coa.t1, division: coa.division, ordinary: {ordinary, line: menu.ordinary.line, t: menu.ordinary.t, divided: menu.ordinary.divided}})) as coa (coa)}\n          <div class=item class:selected={menu.ordinary.ordinary === coa.ordinary.ordinary} on:click={() => menu.ordinary.ordinary = coa.ordinary.ordinary}>\n            <MenuItem {coa} title={cap(coa.ordinary.ordinary)} {itemSize}/>\n          </div>\n        {/each}\n      </div>\n    \n      {#if ordinaries.lined[menu.ordinary.ordinary]}\n        <div class=\"subsection\">\n          <div>Line:</div>\n          {#each Object.keys(lines).map(line => new Object({t1: coa.t1, division: coa.division, ordinary: {ordinary: menu.ordinary.ordinary, line, t: menu.ordinary.t, divided: menu.ordinary.divided}})) as coa (coa)}\n            <div class=item class:selected={menu.ordinary.line === coa.ordinary.line} on:click={() => menu.ordinary.line = coa.ordinary.line}>\n              <MenuItem {coa} title={cap(coa.ordinary.line)} {itemSize}/>\n            </div>\n          {/each}\n        </div>\n      {/if}\n\n      {#if coa.ordinary && menu.ordinary.divided !== \"counter\"}\n        <div class=\"subsection\">\n          <EditorTincture bind:t1={menu.ordinary.t} {itemSize}/>\n        </div>\n      {/if}\n\n      <div class=\"subsection\">\n        <EditorShift bind:e={menu.ordinary}/>\n      </div>\n    </div>\n\n    <!-- Charges -->\n    {#each menu.charges as charge, i}\n      <div class=\"section\" in:slide on:click={showSection}>Charge {menu.charges.length > 1 ? i+1 : \"\"}</div>\n      <div class=\"panel\">\n\n        <div class=\"subsection\">\n          <div>Category:\n            <select bind:value={charge.type} on:input={updateSection}>\n              {#each chargeTypes as type}\n                <option value={type}>{cap(type)}</option>\n              {/each}\n            </select>\n\n            {#if coa.division}\n              <span style=\"margin-left: 1em\">Divided:</span>\n              <select bind:value={charge.layer}>\n                <option value=\"\">No (standard)</option>\n                <option value=field>Crop by main field</option>\n                <option value=division>Crop by division</option>\n                <option value=counter>Сountercharged</option>\n              </select>\n            {/if}\n\n            <EditorControlButtons bind:els={menu.charges} el={charge} {i}/>\n          </div>\n\n          {#each Object.keys(charges[charge.type]).map(c => new Object({c, t1: coa.t1, charges: [{charge:c, t: charge.t, p:\"e\", size: 1.5, sinister: charge.sinister, reversed: charge.reversed}]})) as coa (coa)}\n            <div class=item class:selected={charge.charge === coa.c} on:click={() => charge.charge = coa.c}>\n              <MenuItem {coa} title={cap(coa.c)} {itemSize}/>\n            </div>\n          {/each}\n        </div>\n\n        {#if charge.layer !== \"counter\"}\n          <div class=\"subsection\">\n            <EditorTincture bind:t1={charge.t} {itemSize}/>\n          </div>\n        {/if}\n\n        <div class=\"subsection\">\n          <Tooltip tip=\"Points on shield to place a charge\">Positions:</Tooltip>\n          <input style=\"margin-left: .6em; width: 8.6em\" bind:value={charge.p} on:input={() => showPositions(charge)} on:focus={() => showPositions(charge)} on:blur={() => $state.positions = 0}/>\n\n          <select class=\"pseudoSelect\" bind:value={charge.p} on:change={() => {charge.size = getSize(charge.p, menu.ordinary.ordinary); showPositions(charge);}} on:focus={() => showPositions(charge)} on:blur={() => $state.positions = 0}>\n            {#each positionsSelect as position}\n              <option value={position}>{position}</option>\n            {/each}\n          </select>\n\n          <Tooltip tip=\"Turn charge to the left\"><span style=\"margin-left: 1em\">Sinister:</span></Tooltip>\n          <Switch bind:checked={charge.sinister}/>\n\n          <Tooltip tip=\"Show charge upside down\"><span style=\"margin-left: 1em\">Reversed:</span></Tooltip>\n          <Switch bind:checked={charge.reversed}/>\n        </div>\n\n        <div class=\"subsection\">\n          <EditorShift bind:e={charge}/>\n        </div>\n      </div>\n    {/each}\n\n    <div class=\"buttonLine\" on:click={addCharge}>Add charge</div>\n  </div>\n</div>\n\n<style>\n  #editor {\n    width: 100%;\n    height: 100%;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    user-select: none;\n  }\n\n  #menu {\n    overflow-x: hidden;\n    overflow-y: auto;\n    scrollbar-width: thin;\n    transition: .5s;\n    height: calc(100% - 45px);\n    position: absolute;\n  }\n\n  @media only screen and (orientation: landscape) {\n    #menu {\n      position: relative;\n      background-color: #11111180;\n    }\n  }\n\n  #menu::-webkit-scrollbar {\n    width: 6px;\n    background-color: #cccccc80;\n  }\n\n  #menu::-webkit-scrollbar-thumb {\n    background-color: #111;\n  }\n\n  .section {\n    padding: 1em 1.14em;\n    color: #fff;\n    background-color: #00000060;\n    cursor: pointer;\n    transition: background-color .1s ease;\n    overflow-x: hidden;\n  }\n\n  .section:hover {\n    background-color: #00000080;\n  }\n\n  .section:before {\n    content: \"\\276F\";\n    transition: .2s ease-out;\n    margin-top: -.1em;\n    position: absolute;\n    right: 1em;\n  }\n\n  .expanded:before {\n    transform: rotate(90deg);\n  }\n\n  .panel {\n    max-height: 0;\n    min-width: 100%;\n    max-width: max-content;\n    transition: max-height .2s ease-out;\n    background-color: #13131320;\n    overflow: hidden;\n  }\n\n  .subsection {\n    color: #fff;\n    padding: .5em 1em;\n  }\n\n  .subsection select {\n    margin-left: .6em;\n    cursor: pointer;\n  }\n\n  .buttonLine {\n    padding: 1em 1.14em;\n    color: #fff;\n    background-color: #00000060;\n    cursor: pointer;\n    transition: background-color .1s ease;\n  }\n\n  .buttonLine:hover {\n    background-color: #00000080;\n  }\n\n  select.pseudoSelect {\n    width: 1.3em;\n    margin-left: -1.6em;\n    border: 0;\n  }\n\n  :global(.item) {\n    display: inline-block;\n    cursor: pointer;\n    transition: background-color .2s ease;\n  }\n\n  :global(.item:hover) {\n    background-color: #ffffff10;\n  }\n\n  :global(.item:active) {\n    transform: translateY(1px);\n  }\n\n  :global(.item.selected) {\n    background-color: #ffffff15;\n  }\n</style>",
    "<script>\n  export let els, el, i;\n\n  const removeCharge = () => els = els.filter((e, n) => n !== i);\n  const copyCharge = () => els = [...els, JSON.parse(JSON.stringify(el))];\n  const moveUp = () => [els[i], els[i+1]] = [els[i+1], els[i]];\n  const moveDown = () => [els[i], els[i-1]] = [els[i-1], els[i]];\n</script>\n\n<b on:click={removeCharge} title=\"Remove charge\">✖</b>\n<b on:click={copyCharge} title=\"Copy charge\">🗗</b>\n{#if els.length > 1}\n  {#if i}\n    <b on:click={moveDown} title=\"Move charge down\">🠗</b>\n  {/if}\n  {#if i+1 < els.length}\n    <b on:click={moveUp} title=\"Move charge up\">🠕</b>\n  {/if}\n{/if}\n\n<style>\n  b {\n    float: right;\n    padding: .1em;\n    margin: .2em 0 0 .5em;\n    cursor: pointer;\n  }\n\n  b:active {\n    transform: translateY(1px);\n  }\n</style>",
    "<script>\n  import Tooltip from './Tooltip.svelte';\n  import Switch from './Switch.svelte';\n  import {grid, showGrid, state} from './stores';\n  export let e;\n\n  function updateGrid() {\n    $state.transform = `rotate(${e.angle||0})`;\n  }\n</script>\n\n<Tooltip tip=\"Element size\">Size:</Tooltip>\n<input type=number min=1 max=500 step=1 value={e.size * 100 | 0} on:input={function() {e.size = this.value / 100}}/>\n\n<Tooltip tip=\"Element rotation\"><span style=\"margin-left: 1em\">Rotation:</span></Tooltip>\n<input style=\"margin-left: 1em\" type=\"number\" min=-180 max=180 bind:value={e.angle} on:change={updateGrid}/>\n\n<Tooltip tip=\"Element shift\"><span style=\"margin-left: 1em\">Shift:</span></Tooltip>\n<input type=\"number\" min=-100 max=100 step={$grid} bind:value={e.x}/>\n<input type=\"number\" min=-100 max=100 step={$grid} bind:value={e.y}/>\n\n<Tooltip tip=\"Grid size: define position shift and drag step\"><span style=\"margin-left: 1em\">Step:</span></Tooltip>\n<input type=\"number\" min=1 max=50 bind:value={$grid}/>\n<Switch bind:checked={$showGrid}/>\n\n<style>\n  input[type=\"number\"] {\n    width: 4em;\n  }\n</style>",
    "<script>\n  import COA from './COA.svelte';\n  import {fade} from 'svelte/transition';\n  import {generate} from './generator.js';\n  import {download} from './download.js';\n  import {history, matrices, matrix, state} from './stores';\n  export let gallery, w, h;\n\n  $:coas = gallery.map(c => {\n    let coa = $history[c] || generate();\n    if (!$history[c]) $history[c] = coa;\n    return coa;\n  });\n\n  function regenerate(i) {\n    const coa = generate();\n    gallery[i] = $history.length;\n    $matrix++;\n    $matrices[$matrix] = gallery;\n    $history.push(coa);\n    coas[i] = coa;\n  }\n\n  function editCOA(i) {\n    $state.edit = 1;\n    $state.c = gallery[i];\n    $state.i = i;\n  }\n</script>\n\n<div id=\"gallery\" style=\"margin-top: 28px; font-size: {Math.ceil(w/20)}px\" transition:fade>\n  {#each coas as coa, i}\n    <div>\n      {#key coa}\n        <COA {coa} {i} {w} {h}/>\n      {/key}\n        <div class=\"control\">\n        <svg on:click={() => regenerate(i)}><use href=\"#dice-icon\"></use></svg>\n        <svg on:click={() => editCOA(i)}><use href=\"#pencil-icon\"></use></svg>\n        <svg on:click={() => download(i)}><use href=\"#download-icon\"></use></svg>\n      </div>\n    </div>\n  {/each}\n</div>\n\n<style>\n  div {\n    display: inline-table;\n  }\n\n  #gallery > div {\n    display: inline-block;\n    position: relative;\n    user-select: none;\n    transition: background .5s ease;\n  }\n\n  #gallery > div:hover {\n    background: #00000020;\n  }\n\n  .control {\n    display: block;\n    position: absolute;\n    opacity: 0;\n    transition: .5s ease-in-out;\n    color: #f1f1f1;\n    transform: translate(-50%, -150%);\n    left: 50%;\n    font-size: 2em;\n    white-space: nowrap;\n  }\n\n  #gallery > div:hover > .control {\n    opacity: 1;\n  }\n\n  .control > svg {\n    width: 1.2em;\n    height: 1.2em;\n    fill: #f1f1f1;\n    stroke: #333;\n    stroke-width: .5em;\n    vertical-align: middle;\n    margin: 0 .5em;\n    padding: .2em;\n    cursor: pointer;\n  }\n\n  .control > svg:hover {\n    background-color: #44444490;\n    color: #fff;\n  }\n\n  .control > svg:active {\n    transform: translateY(1px);\n  }\n</style>",
    "<script>\n  import Tooltip from './Tooltip.svelte';\n  import Lock from './Lock.svelte';\n  import {fade} from 'svelte/transition';\n  import {download} from './download.js';\n  import {size, grad, diaper, shield, colors, background, scale, border, borderWidth, matrix, state, changes} from './stores';\n\n  const shields = [\"heater\", \"oldFrench\", \"spanish\", \"french\", \"swiss\", \"wedged\", \"italian\", \"round\", \"renaissance\", \"baroque\", \"polish\", \"german\", \"diamond\", \"kite\", \"vesicaPiscis\", \"square\", \"flag\", \"pennon\", \"guidon\", \"banner\", \"dovetail\", \"gonfalon\", \"pennant\"];\n  const paths = shields.map(id => document.getElementById(id).innerHTML);\n  const sizes = [[80, \"Giant\"], [100, \"Huge\"], [150, \"Large\"], [200, \"Medium\"], [300, \"Small\"], [400, \"Tiny\"]];\n  const gradients = [\"luster\", \"spotlight\", \"backlight\"];\n  const diapers = [\"nourse\", \"tessellation\", \"sennwald\", \"sulzbach\"];\n  const tinctures = [\"argent\", \"or\", \"gules\", \"sable\", \"azure\", \"vert\", \"purpure\"];\n  const defaultColors = {argent: \"#fafafa\", or: \"#ffe066\", gules: \"#d7374a\", sable: \"#333333\", azure: \"#377cd7\", vert: \"#26c061\", purpure: \"#522d5b\"};\n\n  const wideScreen = window.innerWidth > 600;\n\n  const icons = {\n    options: \"☰\",\n    rollback: \"⭯\",\n    reroll: \"⭮\",\n    download : \"⇩\",\n    undo: \"⤺\",\n    redo: \"⤻\",\n    back: \"⮪\",\n    about: \"A\"\n  }\n\n  function label(i) {\n    if (wideScreen) return i;\n    return icons[i] || i;\n  }\n\n  $: position = $changes[1];\n  // save options on change\n  $: lock(\"size\", $size);\n  $: lock(\"grad\", $grad);\n  $: lock(\"diaper\", $diaper);\n  $: lock(\"shield\", $shield);\n  $: lock(\"colors\", JSON.stringify($colors));\n  $: lock(\"background\", $background);\n  $: lock(\"scale\", $scale);\n  $: lock(\"border\", $border);\n  $: lock(\"borderWidth\", $borderWidth);\n\n  // don't lock options on load\n  const loaded = [];\n  function lock(key, value) {\n    if (loaded.includes(key)) localStorage.setItem(key, value);\n    else loaded.push(key);\n  }\n\n  function getRandomColor() {\n    const l = '0123456789ABCDEF';\n    $background = \"#\"+[0,0,0,0,0,0].map(() => l[Math.floor(Math.random() * 16)]).join(\"\");\n  }\n</script>\n\n<div id=\"navbar\">\n  <ul>\n    {#if wideScreen}\n      <svg class=logo width=35 height=35 viewBox=\"-2 -1 55 55\">\n        <title>Armoria: Heraldry Generator</title>\n        <path fill=\"#fff\" stroke=\"none\" d=\"m 46,3 0.6,1.4 c -1.5,0.7 -2.6,1.4 -3.3,2.2 -0.7,0.7 -1.2,1.5 -1.5,2.4 -0.3,0.9 -0.4,2.2 -0.4,3.9 0,0.6 0,1.3 0,2.2 l 0.5,23.2 c 0,2.5 0.3,4.2 0.8,5 0.4,0.6 0.8,0.8 1.3,0.8 0.6,0 1.5,-0.6 2.8,-1.8 l 0.9,1.1 -5.8,4.9 -1.9,1.6 C 38.4,49.2 37.2,48.2 36.5,46.9 35.8,45.7 35.3,36.7 35.2,34 c -7.6,0.1 -20.2,0 -20.2,0 0,0 -7.4,9.1 -7.4,11.1 0,0.6 0.2,1.1 0.6,1.8 0.5,0.9 0.8,1.4 0.8,1.7 0,0.4 -0.1,0.7 -0.4,1 -0.3,0.3 -0.6,0.4 -1.1,0.4 -0.5,0 -0.9,-0.2 -1.2,-0.6 -0.5,-0.6 -0.7,-1.3 -0.7,-2.2 0,-1 0.3,-2.1 0.8,-3.3 C 8.8,39.9 11.3,36.7 14.1,32.9 11.1,30.7 9,28.5 7.8,26.4 6.6,24.4 6,22.1 6,19.5 c 0,-3 0.8,-5.7 2.3,-8.3 1.5,-2.5 3.8,-4.5 6.9,-6 3.1,-1.5 6.2,-2.2 9.4,-2.2 4.9,0 9.7,1.7 14.3,5.1 1.1,-1.2 2.2,-2.1 3.2,-2.9 1,-0.8 2.4,-1.5 4,-2.3 z M 30.7,10.2 c -2.6,-1.3 -5.2,-1.9 -7.8,-1.9 -2.7,0 -5.3,0.6 -7.8,1.8 -2.4,1.2 -4.2,2.8 -5.4,4.7 -1.2,1.9 -1.8,3.9 -1.8,5.9 0,4.2 2.3,8 6.9,11.3 L 25.2,17.7 c -1.6,-0.8 -2.9,-1.3 -4.2,-1.3 -1.7,0 -3.1,0.8 -4.2,2.4 -0.4,0.7 -1,0.5 -1.1,-0.2 0,-0.6 0.3,-1.5 1,-2.7 0.7,-1.1 1.6,-2.1 2.9,-2.8 1.3,-0.7 2.6,-1.1 4,-1.1 1.4,0 3.1,0.4 4.9,1.1 z m 4,3.2 C 34,12.4 32.8,11.5 32,11 L 18.4,29.4 h 16.7 z\"/>\n      </svg>\n    {/if}\n\n    <div class=\"container\"><bl>{label(\"options\")}</bl>\n\n      <div class=\"dropdown level1\">\n        <div class=\"container\">\n          <div class=\"dropdown level2 columns3 iconed\">\n            {#each shields as sh, i}\n              <bt on:click={() => $shield = sh}>\n                <svg class=shield class:selected={sh === $shield} width=26 height=26 viewBox=\"0 0 200 200\">{@html paths[i]}</svg>\n                {sh.split(/(?=[A-Z])/).join(\" \")}\n              </bt>\n            {/each}\n          </div>\n          <bl>\n            <Lock key=shield/>\n            <Tooltip tip=\"Shield or banner form. Some forms do not work well with auto-generated heralrdy\">Shield</Tooltip>\n          </bl>\n        </div>\n\n        <div class=\"container\">\n          <div class=\"dropdown level2\">\n            {#each tinctures as t}\n              <bl>{t}\n                {#if $colors[t] !== defaultColors[t]}\n                  <Tooltip tip=\"Restore default color\">\n                    <span on:click={() => $colors[t] = defaultColors[t]}>⭯ </span>\n                  </Tooltip>\n                {/if}\n                <input type=\"color\" bind:value={$colors[t]}/>\n              </bl>\n            {/each}\n          </div>\n          <bl>\n            <Lock key=colors/>\n            <Tooltip tip=\"Hue of tinctures and metals. Edit COA to change tincture or metal itself\">Colors</Tooltip>\n          </bl>\n        </div>\n\n        <div class=\"container\">\n          <div class=\"dropdown level2\">\n            <bt class:selected={!$grad} on:click={() => $grad = null}>No gradient</bt>\n            {#each gradients as g}\n              <bt class:selected={g === $grad} on:click={() => $grad = g}>{g}</bt>\n            {/each}\n          </div>\n          <bl>\n            <Lock key=grad/>\n            <Tooltip tip=\"Gradient (overlay) style to be applied over coat of arms\">Gradient</Tooltip>\n          </bl>\n        </div>\n\n        <div class=\"container\">\n          <div class=\"dropdown level2\">\n            <bt class:selected={!$diaper} on:click={() => $diaper = null}>No pattern</bt>\n            {#each diapers as d}\n              <bt class:selected={d === $diaper} on:click={() => $diaper = d}>{d}</bt>\n            {/each}\n          </div>\n          <bl>\n            <Lock key=diaper/>\n            <Tooltip tip=\"Diaper (subtle backing on coat of arms) style\">Damasking</Tooltip></bl>\n        </div>\n\n        <div class=\"container\">\n          <div class=\"dropdown level2\">\n            <bl>Color\n              {#if $border !== \"#333333\"}\n                <Tooltip tip=\"Restore default color\">\n                  <span on:click={() => $border = \"#333333\"}>⭯ </span>\n                </Tooltip>\n              {/if}\n              <input type=\"color\" bind:value={$border}/>\n            </bl>\n            <bl>Width\n              <input class=\"right\" type=\"number\" min=0 max=4 step=.1 bind:value={$borderWidth}/>\n            </bl>\n          </div>\n          <bl>\n            <Lock key=border/>\n            <Tooltip tip=\"Border style for coat of arms\">Border</Tooltip>\n          </bl>\n        </div>\n\n        <div class=\"container\">\n          <div class=\"dropdown level2\">\n            {#each sizes as s}\n              <bt class:selected={$size == s[0]} on:click={() => $size = s[0]}>{s[1]}</bt>\n            {/each}\n          </div>\n          <bl>\n            <Lock key=size/>\n            <Tooltip tip=\"Gallery size\">Gallery</Tooltip>\n          </bl>\n        </div>\n\n        <div class=\"container\">\n          <div class=\"dropdown level2\">\n            <bl>Color\n              <Tooltip tip=\"Select random color\">\n                <span on:click={getRandomColor}>⭮ </span>\n              </Tooltip>\n              {#if $background !== \"#333333\"}\n                <Tooltip tip=\"Restore default color\">\n                  <span on:click={() => $background = \"#333333\"}>⭯ </span>\n                </Tooltip>\n              {/if}\n              <input type=\"color\" bind:value={$background}/>\n            </bl>\n          </div>\n          <bl>\n            <Lock key=background/>\n            <Tooltip tip=\"Background color\">Background</Tooltip>\n          </bl>\n        </div>\n\n        <div class=\"container\">\n          <div class=\"dropdown level2\">\n            <bl class=\"wide\">\n              <input type=\"range\" min=1 max=4 step=.1 bind:value={$scale}/>\n              <input type=\"number\" min=1 max=4 step=.1 bind:value={$scale}/>\n            </bl>\n          </div>\n          <bl>\n            <Lock key=scale/>\n            <Tooltip tip=\"Downloaded image size, 1 is default size, 2 - 2x size, etc.\">Scale</Tooltip>\n          </bl>\n        </div>\n      </div>\n    </div>\n\n    {#if $matrix}\n    <bt on:click={() => $matrix -= 1}>\n      <Tooltip tip=\"Roll to the previous list. Hotkey: Backspace\">{label(\"rollback\")}</Tooltip>\n    </bt>\n    {:else}\n      <bd style=\"color: #333\">{label(\"rollback\")}</bd>\n    {/if}\n\n    <bt on:click={() => $matrix += 1}>\n      <Tooltip tip=\"Regenerate coat of arms. Hotkey: Enter\">{label(\"reroll\")}</Tooltip>\n    </bt>\n\n    <bt on:click={() => download()}>\n      <Tooltip tip=\"Download png image. Set size in options. Hotkey: D\">{label(\"download\")}</Tooltip>\n    </bt>\n    \n    {#if $state.edit}\n      {#if position > 0}\n        <bt on:click={() => changes.undo()}>\n          <Tooltip tip=\"Revert the latest change. Hotkey: Z\">{label(\"undo\")}</Tooltip>\n        </bt>\n      {:else}\n        <bd style=\"color: #333\">{label(\"undo\")}</bd>\n      {/if}\n\n      {#if position < changes.length() - 1}\n        <bt on:click={() => changes.redo()}>\n          <Tooltip tip=\"Restore next change. Hotkey: X\">{label(\"redo\")}</Tooltip>\n        </bt>\n      {:else}\n        <bd style=\"color: #333\">{label(\"redo\")}</bd>\n      {/if}\n    {/if}\n\n    {#if $state.edit}\n      <bt id=\"back\" on:click={() => $state.edit = 0} transition:fade>\n        <Tooltip tip=\"Get back to Gallery\">{label(\"back\")}</Tooltip>\n      </bt>\n    {/if}\n\n    {#if wideScreen || !$state.edit}\n      <bt on:click={() => $state.about = 1}>\n        <Tooltip tip=\"Show about screen. Hotkey: F1\">{label(\"about\")}</Tooltip>\n      </bt>\n    {/if}\n  </ul>\n</div>\n\n<style>\n  ul {\n    position: fixed;\n    top: 0;\n    width: 100%;\n    list-style-type: none;\n    margin: 0;\n    padding: 0;\n    display: flex;\n    align-items: center;\n    overflow: hidden;\n    background-color: #1b1c1d;\n    z-index: 1;\n  }\n\n  .logo {\n    margin: 0 .5em 0 1em;\n    background-color: #35bdb2;\n  }\n\n  bt, bl, bd {\n    user-select: none;\n    padding: 1em 1.14em;\n    line-height: 1.24;\n    color: #fff;\n    text-transform: capitalize;\n  }\n\n  bt {\n    cursor: pointer;\n    transition: background-color .1s;\n  }\n\n  bt:hover, bl:hover {\n    background-color: #2d2e2f;\n  }\n\n  bt:active, span:active {\n    transform: translateY(1px);\n  }\n\n  input[type=\"color\"] {\n    position: absolute;\n    padding: 0;\n    margin: -.3em 0;\n    right: 1em;\n    border: 0;\n    width: 3em;\n    cursor: pointer;\n  }\n\n  input[type=\"range\"] {\n    padding: 0;\n    width: 72%;\n    margin: 0;\n    height: .6em;\n    cursor: pointer;\n  }\n\n  input[type=\"number\"] {\n    padding: 0 0 0 3px;\n    width: 25%;\n    margin: 0;\n    border: 0;\n  }\n\n  input[type=\"number\"].right {\n    position: absolute;\n    padding: 2px;\n    margin: -.25em 0;\n    right: 1em;\n    width: 3em;\n  }\n\n  .dropdown {\n    display: none;\n    position: fixed;\n    background-color: #1b1c1d;\n    min-width: 10em;\n    box-shadow: 0px 8px 16px 0px rgba(0,0,0,0.2);\n    z-index: 1;\n  }\n\n  .level1 {\n    margin-top: 1em;\n  }\n\n  .level2 {\n    z-index: 1;\n    margin-left: 10.25em;\n  }\n\n  .dropdown bt, .dropdown bl {\n    padding: 12px 16px;\n    width: 8em;\n    display: block;\n  }\n\n  .dropdown bl.wide {\n    width: 12em;\n  }\n\n  .container:hover > .dropdown {\n    display: block;\n  }\n\n  .dropdown bt.selected:before {\n    content: '\\2713';\n    display: inline-block;\n    padding: 0 6px 0 0;\n  }\n\n  .columns3 {\n    column-count: 3;\n  }\n\n  @media only screen and (max-width: 640px) {\n    .columns3 {\n      column-count: 1;\n    }\n\n    .dropdown bt, .dropdown bl {\n      padding: 8px 16px;\n    }\n  }\n\n  @media only screen and (max-height: 640px) {\n    .dropdown bt, .dropdown bl {\n      padding: 8px 16px;\n    }\n  }\n\n  .dropdown.iconed {\n    text-indent: 1.8em;\n  }\n\n  .shield {\n    position: absolute;\n    fill: none;\n    stroke: #fff;\n    stroke-width: 4px;\n    margin: -0.4em 0 0 -2.2em;\n  }\n\n  .shield.selected {\n    fill: #777;\n    stroke: #333;\n  }\n\n  span {\n    cursor: pointer;\n  }\n\n  #back {\n    position: absolute;\n    right: 0;\n  }\n</style>",
    "<script>\n  import {state, grid, changes} from \"./stores\"\n  export let coa, shieldPath, colors, t;\n  const ordinary = coa.ordinary;\n\n  function addDrag(e, c) {\n    if (!$state.edit) return;\n    const el = e.currentTarget;\n    const [a0, x0, y0] = parseTransform(el.getAttribute(\"transform\"));\n    const x1 = e.x, y1 = e.y;\n    const sizeAdj = +el.closest(\"svg\").getAttribute(\"width\") / 200;\n\n    const angle = -a0 * (Math.PI / 180);\n    const cosAngle = Math.cos(angle);\n    const sinAngle = Math.sin(angle);\n\n    document.addEventListener(\"mousemove\", drag);\n    document.addEventListener(\"mouseup\", dragStop, {once: true});\n\n    function drag(e) {\n      document.body.style.cursor = \"move\";\n      const dx = x0 + (e.x - x1) / sizeAdj;\n      const dy = y0 + (e.y - y1) / sizeAdj;\n\n      const relX = (dx * cosAngle) - (dy * sinAngle);\n      const relY = (dx * sinAngle) + (dy * cosAngle);\n\n      c.x = Math.round(relX / $grid) * $grid;\n      c.y = Math.round(relY / $grid) * $grid;\n      const tr = getTransform(c);\n      if (tr) el.setAttribute(\"transform\", tr); else el.removeAttribute(\"transform\");\n    }\n\n    function dragStop() {\n      document.removeEventListener(\"mousemove\", drag);\n      document.body.style.cursor = \"auto\";\n      changes.add(JSON.stringify(coa));\n    }\n  }\n\n  function parseTransform(string) {\n    if (!string) {return [0,0,0,0,0,1];}\n    const a = string.replace(/[a-z()]/g, \"\").replace(/[ ]/g, \",\").split(\",\");\n    return [+a[0] || 0, +a[1] || 0, +a[2] || 0, +a[3] || 0, +a[4] || 0, +a[5] || 1];\n  }\n\n  function getTransform(c) {\n    if (!c.x && !c.y && !c.angle && !c.size) return null;\n    return `rotate(${c.angle||0}) translate(${c.x||0} ${c.y||0}) scale(${c.size||1})`;\n  }\n\n  function getTemplate(templateId, lineId) {\n    if (!lineId) return document.getElementById(templateId)?.innerHTML;\n    const template = document.getElementById(templateId);\n    const line = document.getElementById(lineId) ? document.getElementById(lineId) : document.getElementById(\"straight\");\n    return template.innerHTML.replace(/{line}/g, line.getAttribute(\"d\")).replace(/dpath/g, \"d\");\n  }\n</script>\n\n{#if ordinary.ordinary === \"bordure\"}\n  <g class=\"ordinary\" class:editable={$state.edit} transform={getTransform(ordinary)} transform-origin=\"center\" on:mousedown={function(e) {if ($state.edit) addDrag(e, ordinary)}}>\n    <path d={shieldPath} fill=\"none\" stroke={colors[t]} stroke-width=\"16.7%\"/>\n  </g>\n{:else if ordinary.ordinary === \"orle\"}\n  <g class=\"ordinary\" class:editable={$state.edit} transform={getTransform(ordinary)} transform-origin=\"center\" on:mousedown={function(e) {if ($state.edit) addDrag(e, ordinary)}}>\n    <path d={shieldPath} fill=\"none\" stroke={colors[t]} stroke-width=\"5%\" transform=\"scale(.85)\" transform-origin=\"center\"/>\n  </g>\n{:else}\n  <g class=\"ordinary\" class:editable={$state.edit} transform={getTransform(ordinary)} transform-origin=\"center\" fill={colors[t]} on:mousedown={function(e) {if ($state.edit) addDrag(e, ordinary)}}>\n    {@html getTemplate(ordinary.ordinary, ordinary.line)}\n  </g>\n{/if}\n\n<style>\n  .editable {\n    cursor: move;\n  }\n</style>",
    "<script>\n  import {state, shield} from \"./stores\";\n  import {shields} from \"./dataModel.js\";\n  import {fade} from 'svelte/transition';\n\n  // on shield change\n  $: points = shields[$shield] ? Object.entries(shields[$shield]) : Object.entries(shields.spanish);\n\n  function getClass(p) {\n    if (\"abcdefghi\".includes(p)) return \"green\";\n    if (\"ABCDEFGHIJKL\".includes(p)) return \"red\";\n    if (\"zy\".includes(p)) return \"yellow\";\n    return \"blue\";\n  }\n</script>\n\n{#if $state.positions}\n  <g transform={$state.transform || null} transform-origin=center>\n    <g id=positions transform=\"translate(100, 100)\" transition:fade|local>\n      {#each points as p}\n        <g id={p[0]} class={getClass(p[0])}>\n          <circle cx={p[1][0]} cy={p[1][1]} r=3 class:active={$state.positions.includes(p[0])}/>\n          <text style=\"dominant-baseline: central\" x={p[1][0]} y={p[1][1]} class:active={$state.positions.includes(p[0])}>{p[0]}</text>\n        </g>\n      {/each}\n    </g>\n  </g>\n{/if}\n\n<style>\n  circle {\n    opacity: .6;\n  }\n\n  circle.active {\n    opacity: 1;\n  }\n\n  text {\n    font-family: monospace;\n    text-anchor: middle;\n    font-size: 5px;\n    fill: #ddd;\n  }\n\n  text.active {\n    fill: #fff;\n  }\n\n  .green {\n    fill: rgb(12, 80, 12);\n  }\n\n  .blue {\n    fill: rgb(12, 12, 80);\n  }\n\n  .red {\n    fill: rgb(80, 12, 12);\n  }\n\n  .yellow {\n    fill: rgb(84, 84, 0);\n  }\n</style>",
    "<script>\n  export let checked = false;\n  const id = \"switch\" + Math.floor(1e6 * Math.random());\n</script>\n\n<div class=switch>\n  <input id={id} class=switch-input type=checkbox bind:checked/>\n  <label for={id} class=switch-label>Switch</label>\n</div>\n\n<style>\n  .switch {\n    position: relative;\n    display: inline-block;\n    top: -5px;\n  }\n\n  .switch-input {\n    display: none;\n  }\n\n  .switch-label {\n    display: block;\n    width: 48px;\n    height: 24px;\n    color: transparent;\n  }\n\n  .switch-label::before, .switch-label::after {\n    content: \"\";\n    display: block;\n    position: absolute;\n    cursor: pointer;\n  }\n\n  .switch-label::before {\n    width: 100%;\n    height: 100%;\n    background-color: #dedede;\n    border-radius: 9999em;\n    -webkit-transition: background-color 0.25s ease;\n    transition: background-color 0.25s ease;\n  }\n\n  .switch-label::after {\n    top: 0;\n    left: 0;\n    width: 24px;\n    height: 24px;\n    border-radius: 50%;\n    background-color: #fff;\n    box-shadow: 0 0 2px rgba(0, 0, 0, 0.45);\n    -webkit-transition: left 0.25s ease;\n    transition: left 0.25s ease;\n  }\n\n  .switch-input:checked + .switch-label::before {\n    background-color: #89c12d;\n  }\n\n  .switch-input:checked + .switch-label::after {\n    left: 24px;\n  }\n</style>",
    "<script>\n  // Source: https://github.com/Abreu00/svelte-tooltip\n  export let tip = \"\", top = false, bottom = false, left = false, active = false, color = \"#222\";\n  let right = top || bottom || left ? false : true; // default side\n  let style = `background-color: ${color};`;\n</script>\n\n<div class=\"tooltip-wrapper\">\n  <span class=\"tooltip-slot\">\n    <slot/>\n  </span>\n  <div class=\"tooltip\" class:active class:left class:right class:bottom class:top>\n    {#if tip}\n      <div class=\"default-tip\" {style}>{tip}</div>\n    {:else}\n      <slot name=\"custom-tip\" />\n    {/if}\n  </div>\n</div>\n\n<style>\n  .tooltip-wrapper {\n    position: relative;\n    display: inline-block;\n    cursor: help;\n  }\n  .tooltip {\n    position: absolute;\n    display: inline-block;\n    color: inherit;\n    opacity: 0;\n    visibility: hidden;\n    text-transform: initial;\n    transition-delay: .5s;\n    transition-property: opacity;\n    transition-duration: 150ms;\n    z-index: 10;\n    width: max-content;\n    max-width: 50vw;\n  }\n\n  .default-tip {\n    display: inline-block;\n    padding: .5em .8em;\n    border-radius: .4em;\n    font-size: .9em;\n    color: inherit;\n  }\n\n  .tooltip.top {\n    left: 50%;\n    transform: translate(-50%, -100%);\n    margin-top: -8px;\n  }\n\n  .tooltip.bottom {\n    left: 50%;\n    bottom: 0;\n    transform: translate(-50%, 100%);\n    margin-bottom: -8px;\n  }\n\n  .tooltip.left {\n    left: 0;\n    transform: translateX(-100%);\n    margin-left: -8px;\n  }\n\n  .tooltip.right {\n    right: 0;\n    transform: translateX(100%);\n    margin-right: -8px;\n  }\n\n  .tooltip.active {\n    opacity: 1;\n    visibility: initial;\n  }\n\n  .tooltip-slot:hover + .tooltip {\n    opacity: 1;\n    visibility: initial;\n  }\n</style>"
  ],
  "names": [],
  "mappings": "AAoBE,MAAM,8BAAC,CAAC,AACN,MAAM,CAAE,IAAI,CACZ,KAAK,CAAE,IAAI,CACX,QAAQ,CAAE,KAAK,CACf,OAAO,CAAE,CAAC,CACV,IAAI,CAAE,CAAC,CACP,GAAG,CAAE,CAAC,CACN,gBAAgB,CAAE,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAClC,UAAU,CAAE,GAAG,CACf,UAAU,CAAE,MAAM,CAClB,WAAW,CAAE,IAAI,AACnB,CAAC,AAED,UAAU,8BAAC,CAAC,AACV,QAAQ,CAAE,QAAQ,CAClB,GAAG,CAAE,GAAG,CACR,IAAI,CAAE,GAAG,CACT,SAAS,CAAE,UAAU,IAAI,CAAC,CAAC,IAAI,CAAC,AAClC,CAAC,AAED,+BAAC,CAAE,IAAI,8BAAC,CAAC,AACP,OAAO,CAAE,YAAY,CACrB,MAAM,CAAE,OAAO,CACf,KAAK,CAAE,IAAI,AACb,CAAC,AAED,+BAAC,MAAM,CAAE,kCAAI,MAAM,AAAC,CAAC,AACnB,KAAK,CAAE,IAAI,AACb,CAAC,AAED,uBAAQ,CAAG,CAAC,eAAC,CAAC,AACZ,MAAM,CAAE,GAAG,CACX,SAAS,CAAE,KAAK,AAClB,CAAC,AAED,IAAI,MAAM,8BAAC,CAAC,AACV,QAAQ,CAAE,KAAK,CACf,GAAG,CAAE,GAAG,CACR,KAAK,CAAE,IAAI,CACX,SAAS,CAAE,GAAG,CACd,OAAO,CAAE,IAAI,CAAC,CAAC,AACjB,CAAC;AC2BD,IAAI,cAAC,CAAC,AACJ,gBAAgB,CAAE,IAAI,2wCAA2wC,CAAC,AACpyC,CAAC;ACPD,SAAS,eAAC,CAAC,AACT,MAAM,CAAE,IAAI,AACd,CAAC;ACwaD,OAAO,8BAAC,CAAC,AACP,KAAK,CAAE,IAAI,CACX,MAAM,CAAE,IAAI,CACZ,OAAO,CAAE,IAAI,CACb,WAAW,CAAE,MAAM,CACnB,eAAe,CAAE,MAAM,CACvB,WAAW,CAAE,IAAI,AACnB,CAAC,AAED,KAAK,8BAAC,CAAC,AACL,UAAU,CAAE,MAAM,CAClB,UAAU,CAAE,IAAI,CAChB,eAAe,CAAE,IAAI,CACrB,UAAU,CAAE,GAAG,CACf,MAAM,CAAE,KAAK,IAAI,CAAC,CAAC,CAAC,IAAI,CAAC,CACzB,QAAQ,CAAE,QAAQ,AACpB,CAAC,AAED,OAAO,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,cAAc,SAAS,CAAC,AAAC,CAAC,AAC/C,KAAK,8BAAC,CAAC,AACL,QAAQ,CAAE,QAAQ,CAClB,gBAAgB,CAAE,SAAS,AAC7B,CAAC,AACH,CAAC,AAED,mCAAK,mBAAmB,AAAC,CAAC,AACxB,KAAK,CAAE,GAAG,CACV,gBAAgB,CAAE,SAAS,AAC7B,CAAC,AAED,mCAAK,yBAAyB,AAAC,CAAC,AAC9B,gBAAgB,CAAE,IAAI,AACxB,CAAC,AAED,QAAQ,8BAAC,CAAC,AACR,OAAO,CAAE,GAAG,CAAC,MAAM,CACnB,KAAK,CAAE,IAAI,CACX,gBAAgB,CAAE,SAAS,CAC3B,MAAM,CAAE,OAAO,CACf,UAAU,CAAE,gBAAgB,CAAC,GAAG,CAAC,IAAI,CACrC,UAAU,CAAE,MAAM,AACpB,CAAC,AAED,sCAAQ,MAAM,AAAC,CAAC,AACd,gBAAgB,CAAE,SAAS,AAC7B,CAAC,AAED,sCAAQ,OAAO,AAAC,CAAC,AACf,OAAO,CAAE,OAAO,CAChB,UAAU,CAAE,GAAG,CAAC,QAAQ,CACxB,UAAU,CAAE,KAAK,CACjB,QAAQ,CAAE,QAAQ,CAClB,KAAK,CAAE,GAAG,AACZ,CAAC,AAED,uCAAS,OAAO,AAAC,CAAC,AAChB,SAAS,CAAE,OAAO,KAAK,CAAC,AAC1B,CAAC,AAED,MAAM,8BAAC,CAAC,AACN,UAAU,CAAE,CAAC,CACb,SAAS,CAAE,IAAI,CACf,SAAS,CAAE,WAAW,CACtB,UAAU,CAAE,UAAU,CAAC,GAAG,CAAC,QAAQ,CACnC,gBAAgB,CAAE,SAAS,CAC3B,QAAQ,CAAE,MAAM,AAClB,CAAC,AAED,WAAW,8BAAC,CAAC,AACX,KAAK,CAAE,IAAI,CACX,OAAO,CAAE,IAAI,CAAC,GAAG,AACnB,CAAC,AAED,0BAAW,CAAC,MAAM,eAAC,CAAC,AAClB,WAAW,CAAE,IAAI,CACjB,MAAM,CAAE,OAAO,AACjB,CAAC,AAED,WAAW,8BAAC,CAAC,AACX,OAAO,CAAE,GAAG,CAAC,MAAM,CACnB,KAAK,CAAE,IAAI,CACX,gBAAgB,CAAE,SAAS,CAC3B,MAAM,CAAE,OAAO,CACf,UAAU,CAAE,gBAAgB,CAAC,GAAG,CAAC,IAAI,AACvC,CAAC,AAED,yCAAW,MAAM,AAAC,CAAC,AACjB,gBAAgB,CAAE,SAAS,AAC7B,CAAC,AAED,MAAM,aAAa,8BAAC,CAAC,AACnB,KAAK,CAAE,KAAK,CACZ,WAAW,CAAE,MAAM,CACnB,MAAM,CAAE,CAAC,AACX,CAAC,AAEO,KAAK,AAAE,CAAC,AACd,OAAO,CAAE,YAAY,CACrB,MAAM,CAAE,OAAO,CACf,UAAU,CAAE,gBAAgB,CAAC,GAAG,CAAC,IAAI,AACvC,CAAC,AAEO,WAAW,AAAE,CAAC,AACpB,gBAAgB,CAAE,SAAS,AAC7B,CAAC,AAEO,YAAY,AAAE,CAAC,AACrB,SAAS,CAAE,WAAW,GAAG,CAAC,AAC5B,CAAC,AAEO,cAAc,AAAE,CAAC,AACvB,gBAAgB,CAAE,SAAS,AAC7B,CAAC;ACxlBD,CAAC,eAAC,CAAC,AACD,KAAK,CAAE,KAAK,CACZ,OAAO,CAAE,IAAI,CACb,MAAM,CAAE,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,IAAI,CACrB,MAAM,CAAE,OAAO,AACjB,CAAC,AAED,gBAAC,OAAO,AAAC,CAAC,AACR,SAAS,CAAE,WAAW,GAAG,CAAC,AAC5B,CAAC;ACJD,KAAK,CAAC,IAAI,CAAC,QAAQ,CAAC,eAAC,CAAC,AACpB,KAAK,CAAE,GAAG,AACZ,CAAC;ACkBD,GAAG,6CAAC,CAAC,AACH,OAAO,CAAE,YAAY,AACvB,CAAC,AAED,uBAAQ,CAAG,GAAG,8BAAC,CAAC,AACd,OAAO,CAAE,YAAY,CACrB,QAAQ,CAAE,QAAQ,CAClB,WAAW,CAAE,IAAI,CACjB,UAAU,CAAE,UAAU,CAAC,GAAG,CAAC,IAAI,AACjC,CAAC,AAED,uBAAQ,CAAG,iCAAG,MAAM,AAAC,CAAC,AACpB,UAAU,CAAE,SAAS,AACvB,CAAC,AAED,QAAQ,6CAAC,CAAC,AACR,OAAO,CAAE,KAAK,CACd,QAAQ,CAAE,QAAQ,CAClB,OAAO,CAAE,CAAC,CACV,UAAU,CAAE,GAAG,CAAC,WAAW,CAC3B,KAAK,CAAE,OAAO,CACd,SAAS,CAAE,UAAU,IAAI,CAAC,CAAC,KAAK,CAAC,CACjC,IAAI,CAAE,GAAG,CACT,SAAS,CAAE,GAAG,CACd,WAAW,CAAE,MAAM,AACrB,CAAC,AAED,uBAAQ,CAAG,kBAAG,MAAM,CAAG,QAAQ,eAAC,CAAC,AAC/B,OAAO,CAAE,CAAC,AACZ,CAAC,AAED,uBAAQ,CAAG,GAAG,8BAAC,CAAC,AACd,KAAK,CAAE,KAAK,CACZ,MAAM,CAAE,KAAK,CACb,IAAI,CAAE,OAAO,CACb,MAAM,CAAE,IAAI,CACZ,YAAY,CAAE,IAAI,CAClB,cAAc,CAAE,MAAM,CACtB,MAAM,CAAE,CAAC,CAAC,IAAI,CACd,OAAO,CAAE,IAAI,CACb,MAAM,CAAE,OAAO,AACjB,CAAC,AAED,uBAAQ,CAAG,iCAAG,MAAM,AAAC,CAAC,AACpB,gBAAgB,CAAE,SAAS,CAC3B,KAAK,CAAE,IAAI,AACb,CAAC,AAED,uBAAQ,CAAG,iCAAG,OAAO,AAAC,CAAC,AACrB,SAAS,CAAE,WAAW,GAAG,CAAC,AAC5B,CAAC;ACqJD,EAAE,8BAAC,CAAC,AACF,QAAQ,CAAE,KAAK,CACf,GAAG,CAAE,CAAC,CACN,KAAK,CAAE,IAAI,CACX,eAAe,CAAE,IAAI,CACrB,MAAM,CAAE,CAAC,CACT,OAAO,CAAE,CAAC,CACV,OAAO,CAAE,IAAI,CACb,WAAW,CAAE,MAAM,CACnB,QAAQ,CAAE,MAAM,CAChB,gBAAgB,CAAE,OAAO,CACzB,OAAO,CAAE,CAAC,AACZ,CAAC,AAED,KAAK,8BAAC,CAAC,AACL,MAAM,CAAE,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,GAAG,CACpB,gBAAgB,CAAE,OAAO,AAC3B,CAAC,AAED,gCAAE,CAAE,gCAAE,CAAE,EAAE,8BAAC,CAAC,AACV,WAAW,CAAE,IAAI,CACjB,OAAO,CAAE,GAAG,CAAC,MAAM,CACnB,WAAW,CAAE,IAAI,CACjB,KAAK,CAAE,IAAI,CACX,cAAc,CAAE,UAAU,AAC5B,CAAC,AAED,EAAE,8BAAC,CAAC,AACF,MAAM,CAAE,OAAO,CACf,UAAU,CAAE,gBAAgB,CAAC,GAAG,AAClC,CAAC,AAED,gCAAE,MAAM,CAAE,gCAAE,MAAM,AAAC,CAAC,AAClB,gBAAgB,CAAE,OAAO,AAC3B,CAAC,AAED,gCAAE,OAAO,CAAE,kCAAI,OAAO,AAAC,CAAC,AACtB,SAAS,CAAE,WAAW,GAAG,CAAC,AAC5B,CAAC,AAED,KAAK,CAAC,IAAI,CAAC,OAAO,CAAC,8BAAC,CAAC,AACnB,QAAQ,CAAE,QAAQ,CAClB,OAAO,CAAE,CAAC,CACV,MAAM,CAAE,KAAK,CAAC,CAAC,CACf,KAAK,CAAE,GAAG,CACV,MAAM,CAAE,CAAC,CACT,KAAK,CAAE,GAAG,CACV,MAAM,CAAE,OAAO,AACjB,CAAC,AAED,KAAK,CAAC,IAAI,CAAC,OAAO,CAAC,8BAAC,CAAC,AACnB,OAAO,CAAE,CAAC,CACV,KAAK,CAAE,GAAG,CACV,MAAM,CAAE,CAAC,CACT,MAAM,CAAE,IAAI,CACZ,MAAM,CAAE,OAAO,AACjB,CAAC,AAED,KAAK,CAAC,IAAI,CAAC,QAAQ,CAAC,8BAAC,CAAC,AACpB,OAAO,CAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,CAClB,KAAK,CAAE,GAAG,CACV,MAAM,CAAE,CAAC,CACT,MAAM,CAAE,CAAC,AACX,CAAC,AAED,KAAK,CAAC,IAAI,CAAC,QAAQ,CAAC,MAAM,8BAAC,CAAC,AAC1B,QAAQ,CAAE,QAAQ,CAClB,OAAO,CAAE,GAAG,CACZ,MAAM,CAAE,MAAM,CAAC,CAAC,CAChB,KAAK,CAAE,GAAG,CACV,KAAK,CAAE,GAAG,AACZ,CAAC,AAED,SAAS,8BAAC,CAAC,AACT,OAAO,CAAE,IAAI,CACb,QAAQ,CAAE,KAAK,CACf,gBAAgB,CAAE,OAAO,CACzB,SAAS,CAAE,IAAI,CACf,UAAU,CAAE,GAAG,CAAC,GAAG,CAAC,IAAI,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAC5C,OAAO,CAAE,CAAC,AACZ,CAAC,AAED,OAAO,8BAAC,CAAC,AACP,UAAU,CAAE,GAAG,AACjB,CAAC,AAED,OAAO,8BAAC,CAAC,AACP,OAAO,CAAE,CAAC,CACV,WAAW,CAAE,OAAO,AACtB,CAAC,AAED,wBAAS,CAAC,iBAAE,CAAE,wBAAS,CAAC,EAAE,eAAC,CAAC,AAC1B,OAAO,CAAE,IAAI,CAAC,IAAI,CAClB,KAAK,CAAE,GAAG,CACV,OAAO,CAAE,KAAK,AAChB,CAAC,AAED,wBAAS,CAAC,EAAE,KAAK,eAAC,CAAC,AACjB,KAAK,CAAE,IAAI,AACb,CAAC,AAED,yBAAU,MAAM,CAAG,SAAS,eAAC,CAAC,AAC5B,OAAO,CAAE,KAAK,AAChB,CAAC,AAED,wBAAS,CAAC,EAAE,wBAAS,OAAO,AAAC,CAAC,AAC5B,OAAO,CAAE,OAAO,CAChB,OAAO,CAAE,YAAY,CACrB,OAAO,CAAE,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,AACpB,CAAC,AAED,SAAS,8BAAC,CAAC,AACT,YAAY,CAAE,CAAC,AACjB,CAAC,AAED,OAAO,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,YAAY,KAAK,CAAC,AAAC,CAAC,AACzC,SAAS,8BAAC,CAAC,AACT,YAAY,CAAE,CAAC,AACjB,CAAC,AAED,wBAAS,CAAC,iBAAE,CAAE,wBAAS,CAAC,EAAE,eAAC,CAAC,AAC1B,OAAO,CAAE,GAAG,CAAC,IAAI,AACnB,CAAC,AACH,CAAC,AAED,OAAO,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,aAAa,KAAK,CAAC,AAAC,CAAC,AAC1C,wBAAS,CAAC,iBAAE,CAAE,wBAAS,CAAC,EAAE,eAAC,CAAC,AAC1B,OAAO,CAAE,GAAG,CAAC,IAAI,AACnB,CAAC,AACH,CAAC,AAED,SAAS,OAAO,8BAAC,CAAC,AAChB,WAAW,CAAE,KAAK,AACpB,CAAC,AAED,OAAO,8BAAC,CAAC,AACP,QAAQ,CAAE,QAAQ,CAClB,IAAI,CAAE,IAAI,CACV,MAAM,CAAE,IAAI,CACZ,YAAY,CAAE,GAAG,CACjB,MAAM,CAAE,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC,MAAM,AAC3B,CAAC,AAED,OAAO,SAAS,8BAAC,CAAC,AAChB,IAAI,CAAE,IAAI,CACV,MAAM,CAAE,IAAI,AACd,CAAC,AAED,IAAI,8BAAC,CAAC,AACJ,MAAM,CAAE,OAAO,AACjB,CAAC,AAED,KAAK,8BAAC,CAAC,AACL,QAAQ,CAAE,QAAQ,CAClB,KAAK,CAAE,CAAC,AACV,CAAC;ACtUD,SAAS,eAAC,CAAC,AACT,MAAM,CAAE,IAAI,AACd,CAAC;AC9CD,MAAM,eAAC,CAAC,AACN,OAAO,CAAE,EAAE,AACb,CAAC,AAED,MAAM,OAAO,eAAC,CAAC,AACb,OAAO,CAAE,CAAC,AACZ,CAAC,AAED,IAAI,eAAC,CAAC,AACJ,WAAW,CAAE,SAAS,CACtB,WAAW,CAAE,MAAM,CACnB,SAAS,CAAE,GAAG,CACd,IAAI,CAAE,IAAI,AACZ,CAAC,AAED,IAAI,OAAO,eAAC,CAAC,AACX,IAAI,CAAE,IAAI,AACZ,CAAC,AAED,MAAM,eAAC,CAAC,AACN,IAAI,CAAE,IAAI,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,AACvB,CAAC,AAED,KAAK,eAAC,CAAC,AACL,IAAI,CAAE,IAAI,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,AACvB,CAAC,AAED,IAAI,eAAC,CAAC,AACJ,IAAI,CAAE,IAAI,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,AACvB,CAAC,AAED,OAAO,eAAC,CAAC,AACP,IAAI,CAAE,IAAI,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,AACtB,CAAC;ACpDD,OAAO,8BAAC,CAAC,AACP,QAAQ,CAAE,QAAQ,CAClB,OAAO,CAAE,YAAY,CACrB,GAAG,CAAE,IAAI,AACX,CAAC,AAED,aAAa,8BAAC,CAAC,AACb,OAAO,CAAE,IAAI,AACf,CAAC,AAED,aAAa,8BAAC,CAAC,AACb,OAAO,CAAE,KAAK,CACd,KAAK,CAAE,IAAI,CACX,MAAM,CAAE,IAAI,CACZ,KAAK,CAAE,WAAW,AACpB,CAAC,AAED,2CAAa,QAAQ,CAAE,2CAAa,OAAO,AAAC,CAAC,AAC3C,OAAO,CAAE,EAAE,CACX,OAAO,CAAE,KAAK,CACd,QAAQ,CAAE,QAAQ,CAClB,MAAM,CAAE,OAAO,AACjB,CAAC,AAED,2CAAa,QAAQ,AAAC,CAAC,AACrB,KAAK,CAAE,IAAI,CACX,MAAM,CAAE,IAAI,CACZ,gBAAgB,CAAE,OAAO,CACzB,aAAa,CAAE,MAAM,CACrB,kBAAkB,CAAE,gBAAgB,CAAC,KAAK,CAAC,IAAI,CAC/C,UAAU,CAAE,gBAAgB,CAAC,KAAK,CAAC,IAAI,AACzC,CAAC,AAED,2CAAa,OAAO,AAAC,CAAC,AACpB,GAAG,CAAE,CAAC,CACN,IAAI,CAAE,CAAC,CACP,KAAK,CAAE,IAAI,CACX,MAAM,CAAE,IAAI,CACZ,aAAa,CAAE,GAAG,CAClB,gBAAgB,CAAE,IAAI,CACtB,UAAU,CAAE,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,CACvC,kBAAkB,CAAE,IAAI,CAAC,KAAK,CAAC,IAAI,CACnC,UAAU,CAAE,IAAI,CAAC,KAAK,CAAC,IAAI,AAC7B,CAAC,AAED,4BAAa,QAAQ,CAAG,4BAAa,QAAQ,AAAC,CAAC,AAC7C,gBAAgB,CAAE,OAAO,AAC3B,CAAC,AAED,4BAAa,QAAQ,CAAG,4BAAa,OAAO,AAAC,CAAC,AAC5C,IAAI,CAAE,IAAI,AACZ,CAAC;ACzCD,gBAAgB,8BAAC,CAAC,AAChB,QAAQ,CAAE,QAAQ,CAClB,OAAO,CAAE,YAAY,CACrB,MAAM,CAAE,IAAI,AACd,CAAC,AACD,QAAQ,8BAAC,CAAC,AACR,QAAQ,CAAE,QAAQ,CAClB,OAAO,CAAE,YAAY,CACrB,KAAK,CAAE,OAAO,CACd,OAAO,CAAE,CAAC,CACV,UAAU,CAAE,MAAM,CAClB,cAAc,CAAE,OAAO,CACvB,gBAAgB,CAAE,GAAG,CACrB,mBAAmB,CAAE,OAAO,CAC5B,mBAAmB,CAAE,KAAK,CAC1B,OAAO,CAAE,EAAE,CACX,KAAK,CAAE,WAAW,CAClB,SAAS,CAAE,IAAI,AACjB,CAAC,AAED,YAAY,8BAAC,CAAC,AACZ,OAAO,CAAE,YAAY,CACrB,OAAO,CAAE,IAAI,CAAC,IAAI,CAClB,aAAa,CAAE,IAAI,CACnB,SAAS,CAAE,IAAI,CACf,KAAK,CAAE,OAAO,AAChB,CAAC,AAED,QAAQ,IAAI,8BAAC,CAAC,AACZ,IAAI,CAAE,GAAG,CACT,SAAS,CAAE,UAAU,IAAI,CAAC,CAAC,KAAK,CAAC,CACjC,UAAU,CAAE,IAAI,AAClB,CAAC,AAED,QAAQ,OAAO,8BAAC,CAAC,AACf,IAAI,CAAE,GAAG,CACT,MAAM,CAAE,CAAC,CACT,SAAS,CAAE,UAAU,IAAI,CAAC,CAAC,IAAI,CAAC,CAChC,aAAa,CAAE,IAAI,AACrB,CAAC,AAED,QAAQ,KAAK,8BAAC,CAAC,AACb,IAAI,CAAE,CAAC,CACP,SAAS,CAAE,WAAW,KAAK,CAAC,CAC5B,WAAW,CAAE,IAAI,AACnB,CAAC,AAED,QAAQ,MAAM,8BAAC,CAAC,AACd,KAAK,CAAE,CAAC,CACR,SAAS,CAAE,WAAW,IAAI,CAAC,CAC3B,YAAY,CAAE,IAAI,AACpB,CAAC,AAED,QAAQ,OAAO,8BAAC,CAAC,AACf,OAAO,CAAE,CAAC,CACV,UAAU,CAAE,OAAO,AACrB,CAAC,AAED,4BAAa,MAAM,CAAG,QAAQ,eAAC,CAAC,AAC9B,OAAO,CAAE,CAAC,CACV,UAAU,CAAE,OAAO,AACrB,CAAC"
}