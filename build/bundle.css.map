{
  "version": 3,
  "file": "bundle.css",
  "sources": [
    "App.svelte",
    "Message.svelte",
    "Editor.svelte",
    "EditorCharge.svelte",
    "EditorControls.svelte",
    "EditorPosition.svelte",
    "EditorShift.svelte",
    "EditorStroke.svelte",
    "EditorTincture.svelte",
    "Positions.svelte",
    "Switch.svelte",
    "About.svelte",
    "Gallery.svelte",
    "License.svelte",
    "Tinctures.svelte",
    "UploadRaster.svelte",
    "UploadVector.svelte",
    "Navbar.svelte",
    "Logo.svelte",
    "NavShieldOption.svelte",
    "IconButton.svelte",
    "Lock.svelte",
    "NavButton.svelte",
    "NavItem.svelte",
    "ColorInput.svelte",
    "NumberInput.svelte",
    "RangeInput.svelte"
  ],
  "sourcesContent": [
    "<script lang=\"ts\">// @ts-check\nimport { t, locale } from \"svelte-i18n\";\nimport WindowEvents from \"./WindowEvents.svelte\";\nimport Navbar from \"./navigation/header/Navbar.svelte\";\nimport About from \"./navigation/About.svelte\";\nimport License from \"./navigation/License.svelte\";\nimport Viewer from \"./navigation/Viewer.svelte\";\nimport Editor from \"./editor/Editor.svelte\";\nimport Gallery from \"./navigation/Gallery.svelte\";\nimport UploadRaster from \"./navigation/UploadRaster.svelte\";\nimport UploadVector from \"./navigation/UploadVector.svelte\";\nimport Tinctures from \"./navigation/Tinctures.svelte\";\nimport Message from \"./Message.svelte\";\nimport { background, size, history, matrices, matrix, state, message, shield } from \"data/stores\";\nimport { shields } from \"data/shields\";\nimport { rw } from \"scripts/utils\";\nimport \"scripts/i18n\";\nlet quantity;\nlet width;\nlet height;\nlet gallery = [];\nlet seed = undefined;\nlet coaSize = 200;\n$locale = \"en\"; // fallback locale\ncheckLoadParameters(); // on load\n$: [quantity, width, height] = defineGallerySize($size);\n$: handleMatrixChange($matrix, $size);\nfunction handleMatrixChange() {\n    const l = $history.length;\n    // reroll is clicked\n    if (!$matrices[$matrix]) {\n        if ($state.edit) {\n            // generate new coa\n            $matrices[$matrix] = $matrices[$matrix - 1].slice();\n            $matrices[$matrix][$state.i] = l;\n            seed = undefined; // use once\n        }\n        else {\n            // reroll gallery\n            $matrices[$matrix] = Array.from({ length: quantity }, (_, i) => l + i++);\n        }\n        // change shield if it's not locked (manually selected)\n        if (!localStorage.getItem(\"shield\")) {\n            $shield = rw(shields[rw(shields.types)]);\n        }\n    }\n    // add additional coas to matrix if size is smaller\n    if ($matrices[$matrix].length < quantity) {\n        const m = $matrices[$matrix];\n        $matrices[$matrix] = [...Array(quantity).keys()].map(i => (m[i] !== undefined ? m[i] : l + i));\n    }\n    gallery = $matrices[$matrix].slice(0, quantity); // trim gallery if size was bigger\n    // on coa edit or view mode\n    if ($state.edit || $state.view)\n        $state.c = $matrices[$matrix][$state.i];\n}\nfunction checkLoadParameters() {\n    const url = new URL(window.location.href);\n    const viewParam = url.searchParams.get(\"view\") === \"1\";\n    const sizeParam = +url.searchParams.get(\"size\");\n    const coaParam = url.searchParams.get(\"coa\");\n    const seedParam = url.searchParams.get(\"seed\");\n    const from = url.searchParams.get(\"from\");\n    if (!coaParam && !seedParam)\n        return; // no predefined coa, regular flow (generate gallery)\n    if (coaParam) {\n        // exact coa to render\n        if (!validateJSON(coaParam))\n            return;\n        $history.push(JSON.parse(coaParam));\n    }\n    else if (seedParam) {\n        seed = seedParam;\n    }\n    if (coaParam || seedParam) {\n        if (from === \"FMG\") {\n            message.info($t(\"info.tipFromFmg\"), 10000);\n        }\n        $matrices[0] = [0];\n        if (viewParam) {\n            if (sizeParam)\n                coaSize = sizeParam;\n            $state.view = 1; // open in view only mode\n        }\n        else {\n            $state.edit = 1; // open in edit mode\n        }\n    }\n}\nfunction validateJSON(text) {\n    try {\n        JSON.parse(text);\n        return true;\n    }\n    catch (error) {\n        console.error(error);\n        message.error(error.message);\n        return false;\n    }\n}\n// define number and size of coas to display\nfunction defineGallerySize(desiredSize) {\n    const width = window.innerWidth;\n    const height = window.innerHeight - 60;\n    const numberX = Math.ceil(width / desiredSize);\n    const w = Math.floor(width / numberX);\n    const numberY = Math.floor(height / w);\n    const h = Math.floor(height / numberY);\n    return [numberX * numberY, w, h];\n}\n</script>\n\n{#if $state.view}\n  <Viewer c={$state.c} {seed} {coaSize} />\n{:else}\n  <div style=\"background-color: {$background}\">\n    <header>\n      <Navbar />\n    </header>\n\n    {#if $state.edit}<Editor historyId={$state.c} {seed} />\n    {:else}<Gallery {gallery} {width} {height} />{/if}\n\n    {#if $state.about}<About />{/if}\n    {#if $state.license}<License />{/if}\n    {#if $state.raster}<UploadRaster />{/if}\n    {#if $state.vector}<UploadVector />{/if}\n    {#if $state.tinctures}<Tinctures />{/if}\n\n    {#if $message}<Message />{/if}\n  </div>\n{/if}\n<WindowEvents />\n\n<style>\n  div {\n    height: 100%;\n    width: 100%;\n    background-image: url(../background.svg);\n  }\n</style>\n",
    "<script lang=\"ts\">// @ts-check\nimport { onMount } from \"svelte\";\nimport { fly, fade } from \"svelte/transition\";\nimport { message } from \"data/stores\";\nconst { text, type, timeout } = $message;\nonMount(async () => {\n    const textOnMount = $message.text;\n    setTimeout(() => {\n        if ($message?.text === textOnMount)\n            message.clear();\n    }, timeout);\n});\n</script>\n\n<div class={type} in:fly={{y: 200, duration: 500}} out:fade={{duration: 300}} on:click={() => message.clear()}>\n  {text}\n</div>\n\n<style>\n  div {\n    position: absolute;\n    bottom: 0%;\n    left: 50%;\n    line-height: 1.4em;\n    padding: 0.8em;\n    transform: translate(-50%, -50%);\n    z-index: 99;\n    max-width: 80%;\n    width: max-content;\n    user-select: none;\n    background-color: #00000095;\n  }\n\n  .error {\n    color: #e90000;\n  }\n\n  .warn {\n    color: #dd7200;\n  }\n\n  .info {\n    color: #fff;\n  }\n\n  .tip {\n    color: #fff;\n    border-radius: 10px;\n  }\n\n  .success {\n    color: #0fc63a;\n  }\n</style>\n",
    "<script>\n  import {t, dictionary, locale} from \"svelte-i18n\";\n  import {fade, fly, slide} from \"svelte/transition\";\n  import {changes, grid, history, message, shield, showGrid, state, tinctures, iconedNav} from \"data/stores\";\n  import {charges, divisions, ordinaries} from \"data/dataModel\";\n  import {generate} from \"scripts/generator\";\n  import {ra, rw} from \"scripts/utils\";\n  import COA from \"./../object/COA.svelte\";\n  import EditorAbove from \"./EditorAbove.svelte\";\n  import EditorCharge from \"./EditorCharge.svelte\";\n  import EditorControls from \"./EditorControls.svelte\";\n  import EditorDivided from \"./EditorDivided.svelte\";\n  import EditorDivision from \"./EditorDivision.svelte\";\n  import EditorLine from \"./EditorLine.svelte\";\n  import EditorOrdinary from \"./EditorOrdinary.svelte\";\n  import EditorPattern from \"./EditorPattern.svelte\";\n  import EditorPosition from \"./EditorPosition.svelte\";\n  import EditorShift from \"./EditorShift.svelte\";\n  import EditorSize from \"./EditorSize.svelte\";\n  import EditorStroke from \"./EditorStroke.svelte\";\n  import EditorTincture from \"./EditorTincture.svelte\";\n  import EditorType from \"./EditorType.svelte\";\n  export let historyId, seed;\n\n  let menu = {};\n  let section = {field: 0, division: 0, ordinary: [], charge: []};\n  const isLandscape = innerWidth > innerHeight;\n\n  $state.transform = null;\n  $state.positions = null;\n\n  let coa = $history[historyId] || generate(seed || undefined); // on load\n  $: restore($changes); // on undo/redo\n  $: reroll(historyId); // on reroll\n  $: update(menu); // on menu update\n  $: edit(coa); // on edit\n  $: localStorage.setItem(\"grid\", $grid); // on grid change\n  $: localStorage.setItem(\"showGrid\", $showGrid); // on grid change\n\n  function reroll(historyId) {\n    coa = $history[historyId] || generate(seed || undefined);\n    if (!$history[historyId]) $history.push(coa);\n    changes.reset();\n    defineMenuState();\n  }\n\n  function edit(coa) {\n    if (!coa.shield) coa.shield = $shield;\n    changes.add(JSON.stringify(coa));\n  }\n\n  const toggleSection = (name, index) => () => {\n    if (index !== undefined) {\n      section[name][index] = !section[name][index];\n    } else {\n      section[name] = !section[name];\n    }\n  };\n\n  // get coa from menu on menu change\n  function update() {\n    // remove see reference as it would be confusing\n    delete coa.seed;\n\n    // field attributes changed\n    if (menu.field.type === \"tincture\") coa.t1 = menu.field.t1;\n    else {\n      const type = menu.field.type === \"semy\" ? \"semy_of_\" + menu.field.charge : menu.field.pattern;\n      const attibutes = [type, menu.field.t1, menu.field.t2];\n      if (menu.field.size !== \"standard\") attibutes.push(menu.field.size);\n      coa.t1 = attibutes.join(\"-\");\n    }\n\n    // division attributes changed\n    if (menu.division.division && menu.division.division !== \"no\") {\n      coa.division = {division: menu.division.division};\n      if (divisions[menu.division.division]) coa.division.line = menu.division.line;\n      if (menu.division.type === \"tincture\") coa.division.t = menu.division.t1;\n      else {\n        const attr0 = menu.division.type === \"semy\" ? \"semy_of_\" + menu.division.charge : menu.division.pattern;\n        const attibutes = [attr0, menu.division.t1, menu.division.t2];\n        if (menu.division.size !== \"standard\") attibutes.push(menu.division.size);\n        coa.division.t = attibutes.join(\"-\");\n      }\n    } else delete coa.division;\n\n    // ordinary attributes changed\n    if (menu.ordinaries.length) {\n      coa.ordinaries = menu.ordinaries.map(o => {\n        const item = {ordinary: o.ordinary, t: o.t};\n        if (ordinaries.lined[o.ordinary]) item.line = o.line;\n        if (coa.division && o.divided) item.divided = o.divided;\n        if (o.showStroke) item.stroke = o.stroke;\n        if (o.showStroke && o.strokeWidth !== 1) item.strokeWidth = o.strokeWidth;\n        if (o.size && o.size !== 1) item.size = o.size;\n        if (o.x || o.y) {\n          item.x = o.x;\n          item.y = o.y;\n        }\n        if (o.angle) item.angle = o.angle;\n        if (o.above) item.above = true;\n        return item;\n      });\n    } else delete coa.ordinaries;\n\n    // charges attributes changed\n    if (menu.charges.length) {\n      coa.charges = menu.charges.map(c => {\n        const item = {charge: c.charge, t: c.t, p: c.p, size: c.size};\n        if (!c.showStroke) item.stroke = \"none\";\n        if (c.stroke !== \"#000000\") item.stroke = c.stroke;\n        if (c.divided) item.divided = c.divided;\n        if (c.sinister) item.sinister = 1;\n        if (c.reversed) item.reversed = 1;\n        if (c.x || c.y) {\n          item.x = c.x;\n          item.y = c.y;\n        }\n        if (c.angle) item.angle = c.angle;\n        return item;\n      });\n    } else delete coa.charges;\n  }\n\n  function restore() {\n    if (!changes.length()) return;\n    coa = JSON.parse($changes[0]);\n    defineMenuState();\n  }\n\n  // define initial menu state\n  function defineMenuState() {\n    // Shield\n    if (coa.shield) $shield = coa.shield;\n\n    // Field\n    menu.field = getField();\n    function getField() {\n      const type = isSemy(coa.t1) ? \"semy\" : isPattern(coa.t1) ? \"pattern\" : \"tincture\";\n      let t1,\n        t2,\n        pattern = \"vair\",\n        charge = \"lozenge\",\n        semy = \"conventional\",\n        size = \"standard\";\n\n      const field = coa.t1.split(\"-\"); // parsed field tincture\n\n      if (type === \"tincture\") {\n        t1 = coa.t1;\n        t2 = selectSecondTincture(coa.t1);\n      } else {\n        t1 = field[1];\n        t2 = field[2];\n        size = field[3] || \"standard\";\n      }\n\n      if (type === \"pattern\") pattern = field[0];\n      else if (type === \"semy\") {\n        charge = getSemyCharge(field);\n        semy = getSemyType(field);\n      }\n\n      return {type, t1, t2, pattern, charge, semy, size};\n    }\n\n    // Division\n    menu.division = getDivision();\n    function getDivision() {\n      let type = \"tincture\",\n        division = \"no\",\n        line = \"straight\",\n        t1,\n        t2,\n        pattern = \"vair\",\n        charge = \"lozenge\",\n        semy = \"conventional\",\n        size = \"standard\";\n\n      if (coa.division) {\n        const tSplit = coa.division.t.split(\"-\"); // parsed division tincture\n        type = isSemy(coa.division.t) ? \"semy\" : isPattern(coa.division.t) ? \"pattern\" : \"tincture\";\n\n        division = coa.division.division;\n        line = coa.division.line || \"straight\";\n        t1 = type === \"tincture\" ? coa.division.t : tSplit[1];\n        t2 = type === \"tincture\" ? selectSecondTincture(t1) : tSplit[2];\n        if (type === \"pattern\") pattern = tSplit[0];\n        if (type === \"semy\") {\n          charge = getSemyCharge(tSplit);\n          semy = getSemyType(tSplit);\n        }\n        size = tSplit[3] || \"standard\";\n      } else {\n        t1 = selectSecondTincture(menu.field.t1);\n        t2 = selectSecondTincture(t1);\n      }\n\n      return {division, line, type, t1, t2, pattern, charge, semy, size};\n    }\n\n    // Ordinaries\n    menu.ordinaries = getOrdinaries();\n    function getOrdinaries() {\n      if (!coa.ordinaries) return [];\n\n      const ordinaries = coa.ordinaries.map(o => {\n        const {ordinary, t} = o;\n        const line = o.line || \"straight\";\n        const showStroke = Boolean(o.stroke);\n        const stroke = o.stroke || \"#000000\";\n        const strokeWidth = o.strokeWidth || 1;\n        const size = o.size || 1;\n        const x = o.x || 0;\n        const y = o.y || 0;\n        const angle = o.angle || 0;\n        const divided = o.divided || \"\";\n        const above = o.above || false;\n        if (angle) $state.transform = `rotate(${angle})`;\n        return {ordinary, t, line, showStroke, stroke, strokeWidth, size, x, y, angle, divided, above};\n      });\n\n      return ordinaries;\n    }\n\n    // Charges\n    menu.charges = getCharges();\n    function getCharges() {\n      if (!coa.charges) return [];\n      const charges = coa.charges.map(c => {\n        const {charge, t, p, size} = c;\n        const type = getChargeCategory(charge);\n        const showStroke = c.stroke !== \"none\";\n        const stroke = c.stroke || \"#000000\";\n        const divided = c.divided || \"\";\n        const sinister = c.sinister || false;\n        const reversed = c.reversed || false;\n        const x = c.x || 0;\n        const y = c.y || 0;\n        const angle = c.angle || 0;\n        if (angle) $state.transform = `rotate(${angle})`;\n        return {charge, type, showStroke, stroke, divided, t, p, size, sinister, reversed, x, y, angle};\n      });\n\n      return charges;\n    }\n\n    function isPattern(string) {\n      return string?.includes(\"-\");\n    }\n\n    function isSemy(string) {\n      return string?.slice(0, 4) === \"semy\";\n    }\n\n    function getSemyCharge(array) {\n      return array[0].split(\"_of_\")[1];\n    }\n\n    function getChargeCategory(charge) {\n      const type = Object.keys(charges.types).find(type => charges[type][charge] !== undefined);\n      return type || charge;\n    }\n\n    function getSemyType(array) {\n      const charge = getSemyCharge(array);\n      return getChargeCategory(charge);\n    }\n\n    function selectSecondTincture(t1) {\n      const metal = t1 === \"argent\" || t1 === \"or\";\n      return rw(metal ? $tinctures.colours : $tinctures.metals);\n    }\n\n    return menu;\n  }\n\n  function addOrdinary() {\n    const ordinariesList = Object.keys(ordinaries.lined).concat(Object.keys(ordinaries.straight));\n    const ordinary = ra(ordinariesList);\n    const t = rw($tinctures[rw($tinctures.charge)]);\n    const o = {ordinary, t, showStroke: false, stroke: \"#000000\", strokeWidth: 1, line: \"straight\", size: 1, x: 0, y: 0, angle: 0, divided: \"\"};\n    menu.ordinaries = [...menu.ordinaries, o];\n  }\n\n  function addCharge() {\n    const type = rw(charges.single);\n    const charge = rw(charges[type]);\n    const t = rw($tinctures[rw($tinctures.charge)]);\n    const с = {charge, t, p: \"e\", showStroke: true, stroke: \"#000000\", type, size: 1.5, sinister: false, reversed: false, x: 0, y: 0, angle: 0, divided: \"\"};\n    menu.charges = [...menu.charges, с];\n  }\n\n  if (!(\"ontouchstart\" in window) && (coa.ordinaries || coa.charges)) {\n    if (!$message) message.info($t(\"info.tipEditControls\"));\n  }\n\n  function isRaster(charge) {\n    const el = document.getElementById(charge);\n    return el ? el.tagName === \"image\" : false;\n  }\n\n  const translateSafely = (group, key) => {\n    const isInDictionary = $dictionary?.[$locale]?.[group]?.[key];\n    return isInDictionary ? $t(`${group}.${key}`) : key;\n  };\n</script>\n\n<main out:fade>\n  <div in:fly={{x: isLandscape ? 0 : 1000, y: isLandscape ? 1000 : 0, duration: 800}}>\n    {#key coa}\n      <COA {coa} i=\"Edit\" />\n    {/key}\n  </div>\n  <div id=\"menu\" in:fly={{x: isLandscape ? 1000 : 0, y: isLandscape ? 0 : 1000, duration: 1000}}>\n    <!-- Field -->\n    <div class=\"section\" class:expanded={section.field} on:click={toggleSection(\"field\")}>{$t(\"tinctures.field\")}</div>\n    {#if section.field}\n      <div class=\"panel\" transition:slide>\n        <div class=\"subsection\">\n          <EditorType bind:type={menu.field.type} />\n          {#if menu.field.type !== \"tincture\"}\n            <EditorSize bind:size={menu.field.size} />\n          {/if}\n        </div>\n\n        <div class=\"subsection\">\n          <EditorTincture bind:t1={menu.field.t1} />\n        </div>\n\n        {#if menu.field.type !== \"tincture\"}\n          <div class=\"subsection\">\n            <EditorTincture bind:t1={menu.field.t2} />\n          </div>\n        {/if}\n\n        {#if menu.field.type === \"pattern\"}\n          <div class=\"subsection\">\n            <EditorPattern bind:pattern={menu.field.pattern} t1={menu.field.t1} t2={menu.field.t2} size={menu.field.size} />\n          </div>\n        {/if}\n\n        {#if menu.field.type === \"semy\"}\n          <div class=\"subsection\">\n            <EditorCharge\n              type=\"semy\"\n              bind:charge={menu.field.charge}\n              bind:category={menu.field.semy}\n              t1={menu.field.t1}\n              t2={menu.field.t2}\n              size={menu.field.size}\n            />\n          </div>\n        {/if}\n      </div>\n    {/if}\n\n    <!-- Division -->\n    <div class=\"section\" class:expanded={section.division} on:click={toggleSection(\"division\")}>\n      {$t(\"tinctures.division\")}: {translateSafely(\"divisions\", menu.division.division)}\n    </div>\n    {#if section.division}\n      <div class=\"panel\" transition:slide>\n        <div class=\"subsection\">\n          <EditorDivision bind:division={menu.division.division} t1={coa.t1} t2={coa.division ? coa.division.t : menu.division.t1} line={menu.division.line} />\n        </div>\n\n        {#if divisions[coa.division?.division]}\n          <div class=\"subsection\">\n            <EditorLine bind:line={menu.division.line} division={menu.division.division} t1={coa.t1} t2={coa.division ? coa.division.t : menu.division.t1} />\n          </div>\n        {/if}\n\n        {#if coa.division}\n          <div class=\"subsection\">\n            <EditorType bind:type={menu.division.type} />\n            {#if menu.division.type !== \"tincture\"}\n              <EditorSize bind:size={menu.division.size} />\n            {/if}\n          </div>\n\n          <div class=\"subsection\">\n            <EditorTincture bind:t1={menu.division.t1} />\n          </div>\n\n          {#if menu.division.type !== \"tincture\"}\n            <div class=\"subsection\">\n              <EditorTincture bind:t1={menu.division.t2} />\n            </div>\n          {/if}\n\n          {#if menu.division.type === \"pattern\"}\n            <div class=\"subsection\">\n              <EditorPattern bind:pattern={menu.division.pattern} t1={menu.division.t1} t2={menu.division.t2} size={menu.division.size} />\n            </div>\n          {/if}\n\n          {#if menu.division.type === \"semy\"}\n            <div class=\"subsection\">\n              <EditorCharge\n                type=\"semy\"\n                bind:charge={menu.division.charge}\n                bind:category={menu.division.semy}\n                t1={menu.division.t1}\n                t2={menu.division.t2}\n                size={menu.division.size}\n              />\n            </div>\n          {/if}\n        {/if}\n      </div>\n    {/if}\n\n    <!-- Ordinaries -->\n    {#each menu.ordinaries as o, i}\n      <div class=\"section\" transition:slide class:expanded={section.ordinary[i]} on:click={toggleSection(\"ordinary\", i)}>\n        {$t(\"editor.ordinary\")}{menu.ordinaries.length > 1 ? ` ${i + 1}` : \"\"}: {translateSafely(\"ordinaries\", o.ordinary)}\n        {#if o.above}\n          <i>[{$t(\"editor.aboveCharges\")}]</i>\n        {/if}\n        <EditorControls bind:els={menu.ordinaries} el={o} {i} />\n      </div>\n      {#if section.ordinary[i]}\n        <div class=\"panel\" transition:slide>\n          {#if coa.division}\n            <div class=\"subsection\">\n              <EditorDivided bind:divided={o.divided} />\n            </div>\n          {/if}\n\n          <div class=\"subsection\">\n            <EditorOrdinary bind:ordinary={o.ordinary} t1={coa.t1} line={o.line} t2={o.t} />\n          </div>\n\n          {#if ordinaries.lined[o.ordinary]}\n            <div class=\"subsection\">\n              <EditorLine bind:line={o.line} ordinary={o.ordinary} t1={coa.t1} t2={o.t} />\n            </div>\n          {/if}\n\n          {#if o.divided !== \"counter\"}\n            <div class=\"subsection\">\n              <EditorTincture bind:t1={o.t} />\n            </div>\n          {/if}\n\n          <div class=\"subsection\">\n            {#if ![\"bordure\", \"orle\"].includes(o.ordinary)}\n              <EditorStroke bind:element={o} />\n            {/if}\n            <EditorAbove bind:above={o.above} />\n          </div>\n\n          <div class=\"subsection\">\n            <EditorShift bind:element={o} />\n          </div>\n        </div>\n      {/if}\n    {/each}\n\n    <!-- Charges -->\n    {#each menu.charges as charge, i}\n      <div class=\"section\" transition:slide class:expanded={section.charge[i]} on:click={toggleSection(\"charge\", i)}>\n        {$t(\"tinctures.charge\")}{menu.charges.length > 1 ? ` ${i + 1}` : \"\"}: {translateSafely(\"charges\", charge.charge)}\n        <EditorControls bind:els={menu.charges} el={charge} {i} />\n      </div>\n      {#if section.charge[i]}\n        <div class=\"panel\" transition:slide>\n          <div class=\"subsection\">\n            {#if coa.division}\n              <EditorDivided bind:divided={charge.divided} raster={isRaster(charge.charge)} />\n            {/if}\n            <EditorCharge\n              type=\"charge\"\n              bind:charge={charge.charge}\n              bind:category={charge.type}\n              t1={coa.t1}\n              t2={charge.t}\n              sinister={charge.sinister}\n              reversed={charge.reversed}\n              division={coa.division}\n            />\n          </div>\n\n          {#if !isRaster(charge.charge) && charge.divided !== \"counter\"}\n            <div class=\"subsection\">\n              <EditorTincture bind:t1={charge.t} />\n            </div>\n          {/if}\n\n          <div class=\"subsection\">\n            <EditorStroke bind:element={charge} />\n          </div>\n\n          <div class=\"subsection\">\n            <EditorPosition bind:charge />\n          </div>\n\n          <div class=\"subsection\">\n            <EditorShift bind:element={charge} />\n          </div>\n        </div>\n      {/if}\n    {/each}\n\n    <div class=\"buttonLine\" on:click={addOrdinary}>{$t(\"editor.addOrdinary\")}</div>\n    <div class=\"buttonLine\" on:click={addCharge}>{$t(\"editor.addCharge\")}</div>\n  </div>\n</main>\n\n<style>\n  main {\n    width: 100%;\n    height: calc(100% - 45px);\n    display: grid;\n    justify-items: center;\n    grid-template-columns: auto minmax(40%, 60%);\n    user-select: none;\n  }\n\n  @media only screen and (orientation: portrait) {\n    main {\n      grid-template-columns: none;\n      grid-template-rows: minmax(25%, 1fr) auto;\n    }\n  }\n\n  #menu {\n    width: 100%;\n    overflow-x: hidden;\n    overflow-y: auto;\n    scrollbar-width: thin;\n    transition: 1s;\n    background-color: #11111180;\n  }\n\n  #menu::-webkit-scrollbar {\n    width: 6px;\n    background-color: #cccccc80;\n  }\n\n  #menu::-webkit-scrollbar-thumb {\n    background-color: #111;\n  }\n\n  .section {\n    position: relative;\n    padding: 1em 1.14em;\n    color: #fff;\n    background-color: #00000060;\n    cursor: pointer;\n    transition: background-color 0.1s ease;\n    overflow-x: hidden;\n  }\n\n  .section:hover {\n    background-color: #00000080;\n  }\n\n  .section:after {\n    content: \"\\276F\";\n    transition: 0.2s ease-out;\n    margin-top: -0.1em;\n    float: right;\n  }\n\n  .expanded:after {\n    transform: rotate(90deg);\n  }\n\n  :global(.section > span) {\n    transition: 1s ease-out;\n    opacity: 0;\n    margin-left: 0.6em;\n  }\n\n  :global(.section:hover > span) {\n    opacity: 1;\n  }\n\n  .section > i {\n    font-size: smaller;\n  }\n\n  .panel {\n    min-width: 100%;\n    max-width: max-content;\n    background-color: #13131320;\n    overflow: hidden;\n  }\n\n  .buttonLine {\n    padding: 1em 1.14em;\n    color: #fff;\n    background-color: #00000040;\n    cursor: pointer;\n    transition: background-color 0.1s ease;\n  }\n\n  .buttonLine:hover {\n    background-color: #00000080;\n  }\n\n  .subsection {\n    color: #fff;\n    padding: 0.5em 0.5em 0.5em 1em;\n  }\n\n  :global(.items) {\n    display: grid;\n    grid-template-columns: repeat(auto-fit, minmax(80px, 1fr));\n  }\n\n  :global(.item) {\n    position: relative;\n    cursor: pointer;\n    max-width: 200px;\n    transition: background-color 0.2s ease;\n  }\n\n  :global(.item:hover) {\n    background-color: #ffffff10;\n  }\n\n  :global(.item:active) {\n    transform: translateY(1px);\n  }\n\n  :global(.item.selected) {\n    background-color: #ffffff15;\n  }\n</style>\n",
    "<script lang=\"ts\">// @ts-check\nimport { t, dictionary, locale } from \"svelte-i18n\";\nimport EditorItem from \"./EditorItem.svelte\";\nimport { charges } from \"data/dataModel\";\nexport let charge;\nexport let type;\nexport let category;\nexport let t1;\nexport let t2;\nexport let size = null;\nexport let sinister = null;\nexport let reversed = null;\nexport let division = false;\nlet chargesData = [];\nlet query;\nlet queryOld;\nconst categories = Object.keys(charges.types);\nconst allCharges = categories.map(category => Object.keys(charges[category])).flat();\nconst allChargesTranslated = allCharges.map(charge => $t(`charges.${charge}`));\n$: update(category, t1, t2, size, sinister, reversed);\n$: filterCharges(query);\nfunction update() {\n    const chargeList = Object.keys(charges[category]);\n    chargesData = chargeList.map(charge => new Object({ charge, t1: getTincture(charge), charges: getCharge(charge) }));\n}\nfunction filterCharges(query) {\n    if (!query && query !== queryOld)\n        update();\n    queryOld = query;\n    if (!query)\n        return;\n    const regEx = new RegExp(query.replaceAll(\" \", \"\"), \"i\");\n    const results = allCharges.filter((charge, index) => regEx.test(allChargesTranslated[index]));\n    chargesData = results.map(charge => new Object({ charge, t1: getTincture(charge), charges: getCharge(charge) }));\n}\nfunction resetQuery() {\n    query = \"\";\n}\nfunction getTincture(charge) {\n    if (type === \"semy\")\n        return `semy_of_${charge}-${t1}-${t2}-${size}`;\n    return t1;\n}\nfunction getCharge(charge) {\n    if (type === \"semy\")\n        return [];\n    return [{ charge, t: t2, p: \"e\", size: 1.5, sinister, reversed }];\n}\nconst translateSafely = (group, key) => {\n    const isInDictionary = $dictionary?.[$locale]?.[group]?.[key];\n    return isInDictionary ? $t(`${group}.${key}`) : key;\n};\nfunction getTip(charge) {\n    const chargeName = translateSafely(\"charges\", charge);\n    if (type === \"semy\")\n        return `${$t(\"editor.semyOf\")} ${chargeName}`;\n    return `${$t(\"tinctures.charge\")}: ${chargeName}`;\n}\nconst handleChange = (newCharge) => () => {\n    charge = newCharge;\n};\n</script>\n\n<span class:indented={division}>{$t(\"editor.category\")}:</span>\n<select bind:value={category} class:inactive={query} on:input={resetQuery}>\n  {#each categories as category}\n    <option value={category}>{$t(`categories.${category}`)}</option>\n  {/each}\n</select>\n\n<span class:indented={true}>{$t(\"editor.search\")}:</span>\n<input bind:value={query} class:inactive={!query} />\n\n<div class=\"items\">\n  {#each chargesData as coa (coa)}\n    <div class=\"item\" class:selected={charge === coa.charge} on:click={handleChange(coa.charge)}>\n      <EditorItem {coa} tip={getTip(coa.charge)} />\n    </div>\n  {/each}\n</div>\n\n<style>\n  input {\n    width: 10em;\n  }\n\n  .inactive {\n    background-color: #ddd;\n  }\n\n  .indented {\n    margin-left: 1em;\n  }\n</style>\n",
    "<script lang=\"ts\">// @ts-check\nimport { t } from \"svelte-i18n\";\nimport { tooltip } from \"scripts/tooltip\";\nexport let els;\nexport let el;\nexport let i;\nconst remove = (event) => {\n    event.stopPropagation();\n    els = els.filter((e, n) => n !== i);\n};\nconst clone = (event) => {\n    event.stopPropagation();\n    const elementCopy = JSON.parse(JSON.stringify(el));\n    els = [...els, elementCopy];\n};\nconst forward = (event) => {\n    event.stopPropagation();\n    [els[i], els[i + 1]] = [els[i + 1], els[i]];\n};\nconst backward = (event) => {\n    event.stopPropagation();\n    [els[i], els[i - 1]] = [els[i - 1], els[i]];\n};\nconst areDifferent = (a, b) => {\n    return JSON.stringify(a) !== JSON.stringify(b);\n};\n</script>\n\n<span>\n  <svg on:click={clone} data-tooltip={$t(\"editor.clone\")} use:tooltip>\n    <use href=\"#clone-icon\" />\n  </svg>\n  {#if els.length > 1}\n    {#if i && areDifferent(el, els[i - 1])}\n      <svg on:click={backward} data-tooltip={$t(\"editor.backward\")} use:tooltip>\n        <use href=\"#up-icon\" />\n      </svg>\n    {/if}\n    {#if i + 1 < els.length && areDifferent(el, els[i + 1])}\n      <svg on:click={forward} data-tooltip={$t(\"editor.forward\")} use:tooltip>\n        <use href=\"#down-icon\" />\n      </svg>\n    {/if}\n  {/if}\n  <svg on:click={remove} data-tooltip={$t(\"editor.remove\")} use:tooltip>\n    <use href=\"#remove-icon\" />\n  </svg>\n</span>\n\n<style>\n  span {\n    position: absolute;\n  }\n\n  svg {\n    width: 1em;\n    height: 1em;\n    fill: #dfdfdf;\n    padding: 0 0.2em;\n    transition: all 0.1s ease-in-out;\n  }\n\n  svg:hover {\n    fill: #fff;\n  }\n\n  svg:active {\n    transform: translateY(1px);\n  }\n</style>\n",
    "<script lang=\"ts\">// @ts-check\nimport { t } from \"svelte-i18n\";\nimport Switch from \"./Switch.svelte\";\nimport { state } from \"data/stores\";\nimport { positionsSelect } from \"data/dataModel\";\nimport { getSize } from \"scripts/generator\";\nimport { tooltip } from \"scripts/tooltip\";\nexport let charge;\nfunction showPositions() {\n    $state.transform = `rotate(${charge.angle || 0}) translate(${charge.x || 0}, ${charge.y || 0})`;\n    $state.positions = charge.p;\n}\nfunction hidePositions() {\n    $state.positions = 0;\n}\nfunction changePosition() {\n    showPositions();\n    charge.size = getSize(charge.p);\n}\n</script>\n\n<span data-tooltip={$t(\"tooltip.positions\")} use:tooltip>\n  {$t(\"editor.positions\")}:\n  <input bind:value={charge.p} on:input={showPositions} on:focus={showPositions} on:blur={hidePositions} />\n  <select bind:value={charge.p} on:change={changePosition} on:focus={showPositions} on:blur={hidePositions}>\n    {#each positionsSelect as position}\n      <option value={position}>{position}</option>\n    {/each}\n  </select>\n</span>\n\n<span data-tooltip={$t(\"tooltip.sinister\")} use:tooltip>\n  <span style=\"margin-left: 1em\">{$t(\"editor.sinister\")}:</span>\n  <Switch bind:checked={charge.sinister} />\n</span>\n\n<span data-tooltip={$t(\"tooltip.reversed\")} use:tooltip>\n  <span style=\"margin-left: 1em\">{$t(\"editor.reversed\")}:</span>\n  <Switch bind:checked={charge.reversed} />\n</span>\n\n<style>\n  span > span {\n    margin-left: 1em;\n  }\n\n  input {\n    width: 8.6em;\n  }\n\n  select {\n    width: 1.3em;\n    margin-left: -1.6em;\n    border: 0;\n  }\n</style>\n",
    "<script lang=\"ts\">// @ts-check\nimport { t } from \"svelte-i18n\";\nimport Switch from \"./Switch.svelte\";\nimport { grid, showGrid, state } from \"data/stores\";\nimport { tooltip } from \"scripts/tooltip\";\nexport let element;\nconst hadleSizeChange = (event) => {\n    const target = event.target;\n    element.size = parseInt(target.value) / 100;\n};\nconst updateGrid = () => {\n    $state.transform = `rotate(${element.angle || 0})`;\n};\n</script>\n\n<span data-tooltip={$t(\"tooltip.size\")} use:tooltip>\n  {$t(\"editor.size\")}:\n  <input type=\"number\" min=\"1\" max=\"500\" step=\"1\" value={(element.size * 100) | 0} on:input={hadleSizeChange} />\n</span>\n\n<span data-tooltip={$t(\"tooltip.rotation\")} use:tooltip>\n  <span>{$t(\"editor.rotation\")}:</span>\n  <input type=\"number\" min=\"-180\" max=\"180\" bind:value={element.angle} on:change={updateGrid} />\n</span>\n\n<span data-tooltip={$t(\"tooltip.shift\")} use:tooltip>\n  <span>{$t(\"editor.shift\")}:</span>\n  <input type=\"number\" min=\"-100\" max=\"100\" step={$grid} bind:value={element.x} />\n  <input type=\"number\" min=\"-100\" max=\"100\" step={$grid} bind:value={element.y} />\n</span>\n\n<span data-tooltip={$t(\"tooltip.step\")} use:tooltip>\n  <span>{$t(\"editor.step\")}:</span>\n  <input type=\"number\" min=\"1\" max=\"50\" bind:value={$grid} />\n</span>\n\n<span data-tooltip={$t(\"tooltip.showGrid\")} use:tooltip>\n  <Switch bind:checked={$showGrid} />\n</span>\n\n<style>\n  span > span {\n    margin-left: 1em;\n  }\n\n  input[type=\"number\"] {\n    width: 4em;\n  }\n</style>\n",
    "<script lang=\"ts\">// @ts-check\nimport { t } from \"svelte-i18n\";\nimport Switch from \"./Switch.svelte\";\nimport { tooltip } from \"scripts/tooltip\";\nexport let element;\n</script>\n\n<span data-tooltip={$t(\"tooltip.stroke\")} use:tooltip>\n  <span>{$t(\"editor.stroke\")}:</span>\n  <Switch bind:checked={element.showStroke} />\n  {#if element.showStroke}\n    <span style=\"margin-left: 1em\">{$t(\"editor.color\")}:</span>\n    <input type=\"color\" bind:value={element.stroke} />\n\n    {#if element.ordinary}\n      <span style=\"margin-left: 1em\">{$t(\"editor.width\")}:</span>\n      <input type=\"number\" min=\".1\" max=\"99\" step=\".1\" bind:value={element.strokeWidth} />\n    {/if}\n  {/if}\n</span>\n\n<style>\n  input[type=\"color\"] {\n    margin: 0 0 0 0.2em;\n    padding: 0;\n    cursor: pointer;\n  }\n\n  input[type=\"number\"] {\n    width: 4em;\n  }\n</style>\n",
    "<script lang=\"ts\">// @ts-check\nimport { t, dictionary, locale } from \"svelte-i18n\";\nimport EditorItem from \"./EditorItem.svelte\";\nimport { colors, tinctures } from \"data/stores\";\nimport { tooltip } from \"scripts/tooltip\";\nimport { DEFAULT_COLORS as defaults } from \"config/defaults\";\nexport let t1;\n$: localStorage.setItem(\"colors\", JSON.stringify($colors));\n$: colorChanged = (tincture) => defaults[tincture] && $colors[tincture] !== defaults[tincture];\nconst tincturesData = [\"metals\", \"colours\", \"stains\"]\n    .map(type => Object.keys($tinctures[type]).map(tincture => {\n    const tinctureName = $dictionary[$locale]?.tinctures?.[tincture] ? $t(`tinctures.${tincture}`) : tincture;\n    const typeName = $t(`editor.${type.slice(0, -1)}`);\n    return { coa: { t1: tincture }, tip: `${typeName}: ${tinctureName}` };\n}))\n    .flat();\nconst handleChange = (tincture) => {\n    t1 = tincture;\n};\nfunction openColorInput() {\n    this.previousElementSibling?.click();\n}\nfunction restoreColor(tincture) {\n    $colors[tincture] = defaults[tincture];\n}\n</script>\n\n{$t(\"editor.tincture\")}:\n<div class=\"items\">\n  {#each tincturesData as { coa, tip }}\n    <div class=\"wrapper\">\n      <div class=\"item\" class:selected={t1 === coa.t1} on:click={() => handleChange(coa.t1)}>\n        <EditorItem {coa} {tip} />\n      </div>\n\n      <div class=\"controls\">\n        {#if colorChanged(coa.t1)}\n          <svg class=\"undo\" on:click={() => restoreColor(coa.t1)} data-tooltip={$t(\"tooltip.undoColorChange\")} use:tooltip>\n            <use href=\"#undo-icon\" />\n          </svg>\n        {/if}\n\n        <div>\n          <input type=\"color\" bind:value={$colors[coa.t1]} />\n          <svg class=\"edit\" on:click={openColorInput} data-tooltip={$t(\"tooltip.changeColor\")} use:tooltip>\n            <use href=\"#pencil-icon\" />\n          </svg>\n        </div>\n      </div>\n    </div>\n  {/each}\n</div>\n\n<style>\n  .wrapper {\n    position: relative;\n  }\n\n  .controls {\n    visibility: hidden;\n    opacity: 0;\n    transition: all 0.2s ease-in-out;\n    cursor: pointer;\n  }\n\n  .wrapper:hover > .controls {\n    visibility: visible;\n    opacity: 1;\n  }\n\n  svg {\n    position: absolute;\n    fill: #f5f5f5;\n    stroke: #000;\n    stroke-width: 5;\n    width: 1em;\n    height: 1em;\n    background-color: #33333320;\n    padding: 0.2em;\n  }\n\n  svg:hover {\n    fill: #fff;\n    background-color: #33333340;\n  }\n\n  svg:active {\n    transform: translateY(1px);\n  }\n\n  .edit {\n    top: 0.8em;\n    right: 0.8em;\n  }\n\n  .undo {\n    top: 0.8em;\n    right: 2.2em;\n  }\n\n  input[type=\"color\"] {\n    visibility: hidden;\n    position: absolute;\n    width: 1em;\n    height: 1em;\n    top: 1.2em;\n    right: 1.2em;\n  }\n</style>\n",
    "<script>\n  import {state, shield} from \"data/stores\";\n  import {shieldPositions} from \"data/shields\";\n  import {fade} from \"svelte/transition\";\n\n  // on shield change\n  $: points = shieldPositions[$shield] ? Object.entries(shieldPositions[$shield]) : Object.entries(shieldPositions.spanish);\n\n  function getClass(p) {\n    if (\"abcdefghi\".includes(p)) return \"green\";\n    if (\"ABCDEFGHIJKL\".includes(p)) return \"red\";\n    if (\"zy\".includes(p)) return \"yellow\";\n    return \"blue\";\n  }\n</script>\n\n{#if $state.positions}\n  <g transform={$state.transform || null} transform-origin=\"center\">\n    <g id=\"positions\" transform=\"translate(100, 100)\" transition:fade|local>\n      {#each points as p}\n        <g id={p[0]} class={getClass(p[0])}>\n          <circle cx={p[1][0]} cy={p[1][1]} r=\"3\" class:active={$state.positions.includes(p[0])} />\n          <text style=\"dominant-baseline: central\" x={p[1][0]} y={p[1][1]} class:active={$state.positions.includes(p[0])}>{p[0]}</text>\n        </g>\n      {/each}\n    </g>\n  </g>\n{/if}\n\n<style>\n  circle {\n    opacity: 0.6;\n  }\n\n  circle.active {\n    opacity: 1;\n  }\n\n  text {\n    font-family: monospace;\n    text-anchor: middle;\n    font-size: 5px;\n    fill: #ddd;\n  }\n\n  text.active {\n    fill: #fff;\n  }\n\n  .green {\n    fill: rgb(12, 80, 12);\n  }\n\n  .blue {\n    fill: rgb(12, 12, 80);\n  }\n\n  .red {\n    fill: rgb(80, 12, 12);\n  }\n\n  .yellow {\n    fill: rgb(84, 84, 0);\n  }\n</style>\n",
    "<script>\n  export let checked = false;\n  const id = \"switch\" + Math.floor(1e6 * Math.random());\n</script>\n\n<div class=\"switch\">\n  <input {id} class=\"switch-input\" type=\"checkbox\" bind:checked />\n  <label for={id} class=\"switch-label\">Switch</label>\n</div>\n\n<style>\n  .switch {\n    position: relative;\n    display: inline-block;\n    top: -5px;\n  }\n\n  .switch-input {\n    display: none;\n  }\n\n  .switch-label {\n    display: block;\n    width: 48px;\n    height: 24px;\n    color: transparent;\n  }\n\n  .switch-label::before,\n  .switch-label::after {\n    content: \"\";\n    display: block;\n    position: absolute;\n    cursor: pointer;\n  }\n\n  .switch-label::before {\n    width: 100%;\n    height: 100%;\n    background-color: #dedede;\n    border-radius: 9999em;\n    -webkit-transition: background-color 0.25s ease;\n    transition: background-color 0.25s ease;\n  }\n\n  .switch-label::after {\n    top: 0;\n    left: 0;\n    width: 24px;\n    height: 24px;\n    border-radius: 50%;\n    background-color: #fff;\n    box-shadow: 0 0 2px rgba(0, 0, 0, 0.45);\n    -webkit-transition: left 0.25s ease;\n    transition: left 0.25s ease;\n  }\n\n  .switch-input:checked + .switch-label::before {\n    background-color: #89c12d;\n  }\n\n  .switch-input:checked + .switch-label::after {\n    left: 24px;\n  }\n</style>\n",
    "<script lang=\"ts\">// @ts-check\nimport { t } from \"svelte-i18n\";\nimport AnimatedCOA from \"./AnimatedCOA.svelte\";\nimport { state } from \"data//stores\";\nimport { fade, fly } from \"svelte/transition\";\nconst duration = 1000;\nconst handleClose = () => {\n    $state.about = 0;\n};\n</script>\n\n<div id=\"about\" transition:fade>\n  <span on:click={handleClose} class=\"close\">&times;</span>\n  <AnimatedCOA {duration} />\n  <div class=\"buttons\" in:fly={{y: 200, delay: duration, duration}}>\n    <a target=\"_blank\" href=\"https://github.com/Azgaar/Armoria/wiki/Armoria-Tutorial\"><span>{$t(\"about.tutorial\")}</span></a>\n    <a target=\"_blank\" href=\"https://discord.com/invite/X7E84HU\"><span>{$t(\"about.discord\")}</span></a>\n    <a target=\"_blank\" href=\"https://github.com/Azgaar/Armoria\"><span>{$t(\"about.gitHub\")}</span></a>\n    <a target=\"_blank\" href=\"https://github.com/Azgaar/armoria-api#readme\"><span>{$t(\"about.api\")}</span></a>\n    <a target=\"_blank\" href=\"https://www.patreon.com/azgaar\"><span>{$t(\"about.patreon\")}</span></a>\n  </div>\n</div>\n\n<style>\n  #about {\n    position: fixed;\n    inset: 0;\n    background-color: rgba(0, 0, 0, 0.9);\n    transition: 0.5s;\n    text-align: center;\n    user-select: none;\n\n    display: flex;\n    flex-direction: column;\n    justify-content: space-evenly;\n    align-items: center;\n  }\n\n  a:hover,\n  span:hover {\n    color: #fff;\n    text-decoration: none;\n  }\n\n  .buttons {\n    display: flex;\n    justify-content: space-evenly;\n    width: min(100%, 80vw);\n    font-size: 1.2em;\n  }\n\n  .buttons > a {\n    margin: 0.5em;\n    color: #ddd;\n  }\n\n  .buttons > a:hover {\n    color: #fff;\n    text-decoration: none;\n  }\n\n  @media (max-width: 600px) {\n    .buttons {\n      flex-direction: column;\n    }\n  }\n\n  span.close {\n    position: absolute;\n    top: 0;\n    right: 1.2rem;\n    font-size: 4em;\n    cursor: pointer;\n    color: #ddd;\n  }\n\n  span.close:hover {\n    color: #fff;\n  }\n</style>\n",
    "<script lang=\"ts\">// @ts-check\nimport { history, matrices, matrix, state } from \"data/stores\";\nimport { download } from \"scripts/download\";\nimport { generate } from \"scripts/generator\";\nimport { minmax } from \"scripts/utils\";\nimport { fade } from \"svelte/transition\";\nimport COA from \"./../object/COA.svelte\";\nexport let gallery;\nexport let width;\nexport let height;\n$: fontSize = minmax(width / 20, 6, 12);\n$: coas = gallery.map(c => {\n    if (!$history[c])\n        $history[c] = generate();\n    return $history[c];\n});\nfunction regenerate(i) {\n    $state.i = i;\n    $matrix++;\n    $matrices[$matrix] = $matrices[$matrix - 1].slice();\n    $matrices[$matrix][$state.i] = $history.length;\n}\nfunction editCOA(i) {\n    $state.edit = 1;\n    $state.c = gallery[i];\n    $state.i = i;\n}\n</script>\n\n<main style=\"font-size: {fontSize}px\" transition:fade={{duration: 500}}>\n  {#each coas as coa, i}\n    <div>\n      {#key coa}\n        <COA {coa} {i} {width} {height} />\n      {/key}\n      <div class=\"control\">\n        <svg on:click={() => regenerate(i)}><use href=\"#dice-icon\" /></svg>\n        <svg on:click={() => editCOA(i)}><use href=\"#pencil-icon\" /></svg>\n        <svg on:click={() => download(i)}><use href=\"#download-icon\" /></svg>\n      </div>\n    </div>\n  {/each}\n</main>\n\n<style>\n  main > div {\n    display: inline-block;\n    position: relative;\n    user-select: none;\n    transition: background 0.5s ease;\n  }\n\n  main > div:hover {\n    background: #00000020;\n  }\n\n  .control {\n    display: block;\n    position: absolute;\n    opacity: 0;\n    transition: 0.5s ease-in-out;\n    transform: translate(-50%, -150%);\n    left: 50%;\n    font-size: 2.4em;\n    white-space: nowrap;\n  }\n\n  main > div:hover > .control {\n    opacity: 1;\n  }\n\n  .control > svg {\n    width: 1.2em;\n    height: 1.2em;\n    fill: #f1f1f1;\n    stroke: #333;\n    stroke-width: 0.5em;\n    vertical-align: middle;\n    margin: 0 0.5em;\n    transition: 0.1s ease-in-out;\n  }\n\n  .control > svg:hover {\n    fill: #fff;\n    cursor: pointer;\n  }\n\n  .control > svg:active {\n    transform: translateY(1px) rotate(180deg);\n  }\n</style>\n",
    "<script lang=\"ts\">// @ts-check\nimport { t, dictionary, locale } from \"svelte-i18n\";\nimport { fade } from \"svelte/transition\";\nimport { shield, state } from \"data/stores\";\nimport { link } from \"scripts/utils\";\nconst wetaShield = (shield) => [\"noldor\", \"gondor\", \"easterling\", \"ironHills\", \"urukHai\", \"moriaOrc\"].includes(shield);\nconst coas = Array.from(document.querySelectorAll(\"svg.coa\"));\nconst charges = coas.map(coa => Array.from(coa.querySelectorAll(\".charge[charge]\")).map(el => el.getAttribute(\"charge\"))).flat();\n// translation-related constants\nconst noLicenseData = $t(\"license.noLicenseData\");\nconst noSourceData = $t(\"license.noSourceData\");\nconst publicDomain = $t(\"license.publicDomain\");\nconst fairUse = $t(\"license.fairUse\");\n// links\nconst armoriaGitHub = link(\"https://github.com/Azgaar/Armoria\", \"Azgaar\");\nconst ccBy = link(\"https://creativecommons.org/licenses/by/4.0/\", \"CC BY 4.0\");\nconst fontAwesome = link(\"https://fontawesome.com/license/free\", \"Font Awesome\");\nconst translateSafely = (group, key) => {\n    const isInDictionary = $dictionary?.[$locale]?.[group]?.[key];\n    return isInDictionary ? $t(`${group}.${key}`) : key;\n};\nconst chargeData = [...new Set(charges)]\n    .map(charge => {\n    const el = document.getElementById(charge);\n    const licenseURL = el.getAttribute(\"license\");\n    const licenseName = getLicenseName(licenseURL);\n    const sourceURL = el.getAttribute(\"source\");\n    const author = el.getAttribute(\"author\") || (sourceURL ? new URL(sourceURL).host : null);\n    const license = licenseURL && licenseName ? link(licenseURL, licenseName) : noLicenseData;\n    const source = sourceURL ? link(sourceURL, author) : author || noSourceData;\n    return { charge: translateSafely(\"charges\", charge), license, source };\n})\n    .sort((a, b) => (a.license < b.license ? -1 : 1));\nconst isLicenseSame = [...new Set(chargeData.map(d => [d.license, d.source].join(\",\")))].length === 1;\nconst charge = isLicenseSame ? chargeData[0] : null;\n// get mainly Creative Commons short names from license link\nfunction getLicenseName(license) {\n    if (!license)\n        return null;\n    if (license.includes(\"publicdomain\"))\n        return publicDomain;\n    if (license.includes(\"by-nc-sa\"))\n        return \"CC BY-NC-SA\";\n    if (license.includes(\"by-nc-nd\"))\n        return \"CC BY-NC-ND\";\n    if (license.includes(\"by-nc\"))\n        return \"CC BY-NC\";\n    if (license.includes(\"by-nd\"))\n        return \"CC BY-ND\";\n    if (license.includes(\"by-sa\"))\n        return \"CC BY-SA\";\n    if (license.includes(\"by\"))\n        return \"CC BY\";\n    if (license.includes(\"Fair\"))\n        return fairUse;\n    return license;\n}\n</script>\n\n<div id=\"license\" transition:fade>\n  <span on:click={() => ($state.license = 0)} class=\"close\">&times;</span>\n\n  <div id=\"licenseContainer\">\n    <h1>{$t(\"license.armoriaLicense\")}</h1>\n\n    {#if chargeData.length}\n      <hr />\n      <h2>{$t(\"license.currentCoas\")}</h2>\n    {/if}\n\n    {#if isLicenseSame}\n      <h3>{chargeData.length > 1 ? $t(\"license.charges\") : charge.charge}: {@html charge.license}, {@html charge.source}</h3>\n    {:else}\n      <div class=\"chargesList\">\n        {#each chargeData as { charge, license, source }}\n          <div><span class=\"charge\">{charge}</span>: {@html license}, {@html source}</div>\n        {/each}\n      </div>\n    {/if}\n\n    {#if wetaShield($shield)}\n      <p>{@html $t(\"license.wetaShield\")}</p>\n    {/if}\n\n    <hr />\n    <h2>{$t(\"license.code\")}: MIT License, {@html armoriaGitHub}</h2>\n    <p>{$t(\"license.textMain\")}</p>\n    <p>{$t(\"license.textRest\")}</p>\n\n    <hr />\n    <h2>{$t(\"license.icons\")}: {@html ccBy}, {@html fontAwesome}</h2>\n    <br />\n  </div>\n</div>\n\n<style>\n  #license {\n    height: 100%;\n    width: 100%;\n    position: fixed;\n    left: 0;\n    top: 0;\n    background-color: #000000e6;\n    transition: 0.5s;\n    color: #ddd;\n    text-align: center;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    overflow: auto;\n    scrollbar-width: thin;\n  }\n\n  #license::-webkit-scrollbar {\n    width: 6px;\n    background-color: #cccccc80;\n  }\n\n  #license::-webkit-scrollbar-thumb {\n    background-color: #111;\n  }\n\n  #licenseContainer {\n    width: 90%;\n    max-width: 800px;\n    max-height: 100%;\n  }\n\n  hr {\n    border: none;\n    border-top: 3px double #333;\n    color: #333;\n    overflow: visible;\n    text-align: center;\n    height: 5px;\n  }\n\n  hr:after {\n    content: \"§\";\n    position: relative;\n    top: -12px;\n  }\n\n  span.close {\n    position: fixed;\n    top: 0em;\n    right: 0.5em;\n    font-size: 4em;\n    padding: 0.2em 0;\n    z-index: 2;\n    cursor: pointer;\n  }\n\n  .chargesList {\n    column-count: 2;\n    column-gap: 4em;\n    text-align: left;\n    margin: 0 1em;\n  }\n\n  .charge {\n    text-transform: capitalize;\n  }\n\n  @media only screen and (orientation: portrait) {\n    .chargesList {\n      column-gap: normal;\n      text-align: center;\n    }\n  }\n</style>\n",
    "<script lang=\"ts\">// @ts-check\nimport { t } from \"svelte-i18n\";\nimport { fade } from \"svelte/transition\";\nimport { flip } from \"svelte/animate\";\nimport { colors, tinctures, state, message } from \"data/stores\";\nimport { camelize } from \"scripts/utils\";\nimport { tooltip } from \"scripts/tooltip\";\nimport { DEFAULT_COLORS, DEFAULT_TINCTURES } from \"config/defaults\";\nconst addLine = { show: false, name: \"\", type: \"colours\", color: \"#96C8FA\", chance: 3 };\nconst mandatoryTypes = [\"metals\", \"colours\"];\n// remove stored weighted array\nfor (const key in $tinctures) {\n    delete $tinctures[key].array;\n}\nconst types = [\"metals\", \"colours\", \"stains\"];\n$: tData = types.map(type => Object.keys($tinctures[type]).map(tincture => ({ t: tincture, type }))).flat();\n$: lock(\"tinctures\", $tinctures);\n$: lock(\"colors\", $colors);\n$: getTotalChance = (type) => {\n    const chances = Object.values($tinctures[type]);\n    return chances.reduce((a, b) => a + b, 0);\n};\n// don't lock options on load\nlet loaded = [];\nfunction lock(key, value) {\n    if (loaded.includes(key))\n        localStorage.setItem(key, JSON.stringify(value));\n    else\n        loaded.push(key);\n}\nfunction changeElementChance(element, type, event) {\n    const target = event.target;\n    const newValue = +target.value;\n    const min = +target.min;\n    if (isNaN(newValue)) {\n        message.error($t(\"error.mustBeNumber\"));\n        return;\n    }\n    if (newValue < min) {\n        message.error($t(\"error.valueCannotBeThatLow\"));\n        target.value = String(min);\n        return;\n    }\n    $tinctures[element][type] = newValue;\n}\nfunction changeTinctureChance(type, tinctureName, event) {\n    const target = event.target;\n    const newValue = +target.value;\n    if (isNaN(newValue)) {\n        message.error($t(\"error.mustBeNumber\"));\n        return;\n    }\n    if (newValue < 1) {\n        const typeTinctures = { ...$tinctures[type] };\n        typeTinctures[tinctureName] = 0;\n        const totalChance = Object.values(typeTinctures).reduce((a, b) => a + b, 0);\n        if (totalChance < 1) {\n            message.error($t(\"error.totalChanceMustNotBeZero\"));\n            target.value = String(1);\n            return;\n        }\n    }\n    $tinctures[type][tinctureName] = newValue;\n}\nfunction removeTincture(tinctureName, type) {\n    if (type === \"metals\" || type === \"colours\") {\n        const typeItems = Object.keys($tinctures[type]);\n        if (typeItems.length < 3) {\n            message.error($t(\"error.tinctureRemove\"));\n            return;\n        }\n    }\n    delete $tinctures[type][tinctureName];\n    $tinctures = $tinctures;\n}\nfunction addTincture() {\n    addLine.show = true;\n    message.info($t(\"info.tipAddTincture\"), 8000);\n}\nfunction cancelAddTincture() {\n    addLine.show = false;\n}\nfunction closeTincturesScreen() {\n    $state.tinctures = 0;\n}\nfunction applyAddTincture() {\n    const name = camelize(addLine.name);\n    if (!name || $colors[name]) {\n        message.error($t(\"error.nonUniqueTincture\"));\n        return;\n    }\n    $tinctures[addLine.type][name] = addLine.chance;\n    $colors[name] = addLine.color;\n    addLine.show = false;\n    addLine.name = \"\";\n    message.info($t(\"success.tinctureAdded\"));\n}\nfunction restoreDefault() {\n    $tinctures = JSON.parse(JSON.stringify(DEFAULT_TINCTURES));\n    $colors = JSON.parse(JSON.stringify(DEFAULT_COLORS));\n    localStorage.removeItem(\"tinctures\");\n    localStorage.removeItem(\"colors\");\n    loaded = [];\n    message.info($t(\"info.restoredDefaults\"));\n}\nfunction getTinctureName(tinctureName) {\n    const translated = $t(`tinctures.${tinctureName}`);\n    return translated.startsWith(\"tinctures.\") ? tinctureName : translated;\n}\n</script>\n\n<div id=\"tinctures\" transition:fade|local>\n  <span on:click={closeTincturesScreen} class=\"close\">&times;</span>\n\n  <div id=\"left\">\n    <table>\n      <thead>\n        <tr>\n          <th />\n          {#each Object.keys($tinctures.field) as type (type)}\n            <th>{$t(`tinctures.${type}`)}</th>\n          {/each}\n        </tr>\n      </thead>\n      <tbody>\n        {#each [\"field\", \"division\", \"charge\"] as element (element)}\n          <tr>\n            <td>{$t(`tinctures.${element}`)}</td>\n            {#each Object.keys($tinctures[element]) as type (type)}\n              <td>\n                <input\n                  type=\"number\"\n                  min={mandatoryTypes.includes(type) ? 1 : 0}\n                  max=\"100\"\n                  step=\"1\"\n                  value={$tinctures[element][type]}\n                  on:change={event => changeElementChance(element, type, event)}\n                />\n                <span class=\"totalChance\">/ {getTotalChance(element)}</span>\n              </td>\n            {/each}\n          </tr>\n        {/each}\n      </tbody>\n      <tfoot>\n        <tr>\n          <td />\n          <td colspan=\"2\">\n            {#if addLine.show}\n              <button on:click={applyAddTincture}>{$t(\"tinctures.apply\")}</button>\n            {:else}\n              <button on:click={addTincture}>{$t(\"tinctures.add\")}</button>\n            {/if}\n          </td>\n          <td colspan=\"2\">\n            <button on:click={restoreDefault}>{$t(\"tinctures.restore\")}</button>\n          </td>\n        </tr>\n      </tfoot>\n    </table>\n  </div>\n\n  <div id=\"right\">\n    <table id=\"tincturesTable\">\n      <thead>\n        <tr>\n          {#each [\"name\", \"type\", \"color\", \"chance\", \"remove\"] as header}\n            <th>{$t(`tinctures.${header}`)}</th>\n          {/each}\n        </tr>\n      </thead>\n      <tbody>\n        {#if addLine.show}\n          <tr transition:fade>\n            <td>\n              <input type=\"text\" placeholder={$t(\"tinctures.name\")} bind:value={addLine.name} />\n            </td>\n            <td>\n              <select bind:value={addLine.type}>\n                <option value=\"metals\">{$t(\"tinctures.metals\")}</option>\n                <option value=\"colours\">{$t(\"tinctures.colours\")}</option>\n                <option value=\"stains\">{$t(\"tinctures.stains\")}</option>\n              </select>\n            </td>\n            <td>\n              <input type=\"color\" bind:value={addLine.color} />\n            </td>\n            <td>\n              <input type=\"number\" min=\"0\" max=\"100\" step=\"1\" bind:value={addLine.chance} />\n            </td>\n            <td>\n              <span class=\"actionButton\" on:click={cancelAddTincture}>&times;</span>\n            </td>\n          </tr>\n        {/if}\n        {#each tData as { t: tinctureName, type } (tinctureName)}\n          <tr animate:flip>\n            <td>{getTinctureName(tinctureName)}</td>\n            <td>{$t(`tinctures.${type}`)}</td>\n            <td>\n              <input type=\"color\" bind:value={$colors[tinctureName]} data-tooltip={$t(\"tooltip.changeColor\")} use:tooltip />\n              {#if DEFAULT_COLORS[tinctureName] && $colors[tinctureName] !== DEFAULT_COLORS[tinctureName]}\n                <svg\n                  on:click={() => ($colors[tinctureName] = DEFAULT_COLORS[tinctureName])}\n                  width=\"12\"\n                  height=\"12\"\n                  data-tooltip={$t(\"tooltip.undoColorChange\")}\n                  use:tooltip\n                >\n                  <use href=\"#undo-icon\" />\n                </svg>\n              {/if}\n            </td>\n            <td>\n              <input\n                type=\"number\"\n                min=\"0\"\n                max=\"100\"\n                step=\"1\"\n                value={$tinctures[type][tinctureName]}\n                on:change={event => changeTinctureChance(type, tinctureName, event)}\n              />\n              <span class=\"totalChance\">/ {getTotalChance(type)}</span>\n            </td>\n            <td>\n              <span class=\"actionButton\" on:click={() => removeTincture(tinctureName, type)}>&times;</span>\n            </td>\n          </tr>\n        {/each}\n      </tbody>\n    </table>\n  </div>\n</div>\n\n<style>\n  #tinctures {\n    position: fixed;\n    inset: 0;\n    background-color: rgba(0, 0, 0, 0.9);\n    transition: 0.5s;\n    text-align: center;\n    user-select: none;\n    overflow: auto;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n  }\n\n  #tinctures::-webkit-scrollbar {\n    width: 6px;\n    background-color: #cccccc80;\n  }\n\n  #tinctures::-webkit-scrollbar-thumb {\n    background-color: #111;\n  }\n\n  @media only screen and (orientation: portrait) {\n    #tinctures {\n      flex-direction: column;\n    }\n  }\n\n  span.close {\n    position: fixed;\n    top: 0em;\n    right: 0.5em;\n    font-size: 4em;\n    padding: 0.2em 0;\n    cursor: pointer;\n    color: #ddd;\n    z-index: 2;\n  }\n\n  .close:hover,\n  .actionButton:hover {\n    color: #fff;\n  }\n\n  table {\n    color: #ddd;\n    text-transform: capitalize;\n    min-width: 350px;\n    max-width: 80vw;\n    display: block;\n    max-height: 80vh;\n  }\n\n  td {\n    position: relative;\n    width: 4em;\n    height: 2.2em;\n  }\n\n  tfoot td {\n    text-align: right;\n  }\n\n  #tincturesTable td:nth-child(3) {\n    width: 5em;\n  }\n\n  input {\n    position: absolute;\n    transform: translate(-50%, -50%);\n  }\n\n  input[type=\"color\"] {\n    padding: 0;\n    border: 0;\n    cursor: pointer;\n  }\n\n  input[type=\"text\"] {\n    width: 6em;\n  }\n\n  input[type=\"number\"] {\n    width: 100%;\n  }\n\n  .totalChance {\n    position: absolute;\n    top: 6%;\n    right: 10%;\n    color: #333;\n    user-select: none;\n    pointer-events: none;\n    font-size: 0.6em;\n  }\n\n  svg {\n    cursor: pointer;\n    position: absolute;\n    transform: translate(-50%, -50%);\n    fill: currentColor;\n  }\n\n  svg:hover {\n    fill: #fff;\n  }\n\n  .actionButton {\n    font-size: 2em;\n    cursor: pointer;\n  }\n\n  select {\n    padding: 5.5px 0px;\n    margin: 0;\n  }\n</style>\n",
    "<script lang=\"ts\">// @ts-check\nimport { t } from \"svelte-i18n\";\nimport LicenseList from \"./LicenseList.svelte\";\nimport { state, message, shield } from \"data/stores\";\nimport { charges } from \"data/dataModel\";\nimport { shieldPaths } from \"data/shields\";\nimport { tooltip } from \"scripts/tooltip\";\nimport { camelize } from \"scripts/utils\";\nimport { query } from \"scripts/aliases\";\nlet dragging = false;\nlet selected = false;\nlet size = 50;\nlet offsetX = 0;\nlet offsetY = 0;\nlet name;\nlet category = \"uploaded\";\nlet source;\nlet license;\nlet author;\nconst onFile = getFilesFunction => event => {\n    dragging = false;\n    const files = getFilesFunction(event);\n    const file = files.length ? files[0] : [];\n    if (!file.type.match(/image.*/)) {\n        message.error($t(\"error.notAnImage\"));\n        return;\n    }\n    selected = true;\n    message.info($t(\"info.tipUploadImageSize\"));\n    name = camelize(file.name);\n    loadImage(file);\n};\nfunction getFilesFromDropEvent({ dataTransfer: { files, items } }) {\n    return files.length ? [...files] : items.filter(({ kind }) => kind === \"file\").map(({ getAsFile }) => getAsFile());\n}\nfunction getFilesFromInputEvent({ target }) {\n    const files = target.files ? [...target.files] : [];\n    target.value = \"\";\n    return files;\n}\nfunction loadImage(file) {\n    const reader = new FileReader();\n    reader.onload = function (readerEvent) {\n        const dataURL = readerEvent.target.result;\n        const image = document.getElementById(\"rasterUpload\").querySelector(\"svg image\");\n        image.setAttribute(\"href\", dataURL);\n    };\n    reader.readAsDataURL(file);\n}\nfunction addCharge() {\n    const allCharges = Object.keys(charges.types)\n        .map(type => Object.keys(charges[type]))\n        .flat();\n    name = camelize(name);\n    if (!name || document.getElementById(name) || allCharges.includes(name)) {\n        message.error($t(\"error.notUniqueName\"));\n        return;\n    }\n    if (!charges.types[category])\n        charges.types[category] = 6;\n    if (!charges.single[category])\n        charges.single[category] = 6;\n    charges[category][name] = 5;\n    // remove stored weighted arrays\n    delete charges.types.array;\n    delete charges.single.array;\n    delete charges[category].array;\n    const image = query(\"#rasterUpload svg image\").cloneNode(true);\n    image.id = name;\n    if (source)\n        image.setAttribute(\"source\", source);\n    if (license)\n        image.setAttribute(\"license\", license);\n    if (author)\n        image.setAttribute(\"author\", author);\n    document.getElementById(\"charges\").appendChild(image);\n    selected = false;\n    $state.raster = 0;\n    message.success($t(\"success.chargeAdded\"));\n}\n</script>\n\n<div\n  id=\"rasterUpload\"\n  on:drop|preventDefault={onFile(getFilesFromDropEvent)}\n  on:dragover|preventDefault={() => (dragging = true)}\n  on:dragleave|preventDefault={() => (dragging = false)}\n>\n  <span on:click={() => ($state.raster = 0)} class=\"close\">&times;</span>\n  <div class=\"container\">\n    {#if selected}\n      <svg\n        width=\"100%\"\n        height=\"100%\"\n        stroke=\"#000\"\n        stroke-width=\"1\"\n        viewBox=\"0 0 200 200\"\n        data-tooltip=\"Fit image into the rectangle for best result\"\n        use:tooltip\n      >\n        <g fill=\"#fff\" fill-opacity=\".05\" stroke=\"#fff\" stroke-width=\".5\">\n          <image id=\"imageLoaded\" x=\"{(100 - size) / 2 + offsetX}%\" y=\"{(100 - size) / 2 + offsetY}%\" width=\"{size}%\" height=\"{size}%\" />\n          <path d={shieldPaths[$shield]} />\n          <rect x=\"60\" y=\"60\" width=\"80\" height=\"80\" />\n        </g>\n      </svg>\n\n      <div class=\"inputs\">\n        <div data-tooltip=\"Image size in percents\" use:tooltip>\n          <div class=\"label\">Size:</div>\n          <input type=\"number\" bind:value={size} />\n        </div>\n        <div data-tooltip=\"Offset by X axis in pixels\" use:tooltip>\n          <div class=\"label\">Offset X:</div>\n          <input type=\"number\" bind:value={offsetX} />\n        </div>\n        <div data-tooltip=\"Offset by Y axis in pixels\" use:tooltip>\n          <div class=\"label\">Offset Y:</div>\n          <input type=\"number\" bind:value={offsetY} />\n        </div>\n        <div data-tooltip=\"Link to the image source\" use:tooltip>\n          <div class=\"label\">Source:</div>\n          <input bind:value={source} />\n        </div>\n        <div data-tooltip=\"Image author or source portal name\" use:tooltip>\n          <div class=\"label\">Author:</div>\n          <input bind:value={author} />\n        </div>\n        <div data-tooltip=\"Image license\" use:tooltip>\n          <div class=\"label\">License:</div>\n          <LicenseList bind:license />\n        </div>\n        <div data-tooltip=\"Charge unique name (id)\" use:tooltip>\n          <div class=\"label\">Name:</div>\n          <input placeholder=\"Charge id\" required bind:value={name} />\n        </div>\n        <div data-tooltip=\"Category to put a charge\" use:tooltip>\n          <div class=\"label\">Category:</div>\n          <select bind:value={category}>\n            {#each Object.keys(charges.types) as c}\n              <option value={c}>{c}</option>\n            {/each}\n          </select>\n        </div>\n        <div class=\"buttons\">\n          <button on:click={addCharge}>Add</button>\n          <button on:click={() => (selected = false)}>Cancel</button>\n        </div>\n      </div>\n    {:else}\n      <label class=\"dragging\">\n        <slot {dragging}>\n          <div>Drag &amp; Drop image here or <b>browse</b></div>\n        </slot>\n        <input type=\"file\" accept=\"image/*\" on:input={onFile(getFilesFromInputEvent)} />\n      </label>\n    {/if}\n  </div>\n</div>\n\n<style>\n  #rasterUpload {\n    height: 100%;\n    width: 100%;\n    position: fixed;\n    left: 0;\n    top: 0;\n    background-color: #000000e6;\n    transition: 0.5s;\n    user-select: none;\n    display: flex;\n    flex-flow: row;\n    align-items: center;\n    justify-content: center;\n    overflow: auto;\n  }\n\n  .container {\n    color: #ddd;\n    max-height: 90%;\n    max-width: 90%;\n  }\n\n  .inputs {\n    column-count: 3;\n  }\n\n  input,\n  select {\n    width: 10em;\n  }\n\n  .buttons > button {\n    cursor: pointer;\n    margin: 1.18em 0;\n    width: 4.8em;\n  }\n\n  @media only screen and (orientation: portrait) {\n    .inputs {\n      column-count: 2;\n    }\n\n    .buttons {\n      column-span: all;\n    }\n  }\n\n  input[type=\"file\"] {\n    display: none;\n  }\n\n  .close {\n    position: fixed;\n    top: 0em;\n    right: 0.5em;\n    font-size: 4em;\n    padding: 0.2em 0;\n    display: inline-block;\n    color: #ddd;\n    z-index: 2;\n  }\n\n  label:hover,\n  span:hover {\n    cursor: pointer;\n    color: #fff;\n  }\n\n  .dragging {\n    width: max-content;\n  }\n</style>\n",
    "<script lang=\"ts\">// @ts-check\nimport { t } from \"svelte-i18n\";\nimport LicenseList from \"./LicenseList.svelte\";\nimport { state, colors, tinctures, message, shield } from \"data/stores\";\nimport { charges } from \"data/dataModel\";\nimport { shieldPaths } from \"data/shields\";\nimport { camelize } from \"scripts/utils\";\nimport { tooltip } from \"scripts/tooltip\";\nimport { query } from \"scripts/aliases\";\nlet dragging = false;\nlet selected = false;\nlet svg;\nlet transform = { a: 1, b: 0, c: 0, d: 1, e: 0, f: 0 };\nlet name;\nlet category = \"uploaded\";\nlet color = \"#d7374a\";\nlet source;\nlet license;\nlet author;\nconst tinctureList = [\"metals\", \"colours\", \"stains\"].map(type => Object.keys($tinctures[type])).flat();\n$: updateTransform(transform);\nfunction updateTransform(transform) {\n    if (!svg)\n        return; // on component load\n    const el = document.createElement(\"html\");\n    el.innerHTML = svg;\n    const g = el.querySelector(\"g\");\n    const transformString = Object.values(transform).join(\" \");\n    if (transformString === \"1 0 0 1 0 0\")\n        g.removeAttribute(\"transform\");\n    else\n        g.setAttribute(\"transform\", \"matrix(\" + transformString + \")\");\n    svg = g.outerHTML;\n}\nconst onFile = (getFilesFunction) => (event) => {\n    dragging = false;\n    const files = getFilesFunction(event);\n    const file = files.length ? files[0] : [];\n    if (!file.type.match(/text.*|svg.*/)) {\n        message.error($t(\"error.notSvgOrText\"));\n        return;\n    }\n    selected = true;\n    name = camelize(file.name);\n    loadImage(file);\n};\nfunction getFilesFromDropEvent({ dataTransfer: { files, items } }) {\n    return files.length ? [...files] : items.filter(({ kind }) => kind === \"file\").map(({ getAsFile }) => getAsFile());\n}\nfunction getFilesFromInputEvent({ target }) {\n    const files = target.files ? [...target.files] : [];\n    target.value = \"\";\n    return files;\n}\nfunction loadImage(file) {\n    const reader = new FileReader();\n    reader.onload = function (readerEvent) {\n        const svgText = readerEvent.target.result;\n        const el = document.createElement(\"html\");\n        el.innerHTML = svgText;\n        // remove sodipodi and inkscape attributes\n        el.querySelectorAll(\"*\").forEach(el => {\n            const attributes = el.getAttributeNames();\n            attributes.forEach(attr => {\n                if (attr.includes(\"inkscape\") || attr.includes(\"sodipodi\"))\n                    el.removeAttribute(attr);\n            });\n        });\n        const g = el.querySelector(\"g\");\n        if (!g) {\n            message.error($t(\"error.incorrectSvg\"));\n            selected = false;\n            return;\n        }\n        const consolidated = g.transform.baseVal.consolidate();\n        if (consolidated) {\n            const { a, b, c, d, e, f } = consolidated.matrix;\n            const fix = n => +n.toFixed(4);\n            transform = Object.assign(transform, { a: fix(a), b: fix(b), c: fix(c), d: fix(d), e: fix(e), f: fix(f) });\n        }\n        g.removeAttribute(\"id\");\n        svg = g.outerHTML;\n    };\n    reader.readAsText(file);\n}\nfunction addCharge() {\n    const allCharges = Object.keys(charges.types)\n        .map(type => Object.keys(charges[type]))\n        .flat();\n    name = camelize(name);\n    if (!name || document.getElementById(name) || allCharges.includes(name)) {\n        message.error($t(\"error.notUniqueName\"));\n        return;\n    }\n    if (!charges.types[category])\n        charges.types[category] = 6;\n    if (!charges.single[category])\n        charges.single[category] = 6;\n    charges[category][name] = 5;\n    const el = document.createElement(\"html\");\n    el.innerHTML = svg;\n    const image = el.querySelector(\"g\");\n    image.id = name;\n    if (source)\n        image.setAttribute(\"source\", source);\n    if (license)\n        image.setAttribute(\"license\", license);\n    if (author)\n        image.setAttribute(\"author\", author);\n    query(\"defs\").insertAdjacentHTML(\"beforeend\", image.outerHTML);\n    selected = false;\n    $state.vector = 0;\n    message.success($t(\"success.chargeAdded\"));\n}\nfunction downloadTemplate() {\n    fetch(\"charges/template.svg\").then(text => {\n        return text.blob().then(blob => {\n            const a = document.createElement(\"a\");\n            a.href = URL.createObjectURL(blob);\n            a.setAttribute(\"download\", \"armoriaChargeTemplate.txt\");\n            a.click();\n        });\n    });\n}\n</script>\n\n<div\n  id=\"vectorUpload\"\n  on:drop|preventDefault={onFile(getFilesFromDropEvent)}\n  on:dragover|preventDefault={() => (dragging = true)}\n  on:dragleave|preventDefault={() => (dragging = false)}\n>\n  <span on:click={() => ($state.vector = 0)} class=\"close\">&times;</span>\n  <div class=\"container\">\n    {#if selected}\n      <svg\n        width=\"100%\"\n        height=\"100%\"\n        fill={color}\n        stroke=\"#000\"\n        stroke-width=\"1\"\n        viewBox=\"0 0 200 200\"\n        data-tooltip=\"Fit image into the rectangle for best result\"\n        use:tooltip\n      >\n        <g fill=\"#fff\" fill-opacity=\".05\" stroke=\"#fff\" stroke-width=\".5\">\n          <path d={shieldPaths[$shield]} />\n          <rect x=\"60\" y=\"60\" width=\"80\" height=\"80\" />\n        </g>\n        <g>{@html svg}</g>\n      </svg>\n\n      <div>\n        <div class=\"label\">SVG Markup:</div>\n        <textarea rows=\"5\" bind:value={svg} />\n      </div>\n\n      <div class=\"inputs\">\n        <div data-tooltip=\"Charge translate: X and Y px\" use:tooltip>\n          <div class=\"label\">Translate:</div>\n          <input type=\"number\" step=\".1\" class=\"paired\" bind:value={transform.e} />\n          <input type=\"number\" step=\".1\" class=\"paired\" bind:value={transform.f} />\n        </div>\n\n        <div data-tooltip=\"Charge scale: X and Y, where 1 is default size\" use:tooltip>\n          <div class=\"label\">Scale:</div>\n          <input type=\"number\" step=\".01\" class=\"paired\" bind:value={transform.a} />\n          <input type=\"number\" step=\".01\" class=\"paired\" bind:value={transform.d} />\n        </div>\n\n        <div\n          data-tooltip=\"Tincture preview color, does not affect uploaded actual color. Charges must not have exact color defined. In this case charge will support all tunctures\"\n          use:tooltip\n        >\n          <div class=\"label\">Tincture:</div>\n          <select bind:value={color}>\n            {#each tinctureList as tincture}\n              <option value={$colors[tincture]}>{tincture}</option>\n            {/each}\n          </select>\n        </div>\n\n        <div data-tooltip=\"Link to the image source\" use:tooltip>\n          <div class=\"label\">Source:</div>\n          <input bind:value={source} />\n        </div>\n        <div data-tooltip=\"Image author or source portal name\" use:tooltip>\n          <div class=\"label\">Author:</div>\n          <input bind:value={author} />\n        </div>\n        <div data-tooltip=\"Image license\" use:tooltip>\n          <div class=\"label\">License:</div>\n          <LicenseList bind:license />\n        </div>\n        <div data-tooltip=\"Charge unique name (id)\" use:tooltip>\n          <div class=\"label\">Name:</div>\n          <input placeholder=\"Charge id\" required bind:value={name} />\n        </div>\n        <div data-tooltip=\"Category to put a charge\" use:tooltip>\n          <div class=\"label\">Category:</div>\n          <select bind:value={category}>\n            {#each Object.keys(charges.types) as c}\n              <option value={c}>{c}</option>\n            {/each}\n          </select>\n        </div>\n\n        <div class=\"buttons\">\n          <button on:click={addCharge}>Upload</button>\n          <button on:click={() => (selected = false)}>Cancel</button>\n        </div>\n      </div>\n    {:else}\n      <label class=\"dragging\">\n        <slot {dragging}>\n          <div>Drag &amp; Drop svg file here or <b>browse</b></div>\n        </slot>\n        <input type=\"file\" accept=\".svg\" on:input={onFile(getFilesFromInputEvent)} />\n      </label>\n      <button class=\"template\" on:click={downloadTemplate}>Download Template</button>\n    {/if}\n  </div>\n</div>\n\n<style>\n  #vectorUpload {\n    height: 100%;\n    width: 100%;\n    position: fixed;\n    left: 0;\n    top: 0;\n    background-color: #000000e6;\n    transition: 0.5s;\n    user-select: none;\n    display: flex;\n    flex-flow: row;\n    align-items: center;\n    justify-content: center;\n    overflow: auto;\n  }\n\n  .container {\n    color: #ddd;\n    max-height: 100%;\n    max-width: 90%;\n  }\n\n  .inputs {\n    column-count: 3;\n  }\n\n  textarea {\n    width: 100%;\n    font-size: 0.8em;\n    font-family: \"Courier New\", Courier, monospace;\n  }\n\n  input,\n  select {\n    width: 10em;\n  }\n\n  input.paired {\n    width: 4.85em;\n  }\n\n  input[type=\"file\"] {\n    display: none;\n  }\n\n  .close {\n    position: fixed;\n    top: 0em;\n    right: 0.5em;\n    font-size: 4em;\n    padding: 0.2em 0;\n    display: inline-block;\n    color: #ddd;\n    z-index: 2;\n  }\n\n  label:hover,\n  span:hover {\n    cursor: pointer;\n    color: #fff;\n  }\n\n  .dragging {\n    width: max-content;\n  }\n\n  .template {\n    position: absolute;\n    top: 50%;\n    left: 50%;\n    margin-top: 2.5em;\n    transform: translate(-50%, -50%);\n  }\n\n  .buttons > button {\n    cursor: pointer;\n    margin: 1.18em 0;\n    width: 4.8em;\n  }\n\n  @media only screen and (orientation: portrait) {\n    .inputs {\n      column-count: 2;\n    }\n\n    .buttons {\n      column-span: all;\n    }\n  }\n</style>\n",
    "<script lang=\"ts\">// @ts-check\nimport { iconedNav, state } from \"data/stores\";\nimport Logo from \"./menu/Logo.svelte\";\nimport Options from \"./menu/options/Options.svelte\";\nimport Rollback from \"./menu/Rollback.svelte\";\nimport Reroll from \"./menu/Reroll.svelte\";\nimport Save from \"./menu/Save.svelte\";\nimport Upload from \"./menu/Upload.svelte\";\nimport Install from \"./menu/Install.svelte\";\nimport Other from \"./menu/Other.svelte\";\nimport Undo from \"./menu/Undo.svelte\";\nimport Redo from \"./menu/Redo.svelte\";\nimport License from \"./menu/License.svelte\";\nimport About from \"./menu/About.svelte\";\nimport Support from \"./menu/Support.svelte\";\nimport Language from \"./menu/Language.svelte\";\nimport Back from \"./menu/Back.svelte\";\n</script>\n\n<nav>\n  <Logo />\n  <Options />\n  <Rollback />\n  <Reroll />\n  <Save />\n  <Upload />\n  <Install />\n\n  {#if $iconedNav && $state.edit}\n    <Other />\n  {:else}\n    <Language />\n    <License />\n    <Support />\n    <About />\n  {/if}\n\n  {#if $state.edit}\n    <Undo />\n    <Redo />\n    <Back />\n  {/if}\n</nav>\n\n<style>\n  nav {\n    display: flex;\n    align-items: center;\n    flex-wrap: wrap;\n    min-height: 45px;\n    background-color: #1b1c1d;\n  }\n</style>\n",
    "<script lang=\"ts\">// @ts-check\nimport { iconedNav } from \"data/stores\";\nconst redirectToHome = () => {\n    location.href = location.origin + location.pathname;\n};\n</script>\n\n{#if !$iconedNav}\n  <li>\n    <svg on:click={redirectToHome} width=\"35\" height=\"35\" viewBox=\"-2 -1 55 55\">\n      <path\n        fill=\"#fff\"\n        stroke=\"none\"\n        d=\"m 46,3 0.6,1.4 c -1.5,0.7 -2.6,1.4 -3.3,2.2 -0.7,0.7 -1.2,1.5 -1.5,2.4 -0.3,0.9 -0.4,2.2 -0.4,3.9 0,0.6 0,1.3 0,2.2 l 0.5,23.2 c 0,2.5 0.3,4.2 0.8,5 0.4,0.6 0.8,0.8 1.3,0.8 0.6,0 1.5,-0.6 2.8,-1.8 l 0.9,1.1 -5.8,4.9 -1.9,1.6 C 38.4,49.2 37.2,48.2 36.5,46.9 35.8,45.7 35.3,36.7 35.2,34 c -7.6,0.1 -20.2,0 -20.2,0 0,0 -7.4,9.1 -7.4,11.1 0,0.6 0.2,1.1 0.6,1.8 0.5,0.9 0.8,1.4 0.8,1.7 0,0.4 -0.1,0.7 -0.4,1 -0.3,0.3 -0.6,0.4 -1.1,0.4 -0.5,0 -0.9,-0.2 -1.2,-0.6 -0.5,-0.6 -0.7,-1.3 -0.7,-2.2 0,-1 0.3,-2.1 0.8,-3.3 C 8.8,39.9 11.3,36.7 14.1,32.9 11.1,30.7 9,28.5 7.8,26.4 6.6,24.4 6,22.1 6,19.5 c 0,-3 0.8,-5.7 2.3,-8.3 1.5,-2.5 3.8,-4.5 6.9,-6 3.1,-1.5 6.2,-2.2 9.4,-2.2 4.9,0 9.7,1.7 14.3,5.1 1.1,-1.2 2.2,-2.1 3.2,-2.9 1,-0.8 2.4,-1.5 4,-2.3 z M 30.7,10.2 c -2.6,-1.3 -5.2,-1.9 -7.8,-1.9 -2.7,0 -5.3,0.6 -7.8,1.8 -2.4,1.2 -4.2,2.8 -5.4,4.7 -1.2,1.9 -1.8,3.9 -1.8,5.9 0,4.2 2.3,8 6.9,11.3 L 25.2,17.7 c -1.6,-0.8 -2.9,-1.3 -4.2,-1.3 -1.7,0 -3.1,0.8 -4.2,2.4 -0.4,0.7 -1,0.5 -1.1,-0.2 0,-0.6 0.3,-1.5 1,-2.7 0.7,-1.1 1.6,-2.1 2.9,-2.8 1.3,-0.7 2.6,-1.1 4,-1.1 1.4,0 3.1,0.4 4.9,1.1 z m 4,3.2 C 34,12.4 32.8,11.5 32,11 L 18.4,29.4 h 16.7 z\"\n      />\n    </svg>\n  </li>\n{/if}\n\n<style>\n  li {\n    list-style: none;\n    display: flex;\n  }\n\n  svg {\n    margin: 0 0.5em 0 1em;\n    background-color: #35bdb2;\n    cursor: pointer;\n  }\n</style>\n",
    "<script lang=\"ts\">// @ts-check\nimport { t } from \"svelte-i18n\";\nimport NavButton from \"../../shared/NavButton.svelte\";\nimport NavItem from \"../../shared/NavItem.svelte\";\nimport Lock from \"../../shared/Lock.svelte\";\nimport { shields, shieldPaths, shieldTypes } from \"data/shields\";\nimport { shield, changes } from \"data/stores\";\nconst changeShield = (value) => {\n    shield.set(value);\n    localStorage.setItem(\"shield\", value);\n    if (changes.length()) {\n        const coa = JSON.parse($changes[0]);\n        coa.shield = $shield;\n        changes.add(JSON.stringify(coa));\n    }\n};\nconst getShieldsInType = (type) => Object.keys(shields[type]);\n</script>\n\n<div class=\"container\">\n  <div class=\"dropdown level2\">\n    {#each shieldTypes as shieldType}\n      <div class=\"container\">\n        <div class=\"dropdown level3 iconed\">\n          {#each getShieldsInType(shieldType) as shieldName}\n            <NavButton onclick={() => changeShield(shieldName)}>\n              <svg class:selected={shieldName === $shield} width=\"26\" height=\"26\" viewBox=\"0 0 200 210\">\n                <path d={shieldPaths[shieldName]} />\n              </svg>\n              {$t(`shield.${shieldType}.${shieldName}`)}\n            </NavButton>\n          {/each}\n        </div>\n\n        <NavItem>{$t(`shield.types.${shieldType}`)}</NavItem>\n      </div>\n    {/each}\n  </div>\n\n  {#key $shield}\n    <NavItem tip={$t(\"tooltip.shield\")}>\n      <Lock key=\"shield\" />\n      {$t(`menu.shield`)}\n    </NavItem>\n  {/key}\n</div>\n\n<style>\n  svg {\n    position: absolute;\n    fill: none;\n    stroke: #fff;\n    stroke-width: 5px;\n    margin: -0.4em 0 0 -2.2em;\n  }\n\n  svg.selected {\n    fill: #777;\n    stroke: #333;\n  }\n\n  div.iconed {\n    text-indent: 1.8em;\n  }\n</style>\n",
    "<script lang=\"ts\">// @ts-check\nimport { tooltip } from \"scripts/tooltip\";\nexport let icon;\nexport let tip = undefined;\nexport let onclick;\nconst handleClick = (event) => {\n    event.stopPropagation();\n    onclick();\n};\n</script>\n\n<svg on:click={handleClick} data-tooltip={tip} use:tooltip>\n  <use href=\"#{icon}-icon\" />\n</svg>\n\n<style>\n  svg {\n    fill: currentColor;\n    width: 0.8em;\n    height: 0.8em;\n    vertical-align: middle;\n    cursor: pointer;\n  }\n\n  svg:active {\n    transform: translateY(1px);\n  }\n</style>\n",
    "<script lang=\"ts\">// @ts-check\nimport { t } from \"svelte-i18n\";\nimport { tooltip } from \"scripts/tooltip\";\nexport let key;\n$: locked = localStorage.getItem(key);\n$: tip = $t(`tooltip.locked`);\nfunction unlock(event) {\n    event.stopPropagation();\n    localStorage.removeItem(key);\n    locked = \"\";\n}\n</script>\n\n{#if Boolean(locked)}\n  <span on:click={unlock} data-tooltip={tip} use:tooltip>🔖</span>\n{/if}\n\n<style>\n  span {\n    cursor: pointer;\n  }\n</style>\n",
    "<script lang=\"ts\">// @ts-check\nimport { tooltip } from \"scripts/tooltip\";\nimport { iconedNav } from \"data/stores\";\nimport NavLabel from \"./NavLabel.svelte\";\nexport let value = undefined;\nexport let label = undefined;\nexport let tip = undefined;\nexport let gesture = undefined;\nexport let hotkey = undefined;\nexport let disabled = false;\nexport let selected = false;\nexport let flutter = false;\nexport let right = false;\nexport let onclick;\nconst handleClick = (event) => {\n    event.stopPropagation();\n    onclick();\n};\n</script>\n\n<li class:disabled class:selected class:flutter class:right data-tooltip={tip} data-gesture={gesture} data-hotkey={hotkey} on:click={handleClick} use:tooltip>\n  {#if value && $iconedNav}\n    <svg>\n      <use href=\"#{value}-icon\" />\n    </svg>\n  {:else}\n    <NavLabel {label} />\n  {/if}\n  <slot />\n</li>\n\n<style>\n  li {\n    user-select: none;\n    padding: 1em;\n    list-style: none;\n    transition: all 0.1s;\n  }\n\n  @media (max-width: 380px) {\n    li {\n      padding-inline: 0.75em;\n    }\n  }\n\n  li:hover {\n    background-color: #2d2e2f;\n  }\n\n  li:active:not(:last-child) {\n    transform: translateY(1px);\n  }\n\n  li:not(.disabled) {\n    color: #fff;\n    cursor: pointer;\n  }\n\n  li.disabled {\n    pointer-events: none;\n    color: #333;\n  }\n\n  li.selected:before {\n    content: \"\\2713\";\n    display: inline-block;\n    padding: 0 6px 0 0;\n  }\n\n  li.right {\n    margin-left: auto;\n  }\n\n  svg {\n    fill: currentColor;\n    stroke: none;\n    width: 1em;\n    height: 1em;\n    vertical-align: middle;\n  }\n</style>\n",
    "<script lang=\"ts\">// @ts-check\nimport { tooltip } from \"scripts/tooltip\";\nimport { iconedNav } from \"data/stores\";\nimport NavLabel from \"./NavLabel.svelte\";\nexport let value = undefined;\nexport let label = undefined;\nexport let tip = undefined;\nexport let wide = false;\n</script>\n\n<li class:wide data-tooltip={tip} use:tooltip>\n  {#if value && $iconedNav}\n    <svg>\n      <use href=\"#{value}-icon\" />\n    </svg>\n  {:else}\n    <NavLabel {label} />\n  {/if}\n\n  <slot />\n</li>\n\n<style>\n  li {\n    user-select: none;\n    padding: 1em;\n    color: #fff;\n    list-style: none;\n    transition: all 0.1s;\n  }\n\n  @media (max-width: 380px) {\n    li {\n      padding-inline: 0.75em;\n    }\n  }\n\n  li:hover {\n    background-color: #2d2e2f;\n  }\n\n  li.wide {\n    width: 12em;\n  }\n\n  svg {\n    fill: currentColor;\n    stroke: none;\n    width: 1em;\n    height: 1em;\n    vertical-align: middle;\n  }\n</style>\n",
    "<script lang=\"ts\">// @ts-check\nexport let value;\nexport let oninput;\nconst handleInput = (event) => {\n    const value = event.target.value;\n    oninput(value);\n};\n</script>\n\n<input type=\"color\" {value} on:input={handleInput} />\n\n<style>\n  input[type=\"color\"] {\n    position: absolute;\n    padding: 0;\n    margin: -0.3em 0;\n    right: 0.4em;\n    border: 0;\n    width: 3em;\n    cursor: pointer;\n  }\n</style>\n",
    "<script lang=\"ts\">// @ts-check\nexport let value;\nexport let oninput;\nexport let min = 0;\nexport let max = Infinity;\nexport let step = 1;\nconst handleInput = (event) => {\n    const value = event.target.value;\n    oninput(+value);\n};\n</script>\n\n<input type=\"number\" {min} {max} {step} {value} on:input={handleInput} />\n\n<style>\n  input[type=\"number\"] {\n    position: absolute;\n    padding: 2px;\n    margin: -0.25em 0;\n    right: 0.4em;\n    width: 3em;\n    border: 0;\n  }\n</style>\n",
    "<script lang=\"ts\">// @ts-check\nexport let value;\nexport let oninput;\nexport let min = 0;\nexport let max = Infinity;\nexport let step = 1;\nconst handleInput = (event) => {\n    const value = event.target.value;\n    oninput(+value);\n};\n</script>\n\n<input type=\"range\" {min} {max} {step} {value} on:input={handleInput} />\n<input type=\"number\" {min} {max} {step} {value} on:input={handleInput} />\n\n<style>\n  input[type=\"range\"] {\n    padding: 0;\n    width: 72%;\n    margin: 0;\n    height: 0.6em;\n    cursor: pointer;\n  }\n\n  input[type=\"number\"] {\n    position: absolute;\n    padding: 2px;\n    margin: -0.25em 0;\n    right: 0.4em;\n    width: 3em;\n    border: 0;\n  }\n</style>\n"
  ],
  "names": [],
  "mappings": "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"
}