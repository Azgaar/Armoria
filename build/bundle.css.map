{
  "version": 3,
  "file": "bundle.css",
  "sources": [
    "App.svelte",
    "Message.svelte",
    "Editor.svelte",
    "EditorCharge.svelte",
    "EditorControls.svelte",
    "EditorPosition.svelte",
    "EditorShift.svelte",
    "EditorStroke.svelte",
    "Positions.svelte",
    "Switch.svelte",
    "About.svelte",
    "Gallery.svelte",
    "License.svelte",
    "Lock.svelte",
    "Navbar.svelte",
    "Tinctures.svelte",
    "UploadRaster.svelte",
    "UploadVector.svelte"
  ],
  "sourcesContent": [
    "<script>\r\n  import WindowEvents from \"./WindowEvents.svelte\";\r\n  import Navbar from \"./navigation/Navbar.svelte\";\r\n  import About from \"./navigation/About.svelte\";\r\n  import License from \"./navigation/License.svelte\";\r\n  import Viewer from \"./navigation/Viewer.svelte\";\r\n  import Editor from \"./editor/Editor.svelte\";\r\n  import Gallery from \"./navigation/Gallery.svelte\";\r\n  import UploadRaster from \"./navigation/UploadRaster.svelte\";\r\n  import UploadVector from \"./navigation/UploadVector.svelte\";\r\n  import Tinctures from \"./navigation/Tinctures.svelte\";\r\n  import Message from \"./Message.svelte\";\r\n  import {background, size, history, matrices, matrix, state, message, shield} from \"data/stores\";\r\n  import {shields} from \"data/shields\";\r\n  import {rw} from \"scripts/utils\";\r\n\r\n  let n,\r\n    w,\r\n    h,\r\n    gallery = [],\r\n    seed,\r\n    coaSize = 200;\r\n\r\n  checkLoadParameters(); // on load\r\n  $: [n, w, h] = defineGallerySize($size);\r\n  $: handleMatrixChange($matrix, $size);\r\n\r\n  function handleMatrixChange() {\r\n    const l = $history.length;\r\n\r\n    // reroll is clicked\r\n    if (!$matrices[$matrix]) {\r\n      if ($state.edit) {\r\n        // generate new coa\r\n        $matrices[$matrix] = $matrices[$matrix - 1].slice();\r\n        $matrices[$matrix][$state.i] = l;\r\n        seed = undefined; // use once\r\n      } else {\r\n        // reroll gallery\r\n        $matrices[$matrix] = Array.from({length: n}, (_, i) => l + i++);\r\n      }\r\n\r\n      // change shield if it's not locked (manually selected)\r\n      if (!localStorage.getItem(\"shield\")) {\r\n        $shield = rw(shields[rw(shields.types)]);\r\n      }\r\n    }\r\n\r\n    // add additional coas to matrix if size is smaller\r\n    if ($matrices[$matrix].length < n) {\r\n      const m = $matrices[$matrix];\r\n      $matrices[$matrix] = [...Array(n).keys()].map(i => (m[i] !== undefined ? m[i] : l + i));\r\n    }\r\n    gallery = $matrices[$matrix].slice(0, n); // trim gallery if size was bigger\r\n\r\n    // on coa edit or view mode\r\n    if ($state.edit || $state.view) $state.c = $matrices[$matrix][$state.i];\r\n  }\r\n\r\n  function checkLoadParameters() {\r\n    const url = new URL(window.location);\r\n    const viewParam = url.searchParams.get(\"view\") == 1;\r\n    const sizeParam = +url.searchParams.get(\"size\");\r\n    const coaParam = url.searchParams.get(\"coa\");\r\n    const seedParam = url.searchParams.get(\"seed\");\r\n    const from = url.searchParams.get(\"from\");\r\n\r\n    if (!coaParam && !seedParam) return; // no predefined coa, regular flow (generate gallery)\r\n\r\n    if (coaParam) {\r\n      // exact coa to render\r\n      if (!validateJSON(coaParam)) return;\r\n      $history.push(JSON.parse(coaParam));\r\n    } else if (seedParam) {\r\n      // exact seed to use\r\n      seed = isNaN(+seedParam) ? seedParam : +seedParam;\r\n    }\r\n\r\n    if (coaParam || seedParam) {\r\n      if (from === \"FMG\") {\r\n        const text = \"Configure emblem, save it in SVG format and then load back to the Fantasy Map Generator\";\r\n        $message = {type: \"info\", text, timeout: 10000};\r\n      }\r\n      $matrices[0] = [0];\r\n      if (viewParam) {\r\n        if (sizeParam) coaSize = sizeParam;\r\n        $state.view = 1; // open in view only mode\r\n      } else $state.edit = 1; // open in edit mode\r\n    }\r\n  }\r\n\r\n  function validateJSON(text) {\r\n    try {\r\n      JSON.parse(text);\r\n      return true;\r\n    } catch (e) {\r\n      console.error(e);\r\n      $message = {type: \"error\", text: `URL error: ${e.message}`, timeout: 5000};\r\n      return false;\r\n    }\r\n  }\r\n\r\n  // define number and size of coas to display\r\n  function defineGallerySize(desiredSize) {\r\n    const width = window.innerWidth;\r\n    const height = window.innerHeight - 60;\r\n    const numberX = Math.ceil(width / desiredSize);\r\n    const w = Math.floor(width / numberX);\r\n    const numberY = Math.floor(height / w);\r\n    const h = Math.floor(height / numberY);\r\n    return [numberX * numberY, w, h];\r\n  }\r\n</script>\r\n\r\n{#if $state.view}\r\n  <Viewer c={$state.c} {seed} {coaSize} />\r\n{:else}\r\n  <main style=\"background-color: {$background}\">\r\n    <Navbar />\r\n    {#if $state.about}<About />{/if}\r\n    {#if $state.license}<License />{/if}\r\n    {#if $state.raster}<UploadRaster />{/if}\r\n    {#if $state.vector}<UploadVector />{/if}\r\n    {#if $state.tinctures}<Tinctures />{/if}\r\n    {#if $state.edit}<Editor c={$state.c} {seed} />\r\n    {:else}<Gallery {gallery} {w} {h} />{/if}\r\n    {#if $message}<Message />{/if}\r\n  </main>\r\n{/if}\r\n<WindowEvents />\r\n\r\n<style>\r\n  main {\r\n    background-image: url(\"data:image/svg+xml,%3Csvg width='84' height='84' viewBox='0 0 84 84' xmlns='http://www.w3.org/2000/svg'%3E%3Cg fill='none'%3E%3Cg fill='%23222' fill-opacity='.2'%3E%3Cpath d='M84 23c-4.417 0-8-3.584-8-7.998V8h-7.002C64.58 8 61 4.42 61 0H23c0 4.417-3.584 8-7.998 8H8v7.002C8 19.42 4.42 23 0 23v38c4.417 0 8 3.584 8 7.998V76h7.002C19.42 76 23 79.58 23 84h38c0-4.417 3.584-8 7.998-8H76v-7.002C76 64.58 79.58 61 84 61V23zM59.05 83H43V66.95c5.054-.5 9-4.764 9-9.948V52h5.002c5.18 0 9.446-3.947 9.95-9H83v16.05c-5.054.5-9 4.764-9 9.948V74h-5.002c-5.18 0-9.446 3.947-9.95 9zm-34.1 0H41V66.95c-5.053-.502-9-4.768-9-9.948V52h-5.002c-5.184 0-9.447-3.946-9.95-9H1v16.05c5.053.502 9 4.768 9 9.948V74h5.002c5.184 0 9.447 3.946 9.95 9zm0-82H41v16.05c-5.054.5-9 4.764-9 9.948V32h-5.002c-5.18 0-9.446 3.947-9.95 9H1V24.95c5.054-.5 9-4.764 9-9.948V10h5.002c5.18 0 9.446-3.947 9.95-9zm34.1 0H43v16.05c5.053.502 9 4.768 9 9.948V32h5.002c5.184 0 9.447 3.946 9.95 9H83V24.95c-5.053-.502-9-4.768-9-9.948V10h-5.002c-5.184 0-9.447-3.946-9.95-9zM50 50v7.002C50 61.42 46.42 65 42 65c-4.417 0-8-3.584-8-7.998V50h-7.002C22.58 50 19 46.42 19 42c0-4.417 3.584-8 7.998-8H34v-7.002C34 22.58 37.58 19 42 19c4.417 0 8 3.584 8 7.998V34h7.002C61.42 34 65 37.58 65 42c0 4.417-3.584 8-7.998 8H50z'/%3E%3C/g%3E%3C/g%3E%3C/svg%3E\");\r\n  }\r\n</style>\r\n",
    "<script>\r\n  import {onMount} from \"svelte\";\r\n  import {fly, fade} from \"svelte/transition\";\r\n  import {message} from \"data/stores\";\r\n\r\n  const {text, type = \"info\", timeout = 4000} = $message;\r\n\r\n  onMount(async () => {\r\n    const text = $message.text;\r\n    setTimeout(() => {\r\n      if ($message?.text === text) $message = null;\r\n    }, timeout);\r\n  });\r\n\r\n  function hideMessage() {\r\n    $message = null;\r\n  }\r\n</script>\r\n\r\n<div class={type} in:fly={{y: 200, duration: 500}} out:fade={{duration: 300}} on:click={hideMessage}>\r\n  {text}\r\n</div>\r\n\r\n<style>\r\n  div {\r\n    position: absolute;\r\n    bottom: 0%;\r\n    left: 50%;\r\n    line-height: 1.4em;\r\n    padding: 0.8em;\r\n    transform: translate(-50%, -50%);\r\n    z-index: 99;\r\n    max-width: 80%;\r\n    width: max-content;\r\n    user-select: none;\r\n    background-color: #00000095;\r\n  }\r\n\r\n  .error {\r\n    color: #e90000;\r\n  }\r\n\r\n  .warn {\r\n    color: #dd7200;\r\n  }\r\n\r\n  .info {\r\n    color: #fff;\r\n  }\r\n\r\n  .tip {\r\n    color: #fff;\r\n    border-radius: 10px;\r\n  }\r\n\r\n  .success {\r\n    color: #0fc63a;\r\n  }\r\n</style>\r\n",
    "<script>\r\n  import COA from \"./../object/COA.svelte\";\r\n  import EditorType from \"./EditorType.svelte\";\r\n  import EditorSize from \"./EditorSize.svelte\";\r\n  import EditorTincture from \"./EditorTincture.svelte\";\r\n  import EditorPattern from \"./EditorPattern.svelte\";\r\n  import EditorCharge from \"./EditorCharge.svelte\";\r\n  import EditorDivision from \"./EditorDivision.svelte\";\r\n  import EditorDivided from \"./EditorDivided.svelte\";\r\n  import EditorLine from \"./EditorLine.svelte\";\r\n  import EditorOrdinary from \"./EditorOrdinary.svelte\";\r\n  import EditorStroke from \"./EditorStroke.svelte\";\r\n  import EditorPosition from \"./EditorPosition.svelte\";\r\n  import EditorShift from \"./EditorShift.svelte\";\r\n  import EditorControls from \"./EditorControls.svelte\";\r\n  import EditorAbove from \"./EditorAbove.svelte\";\r\n  import {slide, fly} from \"svelte/transition\";\r\n  import {history, changes, tinctures, state, grid, showGrid, message, shield} from \"data//stores\";\r\n  import {charges, divisions, ordinaries} from \"data/dataModel\";\r\n  import {generate} from \"scripts/generator\";\r\n  import {rw, ra} from \"scripts/utils\";\r\n  export let c, seed;\r\n  let menu = {},\r\n    section = {field: 0, division: 0, ordinary: [], charge: []};\r\n\r\n  const ratio = window.innerHeight / window.innerWidth;\r\n  const coaSize = window.innerWidth > window.innerHeight ? Math.round(window.innerHeight * 0.9) : \"100%\";\r\n  let width = window.innerWidth < 600 || ratio > 1 ? 100 : Math.round((1.06 - ratio) * 100);\r\n  if ((width / 100) * window.innerWidth < 300) width = 100;\r\n  let itemSize = Math.floor((width / 1000) * window.innerWidth - 5); // 10 items in row\r\n  if (window.innerWidth < 600) itemSize *= 2; // 5 items in row for narrow screens\r\n\r\n  $state.transform = null;\r\n  $state.positions = null;\r\n\r\n  let coa = $history[c] || generate(seed || undefined); // on load\r\n  $: restore($changes); // on undo/redo\r\n  $: reroll(c); // on reroll\r\n  $: update(menu); // on menu update\r\n  $: edit(coa); // on edit\r\n  $: localStorage.setItem(\"grid\", $grid); // on grid change\r\n  $: localStorage.setItem(\"showGrid\", $showGrid); // on grid change\r\n\r\n  function reroll(c) {\r\n    coa = $history[c] || generate(seed || undefined);\r\n    if (!$history[c]) $history.push(coa);\r\n    changes.reset();\r\n    defineMenuState();\r\n  }\r\n\r\n  function edit(coa) {\r\n    if (!coa.shield) coa.shield = $shield;\r\n    changes.add(JSON.stringify(coa));\r\n  }\r\n\r\n  // get coa from menu on menu change\r\n  function update() {\r\n    // remove see reference as it would be confusing\r\n    delete coa.seed;\r\n\r\n    // field attributes changed\r\n    if (menu.field.type === \"tincture\") coa.t1 = menu.field.t1;\r\n    else {\r\n      const type = menu.field.type === \"semy\" ? \"semy_of_\" + menu.field.charge : menu.field.pattern;\r\n      const attibutes = [type, menu.field.t1, menu.field.t2];\r\n      if (menu.field.size !== \"standard\") attibutes.push(menu.field.size);\r\n      coa.t1 = attibutes.join(\"-\");\r\n    }\r\n\r\n    // division attributes changed\r\n    if (menu.division.division && menu.division.division !== \"no\") {\r\n      coa.division = {division: menu.division.division};\r\n      if (divisions[menu.division.division]) coa.division.line = menu.division.line;\r\n      if (menu.division.type === \"tincture\") coa.division.t = menu.division.t1;\r\n      else {\r\n        const attr0 = menu.division.type === \"semy\" ? \"semy_of_\" + menu.division.charge : menu.division.pattern;\r\n        const attibutes = [attr0, menu.division.t1, menu.division.t2];\r\n        if (menu.division.size !== \"standard\") attibutes.push(menu.division.size);\r\n        coa.division.t = attibutes.join(\"-\");\r\n      }\r\n    } else delete coa.division;\r\n\r\n    // ordinary attributes changed\r\n    if (menu.ordinaries.length) {\r\n      coa.ordinaries = menu.ordinaries.map(o => {\r\n        const item = {ordinary: o.ordinary, t: o.t};\r\n        if (ordinaries.lined[o.ordinary]) item.line = o.line;\r\n        if (coa.division && o.divided) item.divided = o.divided;\r\n        if (o.showStroke) item.stroke = o.stroke;\r\n        if (o.showStroke && o.strokeWidth !== 1) item.strokeWidth = o.strokeWidth;\r\n        if (o.size && o.size !== 1) item.size = o.size;\r\n        if (o.x || o.y) {\r\n          item.x = o.x;\r\n          item.y = o.y;\r\n        }\r\n        if (o.angle) item.angle = o.angle;\r\n        if (o.above) item.above = 1;\r\n        return item;\r\n      });\r\n    } else delete coa.ordinaries;\r\n\r\n    // charges attributes changed\r\n    if (menu.charges.length) {\r\n      coa.charges = menu.charges.map(c => {\r\n        const item = {charge: c.charge, t: c.t, p: c.p, size: c.size};\r\n        if (!c.showStroke) item.stroke = \"none\";\r\n        if (c.stroke !== \"#000000\") item.stroke = c.stroke;\r\n        if (c.divided) item.divided = c.divided;\r\n        if (c.sinister) item.sinister = 1;\r\n        if (c.reversed) item.reversed = 1;\r\n        if (c.x || c.y) {\r\n          item.x = c.x;\r\n          item.y = c.y;\r\n        }\r\n        if (c.angle) item.angle = c.angle;\r\n        return item;\r\n      });\r\n    } else delete coa.charges;\r\n  }\r\n\r\n  function restore() {\r\n    if (!changes.length()) return;\r\n    coa = JSON.parse($changes[0]);\r\n    defineMenuState();\r\n  }\r\n\r\n  // define initial menu state\r\n  function defineMenuState() {\r\n    // Shield\r\n    if (coa.shield) $shield = coa.shield;\r\n\r\n    // Field\r\n    menu.field = getField();\r\n    function getField() {\r\n      const type = isSemy(coa.t1) ? \"semy\" : isPattern(coa.t1) ? \"pattern\" : \"tincture\";\r\n      let t1,\r\n        t2,\r\n        pattern = \"vair\",\r\n        charge = \"lozenge\",\r\n        semy = \"conventional\",\r\n        size = \"standard\";\r\n\r\n      const field = coa.t1.split(\"-\"); // parsed field tincture\r\n\r\n      if (type === \"tincture\") {\r\n        t1 = coa.t1;\r\n        t2 = selectSecondTincture(coa.t1);\r\n      } else {\r\n        t1 = field[1];\r\n        t2 = field[2];\r\n        size = field[3] || \"standard\";\r\n      }\r\n\r\n      if (type === \"pattern\") pattern = field[0];\r\n      else if (type === \"semy\") {\r\n        charge = getSemyCharge(field);\r\n        semy = getSemyType(field);\r\n      }\r\n\r\n      return {type, t1, t2, pattern, charge, semy, size};\r\n    }\r\n\r\n    // Division\r\n    menu.division = getDivision();\r\n    function getDivision() {\r\n      let type = \"tincture\",\r\n        division = \"no\",\r\n        line = \"straight\",\r\n        t1,\r\n        t2,\r\n        pattern = \"vair\",\r\n        charge = \"lozenge\",\r\n        semy = \"conventional\",\r\n        size = \"standard\";\r\n\r\n      if (coa.division) {\r\n        const tSplit = coa.division.t.split(\"-\"); // parsed division tincture\r\n        type = isSemy(coa.division.t) ? \"semy\" : isPattern(coa.division.t) ? \"pattern\" : \"tincture\";\r\n\r\n        division = coa.division.division;\r\n        line = coa.division.line || \"straight\";\r\n        t1 = type === \"tincture\" ? coa.division.t : tSplit[1];\r\n        t2 = type === \"tincture\" ? selectSecondTincture(t1) : tSplit[2];\r\n        if (type === \"pattern\") pattern = tSplit[0];\r\n        if (type === \"semy\") {\r\n          charge = getSemyCharge(tSplit);\r\n          semy = getSemyType(tSplit);\r\n        }\r\n        size = tSplit[3] || \"standard\";\r\n      } else {\r\n        t1 = selectSecondTincture(menu.field.t1);\r\n        t2 = selectSecondTincture(t1);\r\n      }\r\n\r\n      return {division, line, type, t1, t2, pattern, charge, semy, size};\r\n    }\r\n\r\n    // Ordinaries\r\n    menu.ordinaries = getOrdinaries();\r\n    function getOrdinaries() {\r\n      if (!coa.ordinaries) return [];\r\n\r\n      const ordinaries = coa.ordinaries.map(o => {\r\n        const {ordinary, t} = o;\r\n        const line = o.line || \"straight\";\r\n        const showStroke = Boolean(o.stroke);\r\n        const stroke = o.stroke || \"#000000\";\r\n        const strokeWidth = o.strokeWidth || 1;\r\n        const size = o.size || 1;\r\n        const x = o.x || 0;\r\n        const y = o.y || 0;\r\n        const angle = o.angle || 0;\r\n        const divided = o.divided || \"\";\r\n        const above = o.above || 0;\r\n        if (angle) $state.transform = `rotate(${angle})`;\r\n        return {ordinary, t, line, showStroke, stroke, strokeWidth, size, x, y, angle, divided, above};\r\n      });\r\n\r\n      return ordinaries;\r\n    }\r\n\r\n    // Charges\r\n    menu.charges = getCharges();\r\n    function getCharges() {\r\n      if (!coa.charges) return [];\r\n      const charges = coa.charges.map(c => {\r\n        const {charge, t, p, size} = c;\r\n        const type = getChargeCategory(charge);\r\n        const showStroke = c.stroke !== \"none\";\r\n        const stroke = c.stroke || \"#000000\";\r\n        const divided = c.divided || \"\";\r\n        const sinister = c.sinister || false;\r\n        const reversed = c.reversed || false;\r\n        const x = c.x || 0;\r\n        const y = c.y || 0;\r\n        const angle = c.angle || 0;\r\n        if (angle) $state.transform = `rotate(${angle})`;\r\n        return {charge, type, showStroke, stroke, divided, t, p, size, sinister, reversed, x, y, angle};\r\n      });\r\n\r\n      return charges;\r\n    }\r\n\r\n    function isPattern(string) {\r\n      return string?.includes(\"-\");\r\n    }\r\n\r\n    function isSemy(string) {\r\n      return string?.slice(0, 4) === \"semy\";\r\n    }\r\n\r\n    function getSemyCharge(array) {\r\n      return array[0].split(\"_of_\")[1];\r\n    }\r\n\r\n    function getChargeCategory(charge) {\r\n      const type = Object.keys(charges.types).find(type => charges[type][charge] !== undefined);\r\n      return type || charge;\r\n    }\r\n\r\n    function getSemyType(array) {\r\n      const charge = getSemyCharge(array);\r\n      return getChargeCategory(charge);\r\n    }\r\n\r\n    function selectSecondTincture(t1) {\r\n      const metal = t1 === \"argent\" || t1 === \"or\";\r\n      return rw(metal ? $tinctures.colours : $tinctures.metals);\r\n    }\r\n\r\n    return menu;\r\n  }\r\n\r\n  function addOrdinary() {\r\n    const ordinariesList = Object.keys(ordinaries.lined).concat(Object.keys(ordinaries.straight));\r\n    const ordinary = ra(ordinariesList);\r\n    const t = rw($tinctures[rw($tinctures.charge)]);\r\n    const o = {ordinary, t, showStroke: false, stroke: \"#000000\", strokeWidth: 1, line: \"straight\", size: 1, x: 0, y: 0, angle: 0, divided: \"\"};\r\n    menu.ordinaries = [...menu.ordinaries, o];\r\n  }\r\n\r\n  function addCharge() {\r\n    const type = rw(charges.single);\r\n    const charge = rw(charges[type]);\r\n    const t = rw($tinctures[rw($tinctures.charge)]);\r\n    const с = {charge, t, p: \"e\", showStroke: true, stroke: \"#000000\", type, size: 1.5, sinister: false, reversed: false, x: 0, y: 0, angle: 0, divided: \"\"};\r\n    menu.charges = [...menu.charges, с];\r\n  }\r\n\r\n  if (!isTouchDevice() && (coa.ordinaries || coa.charges)) {\r\n    if (!$message)\r\n      $message = {type: \"info\", text: \"Drag to move, hold SHIFT and drag vertically to resize, hold CONTROL and drag horizontally to rotate\", timeout: 4000};\r\n  }\r\n\r\n  function isTouchDevice() {\r\n    return \"ontouchstart\" in window;\r\n  }\r\n\r\n  function isRaster(charge) {\r\n    const el = document.getElementById(charge);\r\n    return el ? el.tagName === \"image\" : false;\r\n  }\r\n\r\n  function cap(string = \"no\") {\r\n    const split = string.split(/(?=[A-Z])/).join(\" \");\r\n    return split.charAt(0).toUpperCase() + split.slice(1);\r\n  }\r\n</script>\r\n\r\n<div id=\"editor\">\r\n  {#key coa}\r\n    <COA {coa} i=\"Edit\" w={coaSize} h={coaSize} />\r\n  {/key}\r\n  <div id=\"menu\" in:fly={{x: 1000, duration: 1000}} style=\"width:{width}%\">\r\n    <!-- Field -->\r\n    <div class=\"section\" class:expanded={section.field} on:click={() => (section.field = !section.field)}>Field</div>\r\n    {#if section.field}\r\n      <div class=\"panel\" transition:slide>\r\n        <div class=\"subsection\">\r\n          <EditorType bind:type={menu.field.type} />\r\n          {#if menu.field.type !== \"tincture\"}\r\n            <EditorSize bind:size={menu.field.size} />\r\n          {/if}\r\n        </div>\r\n\r\n        <div class=\"subsection\">\r\n          <EditorTincture bind:t1={menu.field.t1} {itemSize} />\r\n        </div>\r\n\r\n        {#if menu.field.type !== \"tincture\"}\r\n          <div class=\"subsection\">\r\n            <EditorTincture bind:t1={menu.field.t2} {itemSize} />\r\n          </div>\r\n        {/if}\r\n\r\n        {#if menu.field.type === \"pattern\"}\r\n          <div class=\"subsection\">\r\n            <EditorPattern bind:pattern={menu.field.pattern} t1={menu.field.t1} t2={menu.field.t2} size={menu.field.size} {itemSize} />\r\n          </div>\r\n        {/if}\r\n\r\n        {#if menu.field.type === \"semy\"}\r\n          <div class=\"subsection\">\r\n            <EditorCharge\r\n              type=\"semy\"\r\n              bind:charge={menu.field.charge}\r\n              bind:category={menu.field.semy}\r\n              t1={menu.field.t1}\r\n              t2={menu.field.t2}\r\n              size={menu.field.size}\r\n              {itemSize}\r\n            />\r\n          </div>\r\n        {/if}\r\n      </div>\r\n    {/if}\r\n\r\n    <!-- Division -->\r\n    <div class=\"section\" class:expanded={section.division} on:click={() => (section.division = !section.division)}>Division: {cap(menu.division.division)}</div>\r\n    {#if section.division}\r\n      <div class=\"panel\" transition:slide>\r\n        <div class=\"subsection\">\r\n          <EditorDivision\r\n            bind:division={menu.division.division}\r\n            t1={coa.t1}\r\n            t={coa.division ? coa.division.t : menu.division.t1}\r\n            line={menu.division.line}\r\n            {itemSize}\r\n          />\r\n        </div>\r\n\r\n        {#if divisions[coa.division?.division]}\r\n          <div class=\"subsection\">\r\n            <EditorLine\r\n              bind:line={menu.division.line}\r\n              division={menu.division.division}\r\n              t1={coa.t1}\r\n              t={coa.division ? coa.division.t : menu.division.t1}\r\n              {itemSize}\r\n            />\r\n          </div>\r\n        {/if}\r\n\r\n        {#if coa.division}\r\n          <div class=\"subsection\">\r\n            <EditorType bind:type={menu.division.type} />\r\n            {#if menu.division.type !== \"tincture\"}\r\n              <EditorSize bind:size={menu.division.size} />\r\n            {/if}\r\n          </div>\r\n\r\n          <div class=\"subsection\">\r\n            <EditorTincture bind:t1={menu.division.t1} {itemSize} />\r\n          </div>\r\n\r\n          {#if menu.division.type !== \"tincture\"}\r\n            <div class=\"subsection\">\r\n              <EditorTincture bind:t1={menu.division.t2} {itemSize} />\r\n            </div>\r\n          {/if}\r\n\r\n          {#if menu.division.type === \"pattern\"}\r\n            <div class=\"subsection\">\r\n              <EditorPattern bind:pattern={menu.division.pattern} t1={menu.division.t1} t2={menu.division.t2} size={menu.division.size} {itemSize} />\r\n            </div>\r\n          {/if}\r\n\r\n          {#if menu.division.type === \"semy\"}\r\n            <div class=\"subsection\">\r\n              <EditorCharge\r\n                type=\"semy\"\r\n                bind:charge={menu.division.charge}\r\n                bind:category={menu.division.semy}\r\n                t1={menu.division.t1}\r\n                t2={menu.division.t2}\r\n                size={menu.division.size}\r\n                {itemSize}\r\n              />\r\n            </div>\r\n          {/if}\r\n        {/if}\r\n      </div>\r\n    {/if}\r\n\r\n    <!-- Ordinaries -->\r\n    {#each menu.ordinaries as o, i}\r\n      <div class=\"section\" transition:slide class:expanded={section.ordinary[i]} on:click={() => (section.ordinary[i] = !section.ordinary[i])}>\r\n        Ordinary{menu.ordinaries.length > 1 ? \" \" + (i + 1) : \"\"}: {cap(o.ordinary)}\r\n        {#if o.above}\r\n          <i>[above charges]</i>\r\n        {/if}\r\n        <EditorControls bind:els={menu.ordinaries} el={o} {i} />\r\n      </div>\r\n      {#if section.ordinary[i]}\r\n        <div class=\"panel\" transition:slide>\r\n          {#if coa.division}\r\n            <div class=\"subsection\">\r\n              <EditorDivided bind:divided={o.divided} />\r\n            </div>\r\n          {/if}\r\n\r\n          <div class=\"subsection\">\r\n            <EditorOrdinary bind:ordinary={o.ordinary} t1={coa.t1} line={o.line} t={o.t} {itemSize} />\r\n          </div>\r\n\r\n          {#if ordinaries.lined[o.ordinary]}\r\n            <div class=\"subsection\">\r\n              <EditorLine bind:line={o.line} ordinary={o.ordinary} t1={coa.t1} t={o.t} {itemSize} />\r\n            </div>\r\n          {/if}\r\n\r\n          {#if o.divided !== \"counter\"}\r\n            <div class=\"subsection\">\r\n              <EditorTincture bind:t1={o.t} {itemSize} />\r\n            </div>\r\n          {/if}\r\n\r\n          <div class=\"subsection\">\r\n            {#if ![\"bordure\", \"orle\"].includes(o.ordinary)}\r\n              <EditorStroke bind:element={o} />\r\n            {/if}\r\n            <EditorAbove bind:above={o.above} />\r\n          </div>\r\n\r\n          <div class=\"subsection\">\r\n            <EditorShift bind:e={o} />\r\n          </div>\r\n        </div>\r\n      {/if}\r\n    {/each}\r\n\r\n    <!-- Charges -->\r\n    {#each menu.charges as charge, i}\r\n      <div class=\"section\" transition:slide class:expanded={section.charge[i]} on:click={() => (section.charge[i] = !section.charge[i])}>\r\n        Charge{menu.charges.length > 1 ? \" \" + (i + 1) : \"\"}: {cap(charge.charge)}\r\n        <EditorControls bind:els={menu.charges} el={charge} {i} />\r\n      </div>\r\n      {#if section.charge[i]}\r\n        <div class=\"panel\" transition:slide>\r\n          <div class=\"subsection\">\r\n            {#if coa.division}\r\n              <EditorDivided bind:divided={charge.divided} raster={isRaster(charge.charge)} />\r\n            {/if}\r\n            <EditorCharge\r\n              type=\"charge\"\r\n              bind:charge={charge.charge}\r\n              bind:category={charge.type}\r\n              t1={coa.t1}\r\n              t2={charge.t}\r\n              sinister={charge.sinister}\r\n              reversed={charge.reversed}\r\n              division={coa.division}\r\n              {itemSize}\r\n            />\r\n          </div>\r\n\r\n          {#if !isRaster(charge.charge) && charge.divided !== \"counter\"}\r\n            <div class=\"subsection\">\r\n              <EditorTincture bind:t1={charge.t} {itemSize} />\r\n            </div>\r\n          {/if}\r\n\r\n          <div class=\"subsection\">\r\n            <EditorStroke bind:element={charge} />\r\n          </div>\r\n\r\n          <div class=\"subsection\">\r\n            <EditorPosition bind:charge />\r\n          </div>\r\n\r\n          <div class=\"subsection\">\r\n            <EditorShift bind:e={charge} />\r\n          </div>\r\n        </div>\r\n      {/if}\r\n    {/each}\r\n\r\n    <div class=\"buttonLine\" on:click={addOrdinary}>Add Ordinary</div>\r\n    <div class=\"buttonLine\" on:click={addCharge}>Add Charge</div>\r\n  </div>\r\n</div>\r\n\r\n<style>\r\n  #editor {\r\n    width: 100%;\r\n    height: calc(100% - 45px);\r\n    display: flex;\r\n    align-items: center;\r\n    justify-content: center;\r\n    user-select: none;\r\n    flex-direction: row;\r\n  }\r\n\r\n  #menu {\r\n    overflow-x: hidden;\r\n    overflow-y: auto;\r\n    scrollbar-width: thin;\r\n    transition: 0.5s;\r\n    background-color: #11111180;\r\n    height: 100%;\r\n  }\r\n\r\n  @media only screen and (orientation: portrait) {\r\n    #editor {\r\n      flex-direction: column;\r\n    }\r\n  }\r\n\r\n  #menu::-webkit-scrollbar {\r\n    width: 6px;\r\n    background-color: #cccccc80;\r\n  }\r\n\r\n  #menu::-webkit-scrollbar-thumb {\r\n    background-color: #111;\r\n  }\r\n\r\n  .section {\r\n    padding: 1em 1.14em;\r\n    color: #fff;\r\n    background-color: #00000060;\r\n    cursor: pointer;\r\n    transition: background-color 0.1s ease;\r\n    overflow-x: hidden;\r\n  }\r\n\r\n  .section:hover {\r\n    background-color: #00000080;\r\n  }\r\n\r\n  .section:after {\r\n    content: \"\\276F\";\r\n    transition: 0.2s ease-out;\r\n    margin-top: -0.1em;\r\n    float: right;\r\n  }\r\n\r\n  .expanded:after {\r\n    transform: rotate(90deg);\r\n  }\r\n\r\n  :global(.section > span) {\r\n    transition: 1s ease-out;\r\n    opacity: 0;\r\n    margin-left: 0.6em;\r\n  }\r\n\r\n  :global(.section:hover > span) {\r\n    opacity: 1;\r\n  }\r\n\r\n  .section > i {\r\n    font-size: smaller;\r\n  }\r\n\r\n  .panel {\r\n    min-width: 100%;\r\n    max-width: max-content;\r\n    background-color: #13131320;\r\n    overflow: hidden;\r\n  }\r\n\r\n  .subsection {\r\n    color: #fff;\r\n    padding: 0.5em 1em;\r\n  }\r\n\r\n  .buttonLine {\r\n    padding: 1em 1.14em;\r\n    color: #fff;\r\n    background-color: #00000040;\r\n    cursor: pointer;\r\n    transition: background-color 0.1s ease;\r\n  }\r\n\r\n  .buttonLine:hover {\r\n    background-color: #00000080;\r\n  }\r\n\r\n  :global(.item) {\r\n    display: inline-block;\r\n    cursor: pointer;\r\n    transition: background-color 0.2s ease;\r\n  }\r\n\r\n  :global(.item:hover) {\r\n    background-color: #ffffff10;\r\n  }\r\n\r\n  :global(.item:active) {\r\n    transform: translateY(1px);\r\n  }\r\n\r\n  :global(.item.selected) {\r\n    background-color: #ffffff15;\r\n  }\r\n</style>\r\n",
    "<script>\r\n  import EditorItem from \"./EditorItem.svelte\";\r\n  import {charges} from \"data/dataModel\";\r\n  export let charge,\r\n    type,\r\n    category,\r\n    t1,\r\n    t2,\r\n    size = null,\r\n    sinister = null,\r\n    reversed = null,\r\n    division = false,\r\n    itemSize;\r\n  let coas = [],\r\n    query,\r\n    queryOld;\r\n\r\n  const categories = Object.keys(charges.types);\r\n  const allCharges = categories.map(category => Object.keys(charges[category])).flat();\r\n  const cap = string => string.charAt(0).toUpperCase() + string.slice(1);\r\n\r\n  $: update(category, t1, t2, size, sinister, reversed);\r\n  $: showResults(query);\r\n\r\n  function update() {\r\n    const chargeList = Object.keys(charges[category]);\r\n    coas = chargeList.map(c => new Object({c, t1: getTincture(c), charges: getCharge(c)}));\r\n  }\r\n\r\n  function showResults(query) {\r\n    if (!query && query !== queryOld) update();\r\n    queryOld = query;\r\n    if (!query) return;\r\n\r\n    const regEx = new RegExp(query.replaceAll(\" \", \"\"), \"i\");\r\n    const results = allCharges.filter(c => regEx.test(c));\r\n    coas = results.map(c => new Object({c, t1: getTincture(c), charges: getCharge(c)}));\r\n  }\r\n\r\n  function getTincture(c) {\r\n    if (type === \"semy\") return `semy_of_${c}-${t1}-${t2}-${size}`;\r\n    return t1;\r\n  }\r\n\r\n  function getCharge(c) {\r\n    if (type === \"semy\") return [];\r\n    return [{charge: c, t: t2, p: \"e\", size: 1.5, sinister, reversed}];\r\n  }\r\n\r\n  function getTip(c) {\r\n    if (type === \"semy\") return `Semy of ${c}`;\r\n    return `Charge: ${c}`;\r\n  }\r\n</script>\r\n\r\n{#if type === \"semy\"}\r\n  <span>Charge:</span>\r\n{:else}\r\n  <span class:indented={division}>Category:</span>\r\n{/if}\r\n<select bind:value={category} class:inactive={query} on:input={() => (query = \"\")}>\r\n  {#each categories as type}\r\n    <option value={type}>{cap(type)}</option>\r\n  {/each}\r\n</select>\r\n\r\n<span class:indented={true}>Search:</span>\r\n<input bind:value={query} class:inactive={!query} />\r\n\r\n<div>\r\n  {#each coas as coa (coa)}\r\n    <div class=\"item\" class:selected={charge === coa.c} on:click={() => (charge = coa.c)}>\r\n      <EditorItem {coa} tip={getTip(coa.c)} {itemSize} />\r\n    </div>\r\n  {/each}\r\n</div>\r\n\r\n<style>\r\n  input {\r\n    width: 10em;\r\n  }\r\n\r\n  .inactive {\r\n    background-color: #ddd;\r\n  }\r\n\r\n  .indented {\r\n    margin-left: 1em;\r\n  }\r\n</style>\r\n",
    "<script lang=\"ts\">import { tooltip } from \"scripts/tooltip\";\r\nexport let els, el, i;\r\nconst remove = (event) => {\r\n    event.stopPropagation();\r\n    els = els.filter((e, n) => n !== i);\r\n};\r\nconst clone = (event) => {\r\n    event.stopPropagation();\r\n    els = [...els, JSON.parse(JSON.stringify(el))];\r\n};\r\nconst forward = (event) => {\r\n    event.stopPropagation();\r\n    [els[i], els[i + 1]] = [els[i + 1], els[i]];\r\n};\r\nconst backward = (event) => {\r\n    event.stopPropagation();\r\n    [els[i], els[i - 1]] = [els[i - 1], els[i]];\r\n};\r\n</script>\r\n\r\n<span>\r\n  <svg on:click={clone} data-tooltip=\"Clone\" use:tooltip>\r\n    <use href=\"#clone-icon\" />\r\n  </svg>\r\n  {#if els.length > 1}\r\n    {#if i}\r\n      <svg on:click={backward} data-tooltip=\"Send backward\" use:tooltip>\r\n        <use href=\"#up-icon\" />\r\n      </svg>\r\n    {/if}\r\n    {#if i + 1 < els.length}\r\n      <svg on:click={forward} data-tooltip=\"Bring forward\" use:tooltip>\r\n        <use href=\"#down-icon\" />\r\n      </svg>\r\n    {/if}\r\n  {/if}\r\n  <svg on:click={remove} data-tooltip=\"Remove\" use:tooltip>\r\n    <use href=\"#remove-icon\" />\r\n  </svg>\r\n</span>\r\n\r\n<style>\r\n  svg {\r\n    width: 0.8em;\r\n    height: 0.8em;\r\n    fill: #fff;\r\n  }\r\n\r\n  svg:active {\r\n    transform: translateY(1px);\r\n  }\r\n</style>\r\n",
    "<script>\r\n  import Switch from \"./Switch.svelte\";\r\n  import {state} from \"data/stores\";\r\n  import {positionsSelect} from \"data/dataModel\";\r\n  import {getSize} from \"scripts/generator\";\r\n  import {tooltip} from \"scripts/tooltip\";\r\n  export let charge;\r\n\r\n  function showPositions() {\r\n    $state.transform = `rotate(${charge.angle || 0}) translate(${charge.x || 0}, ${charge.y || 0})`;\r\n    $state.positions = charge.p;\r\n  }\r\n\r\n  function hidePositions() {\r\n    $state.positions = 0;\r\n  }\r\n\r\n  function changePosition() {\r\n    showPositions();\r\n    charge.size = getSize(charge.p);\r\n  }\r\n</script>\r\n\r\n<span data-tooltip=\"Points on shield to place a charge\" use:tooltip>\r\n  Positions:\r\n  <input bind:value={charge.p} on:input={showPositions} on:focus={showPositions} on:blur={hidePositions} />\r\n  <select bind:value={charge.p} on:change={changePosition} on:focus={showPositions} on:blur={hidePositions}>\r\n    {#each positionsSelect as position}\r\n      <option value={position}>{position}</option>\r\n    {/each}\r\n  </select>\r\n</span>\r\n\r\n<span data-tooltip=\"Turn charge to the left\" use:tooltip>\r\n  <span style=\"margin-left: 1em\">Sinister:</span>\r\n  <Switch bind:checked={charge.sinister} />\r\n</span>\r\n\r\n<span data-tooltip=\"Show charge upside down\" use:tooltip>\r\n  <span style=\"margin-left: 1em\">Reversed:</span>\r\n  <Switch bind:checked={charge.reversed} />\r\n</span>\r\n\r\n<style>\r\n  span > span {\r\n    margin-left: 1em;\r\n  }\r\n\r\n  input {\r\n    width: 8.6em;\r\n  }\r\n\r\n  select {\r\n    width: 1.3em;\r\n    margin-left: -1.6em;\r\n    border: 0;\r\n  }\r\n</style>\r\n",
    "<script>\r\n  import Switch from \"./Switch.svelte\";\r\n  import {grid, showGrid, state} from \"data/stores\";\r\n  import {tooltip} from \"scripts/tooltip\";\r\n  export let e;\r\n\r\n  function updateGrid() {\r\n    $state.transform = `rotate(${e.angle || 0})`;\r\n  }\r\n</script>\r\n\r\n<span data-tooltip=\"Element size in percents\" use:tooltip>\r\n  Size:\r\n  <input\r\n    type=\"number\"\r\n    min=\"1\"\r\n    max=\"500\"\r\n    step=\"1\"\r\n    value={(e.size * 100) | 0}\r\n    on:input={function () {\r\n      e.size = this.value / 100;\r\n    }}\r\n  />\r\n</span>\r\n\r\n<span data-tooltip=\"Element rotation angle in degrees\" use:tooltip>\r\n  <span>Rotation:</span>\r\n  <input type=\"number\" min=\"-180\" max=\"180\" bind:value={e.angle} on:change={updateGrid} />\r\n</span>\r\n\r\n<span data-tooltip=\"Element shift in pixels\" use:tooltip>\r\n  <span>Shift:</span>\r\n  <input type=\"number\" min=\"-100\" max=\"100\" step={$grid} bind:value={e.x} />\r\n  <input type=\"number\" min=\"-100\" max=\"100\" step={$grid} bind:value={e.y} />\r\n</span>\r\n\r\n<span data-tooltip=\"Define grid size, angle and position shift step (in pixels and degrees)\" use:tooltip>\r\n  <span>Step:</span>\r\n  <input type=\"number\" min=\"1\" max=\"50\" bind:value={$grid} />\r\n  <Switch bind:checked={$showGrid} />\r\n</span>\r\n\r\n<style>\r\n  span > span {\r\n    margin-left: 1em;\r\n  }\r\n\r\n  input[type=\"number\"] {\r\n    width: 4em;\r\n  }\r\n</style>\r\n",
    "<script>\r\n  import Switch from \"./Switch.svelte\";\r\n  import {tooltip} from \"scripts/tooltip\";\r\n  export let element;\r\n</script>\r\n\r\n<span data-tooltip=\"Element stroke. Check to render and select a color\" use:tooltip>\r\n  <span>Stroke:</span>\r\n  <Switch bind:checked={element.showStroke} />\r\n  {#if element.showStroke}\r\n    <span style=\"margin-left: 1em\">Color:</span>\r\n    <input type=\"color\" bind:value={element.stroke} />\r\n\r\n    {#if element.ordinary}\r\n      <span style=\"margin-left: 1em\">Width:</span>\r\n      <input type=\"number\" min=\".1\" max=\"5\" step=\".1\" bind:value={element.strokeWidth} />\r\n    {/if}\r\n  {/if}\r\n</span>\r\n\r\n<style>\r\n  input[type=\"color\"] {\r\n    margin: 0 0 0 0.2em;\r\n    padding: 0;\r\n    cursor: pointer;\r\n  }\r\n\r\n  input[type=\"number\"] {\r\n    width: 4em;\r\n  }\r\n</style>\r\n",
    "<script>\r\n  import {state, shield} from \"data/stores\";\r\n  import {shieldPositions} from \"data/shields\";\r\n  import {fade} from \"svelte/transition\";\r\n\r\n  // on shield change\r\n  $: points = shieldPositions[$shield] ? Object.entries(shieldPositions[$shield]) : Object.entries(shieldPositions.spanish);\r\n\r\n  function getClass(p) {\r\n    if (\"abcdefghi\".includes(p)) return \"green\";\r\n    if (\"ABCDEFGHIJKL\".includes(p)) return \"red\";\r\n    if (\"zy\".includes(p)) return \"yellow\";\r\n    return \"blue\";\r\n  }\r\n</script>\r\n\r\n{#if $state.positions}\r\n  <g transform={$state.transform || null} transform-origin=\"center\">\r\n    <g id=\"positions\" transform=\"translate(100, 100)\" transition:fade|local>\r\n      {#each points as p}\r\n        <g id={p[0]} class={getClass(p[0])}>\r\n          <circle cx={p[1][0]} cy={p[1][1]} r=\"3\" class:active={$state.positions.includes(p[0])} />\r\n          <text style=\"dominant-baseline: central\" x={p[1][0]} y={p[1][1]} class:active={$state.positions.includes(p[0])}>{p[0]}</text>\r\n        </g>\r\n      {/each}\r\n    </g>\r\n  </g>\r\n{/if}\r\n\r\n<style>\r\n  circle {\r\n    opacity: 0.6;\r\n  }\r\n\r\n  circle.active {\r\n    opacity: 1;\r\n  }\r\n\r\n  text {\r\n    font-family: monospace;\r\n    text-anchor: middle;\r\n    font-size: 5px;\r\n    fill: #ddd;\r\n  }\r\n\r\n  text.active {\r\n    fill: #fff;\r\n  }\r\n\r\n  .green {\r\n    fill: rgb(12, 80, 12);\r\n  }\r\n\r\n  .blue {\r\n    fill: rgb(12, 12, 80);\r\n  }\r\n\r\n  .red {\r\n    fill: rgb(80, 12, 12);\r\n  }\r\n\r\n  .yellow {\r\n    fill: rgb(84, 84, 0);\r\n  }\r\n</style>\r\n",
    "<script>\r\n  export let checked = false;\r\n  const id = \"switch\" + Math.floor(1e6 * Math.random());\r\n</script>\r\n\r\n<div class=\"switch\">\r\n  <input {id} class=\"switch-input\" type=\"checkbox\" bind:checked />\r\n  <label for={id} class=\"switch-label\">Switch</label>\r\n</div>\r\n\r\n<style>\r\n  .switch {\r\n    position: relative;\r\n    display: inline-block;\r\n    top: -5px;\r\n  }\r\n\r\n  .switch-input {\r\n    display: none;\r\n  }\r\n\r\n  .switch-label {\r\n    display: block;\r\n    width: 48px;\r\n    height: 24px;\r\n    color: transparent;\r\n  }\r\n\r\n  .switch-label::before,\r\n  .switch-label::after {\r\n    content: \"\";\r\n    display: block;\r\n    position: absolute;\r\n    cursor: pointer;\r\n  }\r\n\r\n  .switch-label::before {\r\n    width: 100%;\r\n    height: 100%;\r\n    background-color: #dedede;\r\n    border-radius: 9999em;\r\n    -webkit-transition: background-color 0.25s ease;\r\n    transition: background-color 0.25s ease;\r\n  }\r\n\r\n  .switch-label::after {\r\n    top: 0;\r\n    left: 0;\r\n    width: 24px;\r\n    height: 24px;\r\n    border-radius: 50%;\r\n    background-color: #fff;\r\n    box-shadow: 0 0 2px rgba(0, 0, 0, 0.45);\r\n    -webkit-transition: left 0.25s ease;\r\n    transition: left 0.25s ease;\r\n  }\r\n\r\n  .switch-input:checked + .switch-label::before {\r\n    background-color: #89c12d;\r\n  }\r\n\r\n  .switch-input:checked + .switch-label::after {\r\n    left: 24px;\r\n  }\r\n</style>\r\n",
    "<script>\r\n  import AnimatedCOA from \"./AnimatedCOA.svelte\";\r\n  import {state} from \"data//stores\";\r\n  import {fade, fly} from \"svelte/transition\";\r\n\r\n  const duration = 1000;\r\n  const handleClose = () => {\r\n    $state.about = 0;\r\n  };\r\n</script>\r\n\r\n<div id=\"about\" transition:fade>\r\n  <span on:click={handleClose} class=\"close\">&times;</span>\r\n  <AnimatedCOA {duration} />\r\n  <div class=\"buttons\" in:fly={{y: 200, delay: duration, duration}}>\r\n    <a target=\"_blank\" href=\"https://github.com/Azgaar/Armoria/wiki/Armoria-Tutorial\"><span translate=\"no\">Tutorial</span></a>\r\n    <a target=\"_blank\" href=\"https://discord.com/invite/X7E84HU\"><span translate=\"no\">Discord</span></a>\r\n    <a target=\"_blank\" href=\"https://github.com/Azgaar/Armoria\"><span translate=\"no\">GitHub</span></a>\r\n    <a target=\"_blank\" href=\"https://github.com/Azgaar/armoria-api#readme\"><span translate=\"no\">API</span></a>\r\n    <a target=\"_blank\" href=\"https://www.patreon.com/azgaar\"><span translate=\"no\">Patreon</span></a>\r\n  </div>\r\n</div>\r\n\r\n<style>\r\n  #about {\r\n    position: fixed;\r\n    inset: 0;\r\n    z-index: 1;\r\n    background-color: rgba(0, 0, 0, 0.9);\r\n    transition: 0.5s;\r\n    text-align: center;\r\n    user-select: none;\r\n\r\n    display: flex;\r\n    flex-direction: column;\r\n    justify-content: space-evenly;\r\n    align-items: center;\r\n  }\r\n\r\n  a:hover,\r\n  span:hover {\r\n    color: #fff;\r\n    text-decoration: none;\r\n  }\r\n\r\n  .buttons {\r\n    display: flex;\r\n    justify-content: space-evenly;\r\n    width: min(100%, 80vw);\r\n    font-size: 1.2em;\r\n  }\r\n\r\n  .buttons > a {\r\n    margin: 0.5em;\r\n    color: #ddd;\r\n  }\r\n\r\n  .buttons > a:hover {\r\n    color: #fff;\r\n    text-decoration: none;\r\n  }\r\n\r\n  @media (max-width: 600px) {\r\n    .buttons {\r\n      flex-direction: column;\r\n    }\r\n  }\r\n\r\n  span.close {\r\n    position: absolute;\r\n    top: 0;\r\n    right: 1.2rem;\r\n    font-size: 4em;\r\n    cursor: pointer;\r\n    color: #ddd;\r\n  }\r\n\r\n  span.close:hover {\r\n    color: #fff;\r\n  }\r\n</style>\r\n",
    "<script>\r\n  import COA from \"./../object/COA.svelte\";\r\n  import {fade} from \"svelte/transition\";\r\n  import {generate} from \"scripts/generator\";\r\n  import {download} from \"scripts/download\";\r\n  import {history, matrices, matrix, state} from \"data/stores\";\r\n  export let gallery, w, h;\r\n\r\n  $: font = Math.max(Math.min(Math.ceil(w / 20), 12), 6);\r\n\r\n  $: coas = gallery.map(c => {\r\n    let coa = $history[c] || generate();\r\n    if (!$history[c]) $history[c] = coa;\r\n    return coa;\r\n  });\r\n\r\n  function regenerate(i) {\r\n    $state.i = i;\r\n    $matrix++;\r\n    $matrices[$matrix] = $matrices[$matrix - 1].slice();\r\n    $matrices[$matrix][$state.i] = $history.length;\r\n  }\r\n\r\n  function editCOA(i) {\r\n    $state.edit = 1;\r\n    $state.c = gallery[i];\r\n    $state.i = i;\r\n  }\r\n</script>\r\n\r\n<div id=\"gallery\" style=\"font-size: {font}px\" transition:fade>\r\n  {#each coas as coa, i}\r\n    <div>\r\n      {#key coa}\r\n        <COA {coa} {i} {w} {h} />\r\n      {/key}\r\n      <div class=\"control\">\r\n        <svg on:click={() => regenerate(i)}><use href=\"#dice-icon\" /></svg>\r\n        <svg on:click={() => editCOA(i)}><use href=\"#pencil-icon\" /></svg>\r\n        <svg on:click={() => download(i)}><use href=\"#download-icon\" /></svg>\r\n      </div>\r\n    </div>\r\n  {/each}\r\n</div>\r\n\r\n<style>\r\n  div {\r\n    display: inline-table;\r\n  }\r\n\r\n  #gallery > div {\r\n    display: inline-block;\r\n    position: relative;\r\n    user-select: none;\r\n    transition: background 0.5s ease;\r\n  }\r\n\r\n  #gallery > div:hover {\r\n    background: #00000020;\r\n  }\r\n\r\n  .control {\r\n    display: block;\r\n    position: absolute;\r\n    opacity: 0;\r\n    transition: 0.5s ease-in-out;\r\n    transform: translate(-50%, -150%);\r\n    left: 50%;\r\n    font-size: 2.4em;\r\n    white-space: nowrap;\r\n  }\r\n\r\n  #gallery > div:hover > .control {\r\n    opacity: 1;\r\n  }\r\n\r\n  .control > svg {\r\n    width: 1.2em;\r\n    height: 1.2em;\r\n    fill: #f1f1f1;\r\n    stroke: #333;\r\n    stroke-width: 0.5em;\r\n    vertical-align: middle;\r\n    margin: 0 0.5em;\r\n  }\r\n\r\n  .control > svg:hover {\r\n    fill: #fff;\r\n    cursor: pointer;\r\n  }\r\n\r\n  .control > svg:active {\r\n    transform: translateY(1px);\r\n  }\r\n</style>\r\n",
    "<script lang=\"ts\">import { fade } from \"svelte/transition\";\r\nimport { shield, state } from \"data/stores\";\r\nimport { capitalize, link } from \"scripts/utils\";\r\nconst wetaShield = (shield) => [\"noldor\", \"gondor\", \"easterling\", \"ironHills\", \"urukHai\", \"moriaOrc\"].includes(shield);\r\nconst coas = Array.from(document.querySelectorAll(\"svg.coa\"));\r\nconst charges = coas.map(coa => Array.from(coa.querySelectorAll(\".charge[charge]\")).map(el => el.getAttribute(\"charge\"))).flat();\r\nconst chargeData = [...new Set(charges)]\r\n    .map(charge => {\r\n    const el = document.getElementById(charge);\r\n    const licenseURL = el.getAttribute(\"license\");\r\n    const licenseName = getLicenseName(licenseURL);\r\n    const sourceURL = el.getAttribute(\"source\");\r\n    const author = el.getAttribute(\"author\") || (sourceURL ? new URL(sourceURL).host : null);\r\n    const license = licenseURL && licenseName ? link(licenseURL, licenseName) : \"no license data\";\r\n    const source = sourceURL ? link(sourceURL, author) : author || \"no source data\";\r\n    return { charge: capitalize(charge), license, source };\r\n})\r\n    .sort((a, b) => (a.license < b.license ? -1 : 1));\r\nconst isLicenseSame = [...new Set(chargeData.map(d => [d.license, d.source].join(\",\")))].length === 1;\r\nconst charge = isLicenseSame ? chargeData[0] : null;\r\n// get mainly Creative Commons short names from license link\r\nfunction getLicenseName(license) {\r\n    if (!license)\r\n        return null;\r\n    if (license.includes(\"publicdomain\"))\r\n        return \"public domain\";\r\n    if (license.includes(\"by-nc-sa\"))\r\n        return \"CC BY-NC-SA\";\r\n    if (license.includes(\"by-nc-nd\"))\r\n        return \"CC BY-NC-ND\";\r\n    if (license.includes(\"by-nc\"))\r\n        return \"CC BY-NC\";\r\n    if (license.includes(\"by-nd\"))\r\n        return \"CC BY-ND\";\r\n    if (license.includes(\"by-sa\"))\r\n        return \"CC BY-SA\";\r\n    if (license.includes(\"by\"))\r\n        return \"CC BY\";\r\n    if (license.includes(\"Fair\"))\r\n        return \"fair use\";\r\n    return license;\r\n}\r\n</script>\r\n\r\n<div id=\"license\" transition:fade>\r\n  <span on:click={() => ($state.license = 0)} class=\"close\">&times;</span>\r\n  <div id=\"licenseContainer\">\r\n    <h1>Armoria License</h1>\r\n\r\n    {#if chargeData.length}\r\n      <hr />\r\n      <h2>Currently displayed Coat of Arms</h2>\r\n    {/if}\r\n\r\n    {#if isLicenseSame}\r\n      <h3>{chargeData.length > 1 ? \"Charges\" : charge.charge}: {@html charge.license}, {@html charge.source}</h3>\r\n    {:else}\r\n      <div class=\"chargesList\">\r\n        {#each chargeData as {charge, license, source}}\r\n          <div>{charge}: {@html license}, {@html source}</div>\r\n        {/each}\r\n      </div>\r\n    {/if}\r\n\r\n    {#if wetaShield($shield)}\r\n      <p>\r\n        As per my information, shield shape close to <i>{capitalize($shield)}</i> is designed for the Lord of the Rings film series by\r\n        <a target=\"_blank\" href=\"www.wetanz.com\">Weta Workshop</a>. The shape itself is drawn by Azgaar, but as design itself may be protected and owned by {@html link(\r\n          \"https://www.middleearth.com\",\r\n          \"Middle-earth Enterprises\"\r\n        )} or {@html link(\"https://www.warnerbros.com/company/divisions/motion-pictures\", \"New Line Productions\")}, it is recommended to not use this shape for\r\n        any purposes outside of the {@html link(\"https://en.wikipedia.org/wiki/Fair_use\", \"fair use\")} concept.\r\n      </p>\r\n    {/if}\r\n\r\n    <hr />\r\n    <h2>Code: MIT License, {@html link(\"https://github.com/Azgaar/Armoria\", \"Azgaar\")}</h2>\r\n    <p>\r\n      Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal\r\n      in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n      copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice\r\n      and this permission notice shall be included in all copies or substantial portions of the Software.\r\n    </p>\r\n    <p>\r\n      The software is provided \"As is\", without warranty of any kind, express or implied, including but not limited to the warranties of merchantability,\r\n      fitness for a particular purpose and noninfringement. In no event shall the authors or copyright holders be liable for any claim, damages or other\r\n      liability, whether in an action of contract, tort or otherwise, arising from, out of or in connection with the software or the use or other dealings in\r\n      the software.\r\n    </p>\r\n\r\n    <hr />\r\n    <h2>\r\n      Icons: {@html link(\"https://creativecommons.org/licenses/by/4.0\", \"CC BY 4.0\")}, {@html link(\"https://fontawesome.com/license/free\", \"Font Awesome\")}\r\n    </h2>\r\n    <br />\r\n  </div>\r\n</div>\r\n\r\n<style>\r\n  #license {\r\n    height: 100%;\r\n    width: 100%;\r\n    position: fixed;\r\n    z-index: 1;\r\n    left: 0;\r\n    top: 0;\r\n    background-color: #000000e6;\r\n    transition: 0.5s;\r\n    color: #ddd;\r\n    text-align: center;\r\n    display: flex;\r\n    justify-content: center;\r\n    align-items: center;\r\n    overflow: auto;\r\n    scrollbar-width: thin;\r\n  }\r\n\r\n  #license::-webkit-scrollbar {\r\n    width: 6px;\r\n    background-color: #cccccc80;\r\n  }\r\n\r\n  #license::-webkit-scrollbar-thumb {\r\n    background-color: #111;\r\n  }\r\n\r\n  #licenseContainer {\r\n    width: 90%;\r\n    max-width: 800px;\r\n    max-height: 100%;\r\n  }\r\n\r\n  hr {\r\n    border: none;\r\n    border-top: 3px double #333;\r\n    color: #333;\r\n    overflow: visible;\r\n    text-align: center;\r\n    height: 5px;\r\n  }\r\n\r\n  hr:after {\r\n    content: \"§\";\r\n    position: relative;\r\n    top: -12px;\r\n  }\r\n\r\n  span.close {\r\n    position: fixed;\r\n    top: 0em;\r\n    right: 0.5em;\r\n    font-size: 4em;\r\n    padding: 0.2em 0;\r\n    z-index: 2;\r\n    cursor: pointer;\r\n  }\r\n\r\n  .chargesList {\r\n    column-count: 2;\r\n    column-gap: 7em;\r\n    text-align: left;\r\n    margin: 0 2em;\r\n  }\r\n\r\n  @media only screen and (orientation: portrait) {\r\n    .chargesList {\r\n      column-gap: normal;\r\n      text-align: center;\r\n    }\r\n  }\r\n</style>\r\n",
    "<script lang=\"ts\">import { tooltip } from \"scripts/tooltip\";\r\nimport { capitalize } from \"scripts/utils\";\r\nexport let key;\r\n$: locked = localStorage.getItem(key);\r\nconst tip = capitalize(key) + \" value is saved and auto-applied. Click to remove saved value and use default settings on load\";\r\nfunction unlock(event) {\r\n    event.stopPropagation();\r\n    localStorage.removeItem(key);\r\n    locked = \"\";\r\n}\r\n</script>\r\n\r\n{#if Boolean(locked)}\r\n  <span on:click={unlock} data-tooltip={tip} use:tooltip>🔖</span>\r\n{/if}\r\n\r\n<style>\r\n  span {\r\n    cursor: pointer;\r\n  }\r\n</style>\r\n",
    "<script>\r\n  import Lock from \"./Lock.svelte\";\r\n  import {fade} from \"svelte/transition\";\r\n  import {download} from \"scripts/download\";\r\n  import {sizes, gradients, diapers} from \"config/options\";\r\n  import {size, grad, diaper, shield, background, scale, border, borderWidth, matrix, state, changes, message} from \"data/stores\";\r\n  import {shields, shieldPaths} from \"data/shields\";\r\n  import {tooltip} from \"scripts/tooltip\";\r\n\r\n  let installable = false;\r\n  let prompt = null;\r\n\r\n  const wideScreen = window.innerWidth > 600;\r\n\r\n  $: position = $changes[1];\r\n\r\n  function getIcon(icon, active = \"active\") {\r\n    if (wideScreen) return `<span class=\"navBarIcon ${active}\">${icon}</span>`;\r\n    return `<svg class=\"navBarIcon ${active}\"><use href=\"#${icon}-icon\"></use></svg>`;\r\n  }\r\n\r\n  function change(e, store, value, key) {\r\n    e.stopPropagation();\r\n    store.set(value);\r\n    localStorage.setItem(key, value);\r\n\r\n    // update coa on shield change\r\n    if (key === \"shield\" && changes.length()) {\r\n      const coa = JSON.parse($changes[0]);\r\n      coa.shield = $shield;\r\n      changes.add(JSON.stringify(coa));\r\n    }\r\n  }\r\n\r\n  function getRandomColor() {\r\n    const l = \"0123456789ABCDEF\";\r\n    $background = \"#\" + [0, 0, 0, 0, 0, 0].map(() => l[Math.floor(Math.random() * 16)]).join(\"\");\r\n    localStorage.setItem(\"background\", $background);\r\n  }\r\n\r\n  function restoreDefault(e, store, key, value) {\r\n    e.stopPropagation();\r\n    store.set(value);\r\n    localStorage.removeItem(key);\r\n  }\r\n\r\n  function goHome() {\r\n    location.href = location.origin + location.pathname;\r\n  }\r\n\r\n  function copyEditLink() {\r\n    const coa = $changes[0].replaceAll(\"#\", \"%23\");\r\n    const url = location.origin + location.pathname + \"?coa=\" + coa;\r\n    copyToClipboard(url, \"Coat of arms link is copied to your clipboard\");\r\n  }\r\n\r\n  function copyAPILink() {\r\n    const encoded = encodeURI($changes[0]);\r\n    const API = \"https://armoria.herokuapp.com/\";\r\n    const url = `${API}?size=500&format=png&coa=${encoded}`;\r\n    copyToClipboard(url, \"API link is copied to your clipboard\");\r\n  }\r\n\r\n  function copyCOA() {\r\n    const encoded = encodeURI($changes[0]);\r\n    copyToClipboard(encoded, \"Encoded COA string is copied to your clipboard\");\r\n  }\r\n\r\n  function copyToClipboard(stringToCopy, response) {\r\n    $message = null;\r\n\r\n    navigator.clipboard.writeText(stringToCopy).then(\r\n      () => {\r\n        $message = null;\r\n        setTimeout(() => {\r\n          $message = {type: \"success\", text: response, timeout: 5000};\r\n        }, 500);\r\n      },\r\n      err => {\r\n        const text = \"Cannot copy to the clipboard!\";\r\n        $message = {type: \"error\", text, timeout: 5000};\r\n        console.error(err);\r\n      }\r\n    );\r\n  }\r\n\r\n  function install() {\r\n    installable = false;\r\n    prompt.prompt();\r\n    prompt.userChoice.then(choise => (prompt = null));\r\n  }\r\n\r\n  window.addEventListener(\"beforeinstallprompt\", e => {\r\n    console.log(\"beforeinstallprompt is fired\");\r\n    //e.preventDefault(); // no default prompt\r\n    prompt = e;\r\n    installable = true;\r\n  });\r\n\r\n  window.addEventListener(\"appinstalled\", e => {\r\n    console.log(\"App installation: success\");\r\n    $message = {type: \"success\", text: `Armoria application is installed`, timeout: 5000};\r\n  });\r\n\r\n  // values to be always saved\r\n  $: localStorage.setItem(\"background\", $background);\r\n  $: localStorage.setItem(\"border\", $border);\r\n  $: localStorage.setItem(\"borderWidth\", $borderWidth);\r\n  $: localStorage.setItem(\"scale\", $scale);\r\n</script>\r\n\r\n<nav>\r\n  <svg on:click={goHome} class=\"logo\" width=\"35\" height=\"35\" viewBox=\"-2 -1 55 55\">\r\n    <path\r\n      fill=\"#fff\"\r\n      stroke=\"none\"\r\n      d=\"m 46,3 0.6,1.4 c -1.5,0.7 -2.6,1.4 -3.3,2.2 -0.7,0.7 -1.2,1.5 -1.5,2.4 -0.3,0.9 -0.4,2.2 -0.4,3.9 0,0.6 0,1.3 0,2.2 l 0.5,23.2 c 0,2.5 0.3,4.2 0.8,5 0.4,0.6 0.8,0.8 1.3,0.8 0.6,0 1.5,-0.6 2.8,-1.8 l 0.9,1.1 -5.8,4.9 -1.9,1.6 C 38.4,49.2 37.2,48.2 36.5,46.9 35.8,45.7 35.3,36.7 35.2,34 c -7.6,0.1 -20.2,0 -20.2,0 0,0 -7.4,9.1 -7.4,11.1 0,0.6 0.2,1.1 0.6,1.8 0.5,0.9 0.8,1.4 0.8,1.7 0,0.4 -0.1,0.7 -0.4,1 -0.3,0.3 -0.6,0.4 -1.1,0.4 -0.5,0 -0.9,-0.2 -1.2,-0.6 -0.5,-0.6 -0.7,-1.3 -0.7,-2.2 0,-1 0.3,-2.1 0.8,-3.3 C 8.8,39.9 11.3,36.7 14.1,32.9 11.1,30.7 9,28.5 7.8,26.4 6.6,24.4 6,22.1 6,19.5 c 0,-3 0.8,-5.7 2.3,-8.3 1.5,-2.5 3.8,-4.5 6.9,-6 3.1,-1.5 6.2,-2.2 9.4,-2.2 4.9,0 9.7,1.7 14.3,5.1 1.1,-1.2 2.2,-2.1 3.2,-2.9 1,-0.8 2.4,-1.5 4,-2.3 z M 30.7,10.2 c -2.6,-1.3 -5.2,-1.9 -7.8,-1.9 -2.7,0 -5.3,0.6 -7.8,1.8 -2.4,1.2 -4.2,2.8 -5.4,4.7 -1.2,1.9 -1.8,3.9 -1.8,5.9 0,4.2 2.3,8 6.9,11.3 L 25.2,17.7 c -1.6,-0.8 -2.9,-1.3 -4.2,-1.3 -1.7,0 -3.1,0.8 -4.2,2.4 -0.4,0.7 -1,0.5 -1.1,-0.2 0,-0.6 0.3,-1.5 1,-2.7 0.7,-1.1 1.6,-2.1 2.9,-2.8 1.3,-0.7 2.6,-1.1 4,-1.1 1.4,0 3.1,0.4 4.9,1.1 z m 4,3.2 C 34,12.4 32.8,11.5 32,11 L 18.4,29.4 h 16.7 z\"\r\n    />\r\n  </svg>\r\n\r\n  <div class=\"container\">\r\n    <bl>{@html getIcon(\"options\")}</bl>\r\n\r\n    <div class=\"dropdown level1\">\r\n      <div class=\"container\">\r\n        <div class=\"dropdown level2\">\r\n          {#each Object.keys(shields.types) as type}\r\n            <div class=\"container\">\r\n              <div class=\"dropdown level3 iconed\">\r\n                {#each Object.keys(shields[type]) as sh}\r\n                  <bt on:click={e => change(e, shield, sh, \"shield\")}>\r\n                    <svg class=\"shield\" class:selected={sh === $shield} width=\"26\" height=\"26\" viewBox=\"0 0 200 210\">\r\n                      <path d={shieldPaths[sh]} />\r\n                    </svg>\r\n                    {sh.split(/(?=[A-Z])/).join(\" \")}\r\n                  </bt>\r\n                {/each}\r\n              </div>\r\n\r\n              <bl>\r\n                {type.split(/(?=[A-Z])/).join(\" \")}\r\n              </bl>\r\n            </div>\r\n          {/each}\r\n        </div>\r\n        <bl data-tooltip=\"Shield or banner shape. If not set, a random one is selected on reroll\" use:tooltip>\r\n          {#key $shield}<Lock key=\"shield\" />{/key}\r\n          <span>Shield</span>\r\n        </bl>\r\n      </div>\r\n\r\n      <bt on:click={() => ($state.tinctures = 1)} data-tooltip=\"Setup tinctures selection chance and hue\" use:tooltip>\r\n        <Lock key=\"tinctures\" />\r\n        <Lock key=\"colors\" />\r\n        <span>Tinctures</span>\r\n      </bt>\r\n\r\n      <div class=\"container\">\r\n        <div class=\"dropdown level2\">\r\n          {#each gradients as g}\r\n            <bt class:selected={g === $grad} on:click={e => change(e, grad, g, \"grad\")}>{g}</bt>\r\n          {/each}\r\n        </div>\r\n        <bl data-tooltip=\"Overlay style to be applied on top of coat of arms\" use:tooltip>\r\n          {#key $grad}<Lock key=\"grad\" />{/key}\r\n          <span>Gradient</span>\r\n        </bl>\r\n      </div>\r\n\r\n      <div class=\"container\">\r\n        <div class=\"dropdown level2\">\r\n          {#each diapers as d}\r\n            <bt class:selected={d === $diaper} on:click={e => change(e, diaper, d, \"diaper\")}>{d}</bt>\r\n          {/each}\r\n        </div>\r\n        <bl data-tooltip=\"Backing style for coat of arms, also known as diaper\" use:tooltip>\r\n          {#key $diaper}<Lock key=\"diaper\" />{/key}\r\n          <span>Damasking</span>\r\n        </bl>\r\n      </div>\r\n\r\n      <div class=\"container\">\r\n        <div class=\"dropdown level2\">\r\n          {#each sizes as s}\r\n            <bt class:selected={$size == s[0]} on:click={e => change(e, size, s[0], \"size\")}>{s[1]}</bt>\r\n          {/each}\r\n        </div>\r\n        <bl data-tooltip=\"Coat of arms gallery size. Change to smaller value to make coat of arms bigger\" use:tooltip>\r\n          {#key $size}<Lock key=\"size\" />{/key}\r\n          <span>Gallery</span>\r\n        </bl>\r\n      </div>\r\n\r\n      <div class=\"container\">\r\n        <div class=\"dropdown level2\">\r\n          <bl\r\n            >Color\r\n            {#if $border !== \"#333333\"}\r\n              <svg\r\n                on:click={e => restoreDefault(e, border, \"border\", \"#333333\")}\r\n                class=\"navBarIcon active smaller\"\r\n                data-tooltip=\"Restore default color\"\r\n                use:tooltip\r\n              >\r\n                <use href=\"#undo-icon\" />\r\n              </svg>\r\n            {/if}\r\n            <input type=\"color\" bind:value={$border} />\r\n          </bl>\r\n          <bl\r\n            >Width\r\n            {#if $borderWidth !== 1}\r\n              <svg\r\n                on:click={e => restoreDefault(e, borderWidth, \"borderWidth\", \"#333333\")}\r\n                class=\"navBarIcon active smaller\"\r\n                data-tooltip=\"Restore default border width\"\r\n                use:tooltip\r\n              >\r\n                <use href=\"#undo-icon\" />\r\n              </svg>\r\n            {/if}\r\n            <input\r\n              class=\"right\"\r\n              type=\"number\"\r\n              min=\"0\"\r\n              max=\"4\"\r\n              step=\".1\"\r\n              on:input={function (e) {\r\n                change(e, borderWidth, +this.value, \"borderWidth\");\r\n              }}\r\n              value={$borderWidth}\r\n            />\r\n          </bl>\r\n        </div>\r\n        <bl data-tooltip=\"Coat of arms border style\" use:tooltip>\r\n          <span>Border</span>\r\n        </bl>\r\n      </div>\r\n\r\n      <div class=\"container\">\r\n        <div class=\"dropdown level2\">\r\n          <bl\r\n            >Color\r\n            <svg on:click={getRandomColor} class=\"navBarIcon active smaller\" data-tooltip=\"Select random color\" use:tooltip>\r\n              <use href=\"#random-icon\" />\r\n            </svg>\r\n            {#if $background !== \"#333333\"}\r\n              <svg\r\n                on:click={e => restoreDefault(e, background, \"background\", \"#333333\")}\r\n                class=\"navBarIcon active smaller\"\r\n                data-tooltip=\"Restore default color\"\r\n                use:tooltip\r\n              >\r\n                <use href=\"#undo-icon\" />\r\n              </svg>\r\n            {/if}\r\n            <input type=\"color\" bind:value={$background} />\r\n          </bl>\r\n        </div>\r\n        <bl data-tooltip=\"Window background color\" use:tooltip>\r\n          <span>Background</span>\r\n        </bl>\r\n      </div>\r\n\r\n      <div class=\"container\">\r\n        <div class=\"dropdown level2\">\r\n          <bl class=\"wide\">\r\n            <input type=\"range\" min=\"1\" max=\"4\" step=\".1\" bind:value={$scale} />\r\n            <input type=\"number\" min=\"1\" max=\"4\" step=\".1\" bind:value={$scale} />\r\n          </bl>\r\n        </div>\r\n        <bl data-tooltip=\"Downloaded image size, 1 is default size, 2 - 2x size, etc.\" use:tooltip>\r\n          <span>Scale</span>\r\n        </bl>\r\n      </div>\r\n\r\n      {#if !wideScreen && $state.edit}\r\n        <bt on:click={() => ($state.license = 1)} data-tooltip=\"Show information about license\" use:tooltip> License </bt>\r\n      {/if}\r\n    </div>\r\n  </div>\r\n\r\n  {#if $matrix}\r\n    <bt on:click={() => ($matrix -= 1)} data-tooltip=\"Roll to the previous list\" gesture=\"Swipe up\" hotkey=\"Backspace\" use:tooltip>\r\n      {@html getIcon(\"rollback\")}\r\n    </bt>\r\n  {:else}\r\n    <bd>{@html getIcon(\"rollback\", \"inactive\")}</bd>\r\n  {/if}\r\n\r\n  <bt on:click={() => ($matrix += 1)} data-tooltip=\"Regenerate coat of arms\" gesture=\"Swipe down\" hotkey=\"Enter\" use:tooltip>\r\n    {@html getIcon(\"reroll\")}\r\n  </bt>\r\n\r\n  <div class=\"container\">\r\n    <bl>{@html getIcon(\"save\")}</bl>\r\n    <div class=\"dropdown level1\">\r\n      <bt\r\n        on:click={() => download(null, \"svg\")}\r\n        data-tooltip=\"Download vector image or set of images. Open in browser or load to Map Generator. Size can be set in options\"\r\n        hotkey=\"Ctrl + S\"\r\n        use:tooltip\r\n      >\r\n        <span>Download SVG</span>\r\n      </bt>\r\n\r\n      <bt on:click={() => download(null, \"png\")} data-tooltip=\"Download as raster image. Size can be set in options\" hotkey=\"Ctrl + P\" use:tooltip>\r\n        <span>Download PNG</span>\r\n      </bt>\r\n\r\n      <bt on:click={() => download(null, \"jpeg\")} data-tooltip=\"Download a compressed raster image. Size can be set in options\" hotkey=\"Ctrl + J\" use:tooltip>\r\n        <span>Download JPEG</span>\r\n      </bt>\r\n\r\n      {#if $state.edit}\r\n        <bt on:click={copyEditLink} data-tooltip=\"Copy link to the coat of arms in Edit mode to your clipbard\" use:tooltip>\r\n          <span>Copy edit link</span>\r\n        </bt>\r\n\r\n        <bt on:click={copyAPILink} data-tooltip=\"Copy link to the coat of arms for embedding. Armoria API does not support custom charges\" use:tooltip>\r\n          <span>Copy API link</span>\r\n        </bt>\r\n\r\n        <bt\r\n          on:click={copyCOA}\r\n          data-tooltip=\"Copy coa object as encoded string to use in Armoria API or in Watabou's Medieval Fantasy City Generator\"\r\n          use:tooltip\r\n        >\r\n          <span>Copy COA string</span>\r\n        </bt>\r\n      {/if}\r\n    </div>\r\n  </div>\r\n\r\n  <div class=\"container\">\r\n    <bl>{@html getIcon(\"upload\")}</bl>\r\n    <div class=\"dropdown level1\">\r\n      <bt on:click={() => ($state.raster = 1)} data-tooltip=\"Upload raster charge (one color, quality loss on scale) from jpg, png or svg image\" use:tooltip>\r\n        <span>Raster charge</span>\r\n      </bt>\r\n\r\n      <bt on:click={() => ($state.vector = 1)} data-tooltip=\"Upload vector charge (multicolor and lossless scalable) from prepared svg\" use:tooltip>\r\n        <span>Vector charge</span>\r\n      </bt>\r\n    </div>\r\n  </div>\r\n\r\n  {#if installable}\r\n    <bt on:click={() => install()} class=\"flutter\" in:fade data-tooltip=\"Add Armoria application to the desktop or home screen\" use:tooltip>\r\n      {@html getIcon(\"install\")}\r\n    </bt>\r\n  {/if}\r\n\r\n  {#if $state.edit}\r\n    {#if position > 0}\r\n      <bt on:click={() => changes.undo()} data-tooltip=\"Revert the latest change\" gesture=\"Swipe left\" hotkey=\"Z\" use:tooltip>\r\n        {@html getIcon(\"undo\")}\r\n      </bt>\r\n    {:else}\r\n      <bd>{@html getIcon(\"undo\", \"inactive\")}</bd>\r\n    {/if}\r\n\r\n    {#if position < changes.length() - 1}\r\n      <bt on:click={() => changes.redo()} data-tooltip=\"Restore the next change\" gesture=\"Swipe right\" hotkey=\"X\" use:tooltip>\r\n        {@html getIcon(\"redo\")}\r\n      </bt>\r\n    {:else}\r\n      <bd>{@html getIcon(\"redo\", \"inactive\")}</bd>\r\n    {/if}\r\n  {/if}\r\n\r\n  {#if $state.edit}\r\n    <bt id=\"back\" on:click={() => ($state.edit = 0)} transition:fade data-tooltip=\"Get back to Gallery\" hotkey=\"Escape\" use:tooltip>\r\n      {@html getIcon(\"back\")}\r\n    </bt>\r\n  {/if}\r\n\r\n  {#if wideScreen || !$state.edit}\r\n    <bt on:click={() => ($state.license = 1)} data-tooltip=\"Show information about license\" use:tooltip>\r\n      {@html getIcon(\"license\")}\r\n    </bt>\r\n    <bt on:click={() => ($state.about = 1)} data-tooltip=\"Show about screen\" hotkey=\"F1\" use:tooltip>\r\n      {@html getIcon(\"about\")}\r\n    </bt>\r\n    <bt on:click={() => window.open(\"https://www.patreon.com/azgaar\", \"_blank\")} data-tooltip=\"Support the project on Patreon\" use:tooltip>\r\n      {@html getIcon(\"support\")}\r\n    </bt>\r\n  {/if}\r\n</nav>\r\n\r\n<style>\r\n  nav {\r\n    top: 0;\r\n    width: 100%;\r\n    list-style-type: none;\r\n    margin: 0;\r\n    padding: 0;\r\n    display: flex;\r\n    align-items: center;\r\n    overflow: hidden;\r\n    background-color: #1b1c1d;\r\n    z-index: 1;\r\n    white-space: nowrap;\r\n  }\r\n\r\n  .logo {\r\n    display: block;\r\n    margin: 0 0.5em 0 1em;\r\n    background-color: #35bdb2;\r\n    cursor: pointer;\r\n  }\r\n\r\n  :global(svg.navBarIcon) {\r\n    width: 1em;\r\n    height: 1em;\r\n    fill: #333;\r\n    stroke: none;\r\n    vertical-align: middle;\r\n  }\r\n\r\n  :global(svg.navBarIcon.active) {\r\n    fill: #fff;\r\n    cursor: pointer;\r\n  }\r\n\r\n  :global(span.navBarIcon) {\r\n    color: #333;\r\n  }\r\n\r\n  :global(span.navBarIcon.active) {\r\n    color: #fff;\r\n  }\r\n\r\n  .navBarIcon.smaller {\r\n    width: 0.8em;\r\n    height: 0.8em;\r\n  }\r\n\r\n  .navBarIcon.smaller:active {\r\n    transform: translateY(1px);\r\n  }\r\n\r\n  bt,\r\n  bl,\r\n  bd {\r\n    user-select: none;\r\n    padding: 1em;\r\n    color: #fff;\r\n    text-transform: capitalize;\r\n  }\r\n\r\n  bt {\r\n    cursor: pointer;\r\n    transition: background-color 0.1s;\r\n  }\r\n\r\n  bt:hover,\r\n  bl:hover {\r\n    background-color: #2d2e2f;\r\n  }\r\n\r\n  bt:active:not(:last-child) {\r\n    transform: translateY(1px);\r\n  }\r\n\r\n  input[type=\"color\"] {\r\n    position: absolute;\r\n    padding: 0;\r\n    margin: -0.3em 0;\r\n    right: 0.4em;\r\n    border: 0;\r\n    width: 3em;\r\n    cursor: pointer;\r\n  }\r\n\r\n  input[type=\"range\"] {\r\n    padding: 0;\r\n    width: 72%;\r\n    margin: 0;\r\n    height: 0.6em;\r\n    cursor: pointer;\r\n  }\r\n\r\n  input[type=\"number\"] {\r\n    padding: 0 0 0 3px;\r\n    width: 25%;\r\n    margin: 0;\r\n    border: 0;\r\n  }\r\n\r\n  input[type=\"number\"].right {\r\n    position: absolute;\r\n    padding: 2px;\r\n    margin: -0.25em 0;\r\n    right: 0.4em;\r\n    width: 3em;\r\n  }\r\n\r\n  .dropdown {\r\n    display: none;\r\n    position: fixed;\r\n    background-color: #1b1c1d;\r\n    min-width: 9em;\r\n    box-shadow: 0px 8px 16px 0px rgba(0, 0, 0, 0.2);\r\n    z-index: 1;\r\n  }\r\n\r\n  .level1 {\r\n    margin-top: 1em;\r\n  }\r\n\r\n  .level2 {\r\n    z-index: 1;\r\n    margin-left: 10.25em;\r\n  }\r\n\r\n  .level3 {\r\n    z-index: 2;\r\n    margin-left: 10.25em;\r\n  }\r\n\r\n  .dropdown bt,\r\n  .dropdown bl {\r\n    padding: 12px 16px;\r\n    width: 8em;\r\n    display: block;\r\n  }\r\n\r\n  .dropdown bl.wide {\r\n    width: 12em;\r\n  }\r\n\r\n  .container:hover > .dropdown {\r\n    display: block;\r\n  }\r\n\r\n  .dropdown bt.selected:before {\r\n    content: \"\\2713\";\r\n    display: inline-block;\r\n    padding: 0 6px 0 0;\r\n  }\r\n\r\n  /* low-width (narrow) screen */\r\n  @media only screen and (max-width: 720px) {\r\n    .logo {\r\n      display: none;\r\n    }\r\n\r\n    .level3 {\r\n      margin-left: -10.25em;\r\n      background-color: #222;\r\n    }\r\n  }\r\n\r\n  /* low-height screen */\r\n  @media only screen and (max-height: 640px) and (orientation: landscape) {\r\n    .dropdown bt,\r\n    .dropdown bl {\r\n      padding: 6px 16px;\r\n      width: 7em;\r\n    }\r\n\r\n    .level2 {\r\n      margin-left: 9.25em;\r\n    }\r\n\r\n    .level3 {\r\n      margin-left: 9.25em;\r\n    }\r\n  }\r\n\r\n  @media only screen and (max-height: 640px) and (min-width: 520px) and (orientation: landscape) {\r\n    .logo {\r\n      display: none;\r\n    }\r\n    .level3 {\r\n      column-count: 2;\r\n    }\r\n  }\r\n\r\n  @media only screen and (max-height: 640px) and (min-width: 680px) and (orientation: landscape) {\r\n    .logo {\r\n      display: none;\r\n    }\r\n    .level3 {\r\n      column-count: 3;\r\n    }\r\n  }\r\n\r\n  .dropdown.iconed {\r\n    text-indent: 1.8em;\r\n  }\r\n\r\n  .shield {\r\n    position: absolute;\r\n    fill: none;\r\n    stroke: #fff;\r\n    stroke-width: 5px;\r\n    margin: -0.4em 0 0 -2.2em;\r\n  }\r\n\r\n  .shield.selected {\r\n    fill: #777;\r\n    stroke: #333;\r\n  }\r\n\r\n  #back {\r\n    position: absolute;\r\n    right: 0;\r\n  }\r\n</style>\r\n",
    "<script>\r\n  import {fade} from \"svelte/transition\";\r\n  import {flip} from \"svelte/animate\";\r\n  import {colors, tinctures, state, message, changes} from \"data/stores\";\r\n  import {defaultTinctures, defaultColors} from \"data/dataModel\";\r\n  import {camelize} from \"scripts/utils\";\r\n  import {tooltip} from \"scripts/tooltip\";\r\n\r\n  let add = {show: false, name: \"\", type: \"colours\", color: \"#96C8FA\", chance: 3};\r\n\r\n  // remove stored weighted array\r\n  for (const key in $tinctures) {\r\n    delete $tinctures[key].array;\r\n  }\r\n\r\n  $: tData = [\"metals\", \"colours\", \"stains\"]\r\n    .map(type => {\r\n      return Object.keys($tinctures[type]).map(t => {\r\n        return {t, type};\r\n      });\r\n    })\r\n    .flat();\r\n\r\n  $: lock(\"tinctures\", $tinctures);\r\n  $: lock(\"colors\", $colors);\r\n  $: updateCOAonColorChange($colors);\r\n\r\n  // don't lock options on load\r\n  let loaded = [];\r\n  function lock(key, value) {\r\n    if (loaded.includes(key)) localStorage.setItem(key, JSON.stringify(value));\r\n    else loaded.push(key);\r\n  }\r\n\r\n  function updateCOAonColorChange() {\r\n    changes.refresh();\r\n  }\r\n\r\n  function getTotalChance(type) {\r\n    return Object.entries($tinctures[type]).reduce((a, b) => a + b[1], 0);\r\n  }\r\n\r\n  function removeTincture(t) {\r\n    if (t.type === \"metals\" || t.type === \"colours\") {\r\n      const typeItems = Object.keys($tinctures[t.type]);\r\n      if (typeItems.length < 3) {\r\n        $message = {type: \"error\", text: `There should be at least 2 tinctures of type '${t.type}'!`};\r\n        return;\r\n      }\r\n    }\r\n\r\n    delete $tinctures[t.type][t.t];\r\n    $tinctures = $tinctures;\r\n  }\r\n\r\n  function addTincture() {\r\n    add.show = true;\r\n    $message = {type: \"warn\", text: `Set tincture name, type, color and chance and then click on 'Apply Tincture'`, timeout: 8000};\r\n  }\r\n\r\n  function cancelAddTincture() {\r\n    add.show = false;\r\n  }\r\n\r\n  function applyAddTincture() {\r\n    const name = camelize(add.name);\r\n\r\n    if (!name || $colors[name]) {\r\n      $message = {type: \"error\", text: `Tincture name must be unique!`};\r\n      return;\r\n    }\r\n\r\n    $tinctures[add.type][name] = add.chance;\r\n    $colors[name] = add.color;\r\n    add.show = false;\r\n    $message = {type: \"info\", text: `Tincture ${name} is added`};\r\n  }\r\n\r\n  function restoreDefault() {\r\n    $tinctures = JSON.parse(JSON.stringify(defaultTinctures));\r\n    $colors = JSON.parse(JSON.stringify(defaultColors));\r\n    localStorage.removeItem(\"tinctures\");\r\n    localStorage.removeItem(\"colors\");\r\n    loaded = [];\r\n    $message = {type: \"info\", text: `Default values are restored`};\r\n  }\r\n</script>\r\n\r\n<div id=\"tinctures\" transition:fade|local>\r\n  <span on:click={() => ($state.tinctures = 0)} class=\"close\">&times;</span>\r\n  <div id=\"tincturesCont\">\r\n    <div id=\"left\">\r\n      <table>\r\n        <thead>\r\n          <tr>\r\n            <th>Element</th>\r\n            <th>Metals</th>\r\n            <th>Colours</th>\r\n            <th>Stains</th>\r\n            <th>Patterns</th>\r\n          </tr>\r\n        </thead>\r\n        <tbody>\r\n          <tr>\r\n            <td>Field</td>\r\n            <td><input type=\"number\" min=\"0\" max=\"100\" step=\"1\" bind:value={$tinctures.field.metals} /></td>\r\n            <td><input type=\"number\" min=\"0\" max=\"100\" step=\"1\" bind:value={$tinctures.field.colours} /></td>\r\n            <td><input type=\"number\" min=\"0\" max=\"100\" step=\"1\" bind:value={$tinctures.field.stains} /></td>\r\n            <td><input type=\"number\" min=\"0\" max=\"100\" step=\"1\" bind:value={$tinctures.field.patterns} /></td>\r\n          </tr>\r\n          <tr>\r\n            <td>Division</td>\r\n            <td><input type=\"number\" min=\"0\" max=\"100\" step=\"1\" bind:value={$tinctures.division.metals} /></td>\r\n            <td><input type=\"number\" min=\"0\" max=\"100\" step=\"1\" bind:value={$tinctures.division.colours} /></td>\r\n            <td><input type=\"number\" min=\"0\" max=\"100\" step=\"1\" bind:value={$tinctures.division.stains} /></td>\r\n            <td><input type=\"number\" min=\"0\" max=\"100\" step=\"1\" bind:value={$tinctures.division.patterns} /></td>\r\n          </tr>\r\n          <tr>\r\n            <td>Charge</td>\r\n            <td><input type=\"number\" min=\"0\" max=\"100\" step=\"1\" bind:value={$tinctures.charge.metals} /></td>\r\n            <td><input type=\"number\" min=\"0\" max=\"100\" step=\"1\" bind:value={$tinctures.charge.colours} /></td>\r\n            <td><input type=\"number\" min=\"0\" max=\"100\" step=\"1\" bind:value={$tinctures.charge.stains} /></td>\r\n            <td><input type=\"number\" min=\"0\" max=\"100\" step=\"1\" bind:value={$tinctures.charge.patterns} /></td>\r\n          </tr>\r\n        </tbody>\r\n      </table>\r\n\r\n      <div class=\"contolButtons\">\r\n        {#if add.show}\r\n          <button on:click={applyAddTincture}>Apply Tincture</button>\r\n        {:else}\r\n          <button on:click={addTincture}>Add Tincture</button>\r\n        {/if}\r\n        <button on:click={restoreDefault}>Restore Default</button>\r\n      </div>\r\n    </div>\r\n\r\n    <div id=\"right\">\r\n      <table id=\"tincturesTable\">\r\n        <thead>\r\n          <tr>\r\n            <th>Tincture</th>\r\n            <th>Type</th>\r\n            <th>Color</th>\r\n            <th>Chance</th>\r\n            <th>Remove</th>\r\n          </tr>\r\n        </thead>\r\n        <tbody>\r\n          {#if add.show}\r\n            <tr transition:fade>\r\n              <td>\r\n                <input type=\"text\" placeholder=\"Tincture\" bind:value={add.name} />\r\n              </td>\r\n              <td>\r\n                <select bind:value={add.type}>\r\n                  <option value=\"metals\">Metals</option>\r\n                  <option value=\"colours\">Colours</option>\r\n                  <option value=\"stains\">Stains</option>\r\n                </select>\r\n              </td>\r\n              <td>\r\n                <input type=\"color\" bind:value={add.color} />\r\n              </td>\r\n              <td>\r\n                <input type=\"number\" min=\"0\" max=\"100\" step=\"1\" bind:value={add.chance} />\r\n              </td>\r\n              <td>\r\n                <span class=\"actionButton\" on:click={cancelAddTincture}>&times;</span>\r\n              </td>\r\n            </tr>\r\n          {/if}\r\n          {#each tData as t (t.t)}\r\n            <tr animate:flip>\r\n              <td>{t.t}</td>\r\n              <td>{t.type}</td>\r\n              <td>\r\n                <input type=\"color\" bind:value={$colors[t.t]} />\r\n                {#if defaultColors[t.t] && $colors[t.t] !== defaultColors[t.t]}\r\n                  <svg on:click={() => ($colors[t.t] = defaultColors[t.t])} width=\"12\" height=\"12\" fill=\"#fff\" data-tooltip=\"Restore default color\" use:tooltip>\r\n                    <use href=\"#undo-icon\" />\r\n                  </svg>\r\n                {/if}\r\n              </td>\r\n              <td>\r\n                <input type=\"number\" min=\"0\" max=\"100\" step=\"1\" bind:value={$tinctures[t.type][t.t]} />\r\n                <span class=\"totalChance\">/ {getTotalChance(t.type)}</span>\r\n              </td>\r\n              <td>\r\n                <span class=\"actionButton\" on:click={() => removeTincture(t)}>&times;</span>\r\n              </td>\r\n            </tr>\r\n          {/each}\r\n        </tbody>\r\n      </table>\r\n    </div>\r\n  </div>\r\n</div>\r\n\r\n<style>\r\n  #tinctures {\r\n    height: 100%;\r\n    width: 100%;\r\n    position: fixed;\r\n    z-index: 1;\r\n    left: 0;\r\n    top: 0;\r\n    background-color: rgba(0, 0, 0, 0.9);\r\n    transition: 0.5s;\r\n    text-align: center;\r\n    user-select: none;\r\n  }\r\n\r\n  #tincturesCont {\r\n    position: absolute;\r\n    top: 50%;\r\n    left: 50%;\r\n    transform: translate(-50%, -50%);\r\n    overflow: auto;\r\n    scrollbar-width: thin;\r\n    display: flex;\r\n    align-items: center;\r\n    justify-content: center;\r\n  }\r\n\r\n  #tincturesCont::-webkit-scrollbar {\r\n    width: 6px;\r\n    background-color: #cccccc80;\r\n  }\r\n\r\n  #tincturesCont::-webkit-scrollbar-thumb {\r\n    background-color: #111;\r\n  }\r\n\r\n  @media only screen and (orientation: portrait) {\r\n    #tincturesCont {\r\n      flex-direction: column;\r\n    }\r\n  }\r\n\r\n  span.close {\r\n    position: fixed;\r\n    top: 0em;\r\n    right: 0.5em;\r\n    font-size: 4em;\r\n    padding: 0.2em 0;\r\n    cursor: pointer;\r\n    color: #ddd;\r\n    z-index: 2;\r\n  }\r\n\r\n  .close:hover,\r\n  .actionButton:hover {\r\n    color: #fff;\r\n  }\r\n\r\n  table {\r\n    color: #ddd;\r\n    text-transform: capitalize;\r\n    min-width: 350px;\r\n    max-width: 80vw;\r\n    display: block;\r\n    max-height: 80vh;\r\n  }\r\n\r\n  td {\r\n    width: 4em;\r\n  }\r\n\r\n  #tincturesTable td:nth-child(3) {\r\n    width: 5em;\r\n  }\r\n\r\n  input[type=\"color\"] {\r\n    padding: 0;\r\n    border: 0;\r\n    cursor: pointer;\r\n  }\r\n\r\n  input[type=\"text\"] {\r\n    width: 6em;\r\n  }\r\n\r\n  input[type=\"number\"] {\r\n    width: 4em;\r\n  }\r\n\r\n  .totalChance {\r\n    position: absolute;\r\n    margin: 0.1em 0 0 -2.1em;\r\n    color: #333;\r\n    user-select: none;\r\n    pointer-events: none;\r\n    font-size: 0.6em;\r\n  }\r\n\r\n  .actionButton {\r\n    font-size: 2em;\r\n    cursor: pointer;\r\n  }\r\n\r\n  .contolButtons > button {\r\n    width: 9em;\r\n    margin: 1em 0.1em;\r\n  }\r\n</style>\r\n",
    "<script>\r\n  import LicenseList from \"./LicenseList.svelte\";\r\n  import {state, message, shield} from \"data/stores\";\r\n  import {charges} from \"data/dataModel\";\r\n  import {shieldPaths} from \"data/shields\";\r\n  import {tooltip} from \"scripts/tooltip\";\r\n  import {camelize} from \"scripts/utils\";\r\n\r\n  let dragging = false,\r\n    selected = false;\r\n  let size = 50,\r\n    offsetX = 0,\r\n    offsetY = 0;\r\n  let name,\r\n    category = \"uploaded\",\r\n    source,\r\n    license,\r\n    author;\r\n\r\n  const onFile = getFilesFunction => event => {\r\n    dragging = false;\r\n    const files = getFilesFunction(event);\r\n    const file = files.length ? files[0] : [];\r\n\r\n    if (!file.type.match(/image.*/)) {\r\n      $message = {type: \"error\", text: \"Not an image file!\"};\r\n      return;\r\n    }\r\n\r\n    selected = true;\r\n    $message = {type: \"info\", text: \"Fit image into the rectangle for best result\"};\r\n    name = camelize(file.name);\r\n    loadImage(file);\r\n  };\r\n\r\n  function getFilesFromDropEvent({dataTransfer: {files, items}}) {\r\n    return files.length ? [...files] : items.filter(({kind}) => kind === \"file\").map(({getAsFile}) => getAsFile());\r\n  }\r\n\r\n  function getFilesFromInputEvent({target}) {\r\n    const files = target.files ? [...target.files] : [];\r\n    target.value = \"\";\r\n    return files;\r\n  }\r\n\r\n  function loadImage(file) {\r\n    const reader = new FileReader();\r\n    reader.onload = function (readerEvent) {\r\n      const dataURL = readerEvent.target.result;\r\n      const image = document.getElementById(\"rasterUpload\").querySelector(\"svg image\");\r\n      image.setAttribute(\"href\", dataURL);\r\n    };\r\n    reader.readAsDataURL(file);\r\n  }\r\n\r\n  function addCharge() {\r\n    const allCharges = Object.keys(charges.types)\r\n      .map(type => Object.keys(charges[type]))\r\n      .flat();\r\n    name = camelize(name);\r\n\r\n    if (!name || document.getElementById(name) || allCharges.includes(name)) {\r\n      $message = {type: \"error\", text: \"Name must be unique id!\"};\r\n      return;\r\n    }\r\n\r\n    if (!charges.types[category]) charges.types[category] = 6;\r\n    if (!charges.single[category]) charges.single[category] = 6;\r\n    charges[category][name] = 5;\r\n\r\n    // remove stored weighted arrays\r\n    delete charges.types.array;\r\n    delete charges.single.array;\r\n    delete charges[category].array;\r\n\r\n    const image = document.getElementById(\"rasterUpload\").querySelector(\"svg image\").cloneNode(true);\r\n    image.id = name;\r\n    if (source) image.setAttribute(\"source\", source);\r\n    if (license) image.setAttribute(\"license\", license);\r\n    if (author) image.setAttribute(\"author\", author);\r\n\r\n    document.getElementById(\"charges\").appendChild(image);\r\n\r\n    selected = false;\r\n    $state.raster = 0;\r\n    $message = {type: \"success\", text: `Charge \"${name}\" is added to the category \"${category}\"`};\r\n  }\r\n</script>\r\n\r\n<div\r\n  id=\"rasterUpload\"\r\n  on:drop|preventDefault={onFile(getFilesFromDropEvent)}\r\n  on:dragover|preventDefault={() => (dragging = true)}\r\n  on:dragleave|preventDefault={() => (dragging = false)}\r\n>\r\n  <span on:click={() => ($state.raster = 0)} class=\"close\">&times;</span>\r\n  <div class=\"container\">\r\n    {#if selected}\r\n      <svg\r\n        width=\"100%\"\r\n        height=\"100%\"\r\n        stroke=\"#000\"\r\n        stroke-width=\"1\"\r\n        viewBox=\"0 0 200 200\"\r\n        data-tooltip=\"Fit image into the rectangle for best result\"\r\n        use:tooltip\r\n      >\r\n        <g fill=\"#fff\" fill-opacity=\".05\" stroke=\"#fff\" stroke-width=\".5\">\r\n          <image id=\"imageLoaded\" x=\"{(100 - size) / 2 + offsetX}%\" y=\"{(100 - size) / 2 + offsetY}%\" width=\"{size}%\" height=\"{size}%\" />\r\n          <path d={shieldPaths[$shield]} />\r\n          <rect x=\"60\" y=\"60\" width=\"80\" height=\"80\" />\r\n        </g>\r\n      </svg>\r\n\r\n      <div class=\"inputs\">\r\n        <div data-tooltip=\"Image size in percents\" use:tooltip>\r\n          <div class=\"label\">Size:</div>\r\n          <input type=\"number\" bind:value={size} />\r\n        </div>\r\n        <div data-tooltip=\"Offset by X axis in pixels\" use:tooltip>\r\n          <div class=\"label\">Offset X:</div>\r\n          <input type=\"number\" bind:value={offsetX} />\r\n        </div>\r\n        <div data-tooltip=\"Offset by Y axis in pixels\" use:tooltip>\r\n          <div class=\"label\">Offset Y:</div>\r\n          <input type=\"number\" bind:value={offsetY} />\r\n        </div>\r\n        <div data-tooltip=\"Link to the image source\" use:tooltip>\r\n          <div class=\"label\">Source:</div>\r\n          <input bind:value={source} />\r\n        </div>\r\n        <div data-tooltip=\"Image author or source portal name\" use:tooltip>\r\n          <div class=\"label\">Author:</div>\r\n          <input bind:value={author} />\r\n        </div>\r\n        <div data-tooltip=\"Image license\" use:tooltip>\r\n          <div class=\"label\">License:</div>\r\n          <LicenseList bind:license />\r\n        </div>\r\n        <div data-tooltip=\"Charge unique name (id)\" use:tooltip>\r\n          <div class=\"label\">Name:</div>\r\n          <input placeholder=\"Charge id\" required bind:value={name} />\r\n        </div>\r\n        <div data-tooltip=\"Category to put a charge\" use:tooltip>\r\n          <div class=\"label\">Category:</div>\r\n          <select bind:value={category}>\r\n            {#each Object.keys(charges.types) as c}\r\n              <option value={c}>{c}</option>\r\n            {/each}\r\n          </select>\r\n        </div>\r\n        <div class=\"buttons\">\r\n          <button on:click={addCharge}>Add</button>\r\n          <button on:click={() => (selected = false)}>Cancel</button>\r\n        </div>\r\n      </div>\r\n    {:else}\r\n      <label class=\"dragging\">\r\n        <slot {dragging}>\r\n          <div>Drag &amp; Drop image here or <b>browse</b></div>\r\n        </slot>\r\n        <input type=\"file\" accept=\"image/*\" on:input={onFile(getFilesFromInputEvent)} />\r\n      </label>\r\n    {/if}\r\n  </div>\r\n</div>\r\n\r\n<style>\r\n  #rasterUpload {\r\n    height: 100%;\r\n    width: 100%;\r\n    position: fixed;\r\n    z-index: 1;\r\n    left: 0;\r\n    top: 0;\r\n    background-color: #000000e6;\r\n    transition: 0.5s;\r\n    user-select: none;\r\n    display: flex;\r\n    flex-flow: row;\r\n    align-items: center;\r\n    justify-content: center;\r\n    overflow: auto;\r\n  }\r\n\r\n  .container {\r\n    color: #ddd;\r\n    max-height: 90%;\r\n    max-width: 90%;\r\n  }\r\n\r\n  .inputs {\r\n    column-count: 3;\r\n  }\r\n\r\n  input,\r\n  select {\r\n    width: 10em;\r\n  }\r\n\r\n  .buttons > button {\r\n    cursor: pointer;\r\n    margin: 1.18em 0;\r\n    width: 4.8em;\r\n  }\r\n\r\n  @media only screen and (orientation: portrait) {\r\n    .inputs {\r\n      column-count: 2;\r\n    }\r\n\r\n    .buttons {\r\n      column-span: all;\r\n    }\r\n  }\r\n\r\n  input[type=\"file\"] {\r\n    display: none;\r\n  }\r\n\r\n  .close {\r\n    position: fixed;\r\n    top: 0em;\r\n    right: 0.5em;\r\n    font-size: 4em;\r\n    padding: 0.2em 0;\r\n    display: inline-block;\r\n    color: #ddd;\r\n    z-index: 2;\r\n  }\r\n\r\n  label:hover,\r\n  span:hover {\r\n    cursor: pointer;\r\n    color: #fff;\r\n  }\r\n\r\n  .dragging {\r\n    width: max-content;\r\n  }\r\n</style>\r\n",
    "<script>\r\n  import LicenseList from \"./LicenseList.svelte\";\r\n  import {state, colors, tinctures, message, shield} from \"data/stores\";\r\n  import {charges} from \"data/dataModel\";\r\n  import {shieldPaths} from \"data/shields\";\r\n  import {camelize} from \"scripts/utils\";\r\n  import {tooltip} from \"scripts/tooltip\";\r\n\r\n  let dragging = false,\r\n    selected = false;\r\n  let svg,\r\n    transform = {a: 1, b: 0, c: 0, d: 1, e: 0, f: 0},\r\n    name,\r\n    category = \"uploaded\",\r\n    color = \"#d7374a\";\r\n  let source, license, author;\r\n  const tinctureList = [\"metals\", \"colours\", \"stains\"].map(type => Object.keys($tinctures[type])).flat();\r\n\r\n  $: updateTransform(transform);\r\n\r\n  function updateTransform(transform) {\r\n    if (!svg) return; // on component on load\r\n    const el = document.createElement(\"html\");\r\n    el.innerHTML = svg;\r\n    const g = el.querySelector(\"g\");\r\n    const transformString = Object.values(transform).join(\" \");\r\n    if (transformString === \"1 0 0 1 0 0\") g.removeAttribute(\"transform\");\r\n    else g.setAttribute(\"transform\", \"matrix(\" + transformString + \")\");\r\n    svg = g.outerHTML;\r\n  }\r\n\r\n  const onFile = getFilesFunction => event => {\r\n    dragging = false;\r\n    const files = getFilesFunction(event);\r\n    const file = files.length ? files[0] : [];\r\n\r\n    if (!file.type.match(/text.*|svg.*/)) {\r\n      $message = {type: \"error\", text: \"File must be text or svg!\"};\r\n      return;\r\n    }\r\n\r\n    selected = true;\r\n    name = camelize(file.name);\r\n    loadImage(file);\r\n  };\r\n\r\n  function getFilesFromDropEvent({dataTransfer: {files, items}}) {\r\n    return files.length ? [...files] : items.filter(({kind}) => kind === \"file\").map(({getAsFile}) => getAsFile());\r\n  }\r\n\r\n  function getFilesFromInputEvent({target}) {\r\n    const files = target.files ? [...target.files] : [];\r\n    target.value = \"\";\r\n    return files;\r\n  }\r\n\r\n  function loadImage(file) {\r\n    const reader = new FileReader();\r\n    reader.onload = function (readerEvent) {\r\n      const svgText = readerEvent.target.result;\r\n      const el = document.createElement(\"html\");\r\n      el.innerHTML = svgText;\r\n\r\n      // remove sodipodi and inkscape attributes\r\n      el.querySelectorAll(\"*\").forEach(el => {\r\n        const attributes = el.getAttributeNames();\r\n        attributes.forEach(attr => {\r\n          if (attr.includes(\"inkscape\") || attr.includes(\"sodipodi\")) el.removeAttribute(attr);\r\n        });\r\n      });\r\n\r\n      const g = el.querySelector(\"g\");\r\n      if (!g) {\r\n        $message = {type: \"error\", text: \"File must be prepared svg. Download template for guidance!\"};\r\n        selected = false;\r\n        return;\r\n      }\r\n\r\n      const consolidated = g.transform.baseVal.consolidate();\r\n      if (consolidated) {\r\n        const {a, b, c, d, e, f} = consolidated.matrix;\r\n        const fix = n => +n.toFixed(4);\r\n        transform = Object.assign(transform, {a: fix(a), b: fix(b), c: fix(c), d: fix(d), e: fix(e), f: fix(f)});\r\n      }\r\n      g.removeAttribute(\"id\");\r\n      svg = g.outerHTML;\r\n    };\r\n    reader.readAsText(file);\r\n  }\r\n\r\n  function addCharge() {\r\n    const allCharges = Object.keys(charges.types)\r\n      .map(type => Object.keys(charges[type]))\r\n      .flat();\r\n    name = camelize(name);\r\n\r\n    if (!name || document.getElementById(name) || allCharges.includes(name)) {\r\n      $message = {type: \"error\", text: \"Name must be unique id!\"};\r\n      return;\r\n    }\r\n\r\n    if (!charges.types[category]) charges.types[category] = 6;\r\n    if (!charges.single[category]) charges.single[category] = 6;\r\n    charges[category][name] = 5;\r\n\r\n    const el = document.createElement(\"html\");\r\n    el.innerHTML = svg;\r\n    const image = el.querySelector(\"g\");\r\n    image.id = name;\r\n\r\n    if (source) image.setAttribute(\"source\", source);\r\n    if (license) image.setAttribute(\"license\", license);\r\n    if (author) image.setAttribute(\"author\", author);\r\n\r\n    defs.insertAdjacentHTML(\"beforeend\", image.outerHTML);\r\n\r\n    selected = false;\r\n    $state.vector = 0;\r\n    $message = {type: \"success\", text: `Charge \"${name}\" is added to the category \"${category}\"`};\r\n  }\r\n\r\n  function downloadTemplate() {\r\n    fetch(\"charges/template.svg\").then(text => {\r\n      return text.blob().then(blob => {\r\n        const a = document.createElement(\"a\");\r\n        a.href = URL.createObjectURL(blob);\r\n        a.setAttribute(\"download\", \"armoriaChargeTemplate.txt\");\r\n        a.click();\r\n      });\r\n    });\r\n  }\r\n</script>\r\n\r\n<div\r\n  id=\"vectorUpload\"\r\n  on:drop|preventDefault={onFile(getFilesFromDropEvent)}\r\n  on:dragover|preventDefault={() => (dragging = true)}\r\n  on:dragleave|preventDefault={() => (dragging = false)}\r\n>\r\n  <span on:click={() => ($state.vector = 0)} class=\"close\">&times;</span>\r\n  <div class=\"container\">\r\n    {#if selected}\r\n      <svg\r\n        width=\"100%\"\r\n        height=\"100%\"\r\n        fill={color}\r\n        stroke=\"#000\"\r\n        stroke-width=\"1\"\r\n        viewBox=\"0 0 200 200\"\r\n        data-tooltip=\"Fit image into the rectangle for best result\"\r\n        use:tooltip\r\n      >\r\n        <g fill=\"#fff\" fill-opacity=\".05\" stroke=\"#fff\" stroke-width=\".5\">\r\n          <path d={shieldPaths[$shield]} />\r\n          <rect x=\"60\" y=\"60\" width=\"80\" height=\"80\" />\r\n        </g>\r\n        <g>{@html svg}</g>\r\n      </svg>\r\n\r\n      <div>\r\n        <div class=\"label\">SVG Markup:</div>\r\n        <textarea rows=\"5\" bind:value={svg} />\r\n      </div>\r\n\r\n      <div class=\"inputs\">\r\n        <div data-tooltip=\"Charge translate: X and Y px\" use:tooltip>\r\n          <div class=\"label\">Translate:</div>\r\n          <input type=\"number\" step=\".1\" class=\"paired\" bind:value={transform.e} />\r\n          <input type=\"number\" step=\".1\" class=\"paired\" bind:value={transform.f} />\r\n        </div>\r\n\r\n        <div data-tooltip=\"Charge scale: X and Y, where 1 is default size\" use:tooltip>\r\n          <div class=\"label\">Scale:</div>\r\n          <input type=\"number\" step=\".01\" class=\"paired\" bind:value={transform.a} />\r\n          <input type=\"number\" step=\".01\" class=\"paired\" bind:value={transform.d} />\r\n        </div>\r\n\r\n        <div\r\n          data-tooltip=\"Tincture preview color, does not affect uploaded actual color. Charges must not have exact color defined. In this case charge will support all tunctures\"\r\n          use:tooltip\r\n        >\r\n          <div class=\"label\">Tincture:</div>\r\n          <select bind:value={color}>\r\n            {#each tinctureList as tincture}\r\n              <option value={$colors[tincture]}>{tincture}</option>\r\n            {/each}\r\n          </select>\r\n        </div>\r\n\r\n        <div data-tooltip=\"Link to the image source\" use:tooltip>\r\n          <div class=\"label\">Source:</div>\r\n          <input bind:value={source} />\r\n        </div>\r\n        <div data-tooltip=\"Image author or source portal name\" use:tooltip>\r\n          <div class=\"label\">Author:</div>\r\n          <input bind:value={author} />\r\n        </div>\r\n        <div data-tooltip=\"Image license\" use:tooltip>\r\n          <div class=\"label\">License:</div>\r\n          <LicenseList bind:license />\r\n        </div>\r\n        <div data-tooltip=\"Charge unique name (id)\" use:tooltip>\r\n          <div class=\"label\">Name:</div>\r\n          <input placeholder=\"Charge id\" required bind:value={name} />\r\n        </div>\r\n        <div data-tooltip=\"Category to put a charge\" use:tooltip>\r\n          <div class=\"label\">Category:</div>\r\n          <select bind:value={category}>\r\n            {#each Object.keys(charges.types) as c}\r\n              <option value={c}>{c}</option>\r\n            {/each}\r\n          </select>\r\n        </div>\r\n\r\n        <div class=\"buttons\">\r\n          <button on:click={addCharge}>Upload</button>\r\n          <button on:click={() => (selected = false)}>Cancel</button>\r\n        </div>\r\n      </div>\r\n    {:else}\r\n      <label class=\"dragging\">\r\n        <slot {dragging}>\r\n          <div>Drag &amp; Drop svg file here or <b>browse</b></div>\r\n        </slot>\r\n        <input type=\"file\" accept=\".svg\" on:input={onFile(getFilesFromInputEvent)} />\r\n      </label>\r\n      <button class=\"template\" on:click={downloadTemplate}>Download Template</button>\r\n    {/if}\r\n  </div>\r\n</div>\r\n\r\n<style>\r\n  #vectorUpload {\r\n    height: 100%;\r\n    width: 100%;\r\n    position: fixed;\r\n    z-index: 1;\r\n    left: 0;\r\n    top: 0;\r\n    background-color: #000000e6;\r\n    transition: 0.5s;\r\n    user-select: none;\r\n    display: flex;\r\n    flex-flow: row;\r\n    align-items: center;\r\n    justify-content: center;\r\n    overflow: auto;\r\n  }\r\n\r\n  .container {\r\n    color: #ddd;\r\n    max-height: 100%;\r\n    max-width: 90%;\r\n  }\r\n\r\n  .inputs {\r\n    column-count: 3;\r\n  }\r\n\r\n  textarea {\r\n    width: 100%;\r\n    font-size: 0.8em;\r\n    font-family: \"Courier New\", Courier, monospace;\r\n  }\r\n\r\n  input,\r\n  select {\r\n    width: 10em;\r\n  }\r\n\r\n  input.paired {\r\n    width: 4.85em;\r\n  }\r\n\r\n  input[type=\"file\"] {\r\n    display: none;\r\n  }\r\n\r\n  .close {\r\n    position: fixed;\r\n    top: 0em;\r\n    right: 0.5em;\r\n    font-size: 4em;\r\n    padding: 0.2em 0;\r\n    display: inline-block;\r\n    color: #ddd;\r\n    z-index: 2;\r\n  }\r\n\r\n  label:hover,\r\n  span:hover {\r\n    cursor: pointer;\r\n    color: #fff;\r\n  }\r\n\r\n  .dragging {\r\n    width: max-content;\r\n  }\r\n\r\n  .template {\r\n    position: absolute;\r\n    top: 50%;\r\n    left: 50%;\r\n    margin-top: 2.5em;\r\n    transform: translate(-50%, -50%);\r\n  }\r\n\r\n  .buttons > button {\r\n    cursor: pointer;\r\n    margin: 1.18em 0;\r\n    width: 4.8em;\r\n  }\r\n\r\n  @media only screen and (orientation: portrait) {\r\n    .inputs {\r\n      column-count: 2;\r\n    }\r\n\r\n    .buttons {\r\n      column-span: all;\r\n    }\r\n  }\r\n</style>\r\n"
  ],
  "names": [],
  "mappings": "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"
}