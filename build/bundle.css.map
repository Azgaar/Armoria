{
  "version": 3,
  "file": "bundle.css",
  "sources": [
    "About.svelte",
    "App.svelte",
    "Gallery.svelte",
    "Message.svelte",
    "Navbar.svelte",
    "Positions.svelte",
    "Switch.svelte",
    "Tinctures.svelte",
    "Tip.svelte",
    "UploadRaster.svelte",
    "UploadVector.svelte",
    "Editor.svelte",
    "EditorCharge.svelte",
    "EditorControls.svelte",
    "EditorPosition.svelte",
    "EditorShift.svelte",
    "EditorStroke.svelte"
  ],
  "sourcesContent": [
    "<script>\n  import AnimatedCOA from './AnimatedCOA.svelte';\n  import {state} from './stores';\n  import {fade, fly} from 'svelte/transition';\n  const duration = 1000;\n</script>\n\n<div id=\"about\" transition:fade>\n  <span on:click={() => $state.about = 0} class=\"close\">&times;</span>\n  <div id=\"aboutCont\">\n    <AnimatedCOA {duration}/>\n    <div class=buttons in:fly=\"{{y:200, delay: duration, duration}}\">\n      <a target=_blank href=https://discord.com/invite/X7E84HU><span translate=\"no\">Discord</span></a>\n      <a target=_blank href=https://github.com/Azgaar/Armoria><span translate=\"no\">GitHub</span></a>\n      <a target=_blank href=https://www.patreon.com/azgaar><span translate=\"no\">Patreon</span></a>\n    </div>\n  </div>\n</div>\n\n<style>\n  #about {\n    height: 100%;\n    width: 100%;\n    position: fixed;\n    z-index: 1;\n    left: 0;\n    top: 0;\n    background-color: rgba(0,0,0, 0.9);\n    transition: .5s;\n    text-align: center;\n    user-select: none;\n  }\n\n  #aboutCont {\n    position: absolute;\n    top: 50%;\n    left: 50%;\n    transform: translate(-50%, -50%);\n  }\n\n  a, span {\n    display: inline-block;\n    cursor: pointer;\n    color: #ddd;\n  }\n\n  a:hover, span:hover {\n    color: #fff;\n  }\n\n  .buttons > a {\n    margin: 2em;\n    font-size: 1.2em;\n  }\n\n  span.close {\n    position: fixed;\n    top: 0em;\n    right: .5em;\n    font-size: 4em;\n    padding: .2em 0;\n    z-index: 2;\n  }\n</style>",
    "<script>\n  import WindowEvents from './WindowEvents.svelte';\n  import Navbar from './Navbar.svelte';\n  import About from './About.svelte';\n  import Editor from './editor/Editor.svelte';\n  import Gallery from './Gallery.svelte';\n  import UploadRaster from './UploadRaster.svelte';\n  import UploadVector from './UploadVector.svelte';\n  import Tinctures from './Tinctures.svelte';\n  import Message from './Message.svelte';\n  import Patterns from './Patterns.svelte';\n  import {background, size, history, matrices, matrix, state, message, shield} from './stores.js';\n  import {shields} from './dataModel';\n  import {rw} from './utils';\n  let n, w, h, gallery = [], seed;\n\n  $: [n, w, h] = defineGallerySize($size);\n  $: handleMatrixChange($matrix, $size);\n\n  function handleMatrixChange() {\n    const l = $history.length;\n\n    // reroll is clicked\n    if (!$matrices[$matrix]) {\n      if ($state.edit) {\n        // generate new coa\n        $matrices[$matrix] = $matrices[$matrix-1].slice();\n        $matrices[$matrix][$state.i] = l;\n        seed = undefined; // use once\n      } else {\n        // reroll gallery\n        $matrices[$matrix] = Array.from({length: n}, (_, i) => l+i++);\n      }\n\n      // change shield if it's not locked (manually selected)\n      if (!localStorage.getItem(\"shield\")) {\n        $shield = rw(shields[rw(shields.types)]);\n      }\n    }\n\n    // add additional coas to matrix if size is smaller\n    if ($matrices[$matrix].length < n) {\n      const m = $matrices[$matrix];\n      $matrices[$matrix] = [...Array(n).keys()].map(i => m[i] !== undefined ? m[i] : l+i);\n    }\n    gallery = $matrices[$matrix].slice(0, n); // trim gallery if size was bigger\n\n    // on coa edit\n    if ($state.edit) $state.c = $matrices[$matrix][$state.i];\n  }\n\n  void function checkLoadParameters() {\n    const url = new URL(window.location.href);\n    const params = url.searchParams;\n\n    if (!params.has(\"coa\") && !params.has(\"seed\")) return;\n\n    // define coa or seed\n    if (params.get(\"coa\")) {\n      if (!validateJSON(params.get(\"coa\"))) return;\n\n      const coaParsed = JSON.parse(params.get(\"coa\"));\n      $history.push(coaParsed);\n    } else if (params.get(\"seed\")) {\n      seed = params.get(\"seed\");\n      if (!isNaN(+seed)) seed = +seed;\n    }\n\n    // open in edit mode\n    $state.edit = 1;\n    $matrices[0] = [0];\n  }();\n\n  function validateJSON(text) {\n    try {\n      JSON.parse(text);\n      return true;\n    } catch(e) {\n      console.error(e);\n      alert(\"Error: coa value is not valid\\r\\n\" + e.message + \"\\r\\n\" + text);\n      return false;\n    }\n  }\n\n  // define number and size of coas to display\n  function defineGallerySize(desiredSize) {\n    const width = window.innerWidth;\n    const height = window.innerHeight - 60;\n    const numberX = Math.ceil(width / desiredSize);\n    const w = Math.floor(width / numberX);\n    const numberY = Math.floor(height / w);\n    const h = Math.floor(height / numberY);\n    return [numberX * numberY, w, h];\n  }\n</script>\n\n<WindowEvents/>\n<main style=\"background-color: {$background}\">\n  <Navbar/>\n  {#if $state.about}<About/>{/if}\n  {#if $state.raster}<UploadRaster/>{/if}\n  {#if $state.vector}<UploadVector/>{/if}\n  {#if $state.tinctures}<Tinctures/>{/if}\n  {#if $state.edit}<Editor c={$state.c} {seed}/>\n  {:else}<Gallery {gallery} {w} {h}/>{/if}\n  {#if $message}<Message/>{/if}\n  <Patterns/>\n</main>\n\n<style>\n  main {\n    background-image: url(\"data:image/svg+xml,%3Csvg width='84' height='84' viewBox='0 0 84 84' xmlns='http://www.w3.org/2000/svg'%3E%3Cg fill='none'%3E%3Cg fill='%23222' fill-opacity='.2'%3E%3Cpath d='M84 23c-4.417 0-8-3.584-8-7.998V8h-7.002C64.58 8 61 4.42 61 0H23c0 4.417-3.584 8-7.998 8H8v7.002C8 19.42 4.42 23 0 23v38c4.417 0 8 3.584 8 7.998V76h7.002C19.42 76 23 79.58 23 84h38c0-4.417 3.584-8 7.998-8H76v-7.002C76 64.58 79.58 61 84 61V23zM59.05 83H43V66.95c5.054-.5 9-4.764 9-9.948V52h5.002c5.18 0 9.446-3.947 9.95-9H83v16.05c-5.054.5-9 4.764-9 9.948V74h-5.002c-5.18 0-9.446 3.947-9.95 9zm-34.1 0H41V66.95c-5.053-.502-9-4.768-9-9.948V52h-5.002c-5.184 0-9.447-3.946-9.95-9H1v16.05c5.053.502 9 4.768 9 9.948V74h5.002c5.184 0 9.447 3.946 9.95 9zm0-82H41v16.05c-5.054.5-9 4.764-9 9.948V32h-5.002c-5.18 0-9.446 3.947-9.95 9H1V24.95c5.054-.5 9-4.764 9-9.948V10h5.002c5.18 0 9.446-3.947 9.95-9zm34.1 0H43v16.05c5.053.502 9 4.768 9 9.948V32h5.002c5.184 0 9.447 3.946 9.95 9H83V24.95c-5.053-.502-9-4.768-9-9.948V10h-5.002c-5.184 0-9.447-3.946-9.95-9zM50 50v7.002C50 61.42 46.42 65 42 65c-4.417 0-8-3.584-8-7.998V50h-7.002C22.58 50 19 46.42 19 42c0-4.417 3.584-8 7.998-8H34v-7.002C34 22.58 37.58 19 42 19c4.417 0 8 3.584 8 7.998V34h7.002C61.42 34 65 37.58 65 42c0 4.417-3.584 8-7.998 8H50z'/%3E%3C/g%3E%3C/g%3E%3C/svg%3E\");\n  }\n</style>",
    "<script>\n  import COA from './COA.svelte';\n  import {fade} from 'svelte/transition';\n  import {generate} from './generator.js';\n  import {download} from './download.js';\n  import {history, matrices, matrix, state} from './stores';\n  export let gallery, w, h;\n\n  $: font = Math.max(Math.min(Math.ceil(w / 20), 12), 6);\n\n  $: coas = gallery.map(c => {\n    let coa = $history[c] || generate();\n    if (!$history[c]) $history[c] = coa;\n    return coa;\n  });\n\n  function regenerate(i) {\n    $state.i = i;\n    $matrix++;\n    $matrices[$matrix] = $matrices[$matrix-1].slice();\n    $matrices[$matrix][$state.i] = $history.length;\n  }\n\n  function editCOA(i) {\n    $state.edit = 1;\n    $state.c = gallery[i];\n    $state.i = i;\n  }\n</script>\n\n<div id=gallery style=\"font-size: {font}px\" transition:fade>\n  {#each coas as coa, i}\n    <div>\n      {#key coa}\n        <COA {coa} {i} {w} {h}/>\n      {/key}\n      <div class=control>\n        <svg on:click={() => regenerate(i)}><use href=\"#dice-icon\"></use></svg>\n        <svg on:click={() => editCOA(i)}><use href=\"#pencil-icon\"></use></svg>\n        <svg on:click={() => download(i)}><use href=\"#download-icon\"></use></svg>\n      </div>\n    </div>\n  {/each}\n</div>\n\n<style>\n  div {\n    display: inline-table;\n  }\n\n  #gallery > div {\n    display: inline-block;\n    position: relative;\n    user-select: none;\n    transition: background .5s ease;\n  }\n\n  #gallery > div:hover {\n    background: #00000020;\n  }\n\n  .control {\n    display: block;\n    position: absolute;\n    opacity: 0;\n    transition: .5s ease-in-out;\n    transform: translate(-50%, -150%);\n    left: 50%;\n    font-size: 2.4em;\n    white-space: nowrap;\n  }\n\n  #gallery > div:hover > .control {\n    opacity: 1;\n  }\n\n  .control > svg {\n    width: 1.2em;\n    height: 1.2em;\n    fill: #f1f1f1;\n    stroke: #333;\n    stroke-width: .5em;\n    vertical-align: middle;\n    margin: 0 .5em;\n  }\n\n  .control > svg:hover {\n    fill: #fff;\n    cursor: pointer;\n  }\n\n  .control > svg:active {\n    transform: translateY(1px);\n  }\n</style>",
    "<script>\n  import {onMount} from 'svelte';\n  import {fly, fade} from 'svelte/transition';\n  import {message} from './stores.js';\n  const {text, type = \"info\", timeout = 4000} = $message;\n\n  onMount(async () => {\n    const text = $message.text;\n    setTimeout(() => {\n      if ($message?.text === text) $message = null;\n    }, timeout);\n  });\n\n  function hideMessage() {\n    $message = null;\n  }\n</script>\n\n<div class={type} in:fly={{y:200, duration: 500}} out:fade={{duration: 300}} on:click={hideMessage}>\n  {text}\n</div>\n\n<style>\n  div {\n    position: absolute;\n    bottom: 0%;\n    left: 50%;\n    line-height: 1.4em;\n    padding: .8em;\n    transform: translate(-50%, -50%);\n    z-index: 99;\n    max-width: 80%;\n    width: max-content;\n    user-select: none;\n    background-color: #00000095;\n  }\n\n  .error {\n    color: #e90000;\n  }\n\n  .warn {\n    color: #dd7200;\n  }\n\n  .info {\n    color: #fff;\n  }\n\n  .tip {\n    color: #fff;\n    border-radius: 10px;\n  }\n\n  .sucess {\n    color: #0fc63a;\n  }\n</style>",
    "<script>\n  import Tip from './Tip.svelte';\n  import Lock from './Lock.svelte';\n  import {fade} from 'svelte/transition';\n  import {download} from './download.js';\n  import {size, grad, diaper, shield, background, scale, border, borderWidth, matrix, state, changes, message} from './stores';\n  import {shields} from './dataModel';\n\n  const sizes = [[80, \"Giant\"], [100, \"Huge\"], [150, \"Large\"], [200, \"Medium\"], [300, \"Small\"], [400, \"Tiny\"]];\n  const gradients = [\"no\", \"luster\", \"spotlight\", \"backlight\", \"brink\"];\n  const diapers = [\"no\", \"nourse\", \"tessellation\", \"sennwald\", \"sulzbach\"];\n  const wideScreen = window.innerWidth > 600;\n\n  $: position = $changes[1];\n\n  function getPath(shield) {\n    return document.getElementById(shield).innerHTML;\n  }\n\n  function getIcon(icon, active = \"active\") {\n    if (wideScreen) return `<span class=\"navBarIcon ${active}\">${icon}</span>`;\n    return `<svg class=\"navBarIcon ${active}\"><use href=\"#${icon}-icon\"></use></svg>`;\n  }\n\n  function change(e, store, value, key) {\n    e.stopPropagation();\n    store.set(value);\n    localStorage.setItem(key, value);\n  }\n\n  function getRandomColor() {\n    const l = '0123456789ABCDEF';\n    $background = \"#\"+[0,0,0,0,0,0].map(() => l[Math.floor(Math.random() * 16)]).join(\"\");\n    localStorage.setItem(\"background\", $background);\n  }\n\n  function restoreDefault(e, store, key, value) {\n    e.stopPropagation();\n    store.set(value);\n    localStorage.removeItem(key);\n  }\n\n  function share() {\n    const coa = $changes[0].replaceAll(\"#\", \"%23\");\n    const link = window.location.origin + window.location.pathname + \"?coa=\" + coa;\n    $message = null;\n\n    navigator.clipboard.writeText(link).then(\n      () => {\n        $message = null;\n        setTimeout(() => {\n          $message = {type: \"sucess\", text: `COA link is copied to your clipboard`, timeout: 5000};\n        }, 500);\n      }, err => {\n        $message = {type: \"error\", text: `Cannot copy link to the clipboard!`, timeout: 5000};\n        console.error(err);\n      }\n    );\n  }\n\n  // values to be always saved\n  $: localStorage.setItem(\"background\", $background);\n  $: localStorage.setItem(\"border\", $border);\n  $: localStorage.setItem(\"borderWidth\", $borderWidth);\n  $: localStorage.setItem(\"scale\", $scale);\n</script>\n\n<div id=\"navbar\">\n  <ul>\n    <svg class=logo width=35 height=35 viewBox=\"-2 -1 55 55\">\n      <title>Armoria: Heraldry Generator</title>\n      <path fill=\"#fff\" stroke=\"none\" d=\"m 46,3 0.6,1.4 c -1.5,0.7 -2.6,1.4 -3.3,2.2 -0.7,0.7 -1.2,1.5 -1.5,2.4 -0.3,0.9 -0.4,2.2 -0.4,3.9 0,0.6 0,1.3 0,2.2 l 0.5,23.2 c 0,2.5 0.3,4.2 0.8,5 0.4,0.6 0.8,0.8 1.3,0.8 0.6,0 1.5,-0.6 2.8,-1.8 l 0.9,1.1 -5.8,4.9 -1.9,1.6 C 38.4,49.2 37.2,48.2 36.5,46.9 35.8,45.7 35.3,36.7 35.2,34 c -7.6,0.1 -20.2,0 -20.2,0 0,0 -7.4,9.1 -7.4,11.1 0,0.6 0.2,1.1 0.6,1.8 0.5,0.9 0.8,1.4 0.8,1.7 0,0.4 -0.1,0.7 -0.4,1 -0.3,0.3 -0.6,0.4 -1.1,0.4 -0.5,0 -0.9,-0.2 -1.2,-0.6 -0.5,-0.6 -0.7,-1.3 -0.7,-2.2 0,-1 0.3,-2.1 0.8,-3.3 C 8.8,39.9 11.3,36.7 14.1,32.9 11.1,30.7 9,28.5 7.8,26.4 6.6,24.4 6,22.1 6,19.5 c 0,-3 0.8,-5.7 2.3,-8.3 1.5,-2.5 3.8,-4.5 6.9,-6 3.1,-1.5 6.2,-2.2 9.4,-2.2 4.9,0 9.7,1.7 14.3,5.1 1.1,-1.2 2.2,-2.1 3.2,-2.9 1,-0.8 2.4,-1.5 4,-2.3 z M 30.7,10.2 c -2.6,-1.3 -5.2,-1.9 -7.8,-1.9 -2.7,0 -5.3,0.6 -7.8,1.8 -2.4,1.2 -4.2,2.8 -5.4,4.7 -1.2,1.9 -1.8,3.9 -1.8,5.9 0,4.2 2.3,8 6.9,11.3 L 25.2,17.7 c -1.6,-0.8 -2.9,-1.3 -4.2,-1.3 -1.7,0 -3.1,0.8 -4.2,2.4 -0.4,0.7 -1,0.5 -1.1,-0.2 0,-0.6 0.3,-1.5 1,-2.7 0.7,-1.1 1.6,-2.1 2.9,-2.8 1.3,-0.7 2.6,-1.1 4,-1.1 1.4,0 3.1,0.4 4.9,1.1 z m 4,3.2 C 34,12.4 32.8,11.5 32,11 L 18.4,29.4 h 16.7 z\"/>\n    </svg>\n\n    <div class=\"container\">\n      <bl>{@html getIcon(\"options\")}</bl>\n\n      <div class=\"dropdown level1\">\n        <div class=\"container\">\n          <div class=\"dropdown level2\">\n            {#each Object.keys(shields.types) as type}\n              <div class=\"container\">\n                <div class=\"dropdown level3 iconed\">\n                  {#each Object.keys(shields[type]) as sh}\n                    <bt on:click={e => change(e, shield, sh, \"shield\")}>\n                      <svg class=shield class:selected={sh === $shield} width=26 height=26 viewBox=\"0 0 200 210\">{@html getPath(sh)}</svg>\n                      {sh.split(/(?=[A-Z])/).join(\" \")}\n                    </bt>\n                  {/each}\n                </div>\n\n                <bl>\n                  {type.split(/(?=[A-Z])/).join(\" \")}\n                </bl>\n              </div>\n            {/each}\n          </div>\n          <bl>\n            {#key $shield}<Lock key=shield/>{/key}\n            <span>Shield</span>\n            <Tip tip=\"Shield or banner shape. If not set, a random one is selected on reroll\"/>\n          </bl>\n        </div>\n\n        <bt on:click={() => $state.tinctures = 1}>\n          <Lock key=tinctures/>\n          <Lock key=colors/>\n          <span>Tinctures</span>\n          <Tip tip=\"Tinctures settings. Edit COA to change tincture itself\"/>\n        </bt>\n\n        <div class=\"container\">\n          <div class=\"dropdown level2\">\n            {#each gradients as g}\n              <bt class:selected={g === $grad} on:click={e => change(e, grad, g, \"grad\")}>{g}</bt>\n            {/each}\n          </div>\n          <bl>\n            {#key $grad}<Lock key=grad/>{/key}\n            <span>Gradient</span>\n            <Tip tip=\"Overlay style to be applied on top of coat of arms\"/>\n          </bl>\n        </div>\n\n        <div class=\"container\">\n          <div class=\"dropdown level2\">\n            {#each diapers as d}\n              <bt class:selected={d === $diaper} on:click={e => change(e, diaper, d, \"diaper\")}>{d}</bt>\n            {/each}\n          </div>\n          <bl>\n            {#key $diaper}<Lock key=diaper/>{/key}\n            <span>Damasking</span>\n            <Tip tip=\"Backing style for coat of arms, also known as diaper\"/>\n          </bl>\n        </div>\n\n        <div class=\"container\">\n          <div class=\"dropdown level2\">\n            {#each sizes as s}\n              <bt class:selected={$size == s[0]} on:click={e => change(e, size, s[0], \"size\")}>{s[1]}</bt>\n            {/each}\n          </div>\n          <bl>\n            {#key $size}<Lock key=size/>{/key}\n            <span>Gallery</span>\n            <Tip tip=\"Coat of arms gallery size. Change to smaller value to make coat of arms bigger\"/>\n          </bl>\n        </div>\n\n        <div class=\"container\">\n          <div class=\"dropdown level2\">\n            <bl>Color\n              {#if $border !== \"#333333\"}\n                <Tip tip=\"Restore default color\">\n                  <svg on:click={e => restoreDefault(e, border, \"border\", \"#333333\")} class=\"navBarIcon active smaller\"><use href=\"#undo-icon\"></use></svg>\n                </Tip>\n              {/if}\n              <input type=\"color\" bind:value={$border}/>\n            </bl>\n            <bl>Width\n              {#if $borderWidth !== 1}\n                <Tip tip=\"Restore default border width\">\n                  <svg on:click={e => restoreDefault(e, borderWidth, \"borderWidth\", 1)} class=\"navBarIcon active smaller\"><use href=\"#undo-icon\"></use></svg>\n                </Tip>\n              {/if}\n              <input class=\"right\" type=\"number\" min=0 max=4 step=.1 on:input={function(e) {change(e, borderWidth, +this.value, \"borderWidth\")}} value={$borderWidth}/>\n            </bl>\n          </div>\n          <bl>\n            <span>Border</span>\n            <Tip tip=\"Coat of arms border style\"/>\n          </bl>\n        </div>\n\n        <div class=\"container\">\n          <div class=\"dropdown level2\">\n            <bl>Color\n              <Tip tip=\"Select random color\">\n                <svg on:click={getRandomColor} class=\"navBarIcon active smaller\"><use href=\"#random-icon\"></use></svg>\n              </Tip>\n              {#if $background !== \"#333333\"}\n                <Tip tip=\"Restore default color\">\n                  <svg on:click={e => restoreDefault(e, background, \"background\", \"#333333\")} class=\"navBarIcon active smaller\"><use href=\"#undo-icon\"></use></svg>\n                </Tip>\n              {/if}\n              <input type=\"color\" bind:value={$background}/>\n            </bl>\n          </div>\n          <bl>\n            <span>Background</span>\n            <Tip tip=\"Window background color\"/>\n          </bl>\n        </div>\n\n        <div class=\"container\">\n          <div class=\"dropdown level2\">\n            <bl class=\"wide\">\n              <input type=\"range\" min=1 max=4 step=.1 bind:value={$scale}/>\n              <input type=\"number\" min=1 max=4 step=.1 bind:value={$scale}/>\n            </bl>\n          </div>\n          <bl>\n            <span>Scale</span>\n            <Tip tip=\"Downloaded image size, 1 is default size, 2 - 2x size, etc.\"/>\n          </bl>\n        </div>\n      </div>\n    </div>\n\n    {#if $matrix}\n      <bt on:click={() => $matrix -= 1}>\n        <Tip tip=\"Roll to the previous list\" gesture=\"Swipe up\" hotkey=\"Backspace\">{@html getIcon(\"rollback\")}</Tip>\n      </bt>\n    {:else}\n      <bd>{@html getIcon(\"rollback\", \"inactive\")}</bd>\n    {/if}\n\n    <bt on:click={() => $matrix += 1}>\n      <Tip tip=\"Regenerate coat of arms\" gesture=\"Swipe down\" hotkey=\"Enter\">{@html getIcon(\"reroll\")}</Tip>\n    </bt>\n\n    <bt on:click={() => download()}>\n      <Tip tip=\"Download png image. Size can be set in options\" hotkey=\"D\">{@html getIcon(\"download\")}</Tip>\n    </bt>\n\n    {#if wideScreen || !$state.edit}\n      <div class=\"container\"><bl>{@html getIcon(\"upload\")}</bl>\n        <div class=\"dropdown level1\">\n          <bt on:click={() => $state.raster = 1}>\n            <span>Raster</span>\n            <Tip tip=\"Upload raster charge (one color, quality loss on scale) from jpg, png or svg image\"/>\n          </bt>\n\n          <bt on:click={() => $state.vector = 1}>\n            <span>Vector</span>\n            <Tip tip=\"Upload vector charge (multicolor and lossless scalable) from prepared svg\"/>\n          </bt>\n        </div>\n      </div>\n    {/if}\n\n    {#if $state.edit}\n      <bt on:click={share}>\n        {@html getIcon(\"share\")}\n      </bt>\n    {/if}\n\n    {#if $state.edit}\n      {#if position > 0}\n        <bt on:click={() => changes.undo()}>\n          <Tip tip=\"Revert the latest change\" gesture=\"Swipe left\" hotkey=\"Z\">{@html getIcon(\"undo\")}</Tip>\n        </bt>\n      {:else}\n        <bd>{@html getIcon(\"undo\", \"inactive\")}</bd>\n      {/if}\n\n      {#if position < changes.length() - 1}\n        <bt on:click={() => changes.redo()}>\n          <Tip tip=\"Restore the next change\" gesture=\"Swipe right\" hotkey=\"X\">{@html getIcon(\"redo\")}</Tip>\n        </bt>\n      {:else}\n        <bd>{@html getIcon(\"redo\", \"inactive\")}</bd>\n      {/if}\n    {/if}\n\n    {#if $state.edit}\n      <bt id=\"back\" on:click={() => $state.edit = 0} transition:fade>\n        <Tip tip=\"Get back to Gallery\" hotkey=\"Escape\">{@html getIcon(\"back\")}</Tip>\n      </bt>\n    {/if}\n\n    {#if wideScreen || !$state.edit}\n      <bt on:click={() => $state.about = 1}>\n        <Tip tip=\"Show about screen\" hotkey=\"F1\">{@html getIcon(\"about\")}</Tip>\n      </bt>\n    {/if}\n  </ul>\n</div>\n\n<style>\n  ul {\n    top: 0;\n    width: 100%;\n    list-style-type: none;\n    margin: 0;\n    padding: 0;\n    display: flex;\n    align-items: center;\n    overflow: hidden;\n    background-color: #1b1c1d;\n    z-index: 1;\n    white-space: nowrap;\n  }\n\n  .logo {\n    display: block;\n    margin: 0 .5em 0 1em;\n    background-color: #35bdb2;\n  }\n\n  :global(svg.navBarIcon) {\n    width: 1em;\n    height: 1em;\n    fill: #333;\n    stroke: none;\n    vertical-align: middle;\n  }\n\n  :global(svg.navBarIcon.active) {\n    fill: #fff;\n    cursor: pointer;\n  }\n\n  :global(span.navBarIcon) {\n    color: #333;\n  }\n\n  :global(span.navBarIcon.active) {\n    color: #fff;\n    cursor: pointer;\n  }\n\n  .navBarIcon.smaller {\n    width: .8em;\n    height: .8em;\n  }\n\n  .navBarIcon.smaller:active {\n    transform: translateY(1px);\n  }\n\n  bt, bl, bd {\n    user-select: none;\n    padding: 1em 1.14em;\n    line-height: 1.24;\n    color: #fff;\n    text-transform: capitalize;\n  }\n\n  bt {\n    cursor: pointer;\n    transition: background-color .1s;\n  }\n\n  bt:hover, bl:hover {\n    background-color: #2d2e2f;\n  }\n\n  bt:active:not(:last-child) {\n    transform: translateY(1px);\n  }\n\n  input[type=\"color\"] {\n    position: absolute;\n    padding: 0;\n    margin: -.3em 0;\n    right: .4em;\n    border: 0;\n    width: 3em;\n    cursor: pointer;\n  }\n\n  input[type=\"range\"] {\n    padding: 0;\n    width: 72%;\n    margin: 0;\n    height: .6em;\n    cursor: pointer;\n  }\n\n  input[type=\"number\"] {\n    padding: 0 0 0 3px;\n    width: 25%;\n    margin: 0;\n    border: 0;\n  }\n\n  input[type=\"number\"].right {\n    position: absolute;\n    padding: 2px;\n    margin: -.25em 0;\n    right: .4em;\n    width: 3em;\n  }\n\n  .dropdown {\n    display: none;\n    position: fixed;\n    background-color: #1b1c1d;\n    min-width: 9em;\n    box-shadow: 0px 8px 16px 0px rgba(0,0,0,0.2);\n    z-index: 1;\n  }\n\n  .level1 {\n    margin-top: 1em;\n  }\n\n  .level2 {\n    z-index: 1;\n    margin-left: 10.25em;\n  }\n\n  .level3 {\n    z-index: 2;\n    margin-left: 10.25em;\n  }\n\n  .dropdown bt, .dropdown bl {\n    padding: 12px 16px;\n    width: 8em;\n    display: block;\n  }\n\n  .dropdown bl.wide {\n    width: 12em;\n  }\n\n  .container:hover > .dropdown {\n    display: block;\n  }\n\n  .dropdown bt.selected:before {\n    content: '\\2713';\n    display: inline-block;\n    padding: 0 6px 0 0;\n  }\n\n  /* low-width (narrow) screen */\n  @media only screen and (max-width: 720px) {\n    .logo {\n      display: none;\n    }\n\n    .level3 {\n      margin-left: -10.25em;\n      background-color: #222;\n    }\n  }\n\n  /* low-height screen */\n  @media only screen and (max-height: 640px) and (orientation: landscape) {\n    .dropdown bt, .dropdown bl {\n      padding: 6px 16px;\n      width: 7em;\n    }\n\n    .level2 {\n      margin-left: 9.25em;\n    }\n\n    .level3 {\n      margin-left: 9.25em;\n    }\n  }\n  \n\n  @media only screen and (max-height: 640px) and (min-width: 520px) and (orientation: landscape) {\n    .logo {display: none;}\n    .level3 {column-count: 2;}\n  }\n\n  @media only screen and (max-height: 640px) and (min-width: 680px) and (orientation: landscape) {\n    .logo {display: none;}\n    .level3 {column-count: 3;}\n  }\n\n  .dropdown.iconed {\n    text-indent: 1.8em;\n  }\n\n  .shield {\n    position: absolute;\n    fill: none;\n    stroke: #fff;\n    stroke-width: 5px;\n    margin: -0.4em 0 0 -2.2em;\n  }\n\n  .shield.selected {\n    fill: #777;\n    stroke: #333;\n  }\n\n  #back {\n    position: absolute;\n    right: 0;\n  }\n</style>",
    "<script>\n  import {state, shield} from \"./stores\";\n  import {shieldPositions} from \"./dataModel.js\";\n  import {fade} from 'svelte/transition';\n\n  // on shield change\n  $: points = shieldPositions[$shield] ? Object.entries(shieldPositions[$shield]) : Object.entries(shieldPositions.spanish);\n\n  function getClass(p) {\n    if (\"abcdefghi\".includes(p)) return \"green\";\n    if (\"ABCDEFGHIJKL\".includes(p)) return \"red\";\n    if (\"zy\".includes(p)) return \"yellow\";\n    return \"blue\";\n  }\n</script>\n\n{#if $state.positions}\n  <g transform={$state.transform || null} transform-origin=center>\n    <g id=positions transform=\"translate(100, 100)\" transition:fade|local>\n      {#each points as p}\n        <g id={p[0]} class={getClass(p[0])}>\n          <circle cx={p[1][0]} cy={p[1][1]} r=3 class:active={$state.positions.includes(p[0])}/>\n          <text style=\"dominant-baseline: central\" x={p[1][0]} y={p[1][1]} class:active={$state.positions.includes(p[0])}>{p[0]}</text>\n        </g>\n      {/each}\n    </g>\n  </g>\n{/if}\n\n<style>\n  circle {\n    opacity: .6;\n  }\n\n  circle.active {\n    opacity: 1;\n  }\n\n  text {\n    font-family: monospace;\n    text-anchor: middle;\n    font-size: 5px;\n    fill: #ddd;\n  }\n\n  text.active {\n    fill: #fff;\n  }\n\n  .green {\n    fill: rgb(12, 80, 12);\n  }\n\n  .blue {\n    fill: rgb(12, 12, 80);\n  }\n\n  .red {\n    fill: rgb(80, 12, 12);\n  }\n\n  .yellow {\n    fill: rgb(84, 84, 0);\n  }\n</style>",
    "<script>\n  export let checked = false;\n  const id = \"switch\" + Math.floor(1e6 * Math.random());\n</script>\n\n<div class=switch>\n  <input id={id} class=switch-input type=checkbox bind:checked/>\n  <label for={id} class=switch-label>Switch</label>\n</div>\n\n<style>\n  .switch {\n    position: relative;\n    display: inline-block;\n    top: -5px;\n  }\n\n  .switch-input {\n    display: none;\n  }\n\n  .switch-label {\n    display: block;\n    width: 48px;\n    height: 24px;\n    color: transparent;\n  }\n\n  .switch-label::before, .switch-label::after {\n    content: \"\";\n    display: block;\n    position: absolute;\n    cursor: pointer;\n  }\n\n  .switch-label::before {\n    width: 100%;\n    height: 100%;\n    background-color: #dedede;\n    border-radius: 9999em;\n    -webkit-transition: background-color 0.25s ease;\n    transition: background-color 0.25s ease;\n  }\n\n  .switch-label::after {\n    top: 0;\n    left: 0;\n    width: 24px;\n    height: 24px;\n    border-radius: 50%;\n    background-color: #fff;\n    box-shadow: 0 0 2px rgba(0, 0, 0, 0.45);\n    -webkit-transition: left 0.25s ease;\n    transition: left 0.25s ease;\n  }\n\n  .switch-input:checked + .switch-label::before {\n    background-color: #89c12d;\n  }\n\n  .switch-input:checked + .switch-label::after {\n    left: 24px;\n  }\n</style>",
    "<script>\n  import Tip from './Tip.svelte';\n  import { fade } from 'svelte/transition';\n  import { flip } from 'svelte/animate';\n  import { colors, tinctures, state, message } from './stores';\n  import { defaultTinctures, defaultColors } from './dataModel';\n  import { camelize } from './utils';\n\n  let add = {show: false, name: \"\", type: \"colours\", color: \"#96C8FA\", chance: 3};\n\n  // remove stored weighted array\n  for (const key in $tinctures) {delete $tinctures[key].array};\n\n  $: tData = [\"metals\", \"colours\", \"stains\"].map(type => {\n      return Object.keys($tinctures[type]).map(t => {\n        return {t, type};\n      });\n    }).flat();\n\n  $: lock(\"tinctures\", $tinctures);\n  $: lock(\"colors\", $colors);\n\n  // don't lock options on load\n  let loaded = [];\n  function lock(key, value) {\n    if (loaded.includes(key)) localStorage.setItem(key, JSON.stringify(value));\n    else loaded.push(key);\n  }\n\n  function getTotalChance(type) {\n    return Object.entries($tinctures[type]).reduce((a, b) => a + b[1], 0);\n  }\n\n  function removeTincture(t) {\n    if (t.type === \"metals\" || t.type === \"colours\") {\n      const typeItems = Object.keys($tinctures[t.type]);\n      if (typeItems.length < 3) {\n        $message = {type: \"error\", text: `There should be at least 2 tinctures of type '${t.type}'!`};\n        return;\n      }\n    }\n\n    delete $tinctures[t.type][t.t];\n    $tinctures = $tinctures;\n  }\n\n  function addTincture() {\n    add.show = true;\n    $message = {type: \"warn\", text: `Set tincture name, type, color and chance and then click on 'Apply Tincture'`, timeout: 8000};\n  }\n\n  function cancelAddTincture() {\n    add.show = false;\n  }\n\n  function applyAddTincture() {\n    const name = camelize(add.name);\n\n    if (!name || $colors[name]) {\n      $message = {type: \"error\", text: `Tincture name must be unique!`};\n      return;\n    }\n\n    $tinctures[add.type][add.name] = add.chance;\n    $colors[add.name] = add.color;\n    add.show = false;\n    $message = {type: \"info\", text: `Tincture ${add.name} is added`};\n  }\n\n  function restoreDefault() {\n    $tinctures = JSON.parse(JSON.stringify(defaultTinctures));\n    $colors = JSON.parse(JSON.stringify(defaultColors));\n    localStorage.removeItem(\"tinctures\");\n    localStorage.removeItem(\"colors\");\n    loaded = [];\n    $message = {type: \"info\", text: `Default values are restored`};\n  }\n</script>\n\n<div id=\"tinctures\" transition:fade|local>\n  <span on:click={() => $state.tinctures = 0} class=\"close\">&times;</span>\n  <div id=\"tincturesCont\">\n\n    <div id=left>\n      <table>\n        <thead>\n          <tr>\n            <th>Element</th>\n            <th>Metals</th>\n            <th>Colours</th>\n            <th>Stains</th>\n            <th>Patterns</th>\n          </tr>\n        </thead>\n        <tbody>\n            <tr>\n              <td>Field</td>\n              <td><input type=number min=0 max=100 step=1 bind:value={$tinctures.field.metals}/></td>\n              <td><input type=number min=0 max=100 step=1 bind:value={$tinctures.field.colours}/></td>\n              <td><input type=number min=0 max=100 step=1 bind:value={$tinctures.field.stains}/></td>\n              <td><input type=number min=0 max=100 step=1 bind:value={$tinctures.field.patterns}/></td>\n            </tr>\n            <tr>\n              <td>Division</td>\n              <td><input type=number min=0 max=100 step=1 bind:value={$tinctures.division.metals}/></td>\n              <td><input type=number min=0 max=100 step=1 bind:value={$tinctures.division.colours}/></td>\n              <td><input type=number min=0 max=100 step=1 bind:value={$tinctures.division.stains}/></td>\n              <td><input type=number min=0 max=100 step=1 bind:value={$tinctures.division.patterns}/></td>\n            </tr>\n            <tr>\n              <td>Charge</td>\n              <td><input type=number min=0 max=100 step=1 bind:value={$tinctures.charge.metals}/></td>\n              <td><input type=number min=0 max=100 step=1 bind:value={$tinctures.charge.colours}/></td>\n              <td><input type=number min=0 max=100 step=1 bind:value={$tinctures.charge.stains}/></td>\n              <td><input type=number min=0 max=100 step=1 bind:value={$tinctures.charge.patterns}/></td>\n            </tr>\n        </tbody>\n      </table>\n\n      <div class=contolButtons>\n        {#if add.show}\n          <button on:click={applyAddTincture}>Apply Tincture</button>\n        {:else}\n          <button on:click={addTincture}>Add Tincture</button>\n        {/if}\n        <button on:click={restoreDefault}>Restore Default</button>\n      </div>\n    </div>\n\n    <div id=right>\n      <table id=tincturesTable>\n        <thead>\n          <tr>\n            <th>Tincture</th>\n            <th>Type</th>\n            <th>Color</th>\n            <th>Chance</th>\n            <th>Remove</th>\n          </tr>\n        </thead>\n        <tbody>\n          {#if add.show}\n            <tr transition:fade>\n              <td>\n                <input type=text placeholder=Tincture bind:value={add.name}/>\n              </td>\n              <td>\n                <select bind:value={add.type}>\n                  <option value=metals>Metals</option>\n                  <option value=colours>Colours</option>\n                  <option value=stains>Stains</option>\n                </select>\n              </td>\n              <td>\n                <input type=color bind:value={add.color}/>\n              </td>\n              <td>\n                <input type=number min=0 max=100 step=1 bind:value={add.chance}/>\n              </td>\n              <td>\n                <span class=actionButton on:click={cancelAddTincture}>&times;</span>\n              </td>\n            </tr>\n          {/if}\n          {#each tData as t (t.t)}\n            <tr animate:flip>\n              <td>{t.t}</td>\n              <td>{t.type}</td>\n              <td>\n                <input type=color bind:value={$colors[t.t]}/>\n                {#if defaultColors[t.t] && $colors[t.t] !== defaultColors[t.t]}\n                  <Tip tip=\"Restore default color\">\n                    <svg on:click={() => $colors[t.t] = defaultColors[t.t]} width=12 height=12 fill=#fff><use href=\"#undo-icon\"></use></svg>\n                  </Tip>\n                {/if}\n              </td>\n              <td>\n                <input type=number min=0 max=100 step=1 bind:value={$tinctures[t.type][t.t]}/>\n                <span class=totalChance>/ {getTotalChance(t.type)}</span>\n              </td>\n              <td>\n                <span class=actionButton on:click={() => removeTincture(t)}>&times;</span>\n              </td>\n            </tr>\n          {/each}\n        </tbody>\n      </table>\n    </div>\n  </div>\n</div>\n\n<style>\n  #tinctures {\n    height: 100%;\n    width: 100%;\n    position: fixed;\n    z-index: 1;\n    left: 0;\n    top: 0;\n    background-color: rgba(0,0,0, 0.9);\n    transition: .5s;\n    text-align: center;\n    user-select: none;\n  }\n\n  #tincturesCont {\n    position: absolute;\n    top: 50%;\n    left: 50%;\n    transform: translate(-50%, -50%);\n    overflow: auto;\n    scrollbar-width: thin;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n  }\n\n  #tincturesCont::-webkit-scrollbar {\n    width: 6px;\n    background-color: #cccccc80;\n  }\n\n  #tincturesCont::-webkit-scrollbar-thumb {\n    background-color: #111;\n  }\n\n  @media only screen and (orientation: portrait) {\n    #tincturesCont {\n      flex-direction: column;\n    }\n  }\n\n  span.close {\n    position: fixed;\n    top: 0em;\n    right: .5em;\n    font-size: 4em;\n    padding: .2em 0;\n    cursor: pointer;\n    color: #ddd;\n    z-index: 2;\n  }\n\n  .close:hover, .actionButton:hover {\n    color: #fff;\n  }\n\n  table {\n    color: #ddd;\n    text-transform: capitalize;\n    min-width: 350px;\n    max-width: 80vw;\n    display: block;\n    max-height: 80vh;\n  }\n\n  td {\n    width: 4em;\n  }\n\n  #tincturesTable td:nth-child(3) {\n    width: 5em;\n  }\n\n  input[type=\"color\"] {\n    padding: 0;\n    border: 0;\n    cursor: pointer;\n  }\n\n  input[type=\"text\"] {\n    width: 6em;\n  }\n\n  input[type=\"number\"] {\n    width: 4em;\n  }\n\n  .totalChance {\n    position: absolute;\n    margin: .1em 0 0 -2.1em;\n    color: #333;\n    user-select: none;\n    pointer-events: none;\n    font-size: .6em;\n  }\n\n  .actionButton {\n    font-size: 2em;\n    cursor: pointer;\n  }\n\n  .contolButtons > button {\n    width: 9em;\n    margin: 1em .1em;\n  }\n</style>",
    "<script>\n  import {message} from './stores.js';\n  export let tip, gesture = null, hotkey = null, position = \"right\", helpCursor = true;\n  let text = tip;\n  const touch = 'ontouchstart' in window;\n  const hasSlot = $$props.$$slots;\n\n  function showMessage() {\n    // add Gesture or Hotkey postfix\n    if (gesture && touch) text = tip + \". Gesture: \" + gesture;\n    else if (hotkey && !touch) text = tip + \". Hotkey: \" + hotkey;\n\n    setTimeout(() => {\n      $message = {text, type: \"tip\", timeout: 10000};\n    }, 500);\n  }\n\n  function hideMessage() {\n    setTimeout(() => {\n      if ($message?.text === text) $message = null;\n    }, 500);\n  }\n</script>\n\n<span class:helpCursor on:mouseenter={showMessage} on:focus={showMessage} on:mouseleave={hideMessage}>\n  {#if hasSlot}\n    <slot/>\n  {:else}\n    <svg class={position}>\n      <use href=\"#info-icon\"></use>\n    </svg>\n  {/if}\n</span>\n\n<style>\n  .helpCursor {\n    cursor: help;\n  }\n\n  svg {\n    width: 1em;\n    height: 1em;\n    fill: #eee;\n  }\n\n  svg.left {\n    margin-bottom: -2px;\n  }\n\n  svg.right {\n    position: absolute;\n    right: .6em;\n  }\n\n  svg:hover {\n    fill: #fff;\n  }\n</style>",
    "<script>\n  import {state, message} from \"./stores\";\n  import {charges} from \"./dataModel.js\";\n  import {camelize} from './utils.js';\n  let dragging = false, selected = false;\n  let size = 50, offsetX = 0, offsetY = 0;\n  let name, category = \"uploaded\";\n\n  const onFile = (getFilesFunction) => (event) => {\n    dragging = false;\n    const files = getFilesFunction(event);\n    const file = files.length ? files[0] : [];\n\n    if (!file.type.match(/image.*/)) {\n      $message = {type: \"error\", text: \"Not an image file!\"};\n      return;\n    }\n\n    selected = true;\n    $message = {type: \"info\", text: \"Fit image into the rectangle for best result\"};\n    name = camelize(file.name);\n    loadImage(file);\n  };\n\n  function getFilesFromDropEvent({ dataTransfer: { files, items } }) {\n    return files.length ? [...files] : items.filter(({ kind }) => kind === \"file\").map(({ getAsFile }) => getAsFile());\n  }\n\n  function getFilesFromInputEvent({ target }) {\n    const files = target.files ? [...target.files] : [];\n    target.value = \"\";\n    return files;\n  }\n\n  function loadImage(file) {\n    const reader = new FileReader();\n    reader.onload = function (readerEvent) {\n      const dataURL = readerEvent.target.result;\n      const image = document.getElementById(\"rasterUpload\").querySelector(\"svg image\");\n      image.setAttribute(\"href\", dataURL);\n    };\n    reader.readAsDataURL(file);\n  }\n\n  function addCharge() {\n    const allCharges = Object.keys(charges.types).map(type => Object.keys(charges[type])).flat();\n    name = camelize(name);\n\n    if (!name || document.getElementById(name) || allCharges.includes(name)) {\n      $message = {type: \"error\", text: \"Name must be unique id!\"};\n      return;\n    }\n\n    if (!charges.types[category]) charges.types[category] = 6;\n    if (!charges.single[category]) charges.single[category] = 6;\n    charges[category][name] = 5;\n\n    // remove stored weighted arrays\n    delete charges.types.array;\n    delete charges.single.array;\n    delete charges[category ].array;\n  \n    const image = document.getElementById(\"rasterUpload\").querySelector(\"svg image\").cloneNode(true);\n    image.id = name;\n    document.getElementById(\"charges\").appendChild(image);\n\n    selected = false;\n    $state.raster = 0;\n  }\n</script>\n\n<div id=rasterUpload\n  on:drop|preventDefault={onFile(getFilesFromDropEvent)}\n  on:dragover|preventDefault={() => (dragging = true)}\n  on:dragleave|preventDefault={() => (dragging = false)}>\n  <span on:click={() => $state.raster = 0} class=\"close\">&times;</span>\n  <div class=container>\n    {#if selected}\n      <div class=input>\n        <div><div class=label>Size:</div><input type=number bind:value={size}/></div>\n        <div><div class=label>Offset X:</div><input type=number bind:value={offsetX}/></div>\n        <div><div class=label>Offset Y:</div><input type=number bind:value={offsetY}/></div>\n      </div>\n\n      <div class=exampleCOA>\n        <svg width=100% height=100% viewBox=\"0 0 200 200\">\n          <g clip-path=\"url(#heater)\" stroke=\"#fff\" stroke-width=.5>\n            <rect x=0 y=0 width=100% height=100% fill=#377cd7/>\n            <image id=imageLoaded x={(100 - size) / 2 + offsetX}% y={(100 - size) / 2 + offsetY}% width={size}% height={size}%/>\n            <rect x=30% y=30% width=40% height=40% fill=none stroke=#000 stroke-width=.5/>\n            <g stroke=#000 fill=\"url(#backlight)\">\n              <path d=\"M25,25 h150 v50 a150,150,0,0,1,-75,125 a150,150,0,0,1,-75,-125 z\"/>\n            </g>\n          </g>\n        </svg>\n      </div>\n\n      <div class=output>\n        <div><div class=label>Name:</div><input placeholder=\"Charge name\" required bind:value={name}/></div>\n        <div><div class=label>Category:</div>\n          <select bind:value={category}>\n            {#each Object.keys(charges.types) as c}\n              <option value={c}>{c}</option>\n            {/each}\n          </select>\n        </div>\n        <div class=buttons>\n          <button on:click={addCharge}>Add</button>\n          <button on:click={() => selected = false}>Cancel</button>\n        </div>\n      </div>\n    {:else}\n      <label class=dragging>\n        <slot {dragging}>\n          <div>Drag &amp; Drop image here or <b>browse</b></div>\n        </slot>\n        <input type=file accept=image/* on:input={onFile(getFilesFromInputEvent)}/>\n      </label>\n    {/if}\n  </div>\n</div>\n\n<style>\n  #rasterUpload {\n    height: 100%;\n    width: 100%;\n    position: fixed;\n    z-index: 1;\n    left: 0;\n    top: 0;\n    background-color: rgba(0, 0, 0, 0.9);\n    transition: 0.5s;\n    user-select: none;\n  }\n\n  .container {\n    position: absolute;\n    top: 50%;\n    left: 50%;\n    transform: translate(-50%, -50%);\n    color: #ddd;\n    display: flex;\n    flex-flow: row;\n    align-items: center;\n    justify-content: center;\n  }\n\n  @media only screen and (orientation: portrait) {\n    .container {\n      flex-flow: column;\n    }\n  }\n\n  .exampleCOA {\n    text-align: center;\n    width: max-content;\n  }\n\n  .buttons {\n    text-align: center;\n  }\n\n  input, select {\n    width: 10em;\n  }\n\n  .buttons > button {\n    cursor: pointer;\n    margin: 1em .1em;\n    width: 4em;\n  }\n\n  input[type=\"file\"] {\n    display: none;\n  }\n\n  .close {\n    position: fixed;\n    top: 0em;\n    right: 0.5em;\n    font-size: 4em;\n    padding: 0.2em 0;\n    display: inline-block;\n    color: #ddd;\n    z-index: 2;\n  }\n\n  label:hover,\n  span:hover {\n    cursor: pointer;\n    color: #fff;\n  }\n\n  .dragging {\n    width: max-content;\n  }\n</style>\n",
    "<script>\n  import Tip from './Tip.svelte';\n  import {state, colors, tinctures, message} from \"./stores\";\n  import {charges} from \"./dataModel.js\";\n  import {camelize} from './utils.js';\n  let dragging = false, selected = false;\n  let svg, transform = {a:1, b:0, c:0, d:1, e:0, f:0}, name, category = \"uploaded\", color = \"#d7374a\";\n  const tinctureList = [\"metals\", \"colours\", \"stains\"].map(type => Object.keys($tinctures[type])).flat();\n\n  $: updateTransform(transform);\n  $: updateId(name);\n\n  function updateTransform(transform) {\n    if (!svg) return; // on component on load\n    const el = document.createElement(\"html\");\n    el.innerHTML = svg;\n    const g = el.querySelector(\"g\");\n    const transformString = Object.values(transform).join(\" \");\n    if (transformString === \"1 0 0 1 0 0\") g.removeAttribute(\"transform\");\n    else g.setAttribute(\"transform\", \"matrix(\" + transformString+ \")\");\n    svg = g.outerHTML;\n  }\n\n  function updateId(name) {\n    if (!svg) return; // on component on load\n    const el = document.createElement(\"html\");\n    el.innerHTML = svg;\n    const g = el.querySelector(\"g\");\n    g.setAttribute(\"id\", name);\n    svg = g.outerHTML;\n  }\n\n  const onFile = (getFilesFunction) => (event) => {\n    dragging = false;\n    const files = getFilesFunction(event);\n    const file = files.length ? files[0] : [];\n\n    if (!file.type.match(/text.*|svg.*/)) {\n      $message = {type: \"error\", text: \"File must be text or svg!\"};\n      return;\n    }\n\n    selected = true;\n    name = camelize(file.name);\n    loadImage(file);\n  };\n\n  function getFilesFromDropEvent({ dataTransfer: { files, items } }) {\n    return files.length ? [...files] : items.filter(({ kind }) => kind === \"file\").map(({ getAsFile }) => getAsFile());\n  }\n\n  function getFilesFromInputEvent({ target }) {\n    const files = target.files ? [...target.files] : [];\n    target.value = \"\";\n    return files;\n  }\n\n  function loadImage(file) {\n    const reader = new FileReader();\n    reader.onload = function (readerEvent) {\n      const svgText = readerEvent.target.result;\n      const el = document.createElement(\"html\");\n      el.innerHTML = svgText;\n      const g = el.querySelector(\"g\");\n\n      if (!g) {\n        $message = {type: \"error\", text: \"File must be prepared svg. Download template for guidance!\"};\n        selected = false;\n        return;\n      }\n\n      const consolidated = g.transform.baseVal.consolidate();\n      if (consolidated) {\n        const {a, b, c, d, e, f} = consolidated.matrix;\n        const fix = n => +n.toFixed(4);\n        transform = Object.assign(transform, {a:fix(a), b:fix(b), c:fix(c), d:fix(d), e:fix(e), f:fix(f)});\n      }\n      svg = g.outerHTML;\n    };\n    reader.readAsText(file);\n  }\n\n  function addCharge() {\n    const allCharges = Object.keys(charges.types).map(type => Object.keys(charges[type])).flat();\n    name = camelize(name);\n\n    if (!name || document.getElementById(name) || allCharges.includes(name)) {\n      $message = {type: \"error\", text: \"Name must be unique id!\"};\n      return;\n    }\n\n    if (!charges.types[category]) charges.types[category] = 6;\n    if (!charges.single[category]) charges.single[category] = 6;\n    charges[category][name] = 5;\n\n    const el = document.createElement(\"html\");\n    el.innerHTML = svg;\n    const image = el.querySelector(\"g\");\n    image.id = name;\n    defs.insertAdjacentHTML(\"beforeend\", image.outerHTML);\n\n    selected = false;\n    $state.vector = 0;\n  }\n\n  function downloadTemplate() {\n    fetch(\"charges/template.svg\").then(text => {\n      return text.blob().then(blob => {\n        const a = document.createElement(\"a\");\n        a.href = URL.createObjectURL(blob);\n        a.setAttribute(\"download\", \"armoriaChargeTemplate.txt\");\n        a.click();\n      });\n    });\n  }\n</script>\n\n<div id=vectorUpload\n  on:drop|preventDefault={onFile(getFilesFromDropEvent)}\n  on:dragover|preventDefault={() => dragging = true}\n  on:dragleave|preventDefault={() => dragging = false}>\n  <span on:click={() => $state.vector = 0} class=\"close\">&times;</span>\n  <div class=container>\n    {#if selected}\n      <div class=input>\n        <div class=label>SVG Markup:</div>\n        <textarea rows=18 cols=22 bind:value={svg}/>\n        <div>\n          <button on:click={downloadTemplate}>Download Template</button>\n        </div>\n      </div>\n\n      <div class=exampleCOA>\n        <Tip tip=\"For best result charge must fit into the inner rectangle\" helpCursor={false}>\n          <svg width=100% height=100% fill={color} stroke=#000 stroke-width=1 viewBox=\"0 0 200 200\">\n            <g fill=\"#fff\" fill-opacity=\".05\" stroke=\"#fff\" stroke-width=\".5\">\n              <path d=\"m25 25h150v50a150 150 0 0 1-75 125 150 150 0 0 1-75-125z\"/>\n              <rect x=\"60\" y=\"60\" width=\"80\" height=\"80\"/>\n            </g>\n            <g>\n              {@html svg}\n            </g>\n          </svg>\n        </Tip>\n      </div>\n\n      <div class=output>\n        <div>\n          <div class=label>\n            <Tip tip=\"Charge translate: X and Y px\" position=left/>\n            Translate:\n          </div>\n          <input type=number step=.1 class=paired bind:value={transform.e}/>\n          <input type=number step=.1 class=paired bind:value={transform.f}/>\n        </div>\n\n        <div>\n          <div class=label>\n            <Tip tip=\"Charge scale: X and Y, where 1 is default size\" position=left/>\n            Scale:\n          </div>\n          <input type=number step=.01 class=paired bind:value={transform.a}/>\n          <input type=number step=.01 class=paired bind:value={transform.d}/>\n        </div>\n\n        <div>\n          <div class=label>\n            <Tip tip=\"Tincture preview color, does not affect uploaded actual color. Charges must not have exact color defined. In this case charge will support all tunctures\" position=left/>\n            Tincture:\n          </div>\n          <select bind:value={color}>\n            {#each tinctureList as tincture}\n              <option value={$colors[tincture]}>{tincture}</option>\n            {/each}\n          </select>\n        </div>\n\n        <div>\n          <div class=label>\n            <Tip tip=\"Charge ID, must be unique\" position=left/>\n            Name:\n          </div>\n          <input placeholder=\"Charge name\" required bind:value={name}/>\n        </div>\n\n        <div>\n          <div class=label>\n            <Tip tip=\"Category where charge will be added\" position=left/>\n            Category:\n          </div>\n          <select bind:value={category}>\n            {#each Object.keys(charges.types) as c}\n              <option value={c}>{c}</option>\n            {/each}\n          </select>\n        </div>\n\n        <div>\n          <button on:click={addCharge}>Upload</button>\n          <button on:click={() => selected = false}>Cancel</button>\n        </div>\n      </div>\n    {:else}\n      <label class=dragging>\n        <slot {dragging}>\n          <div>Drag &amp; Drop svg file here or <b>browse</b></div>\n        </slot>\n        <input type=file accept=\".svg\" on:input={onFile(getFilesFromInputEvent)}/>\n      </label>\n      <button class=template on:click={downloadTemplate}>Download Template</button>\n    {/if}\n  </div>\n</div>\n\n<style>\n  #vectorUpload {\n    height: 100%;\n    width: 100%;\n    position: fixed;\n    z-index: 1;\n    left: 0;\n    top: 0;\n    background-color: rgba(0, 0, 0, 0.9);\n    transition: 0.5s;\n    user-select: none;\n  }\n\n  .container {\n    position: absolute;\n    top: 50%;\n    left: 50%;\n    transform: translate(-50%, -50%);\n    color: #ddd;\n    display: flex;\n    flex-flow: row;\n    align-items: center;\n    justify-content: center;\n  }\n\n  .exampleCOA {\n    width: max-content;\n  }\n\n  @media only screen and (orientation: portrait) {\n    .container {\n      flex-flow: column;\n    }\n\n    .exampleCOA {\n      height: 20vh;\n      width: 20vh;\n    }\n  }\n\n  textarea {\n    font-size: .8em;\n    font-family: 'Courier New', Courier, monospace;\n  }\n\n  input, select {\n    width: 10em;\n  }\n\n  input.paired {\n    width: 4.85em;\n  }\n\n  input[type=\"file\"] {\n    display: none;\n  }\n\n  .close {\n    position: fixed;\n    top: 0em;\n    right: 0.5em;\n    font-size: 4em;\n    padding: 0.2em 0;\n    display: inline-block;\n    color: #ddd;\n    z-index: 2;\n  }\n\n  label:hover,\n  span:hover {\n    cursor: pointer;\n    color: #fff;\n  }\n\n  .dragging {\n    width: max-content;\n  }\n\n  .template {\n    position: absolute;\n    top: 50%;\n    left: 50%;\n    margin-top: 2.5em;\n    transform: translate(-50%, -50%);\n  }\n</style>\n",
    "<script>\n  import COA from '../COA.svelte';\n  import EditorType from './EditorType.svelte';\n  import EditorSize from './EditorSize.svelte';\n  import EditorTincture from './EditorTincture.svelte';\n  import EditorPattern from './EditorPattern.svelte';\n  import EditorCharge from './EditorCharge.svelte';\n  import EditorDivision from './EditorDivision.svelte';\n  import EditorDivided from './EditorDivided.svelte';\n  import EditorLine from './EditorLine.svelte';\n  import EditorOrdinary from './EditorOrdinary.svelte';\n  import EditorStroke from './EditorStroke.svelte';\n  import EditorPosition from './EditorPosition.svelte';\n  import EditorShift from \"./EditorShift.svelte\";\n  import EditorControls from \"./EditorControls.svelte\";\n  import EditorAbove from \"./EditorAbove.svelte\";\n  import {slide, fly} from 'svelte/transition';\n  import {rw, ra} from '../utils';\n  import {history, changes, tinctures, state, grid, showGrid, message} from '../stores';\n  import {charges, divisions, ordinaries} from \"../dataModel\";\n  import {generate} from '../generator';\n  export let c, seed;\n  let menu = {}, section = {field: 0, division: 0, ordinary: [], charge: []};\n\n  const ratio = window.innerHeight / window.innerWidth;\n  const coaSize = window.innerWidth > window.innerHeight ? Math.round(window.innerHeight * .9) : \"100%\";\n  let width = window.innerWidth < 600 || ratio > 1 ? 100 : Math.round((1.05 - ratio) * 100);\n  if (width / 100 * window.innerWidth < 300) width = 100;\n  let itemSize = Math.floor(width / 1000 * window.innerWidth - 5); // 10 items in row\n  if (window.innerWidth < 600) itemSize *= 2; // 5 items in row for narrow screens\n\n  $state.transform = null;\n  $state.positions = null;\n\n  let coa = $history[c] || generate(seed || undefined); // on load\n  $: restore($changes); // on undo/redo\n  $: reroll(c); // on reroll\n  $: update(menu); // on menu update\n  $: edit(coa); // on edit\n  $: localStorage.setItem(\"grid\", $grid); // on grid change\n  $: localStorage.setItem(\"showGrid\", $showGrid); // on grid change\n\n  function reroll(c) {\n    coa = $history[c] || generate(seed || undefined);\n    if (!$history[c]) $history.push(coa);\n    changes.reset();\n    defineMenuState();\n  }\n\n  function edit(coa) {\n    changes.add(JSON.stringify(coa));\n  }\n\n  // get coa from menu on menu change\n  function update() {\n    // remove see reference as it would be confusing\n    delete coa.seed;\n\n    // field attributes changed\n    if (menu.field.type === \"tincture\") coa.t1 = menu.field.t1; else {\n      const type = menu.field.type === \"semy\" ? \"semy_of_\" + menu.field.charge : menu.field.pattern;\n      const attibutes = [type, menu.field.t1, menu.field.t2];\n      if (menu.field.size !== \"standard\") attibutes.push(menu.field.size);\n      coa.t1 = attibutes.join(\"-\");\n    }\n\n    // division attributes changed\n    if (menu.division.division && menu.division.division !== \"no\") {\n      coa.division = {division: menu.division.division};\n      if (divisions[menu.division.division]) coa.division.line = menu.division.line;\n      if (menu.division.type === \"tincture\") coa.division.t = menu.division.t1;\n      else {\n        const attr0 = menu.division.type === \"semy\" ? \"semy_of_\" + menu.division.charge : menu.division.pattern;\n        const attibutes = [attr0, menu.division.t1, menu.division.t2];\n        if (menu.division.size !== \"standard\") attibutes.push(menu.division.size);\n        coa.division.t = attibutes.join(\"-\");\n      }\n    } else delete coa.division;\n\n    // ordinary attributes changed\n    if (menu.ordinaries.length) {\n      coa.ordinaries = menu.ordinaries.map(o => {\n        const item = {ordinary: o.ordinary, t: o.t};\n        if (ordinaries.lined[o.ordinary]) item.line = o.line;\n        if (coa.division && o.divided) item.divided = o.divided;\n        if (o.showStroke) item.stroke = o.stroke;\n        if (o.showStroke && o.strokeWidth !== 1) item.strokeWidth = o.strokeWidth;\n        if (o.size && o.size !== 1) item.size = o.size;\n        if (o.x || o.y) {item.x = o.x; item.y = o.y;}\n        if (o.angle) item.angle = o.angle;\n        if (o.above) item.above = 1;\n        return item;\n      });\n    } else delete coa.ordinaries;\n\n    // charges attributes changed\n    if (menu.charges.length) {\n      coa.charges = menu.charges.map(c => {\n        const item = {charge: c.charge, t: c.t, p: c.p, size: c.size};\n        if (!c.showStroke) item.stroke = \"none\";\n        if (c.stroke !== \"#000000\") item.stroke = c.stroke;\n        if (c.divided) item.divided = c.divided;\n        if (c.sinister) item.sinister = 1;\n        if (c.reversed) item.reversed = 1;\n        if (c.x || c.y) {item.x = c.x; item.y = c.y;}\n        if (c.angle) item.angle = c.angle;\n        return item;\n      });\n    } else delete coa.charges;\n  }\n\n  function restore() {\n    if (!changes.length()) return;\n    coa = JSON.parse($changes[0]);\n    defineMenuState();\n  }\n\n  // define initial menu state\n  function defineMenuState() {\n    // Field\n    menu.field = getField();\n    function getField() {\n      const type = isSemy(coa.t1) ? \"semy\" : isPattern(coa.t1) ? \"pattern\" : \"tincture\";\n      let t1, t2, pattern = \"vair\", charge = \"lozenge\", semy = \"conventional\", size = \"standard\";\n\n      const field = coa.t1.split(\"-\"); // parsed field tincture\n\n      if (type === \"tincture\") {\n        t1 = coa.t1;\n        t2 = selectSecondTincture(coa.t1);\n      } else {\n        t1 = field[1];\n        t2 = field[2];\n        size = field[3] || \"standard\"\n      }\n\n      if (type === \"pattern\") pattern = field[0];\n      else if (type === \"semy\") {\n        charge = getSemyCharge(field);\n        semy = getSemyType(field);\n      }\n\n      return {type, t1, t2, pattern, charge, semy, size}\n    }\n\n    // Division\n    menu.division = getDivision();\n    function getDivision() {\n      let type = \"tincture\", division = \"no\", line = \"straight\", t1, t2, pattern = \"vair\", charge = \"lozenge\", semy = \"conventional\", size = \"standard\";\n\n      if (coa.division) {\n        const tSplit = coa.division.t.split(\"-\"); // parsed division tincture\n        type = isSemy(coa.division.t) ? \"semy\" : isPattern(coa.division.t) ? \"pattern\" : \"tincture\";\n\n        division = coa.division.division;\n        line = coa.division.line || \"straight\";\n        t1 = type === \"tincture\" ? coa.division.t : tSplit[1];\n        t2 = type === \"tincture\" ? selectSecondTincture(t1) : tSplit[2];\n        if (type === \"pattern\") pattern = tSplit[0];\n        if (type === \"semy\") {\n          charge = getSemyCharge(tSplit);\n          semy = getSemyType(tSplit);\n        }\n        size = tSplit[3] || \"standard\";\n      } else {\n        t1 = selectSecondTincture(menu.field.t1);\n        t2 = selectSecondTincture(t1);\n      }\n\n      return {division, line, type, t1, t2, pattern, charge, semy, size};\n    }\n\n    // Ordinaries\n    menu.ordinaries = getOrdinaries();\n    function getOrdinaries() {\n      if (!coa.ordinaries) return [];\n\n      const ordinaries = coa.ordinaries.map(o => {\n        const {ordinary, t} = o;\n        const line = o.line || \"straight\";\n        const showStroke = Boolean(o.stroke);\n        const stroke = o.stroke || \"#000000\";\n        const strokeWidth = o.strokeWidth || 1;\n        const size = o.size || 1;\n        const x = o.x || 0;\n        const y = o.y || 0;\n        const angle = o.angle || 0;\n        const divided = o.divided || \"\";\n        const above = o.above || 0;\n        if (angle) $state.transform = `rotate(${angle})`;\n        return {ordinary, t, line, showStroke, stroke, strokeWidth, size, x, y, angle, divided, above};\n      });\n\n      return ordinaries;\n    }\n\n    // Charges\n    menu.charges = getCharges();\n    function getCharges() {\n      if (!coa.charges) return [];\n      const charges = coa.charges.map(c => {\n        const {charge, t, p, size} = c;\n        const type = getChargeCategory(charge);\n        const showStroke = c.stroke !== \"none\";\n        const stroke = c.stroke || \"#000000\";\n        const divided = c.divided || \"\";\n        const sinister = c.sinister || false;\n        const reversed = c.reversed || false;\n        const x = c.x || 0;\n        const y = c.y || 0;\n        const angle = c.angle || 0;\n        if (angle) $state.transform = `rotate(${angle})`;\n        return {charge, type, showStroke, stroke, divided, t, p, size, sinister, reversed, x, y, angle};\n      });\n\n      return charges;\n    }\n\n    function isPattern(string) {\n      return string?.includes(\"-\");\n    }\n\n    function isSemy(string) {\n      return string?.slice(0,4) === \"semy\";\n    }\n\n    function getSemyCharge(array) {\n      return array[0].split(\"_of_\")[1];\n    }\n\n    function getChargeCategory(charge) {\n      const type = Object.keys(charges.types).find(type => charges[type][charge])\n      return type || charge;\n    }\n\n    function getSemyType(array) {\n      const charge = getSemyCharge(array);\n      return getChargeCategory(charge);\n    }\n\n    function selectSecondTincture(t1) {\n      const metal = t1 === \"argent\" || t1 === \"or\";\n      return rw(metal ? $tinctures.colours : $tinctures.metals);\n    }\n\n    return menu;\n  }\n\n  function addOrdinary() {\n    const ordinariesList = Object.keys(ordinaries.lined).concat(Object.keys(ordinaries.straight));\n    const ordinary = ra(ordinariesList);\n    const t = rw($tinctures[rw($tinctures.charge)]);\n    const o = {ordinary, t, showStroke: false, stroke: \"#000000\", strokeWidth: 1, line: \"straight\", size: 1, x: 0, y: 0, angle: 0, divided: \"\"};\n    menu.ordinaries = [...menu.ordinaries, o];\n  }\n\n  function addCharge() {\n    const type = rw(charges.single);\n    const charge = rw(charges[type]);\n    const t = rw($tinctures[rw($tinctures.charge)]);\n    const с = {charge, t, p: \"e\", showStroke: true, stroke: \"#000000\", type, size: 1.5, sinister: false, reversed: false, x: 0, y: 0, angle: 0, divided: \"\"};\n    menu.charges = [...menu.charges, с];\n  }\n\n  if (!isTouchDevice() && (coa.ordinaries || coa.charges)) {\n    $message = {type: \"info\", text: \"Drag to move, hold SHIFT and drag vertically to resize, hold CONTROL and drag horizontally to rotate\", timeout: 4000};\n  }\n\n  function isTouchDevice() {\n    return 'ontouchstart' in window;\n  }\n\n  function isRaster(charge) {\n    const el = document.getElementById(charge);\n    return el ? el.tagName === \"image\" : false;\n  }\n\n  function cap(string = \"no\") {\n    const split = string.split(/(?=[A-Z])/).join(\" \");\n    return split.charAt(0).toUpperCase() + split.slice(1);\n  }\n</script>\n\n<div id=editor>\n  {#key coa}\n    <COA {coa} i=Edit w={coaSize} h={coaSize}/>\n  {/key}\n  <div id=menu in:fly={{x: 1000, duration: 1000}} style=\"width:{width}%\">\n    <!-- Field -->\n    <div class=section class:expanded={section.field} on:click={() => section.field = !section.field}>Field</div>\n    {#if section.field}\n      <div class=panel transition:slide>\n        <div class=subsection>\n          <EditorType bind:type={menu.field.type}/>\n          {#if menu.field.type !== \"tincture\"}\n            <EditorSize bind:size={menu.field.size}/>\n          {/if}\n        </div>\n\n        <div class=subsection>\n          <EditorTincture bind:t1={menu.field.t1} {itemSize}/>\n        </div>\n\n        {#if menu.field.type !== \"tincture\"}\n          <div class=subsection>\n            <EditorTincture bind:t1={menu.field.t2} {itemSize}/>\n          </div>\n        {/if}\n\n        {#if menu.field.type === \"pattern\"}\n          <div class=subsection>\n            <EditorPattern bind:pattern={menu.field.pattern} t1={menu.field.t1} t2={menu.field.t2} size={menu.field.size} {itemSize}/>\n          </div>\n        {/if}\n\n        {#if menu.field.type === \"semy\"}\n          <div class=subsection>\n            <EditorCharge type=semy bind:charge={menu.field.charge} bind:category={menu.field.semy} t1={menu.field.t1} t2={menu.field.t2} size={menu.field.size} {itemSize}/>\n          </div>\n        {/if}\n      </div>\n    {/if}\n\n    <!-- Division -->\n    <div class=section class:expanded={section.division} on:click={() => section.division = !section.division}>Division: {cap(menu.division.division)}</div>\n    {#if section.division}\n      <div class=panel transition:slide>\n        <div class=subsection>\n          <EditorDivision bind:division={menu.division.division} t1={coa.t1} t={coa.division ? coa.division.t : menu.division.t1} line={menu.division.line} {itemSize}/>\n        </div>\n\n        {#if divisions[coa.division?.division]}\n          <div class=subsection>\n            <EditorLine bind:line={menu.division.line} division={menu.division.division} t1={coa.t1} t={coa.division ? coa.division.t : menu.division.t1} {itemSize}/>\n          </div>\n        {/if}\n\n        {#if coa.division}\n          <div class=subsection>\n            <EditorType bind:type={menu.division.type}/>\n            {#if menu.division.type !== \"tincture\"}\n              <EditorSize bind:size={menu.division.size}/>\n            {/if}\n          </div>\n\n          <div class=subsection>\n            <EditorTincture bind:t1={menu.division.t1} {itemSize}/>\n          </div>\n\n          {#if menu.division.type !== \"tincture\"}\n            <div class=subsection>\n              <EditorTincture bind:t1={menu.division.t2} {itemSize}/>\n            </div>\n          {/if}\n\n          {#if menu.division.type === \"pattern\"}\n            <div class=subsection>\n              <EditorPattern bind:pattern={menu.division.pattern} t1={menu.division.t1} t2={menu.division.t2} size={menu.division.size} {itemSize}/>\n            </div>\n          {/if}\n\n          {#if menu.division.type === \"semy\"}\n            <div class=subsection>\n              <EditorCharge type=semy bind:charge={menu.division.charge} bind:category={menu.division.semy} t1={menu.division.t1} t2={menu.division.t2} size={menu.division.size} {itemSize}/>\n            </div>\n          {/if}\n        {/if}\n      </div>\n    {/if}\n\n    <!-- Ordinaries -->\n    {#each menu.ordinaries as o, i}\n      <div class=section transition:slide class:expanded={section.ordinary[i]} on:click={() => section.ordinary[i] = !section.ordinary[i]}>\n        Ordinary{menu.ordinaries.length > 1 ? \" \" + (i+1) : \"\"}: {cap(o.ordinary)}\n        {#if o.above}\n          <i>[above charges]</i>\n        {/if}\n        <EditorControls bind:els={menu.ordinaries} el={o} {i}/>\n      </div>\n      {#if section.ordinary[i]}\n        <div class=panel transition:slide>\n          {#if coa.division}\n            <div class=subsection>\n              <EditorDivided bind:divided={o.divided}/>\n            </div>\n          {/if}\n\n          <div class=subsection>\n            <EditorOrdinary bind:ordinary={o.ordinary} t1={coa.t1} line={o.line} t={o.t} {itemSize}/>\n          </div>\n\n          {#if ordinaries.lined[o.ordinary]}\n            <div class=subsection>\n              <EditorLine bind:line={o.line} ordinary={o.ordinary} t1={coa.t1} t={o.t} {itemSize}/>\n            </div>\n          {/if}\n\n          {#if o.divided !== \"counter\"}\n            <div class=subsection>\n              <EditorTincture bind:t1={o.t} {itemSize}/>\n            </div>\n          {/if}\n\n          <div class=subsection>\n            {#if ![\"bordure\", \"orle\"].includes(o.ordinary)}\n              <EditorStroke bind:element={o}/>\n            {/if}\n            <EditorAbove bind:above={o.above}/>\n          </div>\n\n          <div class=subsection>\n            <EditorShift bind:e={o}/>\n          </div>\n        </div>\n      {/if}\n    {/each}\n\n    <!-- Charges -->\n    {#each menu.charges as charge, i}\n      <div class=section transition:slide class:expanded={section.charge[i]} on:click={() => section.charge[i] = !section.charge[i]}>\n        Charge{menu.charges.length > 1 ? \" \" + (i+1) : \"\"}: {cap(charge.charge)}\n        <EditorControls bind:els={menu.charges} el={charge} {i}/>\n      </div>\n      {#if section.charge[i]}\n        <div class=panel transition:slide>\n\n          <div class=subsection>\n            {#if coa.division}\n              <EditorDivided bind:divided={charge.divided} raster={isRaster(charge.charge)}/>\n            {/if}\n            <EditorCharge type=charge bind:charge={charge.charge} bind:category={charge.type} t1={coa.t1} t2={charge.t} sinister={charge.sinister} reversed={charge.reversed} {itemSize}/>\n          </div>\n\n          {#if !isRaster(charge.charge) && charge.divided !== \"counter\"}\n            <div class=subsection>\n              <EditorTincture bind:t1={charge.t} {itemSize}/>\n            </div>\n          {/if}\n\n          <div class=subsection>\n            <EditorStroke bind:element={charge}/>\n          </div>\n\n          <div class=subsection>\n            <EditorPosition bind:charge/>\n          </div>\n\n          <div class=subsection>\n            <EditorShift bind:e={charge}/>\n          </div>\n        </div>\n      {/if}\n    {/each}\n\n    <div class=buttonLine on:click={addOrdinary}>Add Ordinary</div>\n    <div class=buttonLine on:click={addCharge}>Add Charge</div>\n  </div>\n</div>\n\n<style>\n  #editor {\n    width: 100%;\n    height: calc(100% - 45px);\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    user-select: none;\n    flex-direction: row;\n  }\n\n  #menu {\n    overflow-x: hidden;\n    overflow-y: auto;\n    scrollbar-width: thin;\n    transition: .5s;\n    background-color: #11111180;\n    height: 100%;\n  }\n\n  @media only screen and (orientation: portrait) {\n    #editor {\n      flex-direction: column;\n    }\n  }\n\n  #menu::-webkit-scrollbar {\n    width: 6px;\n    background-color: #cccccc80;\n  }\n\n  #menu::-webkit-scrollbar-thumb {\n    background-color: #111;\n  }\n\n  .section {\n    padding: 1em 1.14em;\n    color: #fff;\n    background-color: #00000060;\n    cursor: pointer;\n    transition: background-color .1s ease;\n    overflow-x: hidden;\n  }\n\n  .section:hover {\n    background-color: #00000080;\n  }\n\n  .section:after {\n    content: \"\\276F\";\n    transition: .2s ease-out;\n    margin-top: -.1em;\n    float: right;\n  }\n\n  .expanded:after {\n    transform: rotate(90deg);\n  }\n\n  :global(.section > span) {\n    transition: 1s ease-out;\n    opacity: 0;\n    margin-left: .6em;\n  }\n\n  :global(.section:hover > span) {\n    opacity: 1;\n  }\n\n  .section > i {\n    font-size: smaller;\n  }\n\n  .panel {\n    min-width: 100%;\n    max-width: max-content;\n    background-color: #13131320;\n    overflow: hidden;\n  }\n\n  .subsection {\n    color: #fff;\n    padding: .5em 1em;\n  }\n\n  .buttonLine {\n    padding: 1em 1.14em;\n    color: #fff;\n    background-color: #00000040;\n    cursor: pointer;\n    transition: background-color .1s ease;\n  }\n\n  .buttonLine:hover {\n    background-color: #00000080;\n  }\n\n  :global(.item) {\n    display: inline-block;\n    cursor: pointer;\n    transition: background-color .2s ease;\n  }\n\n  :global(.item:hover) {\n    background-color: #ffffff10;\n  }\n\n  :global(.item:active) {\n    transform: translateY(1px);\n  }\n\n  :global(.item.selected) {\n    background-color: #ffffff15;\n  }\n</style>",
    "<script>\n  import MenuItem from '../MenuItem.svelte';\n  import {charges} from \"../dataModel\";\n  export let charge, type, category, t1, t2, size = null, sinister = null, reversed = null, itemSize;\n  let coas = [], query, queryOld;\n\n  const categories = Object.keys(charges.types);\n  const allCharges = categories.map(category => Object.keys(charges[category])).flat();\n  const cap = string => string.charAt(0).toUpperCase() + string.slice(1);\n\n  $: update(category, t1, t2, size, sinister, reversed);\n  $: showResults(query);\n\n  function update() {\n    const chargeList = Object.keys(charges[category]);\n    coas = chargeList.map(c => new Object({c, t1: getTincture(c), charges: getCharge(c)}));\n  }\n\n  function showResults(query) {\n    if (!query && query !== queryOld) update();\n    queryOld = query;\n    if (!query) return;\n\n    const regEx = new RegExp(query.replaceAll(\" \", \"\"), \"i\");\n    const results = allCharges.filter(c => regEx.test(c));\n    coas = results.map(c => new Object({c, t1: getTincture(c), charges: getCharge(c)}));\n  }\n\n  function getTincture(c) {\n    if (type === \"semy\") return `semy_of_${c}-${t1}-${t2}-${size}`;\n    return t1;\n  }\n\n  function getCharge(c) {\n    if (type === \"semy\") return [];\n    return [{charge:c, t: t2, p: \"e\", size: 1.5, sinister, reversed}];\n  }\n\n  function getTip(c) {\n    if (type === \"semy\") return `Semy of ${c}`;\n    return `Charge: ${c}`;\n  }\n</script>\n\n{#if type === \"semy\"}\n  <span>Charge:</span>\n{:else}\n  <span style=\"margin-left: 1em\">Category:</span>\n{/if}\n<select bind:value={category} class:inactive={query} on:input={() => query = \"\"}>\n  {#each categories as type}\n    <option value={type}>{cap(type)}</option>\n  {/each}\n</select>\n\n<span style=\"margin-left: 1em\">Search:</span>\n<input bind:value={query} class:inactive={!query}/>\n\n<div>\n  {#each coas as coa (coa)}\n    <div class=item class:selected={charge === coa.c} on:click={() => charge = coa.c}>\n      <MenuItem {coa} tip={getTip(coa.c)} {itemSize}/>\n    </div>\n  {/each}\n</div>\n\n<style>\n  input {\n    width: 10em;\n  }\n\n  .inactive {\n    background-color: #ddd;\n  }\n</style>",
    "<script>\n  export let els, el, i;\n\n  const remove = e => {\n    els = els.filter((e, n) => n !== i);\n    e.stopPropagation();\n  }\n\n  const copy = e => {\n    els = [...els, JSON.parse(JSON.stringify(el))];\n    e.stopPropagation();\n  }\n\n  const moveUp = e => {\n    [els[i], els[i+1]] = [els[i+1], els[i]];\n    e.stopPropagation();\n  }\n\n  const moveDown = e => {\n    [els[i], els[i-1]] = [els[i-1], els[i]];\n    e.stopPropagation();\n  }\n</script>\n\n<span>\n  <b on:click={copy} title=\"Copy\">🗗</b>\n  {#if els.length > 1}\n    {#if i}\n      <b on:click={moveDown} title=\"Move down\">🠗</b>\n    {/if}\n    {#if i+1 < els.length}\n      <b on:click={moveUp} title=\"Move up\">🠕</b>\n    {/if}\n  {/if}\n  <b on:click={remove} title=\"Remove\">✖</b>\n</span>\n\n<style>\n  b {\n    padding: .1em;\n    margin-top: -.1em;\n  }\n\n  b:active {\n    transform: translateY(1px);\n  }\n</style>",
    "<script>\n  import Tip from '../Tip.svelte';\n  import Switch from '../Switch.svelte';\n  import {state} from '../stores';\n  import {positionsSelect} from \"../dataModel\";\n  import {getSize} from '../generator';\n  export let charge;\n\n  function showPositions() {\n    $state.transform = `rotate(${charge.angle||0}) translate(${charge.x||0}, ${charge.y||0})`;\n    $state.positions = charge.p;\n  }\n\n  function hidePositions() {\n    $state.positions = 0;\n  }\n\n  function changePosition() {\n    showPositions();\n    charge.size = getSize(charge.p);\n  }\n</script>\n\n<Tip tip=\"Points on shield to place a charge\">\n  Positions:\n  <input bind:value={charge.p} on:input={showPositions} on:focus={showPositions} on:blur={hidePositions}/>\n  <select bind:value={charge.p} on:change={changePosition} on:focus={showPositions} on:blur={hidePositions}>\n    {#each positionsSelect as position}\n      <option value={position}>{position}</option>\n    {/each}\n  </select>\n</Tip>\n\n<Tip tip=\"Turn charge to the left\">\n  <span style=\"margin-left: 1em\">Sinister:</span>\n  <Switch bind:checked={charge.sinister}/>\n</Tip>\n\n<Tip tip=\"Show charge upside down\">\n  <span style=\"margin-left: 1em\">Reversed:</span>\n  <Switch bind:checked={charge.reversed}/>\n</Tip>\n\n<style>\n  span {\n    margin-left: 1em;\n  }\n\n  input {\n    width: 8.6em;\n  }\n\n  select {\n    width: 1.3em;\n    margin-left: -1.6em;\n    border: 0;\n  }\n</style>",
    "<script>\n  import Tip from '../Tip.svelte';\n  import Switch from '../Switch.svelte';\n  import {grid, showGrid, state} from '../stores';\n  export let e;\n\n  function updateGrid() {\n    $state.transform = `rotate(${e.angle||0})`;\n  }\n</script>\n\n<Tip tip=\"Element size in percents\">\n  Size:\n  <input type=number min=1 max=500 step=1 value={e.size * 100 | 0} on:input={function() {e.size = this.value / 100}}/>\n</Tip>\n\n<Tip tip=\"Element rotation angle in degrees\">\n  <span>Rotation:</span>\n  <input type=number min=-180 max=180 bind:value={e.angle} on:change={updateGrid}/>\n</Tip>\n\n<Tip tip=\"Element shift in pixels\">\n  <span>Shift:</span>\n  <input type=number min=-100 max=100 step={$grid} bind:value={e.x}/>\n  <input type=number min=-100 max=100 step={$grid} bind:value={e.y}/>\n</Tip>\n\n<Tip tip=\"Grid size: define position shift and drag step in pixels\">\n  <span>Step:</span>\n  <input type=number min=1 max=50 bind:value={$grid}/>\n  <Switch bind:checked={$showGrid}/>\n</Tip>\n\n<style>\n  span {\n    margin-left: 1em;\n  }\n\n  input[type=number] {\n    width: 4em;\n  }\n</style>",
    "<script>\n  import Tip from '../Tip.svelte';\n  import Switch from '../Switch.svelte';\n  export let element;\n</script>\n\n<Tip tip=\"Element stroke. Check to render, select a color and set stroke width\">\n  <span>Stroke:</span>\n  <Switch bind:checked={element.showStroke}/>\n  {#if element.showStroke}\n    <span style=\"margin-left: 1em\">Color:</span>\n    <input type=color bind:value={element.stroke}/>\n\n    {#if element.ordinary}\n      <span style=\"margin-left: 1em\">Width:</span>\n      <input type=number min=.1 max=5 step=.1 bind:value={element.strokeWidth}/>\n    {/if}\n  {/if}\n</Tip>\n\n<style>\n  input[type=color] {\n    margin: 0 0 0 .2em;\n    padding: 0;\n    cursor: pointer;\n  }\n\n  input[type=number] {\n    width: 4em;\n  }\n</style>"
  ],
  "names": [],
  "mappings": "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"
}