{
  "version": 3,
  "file": "bundle.css",
  "sources": [
    "About.svelte",
    "App.svelte",
    "COA.svelte",
    "Charge.svelte",
    "Editor.svelte",
    "Gallery.svelte",
    "Navbar.svelte",
    "Ordinary.svelte",
    "Positions.svelte",
    "Switch.svelte",
    "Tooltip.svelte"
  ],
  "sourcesContent": [
    "<script>\r\n  import AnimatedCOA from './AnimatedCOA.svelte';\r\n  import {state} from './stores';\r\n  import {fade, fly} from 'svelte/transition';\r\n  const duration = 1000;\r\n</script>\r\n\r\n<div id=\"about\" transition:fade>\r\n  <span on:click={() => $state.about = 0} class=\"close\">&times;</span>\r\n  <div id=\"aboutCont\">\r\n    <AnimatedCOA {duration}/>\r\n    <div class=buttons in:fly=\"{{y:200, delay: duration, duration}}\">\r\n      <a target=_blank href=https://discord.com/invite/X7E84HU>Discord</a>\r\n      <a target=_blank href=https://github.com/Azgaar/Armoria>GitHub</a>\r\n      <a target=_blank href=https://www.patreon.com/azgaar>Patreon</a>\r\n    </div>\r\n  </div>\r\n</div>\r\n\r\n<style>\r\n  #about {\r\n    height: 100%;\r\n    width: 100%;\r\n    position: fixed;\r\n    z-index: 1;\r\n    left: 0;\r\n    top: 0;\r\n    background-color: rgba(0,0,0, 0.9);\r\n    transition: .5s;\r\n    text-align: center;\r\n    user-select: none;\r\n  }\r\n\r\n  #aboutCont {\r\n    position: absolute;\r\n    top: 50%;\r\n    left: 50%;\r\n    transform: translate(-50%, -50%);\r\n  }\r\n\r\n  .buttons {\r\n    padding: 4em 0 1em 0;\r\n  }\r\n\r\n  .buttons > a {\r\n    margin: 3em;\r\n    font-size: 1.2em;\r\n    color: #cfcfcf;\r\n  }\r\n\r\n  #about span {\r\n    display: block;\r\n    cursor: pointer;\r\n    padding: .4em;\r\n    font-size: 2.2em;\r\n    color: #818181;\r\n  }\r\n\r\n  #about span:hover {\r\n    color: #f1f1f1;\r\n  }\r\n\r\n  #about span.close {\r\n    position: fixed;\r\n    top: 0em;\r\n    right: .5em;\r\n    font-size: 4em;\r\n  }\r\n\r\n  @media screen and (max-height: 450px) {\r\n    #about span {font-size: 1em}\r\n    #about .close {\r\n      font-size: 2em;\r\n      top: 1ex;\r\n      right: 2em;\r\n    }\r\n  }\r\n</style>\r\n",
    "<script>\n  import Navbar from './Navbar.svelte';\n  import About from './About.svelte';\n  import Editor from './Editor.svelte';\n  import Gallery from './Gallery.svelte';\n  import Patterns from './Patterns.svelte';\n  import {generate} from './generator.js';\n  import {background, size, history, matrices, matrix, state, changes} from './stores.js';\n\n  let n, w, h, gallery = [], coa;\n  $: [n, w, h] = defineGallerySize($size);\n  $: {\n    const l = $history.length;\n    // reroll is clicked\n    if (!$matrices[$matrix]) {\n      if ($state.edit) {\n        // generate new coa\n        $matrices[$matrix] = $matrices[$matrix-1].slice();\n        $matrices[$matrix][$state.i] = l;\n      } else {\n        // reroll gallery\n        $matrices[$matrix] = Array.from({length: n}, (_, i) => l+i++);\n      }\n    }\n\n    // update if of edited coa\n    if ($state.edit) {\n      $state.c = $matrices[$matrix][$state.i];\n      coa = $history[$state.c] || generate();\n      if (!$history[$state.c]) $history.push(coa);\n      changes.reset();\n    }\n\n    // add additional coas to matrix if size is smaller\n    if ($matrices[$matrix].length < n) {\n      const m = $matrices[$matrix];\n      $matrices[$matrix] = [...Array(n).keys()].map(i => m[i] || l+i);\n    }\n\n    gallery = $matrices[$matrix].slice(0, n);\n    console.log(`matrix update ${$matrix}: ${$matrices[$matrix]}`);\n  };\n\n  // define number and size of coas to display\n  function defineGallerySize(desiredSize) {\n    const width = window.innerWidth;\n    const height = window.innerHeight - 60;\n    const numberX = Math.ceil(width / desiredSize);\n    const w = Math.floor(width / numberX);\n    const numberY = Math.floor(height / w);\n    const h = Math.floor(height / numberY);\n    return [numberX * numberY, w, h];\n  }\n</script>\n\n<main style=\"background-color: {$background}\">\n  <Navbar/>\n  {#if $state.about}<About/>{/if}\n  {#if $state.edit}<Editor {coa} c={$state.c}/>\n  {:else}<Gallery {gallery} {w} {h}/>{/if}\n  <div id=\"patterns\" style=\"position: absolute\">\n    <svg width=0 height=0 xmlns=\"http://www.w3.org/2000/svg\">\n      <defs><Patterns/></defs>\n    </svg>\n  </div>\n</main>\n\n<style>\n  main {\n    background-image: url(\"data:image/svg+xml,%3Csvg width='84' height='84' viewBox='0 0 84 84' xmlns='http://www.w3.org/2000/svg'%3E%3Cg fill='none'%3E%3Cg fill='%23222' fill-opacity='.2'%3E%3Cpath d='M84 23c-4.417 0-8-3.584-8-7.998V8h-7.002C64.58 8 61 4.42 61 0H23c0 4.417-3.584 8-7.998 8H8v7.002C8 19.42 4.42 23 0 23v38c4.417 0 8 3.584 8 7.998V76h7.002C19.42 76 23 79.58 23 84h38c0-4.417 3.584-8 7.998-8H76v-7.002C76 64.58 79.58 61 84 61V23zM59.05 83H43V66.95c5.054-.5 9-4.764 9-9.948V52h5.002c5.18 0 9.446-3.947 9.95-9H83v16.05c-5.054.5-9 4.764-9 9.948V74h-5.002c-5.18 0-9.446 3.947-9.95 9zm-34.1 0H41V66.95c-5.053-.502-9-4.768-9-9.948V52h-5.002c-5.184 0-9.447-3.946-9.95-9H1v16.05c5.053.502 9 4.768 9 9.948V74h5.002c5.184 0 9.447 3.946 9.95 9zm0-82H41v16.05c-5.054.5-9 4.764-9 9.948V32h-5.002c-5.18 0-9.446 3.947-9.95 9H1V24.95c5.054-.5 9-4.764 9-9.948V10h5.002c5.18 0 9.446-3.947 9.95-9zm34.1 0H43v16.05c5.053.502 9 4.768 9 9.948V32h5.002c5.184 0 9.447 3.946 9.95 9H83V24.95c-5.053-.502-9-4.768-9-9.948V10h-5.002c-5.184 0-9.447-3.946-9.95-9zM50 50v7.002C50 61.42 46.42 65 42 65c-4.417 0-8-3.584-8-7.998V50h-7.002C22.58 50 19 46.42 19 42c0-4.417 3.584-8 7.998-8H34v-7.002C34 22.58 37.58 19 42 19c4.417 0 8 3.584 8 7.998V34h7.002C61.42 34 65 37.58 65 42c0 4.417-3.584 8-7.998 8H50z'/%3E%3C/g%3E%3C/g%3E%3C/svg%3E\");\n  }\n</style>\n",
    "<script>\r\n  import Ordinary from './Ordinary.svelte';\r\n  import Charge from './Charge.svelte';\r\n  import Positions from './Positions.svelte';\r\n  import {grad, diaper, shield, colors, border, borderWidth, patterns} from './stores';\r\n  export let coa, i, w, h;\r\n\r\n  const {ordinary, division, charges = []} = coa;\r\n  const tDiv = division ? division.t : \"\";\r\n\r\n  const viewBox = {\r\n    heater: \"0 10 200 200\",\r\n    oldFrench: \"0 10 200 200\",\r\n    spanish: \"0 10 200 200\",\r\n    french: \"0 10 200 200\",\r\n    swiss: \"0 10 200 200\",\r\n    wedged: \"0 10 200 200\",\r\n    italian: \"0 0 200 200\",\r\n    kite: \"0 -10 200 220\",\r\n    renaissance: \"0 0 200 210\",\r\n    baroque: \"0 0 200 210\",\r\n    polish: \"0 -10 200 220\",\r\n    german: \"0 0 200 200\",\r\n    diamond: \"0 -10 200 220\",\r\n    round: \"0 0 200 200\",\r\n    vesicaPiscis: \"0 -10 200 220\",\r\n    square: \"0 0 200 200\",\r\n    flag: \"12.5 0 200 200\",\r\n    pennon: \"12.5 0 200 200\",\r\n    guidon: \"12.5 0 200 200\",\r\n    banner: \"0 10 200 200\",\r\n    dovetail: \"0 10 200 200\",\r\n    gonfalon: \"0 10 200 200\",\r\n    pennant: \"0 10 200 200\"\r\n  }\r\n\r\n  $: coaShield = coa.shield || $shield;\r\n  $: shieldPath = document.querySelector(`#defs g#shields > #${coaShield} > path`).getAttribute(\"d\");\r\n  $: coaDiaper = coa.diaper || $diaper;\r\n  $: diaperType = coaDiaper ? getDieperType() : null;\r\n  $: strokeWidth = $borderWidth;\r\n  $: coaGrad = coa.grad || $grad;\r\n  $: coaColors = $colors;\r\n\r\n  function getDieperType() {\r\n    const f = !coa.t1.includes(\"-\");\r\n    const d = !tDiv.includes(\"-\");\r\n    if (f && d) return \"overall\";\r\n    if (f) return \"field\";\r\n    if (d) return \"division\";\r\n    return null;\r\n  }\r\n\r\n  function getTemplate(templateId, lineId) {\r\n    if (!lineId) return document.getElementById(templateId)?.innerHTML;\r\n    const template = document.getElementById(templateId);\r\n    const line = document.getElementById(lineId) ? document.getElementById(lineId) : document.getElementById(\"straight\");\r\n    return template.innerHTML.replace(/{line}/g, line.getAttribute(\"d\")).replace(/dpath/g, \"d\");\r\n  }\r\n\r\n  // get color or link to pattern\r\n  function clr(tincture) {\r\n    if (coaColors[tincture]) return coaColors[tincture];\r\n    if (!tincture) debugger;\r\n    $patterns[$patterns.length] = tincture;\r\n    return \"url(#\"+tincture+\")\";\r\n  }\r\n</script>\r\n\r\n<svg id=\"coa{i}\" class=\"coa\" xmlns=\"http://www.w3.org/2000/svg\" width={w} height={h} viewBox={viewBox[coaShield]} on:click={() => console.log(coa)}>\r\n  <defs>\r\n    {#if division}\r\n      <clipPath id=\"divisionClip{i}\">\r\n        {@html getTemplate(division.division, division.line)}\r\n      </clipPath>\r\n    {/if}\r\n  </defs>\r\n  <g id=\"shield\" clip-path=\"url(#{coaShield})\">\r\n\r\n    <!-- field layer -->\r\n    <rect id=\"field\" x=0 y=0 width=200 height=200 fill=\"{coaColors[coa.t1] || clr(coa.t1)}\"/>\r\n    {#if division && ordinary?.divided}\r\n      {#if ordinary.divided === \"counter\"}<Ordinary {ordinary} {shieldPath} colors={coaColors} t={tDiv}/>{/if}\r\n      {#if ordinary.divided === \"field\"}<Ordinary {ordinary} {shieldPath} colors={coaColors} t={ordinary.t}/>{/if}\r\n    {/if}\r\n    {#if diaperType === \"field\"}<rect class=\"diaper\" x=0 y=0 width=200 height=200 fill=\"url(#{coaDiaper})\"/>{/if}\r\n    {#each charges as charge, i}\r\n      {#if charge.layer === \"field\"}\r\n        <Charge {coa} {charge} {i} shield={coaShield} colors={coaColors} t={charge.t}/>\r\n      {:else if charge.layer === \"counter\" && division}\r\n        <Charge {coa} {charge} {i} shield={coaShield} colors={coaColors} t={tDiv}/>\r\n      {/if}\r\n    {/each}\r\n\r\n    <!-- division layer -->\r\n    {#if division}\r\n      <g id=\"division\" clip-path=\"url(#divisionClip{i})\">\r\n        <rect x=0 y=0 width=200 height=200 fill=\"{coaColors[tDiv] || clr(tDiv)}\"/>\r\n        {#if ordinary?.divided}\r\n          {#if ordinary.divided === \"counter\"}<Ordinary {ordinary} {shieldPath} colors={coaColors} t={coa.t1}/>{/if}\r\n          {#if ordinary.divided === \"division\"}<Ordinary {ordinary} {shieldPath} colors={coaColors} t={ordinary.t}/>{/if}\r\n        {/if}\r\n        {#if diaperType === \"division\"}<rect class=\"diaper\" x=0 y=0 width=200 height=200 fill=\"url(#{coaDiaper})\"/>{/if}\r\n        {#each charges as charge, i}\r\n          {#if charge.layer === \"division\"}\r\n            <Charge {coa} {charge} {i} shield={coaShield} colors={coaColors} t={charge.t}/>\r\n          {:else if charge.layer === \"counter\"}\r\n            <Charge {coa} {charge} {i} shield={coaShield} colors={coaColors} t={coa.t1}/>\r\n          {/if}\r\n        {/each}\r\n      </g>\r\n    {/if}\r\n\r\n    <!-- overall layer -->\r\n    {#if ordinary && !ordinary.divided}\r\n      <Ordinary {ordinary} {shieldPath} colors={coaColors} t={ordinary.t}/>\r\n    {/if}\r\n    {#if diaperType === \"overall\"}<rect class=\"diaper\" x=0 y=0 width=200 height=200 fill=\"url(#{coaDiaper})\"/>{/if}\r\n    {#each charges as charge, i}\r\n      {#if !charge.layer}\r\n        <Charge {coa} {charge} {i} shield={coaShield} colors={coaColors} t={charge.t}/>\r\n      {/if}\r\n    {/each}\r\n  </g>\r\n\r\n  {#if i === \"Edit\"}<Positions/>{/if}\r\n\r\n  <path class=\"grad\" d={shieldPath} fill=\"url(#{coaGrad})\" stroke={$border} stroke-width={strokeWidth}/>\r\n</svg>\r\n\r\n<style>\r\n\t.grad, .diaper {\r\n\t\tpointer-events: none;\r\n\t}\r\n\r\n  /* svg {\r\n    outline: 1px solid #000;\r\n  } */\r\n</style>",
    "<script>\r\n  import {shields} from \"./dataModel.js\";\r\n  import {loadedCharges, state, changes, grid} from \"./stores\"\r\n  export let coa, charge, i, shield, colors, t;\r\n\r\n  $: shieldPositions = shields[shield] || shields.spanish;\r\n  $: positions = [...new Set(charge.p)].filter(p => shieldPositions[p]);\r\n\r\n  const defs = document.getElementById(\"charges\");\r\n  function getCharge(charge) {\r\n    if ($loadedCharges[charge] || defs.querySelector(\"#\"+charge)) return charge;\r\n    $loadedCharges[charge] = 1;\r\n\r\n    fetch(\"charges/\"+charge+\".svg\").then(response => response.text()).then(text => {\r\n      const el = document.createElement(\"html\");\r\n      el.innerHTML = text;\r\n      defs.insertAdjacentHTML(\"beforeend\", el.querySelector(\"g\").outerHTML);\r\n    });\r\n    return charge;\r\n  }\r\n\r\n  function getChargeTransform(c) {\r\n    if (!c.x && !c.y && !c.angle) return null;\r\n    return `rotate(${c.angle||0}) translate(${c.x||0} ${c.y||0})`;\r\n  }\r\n\r\n  function getElTransform(shieldPositions, c, p) {\r\n    const [x, y] = shieldPositions[p];\r\n    const size = c.size || 1;\r\n    const scale = c.sinister || c.reversed ? `${c.sinister ? \"-\" : \"\"}${size}, ${c.reversed ? \"-\" : \"\"}${size}` : size;\r\n    return `translate(${x} ${y}) scale(${scale})`;\r\n  }\r\n\r\n  function addDrag(e, c) {\r\n    if (!$state.edit) return;\r\n    const el = e.currentTarget;\r\n    const [a0, x0, y0] = parseTransform(el.getAttribute(\"transform\"));\r\n    const x1 = e.pageX, y1 = e.pageY;\r\n\r\n    document.addEventListener(\"mousemove\", drag);\r\n    document.addEventListener(\"mouseup\", dragStop, {once: true});\r\n\r\n    function drag(e) {\r\n      document.body.style.cursor = \"move\";\r\n      c.x = Math.round((x0 + e.pageX - x1) / $grid) * $grid;\r\n      c.y = Math.round((y0 + e.pageY - y1) / $grid) * $grid;\r\n      const tr = getChargeTransform(c);\r\n      if (tr) el.setAttribute(\"transform\", tr); else el.removeAttribute(\"transform\");\r\n    }\r\n\r\n    function dragStop() {\r\n      document.removeEventListener(\"mousemove\", drag);\r\n      document.body.style.cursor = \"auto\";\r\n      changes.add(JSON.stringify(coa));\r\n    }\r\n  }\r\n\r\n  function parseTransform(string) {\r\n    if (!string) {return [0,0,0,0,0,1];}\r\n    const a = string.replace(/[a-z()]/g, \"\").replace(/[ ]/g, \",\").split(\",\");\r\n    return [+a[0] || 0, +a[1] || 0, +a[2] || 0, +a[3] || 0, +a[4] || 0, +a[5] || 1];\r\n  }\r\n\r\n</script>\r\n\r\n<g class=\"charge\" {i} class:editable={$state.edit} charge={getCharge(charge.charge)} transform={getChargeTransform(charge)} transform-origin=\"center\" stroke=\"#000\" on:mousedown={function(e) {addDrag(e, charge)}}>\r\n  {#each positions as p}\r\n    <use href=\"#{charge.charge}\" transform={getElTransform(shieldPositions, charge, p)} transform-origin=\"center\" fill=\"{colors[t]}\"></use>\r\n  {/each}\r\n</g>\r\n\r\n<style>\r\n  .editable {\r\n    cursor: move;\r\n  }\r\n</style>",
    "<script>\r\n  import COA from './COA.svelte';\r\n  import MenuItem from './MenuItem.svelte';\r\n  import EditorType from './EditorType.svelte';\r\n  import EditorSize from './EditorSize.svelte';\r\n  import EditorTincture from './EditorTincture.svelte';\r\n  import Switch from './Switch.svelte';\r\n  import {slide, fly} from 'svelte/transition';\r\n  import {rw} from './utils.js';\r\n  import {changes, state, grid} from './stores';\r\n  import {charges, tinctures, divisions, ordinaries, lines, positionsArray} from \"./dataModel.js\";\r\n  export let coa, c;\r\n\r\n  const min = Math.min(window.innerWidth, window.innerHeight);\r\n  const ratio = window.innerHeight / window.innerWidth;\r\n  const coaSize = Math.round(min * .9);\r\n  let width = window.innerWidth < 600 || ratio > 1 ? 100 : Math.round((1.05 - ratio) * 100); // 56.25;\r\n  if (width / 100 * window.innerWidth < 300) width = 100;\r\n  const background = width === 100 ? \"none\" : \"#11111180\";\r\n  const itemSize = Math.round(width * 1.473);\r\n\r\n  const patterns = [\"vair\", \"vairInPale\", \"vairEnPointe\", \"ermine\", \"chequy\", \"lozengy\", \"fusily\", \"pally\", \"barry\", \"gemelles\", \"bendy\", \"bendySinister\", \"palyBendy\", \"pappellony\", \"masoned\", \"fretty\"];\r\n  const chargeTypes = Object.keys(charges.types);\r\n  const ordinariesList = [\"no\"].concat(Object.keys(ordinaries.lined)).concat(Object.keys(ordinaries.straight));\r\n\r\n  let menu = {}, change = 0;\r\n\r\n  // on reroll\r\n  $: defineMenuState(c);\r\n\r\n  // on coa change\r\n  $: {\r\n    if (change) changes.add(JSON.stringify(coa));\r\n    change = 1;\r\n  }\r\n\r\n  // on undo or redo\r\n  $: {\r\n    if (changes.length()) {\r\n      coa = JSON.parse($changes[0]);\r\n      defineMenuState();\r\n      change = 0;\r\n    }\r\n  }\r\n\r\n  // define initial menu state, run only when new coa is passed\r\n  function defineMenuState() {\r\n    // Field\r\n    menu.field = getField();\r\n    function getField() {\r\n      const type = isSemy(coa.t1) ? \"semy\" : isPattern(coa.t1) ? \"pattern\" : \"tincture\";\r\n      let t1, t2, pattern = \"vair\", charge = \"lozenge\", semy = \"conventional\", size = \"standard\";\r\n\r\n      const field = coa.t1.split(\"-\"); // parsed field tincture\r\n\r\n      if (type === \"tincture\") {\r\n        t1 = coa.t1;\r\n        t2 = selectSecondTincture(coa.t1, \"field\");\r\n      } else {\r\n        t1 = field[1];\r\n        t2 = field[2];\r\n        size = field[3] || \"standard\"\r\n      }\r\n\r\n      if (type === \"pattern\") pattern = field[0];\r\n      else if (type === \"semy\") {\r\n        charge = getSemyCharge(field);\r\n        semy = getSemyType(field);\r\n      }\r\n\r\n      return {type, t1, t2, pattern, charge, semy, size}\r\n    }\r\n\r\n    // Division\r\n    menu.division = getDivision();\r\n    function getDivision() {\r\n      let type = \"tincture\", division = \"no\", line = \"straight\", t1, t2, pattern = \"vair\", charge = \"lozenge\", semy = \"conventional\", size = \"standard\";\r\n\r\n      if (coa.division) {\r\n        const tSplit = coa.division.t.split(\"-\"); // parsed division tincture\r\n        type = isSemy(coa.division.t) ? \"semy\" : isPattern(coa.division.t) ? \"pattern\" : \"tincture\";\r\n\r\n        division = coa.division.division;\r\n        line = coa.division.line || \"straight\";\r\n        t1 = type === \"tincture\" ? coa.division.t : tSplit[1];\r\n        t2 = type === \"tincture\" ? selectSecondTincture(t1, \"division\") : tSplit[2];\r\n        if (type === \"pattern\") pattern = tSplit[0];\r\n        if (type === \"semy\") {\r\n          charge = getSemyCharge(tSplit);\r\n          semy = getSemyType(tSplit);\r\n        }\r\n        size = tSplit[3] || \"standard\";\r\n      } else {\r\n        t1 = selectSecondTincture(menu.field.t1, \"division\");\r\n        t2 = selectSecondTincture(t1, \"division\");\r\n      }\r\n\r\n      return {division, line, type, t1, t2, pattern, charge, semy, size};\r\n    }\r\n\r\n    // Ordinary\r\n    menu.ordinary = getOrdinary();\r\n    function getOrdinary() {\r\n      let ordinary = \"no\", line = \"straight\", t, divided = \"\";\r\n      if (coa.ordinary) {\r\n        ordinary = coa.ordinary.ordinary;\r\n        line = coa.ordinary.line || \"straight\";\r\n        t = coa.ordinary.t;\r\n        divided = coa.ordinary.divided || \"\";\r\n      } else {\r\n        t = rw(tinctures[\"colours\"][\"charge\"]);\r\n      }\r\n\r\n      return {ordinary, line, t, divided}\r\n    }\r\n\r\n    // Charges\r\n    menu.charges = getCharges();\r\n    function getCharges() {\r\n      if (!coa.charges) return [];\r\n      const charges = coa.charges.map(c => {\r\n        const {charge, t, p, size} = c;\r\n        const type = getChargeType(charge);\r\n        const layer = c.layer || \"\";\r\n        const sinister = c.sinister || false;\r\n        const reversed = c.reversed || false;\r\n        const x = c.x || 0;\r\n        const y = c.y || 0;\r\n        const angle = c.angle || 0;\r\n        return {charge, type, layer, t, p, size, sinister, reversed, x, y, angle};\r\n      });\r\n\r\n      return charges;\r\n    }\r\n\r\n    function isPattern(string) {\r\n      return string?.includes(\"-\");\r\n    }\r\n\r\n    function isSemy(string) {\r\n      return string?.slice(0,4) === \"semy\";\r\n    }\r\n\r\n    function getSemyCharge(array) {\r\n      return array[0].split(\"_of_\")[1];\r\n    }\r\n\r\n    function getChargeType(charge) {\r\n      return chargeTypes.find(type => charges[type][charge]);\r\n    }\r\n\r\n    function getSemyType(array) {\r\n      const charge = getSemyCharge(array);\r\n      return getChargeType(charge);\r\n    }\r\n\r\n    function selectSecondTincture(t1, type) {\r\n      const metal = t1 === \"argent\" || t1 === \"or\";\r\n      const tincturesType = metal ? tinctures[\"colours\"] : tinctures[\"metals\"];\r\n      return rw(tincturesType[type]);\r\n    }\r\n\r\n    return menu;\r\n  }\r\n\r\n  function addCharge() {\r\n    const type = rw(charges.single);\r\n    const charge = rw(charges[type]);\r\n    const t = rw(tinctures[rw(tinctures.charge)].charge);\r\n    const с = {charge, t, p: \"e\", type, size: 1.5, sinister: false, reversed: false, x: 0, y: 0, angle: 0, layer: \"\"};\r\n    menu.charges = [...menu.charges, с];\r\n  }\r\n\r\n  function removeCharge(index) {\r\n    menu.charges = menu.charges.filter((e, i) => i !== index);\r\n  }\r\n\r\n  // field attributes changed\r\n  $: {\r\n    if (menu.field.type === \"tincture\") coa.t1 = menu.field.t1; else {\r\n      const type = menu.field.type === \"semy\" ? \"semy_of_\" + menu.field.charge : menu.field.pattern;\r\n      const attibutes = [type, menu.field.t1, menu.field.t2];\r\n      if (menu.field.size !== \"standard\") attibutes.push(menu.field.size);\r\n      coa.t1 = attibutes.join(\"-\");\r\n    }\r\n  }\r\n\r\n  // division attributes changed\r\n  $: {\r\n    if (menu.division.division && menu.division.division !== \"no\") {\r\n      coa.division = {division: menu.division.division};\r\n      if (divisions[menu.division.division]) coa.division.line = menu.division.line;\r\n      if (menu.division.type === \"tincture\") coa.division.t = menu.division.t1;\r\n      else {\r\n        const attr0 = menu.division.type === \"semy\" ? \"semy_of_\" + menu.division.charge : menu.division.pattern;\r\n        const attibutes = [attr0, menu.division.t1, menu.division.t2];\r\n        if (menu.division.size !== \"standard\") attibutes.push(menu.division.size);\r\n        coa.division.t = attibutes.join(\"-\");\r\n      }\r\n    } else delete coa.division;\r\n  }\r\n\r\n  // ordinary attributes changed\r\n  $: {\r\n    if (menu.ordinary && menu.ordinary.ordinary !== \"no\") {\r\n      coa.ordinary = {ordinary: menu.ordinary.ordinary, t: menu.ordinary.t};\r\n      if (ordinaries.lined[menu.ordinary.ordinary]) coa.ordinary.line = menu.ordinary.line;\r\n      if (coa.division) coa.ordinary.divided = menu.ordinary.divided;\r\n    } else delete coa.ordinary;\r\n  }\r\n\r\n  // charges attributes changed\r\n  $: {\r\n    if (menu.charges.length) {\r\n      coa.charges = menu.charges.map(c => {\r\n        const item = {charge: c.charge, t: c.t, p: c.p, size: c.size};\r\n        if (c.layer) item.layer = c.layer;\r\n        if (c.sinister) item.sinister = 1;\r\n        if (c.reversed) item.reversed = 1;\r\n        if (c.x || c.y) {item.x = c.x; item.y = c.y;}\r\n        if (c.angle) item.angle = c.angle;\r\n        return item;\r\n      });\r\n    } else delete coa.charges;\r\n  }\r\n\r\n  function showSection(e) {\r\n    e.target.classList.toggle(\"expanded\");\r\n    const panel = e.target.nextElementSibling;\r\n    if (panel.style.maxHeight) panel.style.maxHeight = null;\r\n    else panel.style.maxHeight = panel.scrollHeight + \"px\";\r\n  }\r\n\r\n  function updateSection(e) {\r\n    const panel = e.currentTarget.closest(\".panel\");\r\n    setTimeout(() => panel.style.maxHeight = panel.scrollHeight + \"px\", 100);\r\n  }\r\n\r\n  function cap(string = \"no\") {\r\n    const split = string.split(/(?=[A-Z])/).join(\" \");\r\n    return split.charAt(0).toUpperCase() + split.slice(1);\r\n  }\r\n</script>\r\n\r\n<div id=\"editor\">\r\n  {#key coa}\r\n    <COA {coa} i=\"Edit\" w={coaSize} h={coaSize}/>\r\n  {/key}\r\n  <div id=\"menu\" in:fly={{x:500, duration:1000}} style=\"width:{width}%; background-color: {background}\">\r\n    <!-- Field -->\r\n    <div class=\"section\" class:expanded={false} on:click={showSection}>Field</div>\r\n    <div class=\"panel\">\r\n      <div class=\"subsection\">\r\n        <EditorType bind:type={menu.field.type} {updateSection}/>\r\n        {#if menu.field.type !== \"tincture\"}\r\n          <EditorSize bind:size={menu.field.size}/>\r\n        {/if}\r\n      </div>\r\n\r\n      <div class=\"subsection\">\r\n        <EditorTincture bind:t1={menu.field.t1} {itemSize}/>\r\n      </div>\r\n\r\n      {#if menu.field.type !== \"tincture\"}\r\n        <div class=\"subsection\">\r\n          <EditorTincture bind:t1={menu.field.t2} {itemSize}/>\r\n        </div>\r\n      {/if}\r\n\r\n      {#if menu.field.type === \"pattern\"}\r\n        <div class=\"subsection\">\r\n          <div>Pattern:</div>\r\n          {#each patterns.map(p => new Object({t1: `${p}-${menu.field.t1}-${menu.field.t2}-${menu.field.size}`, pattern: p})) as coa}\r\n            <div class=item class:selected={menu.field.pattern === coa.pattern} on:click={() => menu.field.pattern = coa.pattern}>\r\n              <MenuItem {coa} title={cap(coa.pattern)} {itemSize}/>\r\n            </div>\r\n          {/each}\r\n        </div>\r\n      {/if}\r\n\r\n      {#if menu.field.type === \"semy\"}\r\n        <div class=\"subsection\">\r\n          <div>Charge:\r\n            <select bind:value={menu.field.semy}>\r\n              {#each chargeTypes as type}\r\n                <option value={type}>{cap(type)}</option>\r\n              {/each}\r\n            </select>\r\n          </div>\r\n\r\n          {console.log(menu.field.semy, menu, coa)}\r\n          {#each Object.keys(charges[menu.field.semy]).map(c => new Object({t1: `semy_of_${c}-${menu.field.t1}-${menu.field.t2}-${menu.field.size}`, charge: c})) as coa (coa)}\r\n            <div class=item class:selected={menu.field.charge === coa.charge} on:click={() => menu.field.charge = coa.charge}>\r\n              <MenuItem {coa} title={cap(coa.charge)} {itemSize}/>\r\n            </div>\r\n          {/each}\r\n        </div>\r\n      {/if}\r\n    </div>\r\n\r\n    <!-- Division -->\r\n    <div class=\"section\" on:click={showSection}>Division</div>\r\n    <div class=\"panel\">\r\n      <div class=\"subsection\" on:click={updateSection}>\r\n        {#each [\"no\"].concat(Object.keys(divisions.variants)).map(division => new Object({t1: coa.t1, division: {division, t: coa.division ? coa.division.t : menu.division.t1, line: menu.division.line}})) as coa (coa)}\r\n          <div class=item class:selected={menu.division.division === coa.division.division} on:click={() => menu.division.division = coa.division.division}>\r\n            <MenuItem {coa} title={cap(coa.division.division)} {itemSize}/>\r\n          </div>\r\n        {/each}\r\n      </div>\r\n\r\n      {#if divisions[coa.division?.division]}\r\n        <div class=\"subsection\">\r\n          <div>Line:</div>\r\n          {#each Object.keys(lines).map(line => new Object({t1: coa.t1, division: {division: menu.division.division, t: coa.division ? coa.division.t : menu.division.t1, line}})) as coa (coa)}\r\n            <div class=item class:selected={menu.division.line === coa.division.line} on:click={() => menu.division.line = coa.division.line}>\r\n              <MenuItem {coa} title={cap(coa.division.line)} {itemSize}/>\r\n            </div>\r\n          {/each}\r\n        </div>\r\n      {/if}\r\n\r\n      {#if coa.division}\r\n        <div class=\"subsection\">\r\n          <EditorType bind:type={menu.division.type} {updateSection}/>\r\n          {#if menu.division.type !== \"tincture\"}\r\n            <EditorSize bind:size={menu.division.size}/>\r\n          {/if}\r\n        </div>\r\n\r\n        <div class=\"subsection\">\r\n          <EditorTincture bind:t1={menu.division.t1} {itemSize}/>\r\n        </div>\r\n\r\n        {#if menu.division.type !== \"tincture\"}\r\n          <div class=\"subsection\">\r\n            <EditorTincture bind:t1={menu.division.t2} {itemSize}/>\r\n          </div>\r\n        {/if}\r\n\r\n        {#if menu.division.type === \"pattern\"}\r\n          <div class=\"subsection\">\r\n            <div>Pattern:</div>\r\n            {#each patterns.map(p => new Object({t1: `${p}-${menu.division.t1}-${menu.division.t2}-${menu.division.size}`, pattern: p})) as coa}\r\n              <div class=item class:selected={menu.division.pattern === coa.pattern} on:click={() => menu.division.pattern = coa.pattern}>\r\n                <MenuItem {coa} title={cap(coa.pattern)} {itemSize}/>\r\n              </div>\r\n            {/each}\r\n          </div>\r\n        {/if}\r\n\r\n        {#if menu.division.type === \"semy\"}\r\n          <div class=\"subsection\">\r\n            <div>Charge:\r\n              <select bind:value={menu.division.semy}>\r\n                {#each chargeTypes as type}\r\n                  <option value={type}>{cap(type)}</option>\r\n                {/each}\r\n              </select>\r\n            </div>\r\n\r\n            {#each Object.keys(charges[menu.division.semy]).map(c => new Object({t1: `semy_of_${c}-${menu.division.t1}-${menu.division.t2}-${menu.division.size}`, charge: c})) as coa (coa)}\r\n              <div class=item class:selected={menu.division.charge === coa.charge} on:click={() => menu.division.charge = coa.charge}>\r\n                <MenuItem {coa} title={cap(coa.charge)} {itemSize}/>\r\n              </div>\r\n            {/each}\r\n          </div>\r\n        {/if}\r\n      {/if}\r\n    </div>\r\n\r\n    <!-- Ordinary -->\r\n    <div class=\"section\" on:click={showSection}>Ordinary</div>\r\n    <div class=\"panel\">\r\n      {#if coa.division}\r\n        <div class=\"subsection\" on:click={updateSection}>\r\n          Divided:\r\n          <select bind:value={menu.ordinary.divided}>\r\n            <option value=\"\">No (standard)</option>\r\n            <option value=field>Crop by main field</option>\r\n            <option value=division>Crop by division</option>\r\n            <option value=counter>Сountercharged</option>\r\n          </select>\r\n        </div>\r\n      {/if}\r\n\r\n      <div class=\"subsection\" on:click={updateSection}>\r\n        {#each ordinariesList.map(ordinary => new Object({t1: coa.t1, division: coa.division, ordinary: {ordinary, line: menu.ordinary.line, t: menu.ordinary.t, divided: menu.ordinary.divided}})) as coa (coa)}\r\n          <div class=item class:selected={menu.ordinary.ordinary === coa.ordinary.ordinary} on:click={() => menu.ordinary.ordinary = coa.ordinary.ordinary}>\r\n            <MenuItem {coa} title={cap(coa.ordinary.ordinary)} {itemSize}/>\r\n          </div>\r\n        {/each}\r\n      </div>\r\n    \r\n      {#if ordinaries.lined[menu.ordinary.ordinary]}\r\n        <div class=\"subsection\">\r\n          <div>Line:</div>\r\n          {#each Object.keys(lines).map(line => new Object({t1: coa.t1, division: coa.division, ordinary: {ordinary: menu.ordinary.ordinary, line, t: menu.ordinary.t, divided: menu.ordinary.divided}})) as coa (coa)}\r\n            <div class=item class:selected={menu.ordinary.line === coa.ordinary.line} on:click={() => menu.ordinary.line = coa.ordinary.line}>\r\n              <MenuItem {coa} title={cap(coa.ordinary.line)} {itemSize}/>\r\n            </div>\r\n          {/each}\r\n        </div>\r\n      {/if}\r\n\r\n      {#if coa.ordinary && menu.ordinary.divided !== \"counter\"}\r\n        <div class=\"subsection\">\r\n          <EditorTincture bind:t1={menu.ordinary.t} {itemSize}/>\r\n        </div>\r\n      {/if}\r\n    </div>\r\n\r\n    <!-- Charges -->\r\n    {#each menu.charges as charge, i}\r\n      <div class=\"section\" in:slide on:click={showSection}>Charge {menu.charges.length > 1 ? i+1 : \"\"}</div>\r\n      <div class=\"panel\">\r\n\r\n        <div class=\"subsection\">\r\n          <div>Category:\r\n            <select bind:value={charge.type} on:input={updateSection}>\r\n              {#each chargeTypes as type}\r\n                <option value={type}>{cap(type)}</option>\r\n              {/each}\r\n            </select>\r\n\r\n            {#if coa.division}\r\n              <span style=\"margin-left: 1em\">Divided:</span>\r\n              <select bind:value={charge.layer}>\r\n                <option value=\"\">No (standard)</option>\r\n                <option value=field>Crop by main field</option>\r\n                <option value=division>Crop by division</option>\r\n                <option value=counter>Сountercharged</option>\r\n              </select>\r\n            {/if}\r\n\r\n            <b on:click={() => removeCharge(i)} class=\"removeButton\" title=\"Remove charge\">✖</b>\r\n          </div>\r\n\r\n          {#each Object.keys(charges[charge.type]).map(c => new Object({c, t1: coa.t1, charges: [{charge:c, t: charge.t, p:\"e\", size: 1.5, sinister: charge.sinister, reversed: charge.reversed}]})) as coa (coa)}\r\n            <div class=item class:selected={charge.charge === coa.c} on:click={() => charge.charge = coa.c}>\r\n              <MenuItem {coa} title={cap(coa.c)} {itemSize}/>\r\n            </div>\r\n          {/each}\r\n        </div>\r\n\r\n        {#if charge.layer !== \"counter\"}\r\n          <div class=\"subsection\">\r\n            <EditorTincture bind:t1={charge.t} {itemSize}/>\r\n          </div>\r\n        {/if}\r\n\r\n        <div class=\"subsection\">\r\n          Positions:\r\n          <input style=\"margin-left: .6em; width: 8.6em\" bind:value={charge.p} on:input={() => $state.positions = charge.p} on:focus={() => $state.positions = charge.p} on:blur={() => $state.positions = 0}/>\r\n\r\n          <select class=\"pseudoSelect\" bind:value={charge.p} on:input={() => $state.positions = charge.p} on:focus={() => $state.positions = charge.p} on:blur={() => $state.positions = 0}>\r\n            {#each positionsArray as position}\r\n              <option value={position}>{position}</option>\r\n            {/each}\r\n          </select>\r\n\r\n          <span style=\"margin-left: 1em\">Size:</span>\r\n          <input type=\"number\" min=.1 max=2 step=.01 bind:value={charge.size}/>\r\n\r\n          <span style=\"margin-left: 1em\">Sinister:</span>\r\n          <Switch bind:checked={charge.sinister}/>\r\n\r\n          <span style=\"margin-left: 1em\">Reversed:</span>\r\n          <Switch bind:checked={charge.reversed}/>\r\n        </div>\r\n\r\n        <div class=\"subsection\">\r\n          <span>Rotation:</span>\r\n          <input style=\"margin-left: 1em\" type=\"number\" min=-180 max=180 bind:value={charge.angle}/>\r\n\r\n          <span style=\"margin-left: 1em\">Shift:</span>\r\n          <input type=\"number\" min=-100 max=100 step={$grid} bind:value={charge.x}/>\r\n          <input type=\"number\" min=-100 max=100 step={$grid} bind:value={charge.y}/>\r\n        </div>\r\n      </div>\r\n    {/each}\r\n\r\n    <div class=\"buttonLine\" on:click={addCharge}>Add charge</div>\r\n  </div>\r\n</div>\r\n\r\n<style>\r\n  #editor {\r\n    width: 100%;\r\n    height: 100%;\r\n    display: flex;\r\n    align-items: center;\r\n    justify-content: center;\r\n    user-select: none;\r\n  }\r\n\r\n  #menu {\r\n    overflow-x: hidden;\r\n    overflow-y: auto;\r\n    scrollbar-width: thin;\r\n    transition: .5s;\r\n    height: calc(100% - 45px);\r\n  }\r\n\r\n  #menu::-webkit-scrollbar {\r\n    width: 6px;\r\n    background-color: #cccccc80;\r\n  }\r\n\r\n  #menu::-webkit-scrollbar-thumb {\r\n    background-color: #111;\r\n  }\r\n\r\n  .section {\r\n    padding: 1em 1.14em;\r\n    color: #fff;\r\n    background-color: #00000060;\r\n    cursor: pointer;\r\n    transition: background-color .1s ease;\r\n    overflow-x: hidden;\r\n  }\r\n\r\n  .section:hover {\r\n    background-color: #00000080;\r\n  }\r\n\r\n  .section:before {\r\n    content: \"\\276F\";\r\n    transition: .2s ease-out;\r\n    margin-top: -.1em;\r\n    position: absolute;\r\n    right: 1em;\r\n  }\r\n\r\n  .expanded:before {\r\n    transform: rotate(90deg);\r\n  }\r\n\r\n  .panel {\r\n    max-height: 0;\r\n    min-width: 100%;\r\n    max-width: max-content;\r\n    transition: max-height .2s ease-out;\r\n    background-color: #13131320;\r\n    overflow: hidden;\r\n  }\r\n\r\n  .subsection {\r\n    color: #fff;\r\n    padding: .5em 1em;\r\n  }\r\n\r\n  .subsection select {\r\n    margin-left: .6em;\r\n    cursor: pointer;\r\n  }\r\n\r\n  .buttonLine {\r\n    padding: 1em 1.14em;\r\n    color: #fff;\r\n    background-color: #00000060;\r\n    cursor: pointer;\r\n    transition: background-color .1s ease;\r\n  }\r\n\r\n  .buttonLine:hover {\r\n    background-color: #00000080;\r\n  }\r\n\r\n  .removeButton {\r\n    float: right;\r\n    margin: .3em -0.1em 0 0;\r\n    cursor: pointer;\r\n  }\r\n\r\n  .removeButton:active {\r\n    transform: translateY(1px);\r\n  }\r\n\r\n  select.pseudoSelect {\r\n    width: 1.3em;\r\n    margin-left: -1.6em;\r\n    border: 0;\r\n  }\r\n\r\n  :global(.item) {\r\n    display: inline-block;\r\n    cursor: pointer;\r\n    transition: background-color .2s ease;\r\n  }\r\n\r\n  :global(.item:hover) {\r\n    background-color: #ffffff10;\r\n  }\r\n\r\n  :global(.item:active) {\r\n    transform: translateY(1px);\r\n  }\r\n\r\n  :global(.item.selected) {\r\n    background-color: #ffffff15;\r\n  }\r\n</style>",
    "<script>\r\n  import COA from './COA.svelte';\r\n  import {fade} from 'svelte/transition';\r\n  import {generate} from './generator.js';\r\n  import {download} from './download.js';\r\n  import {history, matrices, matrix, state} from './stores';\r\n  export let gallery, w, h;\r\n\r\n  $:coas = gallery.map(c => {\r\n    let coa = $history[c] || generate();\r\n    if (!$history[c]) $history[c] = coa;\r\n    return coa;\r\n  });\r\n\r\n  function regenerate(i) {\r\n    const coa = generate();\r\n    gallery[i] = $history.length;\r\n    $matrix++;\r\n    $matrices[$matrix] = gallery;\r\n    $history.push(coa);\r\n    coas[i] = coa;\r\n  }\r\n\r\n  function editCOA(i) {\r\n    $state.edit = 1;\r\n    $state.c = gallery[i];\r\n    $state.i = i;\r\n  }\r\n</script>\r\n\r\n<div id=\"gallery\" style=\"margin-top: 28px; font-size: {Math.ceil(w/20)}px\" transition:fade>\r\n  {#each coas as coa, i}\r\n    <div>\r\n      {#key coa}\r\n        <COA {coa} {i} {w} {h}/>\r\n      {/key}\r\n        <div class=\"control\">\r\n        <svg on:click={() => regenerate(i)}><use href=\"#dice-icon\"></use></svg>\r\n        <svg on:click={() => editCOA(i)}><use href=\"#pencil-icon\"></use></svg>\r\n        <svg on:click={() => download(i)}><use href=\"#download-icon\"></use></svg>\r\n      </div>\r\n    </div>\r\n  {/each}\r\n</div>\r\n\r\n<style>\r\n  div {\r\n    display: inline-table;\r\n  }\r\n\r\n  #gallery > div {\r\n    display: inline-block;\r\n    position: relative;\r\n    user-select: none;\r\n    transition: background .5s ease;\r\n  }\r\n\r\n  #gallery > div:hover {\r\n    background: #00000020;\r\n  }\r\n\r\n  .control {\r\n    display: block;\r\n    position: absolute;\r\n    opacity: 0;\r\n    transition: .5s ease-in-out;\r\n    color: #f1f1f1;\r\n    transform: translate(-50%, -150%);\r\n    left: 50%;\r\n    font-size: 2em;\r\n    white-space: nowrap;\r\n  }\r\n\r\n  #gallery > div:hover > .control {\r\n    opacity: 1;\r\n  }\r\n\r\n  .control > svg {\r\n    width: 1.2em;\r\n    height: 1.2em;\r\n    fill: #f1f1f1;\r\n    stroke: #333;\r\n    stroke-width: .5em;\r\n    vertical-align: middle;\r\n    margin: 0 .5em;\r\n    padding: .2em;\r\n    cursor: pointer;\r\n  }\r\n\r\n  .control > svg:hover {\r\n    background-color: #44444490;\r\n    color: #fff;\r\n  }\r\n\r\n  .control > svg:active {\r\n    transform: translateY(1px);\r\n  }\r\n</style>",
    "<script>\r\n  import Tooltip from './Tooltip.svelte';\r\n  import Lock from './Lock.svelte';\r\n  import {fade} from 'svelte/transition';\r\n  import {download} from './download.js';\r\n  import {size, grad, diaper, shield, colors, background, scale, border, borderWidth, grid, matrix, state, changes} from './stores';\r\n\r\n  const shields = [\"heater\", \"oldFrench\", \"spanish\", \"french\", \"swiss\", \"wedged\", \"italian\", \"kite\", \"renaissance\", \"baroque\", \"polish\", \"german\", \"diamond\", \"round\", \"vesicaPiscis\", \"square\", \"flag\", \"pennon\", \"guidon\", \"banner\", \"dovetail\", \"gonfalon\", \"pennant\"];\r\n  const paths = shields.map(id => document.getElementById(id).innerHTML);\r\n  const sizes = [[80, \"Giant\"], [100, \"Huge\"], [150, \"Large\"], [200, \"Medium\"], [300, \"Small\"], [400, \"Tiny\"]];\r\n  const gradients = [\"luster\", \"spotlight\", \"backlight\"];\r\n  const diapers = [\"nourse\", \"tessellation\"];\r\n  const tinctures = [\"argent\", \"or\", \"gules\", \"sable\", \"azure\", \"vert\", \"purpure\"];\r\n  const defaultColors = {argent: \"#fafafa\", or: \"#ffe066\", gules: \"#d7374a\", sable: \"#333333\", azure: \"#377cd7\", vert: \"#26c061\", purpure: \"#522d5b\"};\r\n\r\n  const wideScreen = window.innerWidth > 600;\r\n\r\n  $: position = $changes[1];\r\n  // save options on change\r\n  $: lock(\"size\", $size);\r\n  $: lock(\"grad\", $grad);\r\n  $: lock(\"diaper\", $diaper);\r\n  $: lock(\"shield\", $shield);\r\n  $: lock(\"colors\", JSON.stringify($colors));\r\n  $: lock(\"background\", $background);\r\n  $: lock(\"scale\", $scale);\r\n  $: lock(\"border\", $border);\r\n  $: lock(\"borderWidth\", $borderWidth);\r\n  $: lock(\"grid\", $grid);\r\n\r\n  // don't lock options on load\r\n  const loaded = [];\r\n  function lock(key, value) {\r\n    if (loaded.includes(key)) localStorage.setItem(key, value);\r\n    else loaded.push(key);\r\n  }\r\n\r\n  function getRandomColor() {\r\n    const l = '0123456789ABCDEF';\r\n    $background = \"#\"+[0,0,0,0,0,0].map(() => l[Math.floor(Math.random() * 16)]).join(\"\");\r\n  }\r\n</script>\r\n\r\n<div id=\"navbar\">\r\n  <ul>\r\n    {#if wideScreen}\r\n      <svg class=logo width=35 height=35 viewBox=\"-2 -1 55 55\">\r\n        <title>Armoria: Heralrdy Generator</title>\r\n        <path fill=\"#fff\" stroke=\"none\" d=\"m 46,3 0.6,1.4 c -1.5,0.7 -2.6,1.4 -3.3,2.2 -0.7,0.7 -1.2,1.5 -1.5,2.4 -0.3,0.9 -0.4,2.2 -0.4,3.9 0,0.6 0,1.3 0,2.2 l 0.5,23.2 c 0,2.5 0.3,4.2 0.8,5 0.4,0.6 0.8,0.8 1.3,0.8 0.6,0 1.5,-0.6 2.8,-1.8 l 0.9,1.1 -5.8,4.9 -1.9,1.6 C 38.4,49.2 37.2,48.2 36.5,46.9 35.8,45.7 35.3,36.7 35.2,34 c -7.6,0.1 -20.2,0 -20.2,0 0,0 -7.4,9.1 -7.4,11.1 0,0.6 0.2,1.1 0.6,1.8 0.5,0.9 0.8,1.4 0.8,1.7 0,0.4 -0.1,0.7 -0.4,1 -0.3,0.3 -0.6,0.4 -1.1,0.4 -0.5,0 -0.9,-0.2 -1.2,-0.6 -0.5,-0.6 -0.7,-1.3 -0.7,-2.2 0,-1 0.3,-2.1 0.8,-3.3 C 8.8,39.9 11.3,36.7 14.1,32.9 11.1,30.7 9,28.5 7.8,26.4 6.6,24.4 6,22.1 6,19.5 c 0,-3 0.8,-5.7 2.3,-8.3 1.5,-2.5 3.8,-4.5 6.9,-6 3.1,-1.5 6.2,-2.2 9.4,-2.2 4.9,0 9.7,1.7 14.3,5.1 1.1,-1.2 2.2,-2.1 3.2,-2.9 1,-0.8 2.4,-1.5 4,-2.3 z M 30.7,10.2 c -2.6,-1.3 -5.2,-1.9 -7.8,-1.9 -2.7,0 -5.3,0.6 -7.8,1.8 -2.4,1.2 -4.2,2.8 -5.4,4.7 -1.2,1.9 -1.8,3.9 -1.8,5.9 0,4.2 2.3,8 6.9,11.3 L 25.2,17.7 c -1.6,-0.8 -2.9,-1.3 -4.2,-1.3 -1.7,0 -3.1,0.8 -4.2,2.4 -0.4,0.7 -1,0.5 -1.1,-0.2 0,-0.6 0.3,-1.5 1,-2.7 0.7,-1.1 1.6,-2.1 2.9,-2.8 1.3,-0.7 2.6,-1.1 4,-1.1 1.4,0 3.1,0.4 4.9,1.1 z m 4,3.2 C 34,12.4 32.8,11.5 32,11 L 18.4,29.4 h 16.7 z\"/>\r\n      </svg>\r\n    {/if}\r\n    {#if $matrix}\r\n    <bt on:click={() => $matrix -= 1}>{wideScreen ? \"Rollback\" : \"⭯\"}</bt>\r\n    {:else}\r\n      <bd style=\"color: #333\">{wideScreen ? \"Rollback\" : \"⭯\"}</bd>\r\n    {/if}\r\n    <bt on:click={() => $matrix += 1}>{wideScreen ? \"Reroll\" : \"⭮\"}</bt>\r\n\r\n    <bt on:click={() => download()}>Download</bt>\r\n    <div class=\"container\"><bl>Options</bl>\r\n\r\n      <div class=\"dropdown level1\">\r\n        <div class=\"container\">\r\n          <div class=\"dropdown level2\">\r\n            {#each sizes as s}\r\n              <bt class:selected={$size == s[0]} on:click={() => $size = s[0]}>{s[1]}</bt>\r\n            {/each}\r\n          </div>\r\n          <bl>\r\n            <Lock key=size/>\r\n            <Tooltip tip=\"Gallery size\">Gallery</Tooltip>\r\n          </bl>\r\n        </div>\r\n\r\n        <div class=\"container\">\r\n          <div class=\"dropdown level2\">\r\n            {#each tinctures as t}\r\n              <bl>{t}\r\n                {#if $colors[t] !== defaultColors[t]}\r\n                  <Tooltip tip=\"Restore default color\">\r\n                    <span on:click={() => $colors[t] = defaultColors[t]}>⭯ </span>\r\n                  </Tooltip>\r\n                {/if}\r\n                <input type=\"color\" bind:value={$colors[t]}/>\r\n              </bl>\r\n            {/each}\r\n          </div>\r\n          <bl>\r\n            <Lock key=colors/>\r\n            <Tooltip tip=\"Hue of tinctures and metals. Edit COA to change tincture or metal itself\">Colors</Tooltip>\r\n          </bl>\r\n        </div>\r\n\r\n        <div class=\"container\">\r\n          <div class=\"dropdown level2 columns3 iconed\">\r\n            {#each shields as sh, i}\r\n              <bt on:click={() => $shield = sh}>\r\n                <svg class=shield class:selected={sh === $shield} width=26 height=26 viewBox=\"0 0 200 200\">{@html paths[i]}</svg>\r\n                {sh.split(/(?=[A-Z])/).join(\" \")}\r\n              </bt>\r\n            {/each}\r\n          </div>\r\n          <bl>\r\n            <Lock key=shield/>\r\n            <Tooltip tip=\"Shield or banner form. Some forms do not work well with auto-generated heralrdy\">Shield</Tooltip>\r\n          </bl>\r\n        </div>\r\n\r\n        <div class=\"container\">\r\n          <div class=\"dropdown level2\">\r\n            <bt class:selected={!$grad} on:click={() => $grad = null}>No gradient</bt>\r\n            {#each gradients as g}\r\n              <bt class:selected={g === $grad} on:click={() => $grad = g}>{g}</bt>\r\n            {/each}\r\n          </div>\r\n          <bl>\r\n            <Lock key=grad/>\r\n            <Tooltip tip=\"Gradient (overlay) style to be applied over coat of arms\">Gradient</Tooltip>\r\n          </bl>\r\n        </div>\r\n\r\n        <div class=\"container\">\r\n          <div class=\"dropdown level2\">\r\n            <bt class:selected={!$diaper} on:click={() => $diaper = null}>No pattern</bt>\r\n            {#each diapers as d}\r\n              <bt class:selected={d === $diaper} on:click={() => $diaper = d}>{d}</bt>\r\n            {/each}\r\n          </div>\r\n          <bl>\r\n            <Lock key=diaper/>\r\n            <Tooltip tip=\"Diaper (subtle backing on coat of arms) style\">Damasking</Tooltip></bl>\r\n        </div>\r\n\r\n        <div class=\"container\">\r\n          <div class=\"dropdown level2\">\r\n            <bl>Color\r\n              {#if $border !== \"#333333\"}\r\n                <Tooltip tip=\"Restore default color\">\r\n                  <span on:click={() => $border = \"#333333\"}>⭯ </span>\r\n                </Tooltip>\r\n              {/if}\r\n              <input type=\"color\" bind:value={$border}/>\r\n            </bl>\r\n            <bl>Width\r\n              <input class=\"right\" type=\"number\" min=0 max=4 step=.1 bind:value={$borderWidth}/>\r\n            </bl>\r\n          </div>\r\n          <bl>\r\n            <Lock key=border/>\r\n            <Tooltip tip=\"Border style for coat of arms\">Border</Tooltip>\r\n          </bl>\r\n        </div>\r\n\r\n        <div class=\"container\">\r\n          <div class=\"dropdown level2\">\r\n            <bl class=\"wide\">\r\n              <input type=\"range\" min=1 max=50 step=1 bind:value={$grid}/>\r\n              <input type=\"number\" min=1 max=50 step=1 bind:value={$grid}/>\r\n            </bl>\r\n          </div>\r\n          <bl>\r\n            <Lock key=grid/>\r\n            <Tooltip tip=\"Edit mode grid size (affects elements dragging)\">Grid</Tooltip>\r\n          </bl>\r\n        </div>\r\n\r\n        <div class=\"container\">\r\n          <div class=\"dropdown level2\">\r\n            <bl>Color\r\n              <Tooltip tip=\"Select random color\">\r\n                <span on:click={getRandomColor}>⭮ </span>\r\n              </Tooltip>\r\n              {#if $background !== \"#333333\"}\r\n                <Tooltip tip=\"Restore default color\">\r\n                  <span on:click={() => $background = \"#333333\"}>⭯ </span>\r\n                </Tooltip>\r\n              {/if}\r\n              <input type=\"color\" bind:value={$background}/>\r\n            </bl>\r\n          </div>\r\n          <bl>\r\n            <Lock key=background/>\r\n            <Tooltip tip=\"Background color\">Background</Tooltip>\r\n          </bl>\r\n        </div>\r\n\r\n        <div class=\"container\">\r\n          <div class=\"dropdown level2\">\r\n            <bl class=\"wide\">\r\n              <input type=\"range\" min=1 max=4 step=.1 bind:value={$scale}/>\r\n              <input type=\"number\" min=1 max=4 step=.1 bind:value={$scale}/>\r\n            </bl>\r\n          </div>\r\n          <bl>\r\n            <Lock key=scale/>\r\n            <Tooltip tip=\"Downloaded image size, 1 is default size, 2 - 2x size, etc.\">Scale</Tooltip>\r\n          </bl>\r\n        </div>\r\n      </div>\r\n    </div>\r\n    \r\n    {#if $state.edit}\r\n      {#if position > 0}\r\n        <bt on:click={() => changes.undo()}>Undo</bt>\r\n      {:else}\r\n        <bd style=\"color: #333\">Undo</bd>\r\n      {/if}\r\n\r\n      {#if position < changes.length() - 1}\r\n        <bt on:click={() => changes.redo()}>Redo</bt>\r\n      {:else}\r\n        <bd style=\"color: #333\">Redo</bd>\r\n      {/if}\r\n    {/if}\r\n\r\n    {#if $state.edit}\r\n      <bt id=\"back\" on:click={() => $state.edit = 0} transition:fade>Back to gallery</bt>\r\n    {/if}\r\n\r\n    {#if wideScreen || !$state.edit}\r\n      <bt on:click={() => $state.about = 1}>About</bt>\r\n    {/if}\r\n  </ul>\r\n</div>\r\n\r\n<style>\r\n  ul {\r\n    position: fixed;\r\n    top: 0;\r\n    width: 100%;\r\n    list-style-type: none;\r\n    margin: 0;\r\n    padding: 0;\r\n    display: flex;\r\n    align-items: center;\r\n    overflow: hidden;\r\n    background-color: #1b1c1d;\r\n    z-index: 1;\r\n  }\r\n\r\n  .logo {\r\n    margin-left: 1em;\r\n    /* background-color: #35bdb2; */\r\n  }\r\n\r\n  bt, bl, bd {\r\n    user-select: none;\r\n    padding: 1em 1.14em;\r\n    line-height: 1.24;\r\n    color: #fff;\r\n    text-transform: capitalize;\r\n  }\r\n\r\n  bt {\r\n    cursor: pointer;\r\n    transition: background-color .1s;\r\n  }\r\n\r\n  bt:hover, bl:hover {\r\n    background-color: #2d2e2f;\r\n  }\r\n\r\n  bt:active, span:active {\r\n    transform: translateY(1px);\r\n  }\r\n\r\n  input[type=\"color\"] {\r\n    position: absolute;\r\n    padding: 0;\r\n    margin: -.3em 0;\r\n    right: 1em;\r\n    border: 0;\r\n    width: 3em;\r\n    cursor: pointer;\r\n  }\r\n\r\n  input[type=\"range\"] {\r\n    padding: 0;\r\n    width: 72%;\r\n    margin: 0;\r\n    height: .6em;\r\n    cursor: pointer;\r\n  }\r\n\r\n  input[type=\"number\"] {\r\n    padding: 0 0 0 3px;\r\n    width: 25%;\r\n    margin: 0;\r\n    border: 0;\r\n  }\r\n\r\n  input[type=\"number\"].right {\r\n    position: absolute;\r\n    padding: 2px;\r\n    margin: -.25em 0;\r\n    right: 1em;\r\n    width: 3em;\r\n  }\r\n\r\n  .dropdown {\r\n    display: none;\r\n    position: fixed;\r\n    background-color: #1b1c1d;\r\n    min-width: 10em;\r\n    box-shadow: 0px 8px 16px 0px rgba(0,0,0,0.2);\r\n    z-index: 1;\r\n  }\r\n\r\n  .level1 {\r\n    margin-top: 1em;\r\n  }\r\n\r\n  .level2 {\r\n    z-index: 1;\r\n    margin-left: 10.25em;\r\n  }\r\n\r\n  .dropdown bt, .dropdown bl {\r\n    padding: 12px 16px;\r\n    width: 8em;\r\n    display: block;\r\n  }\r\n\r\n  .dropdown bl.wide {\r\n    width: 12em;\r\n  }\r\n\r\n  .container:hover > .dropdown {\r\n    display: block;\r\n  }\r\n\r\n  .dropdown bt.selected:before {\r\n    content: '\\2713';\r\n    display: inline-block;\r\n    padding: 0 6px 0 0;\r\n  }\r\n\r\n  .columns3 {\r\n    column-count: 3;\r\n  }\r\n\r\n  .dropdown.iconed {\r\n    text-indent: 1.8em;\r\n  }\r\n\r\n  .shield {\r\n    position: absolute;\r\n    fill: none;\r\n    stroke: #fff;\r\n    stroke-width: 4px;\r\n    margin: -0.4em 0 0 -2.2em;\r\n  }\r\n\r\n  .shield.selected {\r\n    fill: #777;\r\n    stroke: #333;\r\n  }\r\n\r\n  span {\r\n    cursor: pointer;\r\n  }\r\n\r\n  #back {\r\n    position: absolute;\r\n    right: 0;\r\n  }\r\n\r\n  @media screen and (max-height: 640px) {\r\n    bt, bl, bd {\r\n      padding: 1em .6em;\r\n    }\r\n  }\r\n</style>",
    "<script>\r\n  import {state} from \"./stores\"\r\n  export let ordinary, shieldPath, colors, t;\r\n\r\n  function transformOrdinary(o) {\r\n    if (!o.x && !o.y && !o.size) return null;\r\n    return `translate(${o.x||0}, ${o.y||0}) scale(${o.size||1})`;\r\n  }\r\n\r\n  function getTemplate(templateId, lineId) {\r\n    if (!lineId) return document.getElementById(templateId)?.innerHTML;\r\n    const template = document.getElementById(templateId);\r\n    const line = document.getElementById(lineId) ? document.getElementById(lineId) : document.getElementById(\"straight\");\r\n    return template.innerHTML.replace(/{line}/g, line.getAttribute(\"d\")).replace(/dpath/g, \"d\");\r\n  }\r\n\r\n  function addDrag() {\r\n    if (!$state.edit) return;\r\n    let dragStartX, dragStartY, objInitLeft, objInitTop;\r\n    let inDrag = false;\r\n    let dragTarget = this;\r\n\r\n    const grid = 10;\r\n\r\n    dragTarget.addEventListener(\"mousedown\", function(e) {\r\n      inDrag = true;\r\n      objInitLeft = dragTarget.offsetLeft || 0;\r\n      objInitTop = dragTarget.offsetTop || 0;\r\n      dragStartX = e.pageX;\r\n      dragStartY = e.pageY;\r\n    });\r\n\r\n    document.addEventListener(\"mousemove\", function(e) {\r\n      if (!inDrag) {return;}\r\n      const x = Math.round((objInitLeft + e.pageX - dragStartX) / grid) * grid;\r\n      const y = Math.round((objInitTop + e.pageY - dragStartY) / grid) * grid;\r\n      dragTarget.setAttribute(\"transform\", `translate(${x},${y})`);\r\n    });\r\n\r\n    document.addEventListener(\"mouseup\", () => inDrag = false);\r\n  }\r\n</script>\r\n\r\n{#if ordinary.ordinary === \"bordure\"}\r\n  <g class=\"ordinary\" class:editable={$state.edit} on:click={addDrag}>\r\n    <path d={shieldPath} fill=\"none\" stroke={colors[t]} stroke-width=\"16.7%\"/>\r\n  </g>\r\n{:else if ordinary.ordinary === \"orle\"}\r\n  <g class=\"ordinary\" class:editable={$state.edit} on:click={addDrag}>\r\n    <path d={shieldPath} fill=\"none\" stroke={colors[t]} stroke-width=\"5%\" transform=\"scale(.85)\" transform-origin=\"center\"/>\r\n  </g>\r\n{:else}\r\n  <g class=\"ordinary\" class:editable={$state.editn} transform={transformOrdinary(ordinary)} transform-origin=\"center\" fill={colors[t]} on:click={addDrag}>\r\n    {@html getTemplate(ordinary.ordinary, ordinary.line)}\r\n  </g>\r\n{/if}\r\n\r\n<style>\r\n  .editable:hover {\r\n    outline: 1px dashed #333;\r\n    cursor: pointer;\r\n  }\r\n</style>",
    "<script>\r\n  import {state, shield} from \"./stores\";\r\n  import {shields} from \"./dataModel.js\";\r\n  import {fade} from 'svelte/transition';\r\n\r\n  // on shield change\r\n  $: points = shields[$shield] ? Object.entries(shields[$shield]) : Object.entries(shields.spanish);\r\n\r\n  function getClass(p) {\r\n    if (\"abcdefghi\".includes(p)) return \"green\";\r\n    if (\"ABCDEFGHIJK\".includes(p)) return \"red\";\r\n    return \"blue\";\r\n  }\r\n</script>\r\n\r\n{#if $state.positions}\r\n  <g id=positions transform=\"translate(100, 100)\" in:fade>\r\n    {#each points as p}\r\n      <g id={p[0]} class={getClass(p[0])}>\r\n        <circle cx={p[1][0]} cy={p[1][1]} r=3 class:active={$state.positions.includes(p[0])}/>\r\n        <text x={p[1][0]} y={p[1][1]} class:active={$state.positions.includes(p[0])}>{p[0]}</text>\r\n      </g>\r\n    {/each}\r\n  </g>\r\n{/if}\r\n\r\n<style>\r\n  circle {\r\n    opacity: .5;\r\n  }\r\n\r\n  circle.active {\r\n    opacity: .9;\r\n  }\r\n\r\n  text {\r\n    font-family: 'Roboto', 'Helvetica Neue', Arial, Helvetica, sans-serif;\r\n    text-anchor: middle;\r\n    font-size: 5px;\r\n    fill: #ddd;\r\n    dominant-baseline: central;\r\n  }\r\n\r\n  text.active {\r\n    fill: #fff;\r\n  }\r\n\r\n  .green {\r\n    fill: rgb(12, 80, 12);\r\n  }\r\n\r\n  .blue {\r\n    fill: rgb(12, 12, 80);\r\n  }\r\n\r\n  .red {\r\n    fill: rgb(80, 12, 12);\r\n  }\r\n</style>",
    "<script>\r\n  export let checked = false;\r\n  const id = \"switch\" + Math.floor(1e6 * Math.random());\r\n</script>\r\n\r\n<div class=switch>\r\n  <input id={id} class=switch-input type=checkbox bind:checked/>\r\n  <label for={id} class=switch-label>Switch</label>\r\n</div>\r\n\r\n<style>\r\n  .switch {\r\n    position: relative;\r\n    display: inline-block;\r\n    top: -5px;\r\n  }\r\n\r\n  .switch-input {\r\n    display: none;\r\n  }\r\n\r\n  .switch-label {\r\n    display: block;\r\n    width: 48px;\r\n    height: 24px;\r\n    text-indent: -150%;\r\n    color: transparent;\r\n  }\r\n\r\n  .switch-label::before, .switch-label::after {\r\n    content: \"\";\r\n    display: block;\r\n    position: absolute;\r\n    cursor: pointer;\r\n  }\r\n\r\n  .switch-label::before {\r\n    width: 100%;\r\n    height: 100%;\r\n    background-color: #dedede;\r\n    border-radius: 9999em;\r\n    -webkit-transition: background-color 0.25s ease;\r\n    transition: background-color 0.25s ease;\r\n  }\r\n\r\n  .switch-label::after {\r\n    top: 0;\r\n    left: 0;\r\n    width: 24px;\r\n    height: 24px;\r\n    border-radius: 50%;\r\n    background-color: #fff;\r\n    box-shadow: 0 0 2px rgba(0, 0, 0, 0.45);\r\n    -webkit-transition: left 0.25s ease;\r\n    transition: left 0.25s ease;\r\n  }\r\n\r\n  .switch-input:checked + .switch-label::before {\r\n    background-color: #89c12d;\r\n  }\r\n\r\n  .switch-input:checked + .switch-label::after {\r\n    left: 24px;\r\n  }\r\n</style>",
    "<script>\r\n  // Source: https://github.com/Abreu00/svelte-tooltip\r\n  export let tip = \"\", top = false, bottom = false, left = false, active = false, color = \"#222\";\r\n  let right = top || bottom || left ? false : true; // default side \r\n  let style = `background-color: ${color};`;\r\n</script>\r\n\r\n<div class=\"tooltip-wrapper\">\r\n  <span class=\"tooltip-slot\">\r\n    <slot/>\r\n  </span>\r\n  <div class=\"tooltip\" class:active class:left class:right class:bottom class:top>\r\n    {#if tip}\r\n      <div class=\"default-tip\" {style}>{tip}</div>\r\n    {:else}\r\n      <slot name=\"custom-tip\" />\r\n    {/if}\r\n  </div>\r\n</div>\r\n\r\n<style>\r\n  .tooltip-wrapper {\r\n    position: relative;\r\n    display: inline-block;\r\n    cursor: help;\r\n  }\r\n  .tooltip {\r\n    position: absolute;\r\n    font-family: inherit;\r\n    display: inline-block;\r\n    white-space: nowrap;\r\n    color: inherit;\r\n    opacity: 0;\r\n    visibility: hidden;\r\n    text-transform: initial;\r\n    transition-delay: .5s;\r\n    transition-property: opacity;\r\n    transition-duration: 150ms;\r\n    z-index: 10;\r\n  }\r\n\r\n  .default-tip {\r\n    display: inline-block;\r\n    padding: .5em .8em;\r\n    border-radius: .4em;\r\n    font-size: .9em;\r\n    color: inherit;\r\n  }\r\n\r\n  .tooltip.top {\r\n    left: 50%;\r\n    transform: translate(-50%, -100%);\r\n    margin-top: -8px;\r\n  }\r\n\r\n  .tooltip.bottom {\r\n    left: 50%;\r\n    bottom: 0;\r\n    transform: translate(-50%, 100%);\r\n    margin-bottom: -8px;\r\n  }\r\n\r\n  .tooltip.left {\r\n    left: 0;\r\n    transform: translateX(-100%);\r\n    margin-left: -8px;\r\n  }\r\n\r\n  .tooltip.right {\r\n    right: 0;\r\n    transform: translateX(100%);\r\n    margin-right: -8px;\r\n  }\r\n\r\n  .tooltip.active {\r\n    opacity: 1;\r\n    visibility: initial;\r\n  }\r\n\r\n  .tooltip-slot:hover + .tooltip {\r\n    opacity: 1;\r\n    visibility: initial;\r\n  }\r\n</style>"
  ],
  "names": [],
  "mappings": "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"
}