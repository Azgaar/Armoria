
(function(l, r) { if (!l || l.getElementById('livereloadscript')) return; r = l.createElement('script'); r.async = 1; r.src = '//' + (self.location.host || 'localhost').split(':')[0] + ':35729/livereload.js?snipver=1'; r.id = 'livereloadscript'; l.getElementsByTagName('head')[0].appendChild(r) })(self.document);
var app = (function () {
    'use strict';

    function noop() { }
    const identity = x => x;
    function assign(tar, src) {
        // @ts-ignore
        for (const k in src)
            tar[k] = src[k];
        return tar;
    }
    function add_location(element, file, line, column, char) {
        element.__svelte_meta = {
            loc: { file, line, column, char }
        };
    }
    function run(fn) {
        return fn();
    }
    function blank_object() {
        return Object.create(null);
    }
    function run_all(fns) {
        fns.forEach(run);
    }
    function is_function(thing) {
        return typeof thing === 'function';
    }
    function safe_not_equal(a, b) {
        return a != a ? b == b : a !== b || ((a && typeof a === 'object') || typeof a === 'function');
    }
    function is_empty(obj) {
        return Object.keys(obj).length === 0;
    }
    function validate_store(store, name) {
        if (store != null && typeof store.subscribe !== 'function') {
            throw new Error(`'${name}' is not a store with a 'subscribe' method`);
        }
    }
    function subscribe(store, ...callbacks) {
        if (store == null) {
            return noop;
        }
        const unsub = store.subscribe(...callbacks);
        return unsub.unsubscribe ? () => unsub.unsubscribe() : unsub;
    }
    function get_store_value(store) {
        let value;
        subscribe(store, _ => value = _)();
        return value;
    }
    function component_subscribe(component, store, callback) {
        component.$$.on_destroy.push(subscribe(store, callback));
    }
    function create_slot(definition, ctx, $$scope, fn) {
        if (definition) {
            const slot_ctx = get_slot_context(definition, ctx, $$scope, fn);
            return definition[0](slot_ctx);
        }
    }
    function get_slot_context(definition, ctx, $$scope, fn) {
        return definition[1] && fn
            ? assign($$scope.ctx.slice(), definition[1](fn(ctx)))
            : $$scope.ctx;
    }
    function get_slot_changes(definition, $$scope, dirty, fn) {
        if (definition[2] && fn) {
            const lets = definition[2](fn(dirty));
            if ($$scope.dirty === undefined) {
                return lets;
            }
            if (typeof lets === 'object') {
                const merged = [];
                const len = Math.max($$scope.dirty.length, lets.length);
                for (let i = 0; i < len; i += 1) {
                    merged[i] = $$scope.dirty[i] | lets[i];
                }
                return merged;
            }
            return $$scope.dirty | lets;
        }
        return $$scope.dirty;
    }
    function update_slot_base(slot, slot_definition, ctx, $$scope, slot_changes, get_slot_context_fn) {
        if (slot_changes) {
            const slot_context = get_slot_context(slot_definition, ctx, $$scope, get_slot_context_fn);
            slot.p(slot_context, slot_changes);
        }
    }
    function get_all_dirty_from_scope($$scope) {
        if ($$scope.ctx.length > 32) {
            const dirty = [];
            const length = $$scope.ctx.length / 32;
            for (let i = 0; i < length; i++) {
                dirty[i] = -1;
            }
            return dirty;
        }
        return -1;
    }
    function null_to_empty(value) {
        return value == null ? '' : value;
    }
    function set_store_value(store, ret, value) {
        store.set(value);
        return ret;
    }
    function action_destroyer(action_result) {
        return action_result && is_function(action_result.destroy) ? action_result.destroy : noop;
    }

    const is_client = typeof window !== 'undefined';
    let now = is_client
        ? () => window.performance.now()
        : () => Date.now();
    let raf = is_client ? cb => requestAnimationFrame(cb) : noop;

    const tasks = new Set();
    function run_tasks(now) {
        tasks.forEach(task => {
            if (!task.c(now)) {
                tasks.delete(task);
                task.f();
            }
        });
        if (tasks.size !== 0)
            raf(run_tasks);
    }
    /**
     * Creates a new task that runs on each raf frame
     * until it returns a falsy value or is aborted
     */
    function loop(callback) {
        let task;
        if (tasks.size === 0)
            raf(run_tasks);
        return {
            promise: new Promise(fulfill => {
                tasks.add(task = { c: callback, f: fulfill });
            }),
            abort() {
                tasks.delete(task);
            }
        };
    }
    function append(target, node) {
        target.appendChild(node);
    }
    function get_root_for_style(node) {
        if (!node)
            return document;
        const root = node.getRootNode ? node.getRootNode() : node.ownerDocument;
        if (root && root.host) {
            return root;
        }
        return node.ownerDocument;
    }
    function append_empty_stylesheet(node) {
        const style_element = element('style');
        append_stylesheet(get_root_for_style(node), style_element);
        return style_element;
    }
    function append_stylesheet(node, style) {
        append(node.head || node, style);
    }
    function insert(target, node, anchor) {
        target.insertBefore(node, anchor || null);
    }
    function detach(node) {
        node.parentNode.removeChild(node);
    }
    function destroy_each(iterations, detaching) {
        for (let i = 0; i < iterations.length; i += 1) {
            if (iterations[i])
                iterations[i].d(detaching);
        }
    }
    function element(name) {
        return document.createElement(name);
    }
    function svg_element(name) {
        return document.createElementNS('http://www.w3.org/2000/svg', name);
    }
    function text(data) {
        return document.createTextNode(data);
    }
    function space() {
        return text(' ');
    }
    function empty() {
        return text('');
    }
    function listen(node, event, handler, options) {
        node.addEventListener(event, handler, options);
        return () => node.removeEventListener(event, handler, options);
    }
    function prevent_default(fn) {
        return function (event) {
            event.preventDefault();
            // @ts-ignore
            return fn.call(this, event);
        };
    }
    function attr(node, attribute, value) {
        if (value == null)
            node.removeAttribute(attribute);
        else if (node.getAttribute(attribute) !== value)
            node.setAttribute(attribute, value);
    }
    function xlink_attr(node, attribute, value) {
        node.setAttributeNS('http://www.w3.org/1999/xlink', attribute, value);
    }
    function to_number(value) {
        return value === '' ? null : +value;
    }
    function children(element) {
        return Array.from(element.childNodes);
    }
    function set_input_value(input, value) {
        input.value = value == null ? '' : value;
    }
    function set_style(node, key, value, important) {
        node.style.setProperty(key, value, important ? 'important' : '');
    }
    function select_option(select, value) {
        for (let i = 0; i < select.options.length; i += 1) {
            const option = select.options[i];
            if (option.__value === value) {
                option.selected = true;
                return;
            }
        }
        select.selectedIndex = -1; // no option should be selected
    }
    function select_value(select) {
        const selected_option = select.querySelector(':checked') || select.options[0];
        return selected_option && selected_option.__value;
    }
    function toggle_class(element, name, toggle) {
        element.classList[toggle ? 'add' : 'remove'](name);
    }
    function custom_event(type, detail, bubbles = false) {
        const e = document.createEvent('CustomEvent');
        e.initCustomEvent(type, bubbles, false, detail);
        return e;
    }
    class HtmlTag {
        constructor() {
            this.e = this.n = null;
        }
        c(html) {
            this.h(html);
        }
        m(html, target, anchor = null) {
            if (!this.e) {
                this.e = element(target.nodeName);
                this.t = target;
                this.c(html);
            }
            this.i(anchor);
        }
        h(html) {
            this.e.innerHTML = html;
            this.n = Array.from(this.e.childNodes);
        }
        i(anchor) {
            for (let i = 0; i < this.n.length; i += 1) {
                insert(this.t, this.n[i], anchor);
            }
        }
        p(html) {
            this.d();
            this.h(html);
            this.i(this.a);
        }
        d() {
            this.n.forEach(detach);
        }
    }

    const active_docs = new Set();
    let active = 0;
    // https://github.com/darkskyapp/string-hash/blob/master/index.js
    function hash(str) {
        let hash = 5381;
        let i = str.length;
        while (i--)
            hash = ((hash << 5) - hash) ^ str.charCodeAt(i);
        return hash >>> 0;
    }
    function create_rule(node, a, b, duration, delay, ease, fn, uid = 0) {
        const step = 16.666 / duration;
        let keyframes = '{\n';
        for (let p = 0; p <= 1; p += step) {
            const t = a + (b - a) * ease(p);
            keyframes += p * 100 + `%{${fn(t, 1 - t)}}\n`;
        }
        const rule = keyframes + `100% {${fn(b, 1 - b)}}\n}`;
        const name = `__svelte_${hash(rule)}_${uid}`;
        const doc = get_root_for_style(node);
        active_docs.add(doc);
        const stylesheet = doc.__svelte_stylesheet || (doc.__svelte_stylesheet = append_empty_stylesheet(node).sheet);
        const current_rules = doc.__svelte_rules || (doc.__svelte_rules = {});
        if (!current_rules[name]) {
            current_rules[name] = true;
            stylesheet.insertRule(`@keyframes ${name} ${rule}`, stylesheet.cssRules.length);
        }
        const animation = node.style.animation || '';
        node.style.animation = `${animation ? `${animation}, ` : ''}${name} ${duration}ms linear ${delay}ms 1 both`;
        active += 1;
        return name;
    }
    function delete_rule(node, name) {
        const previous = (node.style.animation || '').split(', ');
        const next = previous.filter(name
            ? anim => anim.indexOf(name) < 0 // remove specific animation
            : anim => anim.indexOf('__svelte') === -1 // remove all Svelte animations
        );
        const deleted = previous.length - next.length;
        if (deleted) {
            node.style.animation = next.join(', ');
            active -= deleted;
            if (!active)
                clear_rules();
        }
    }
    function clear_rules() {
        raf(() => {
            if (active)
                return;
            active_docs.forEach(doc => {
                const stylesheet = doc.__svelte_stylesheet;
                let i = stylesheet.cssRules.length;
                while (i--)
                    stylesheet.deleteRule(i);
                doc.__svelte_rules = {};
            });
            active_docs.clear();
        });
    }

    function create_animation(node, from, fn, params) {
        if (!from)
            return noop;
        const to = node.getBoundingClientRect();
        if (from.left === to.left && from.right === to.right && from.top === to.top && from.bottom === to.bottom)
            return noop;
        const { delay = 0, duration = 300, easing = identity, 
        // @ts-ignore todo: should this be separated from destructuring? Or start/end added to public api and documentation?
        start: start_time = now() + delay, 
        // @ts-ignore todo:
        end = start_time + duration, tick = noop, css } = fn(node, { from, to }, params);
        let running = true;
        let started = false;
        let name;
        function start() {
            if (css) {
                name = create_rule(node, 0, 1, duration, delay, easing, css);
            }
            if (!delay) {
                started = true;
            }
        }
        function stop() {
            if (css)
                delete_rule(node, name);
            running = false;
        }
        loop(now => {
            if (!started && now >= start_time) {
                started = true;
            }
            if (started && now >= end) {
                tick(1, 0);
                stop();
            }
            if (!running) {
                return false;
            }
            if (started) {
                const p = now - start_time;
                const t = 0 + 1 * easing(p / duration);
                tick(t, 1 - t);
            }
            return true;
        });
        start();
        tick(0, 1);
        return stop;
    }
    function fix_position(node) {
        const style = getComputedStyle(node);
        if (style.position !== 'absolute' && style.position !== 'fixed') {
            const { width, height } = style;
            const a = node.getBoundingClientRect();
            node.style.position = 'absolute';
            node.style.width = width;
            node.style.height = height;
            add_transform(node, a);
        }
    }
    function add_transform(node, a) {
        const b = node.getBoundingClientRect();
        if (a.left !== b.left || a.top !== b.top) {
            const style = getComputedStyle(node);
            const transform = style.transform === 'none' ? '' : style.transform;
            node.style.transform = `${transform} translate(${a.left - b.left}px, ${a.top - b.top}px)`;
        }
    }

    let current_component;
    function set_current_component(component) {
        current_component = component;
    }
    function get_current_component() {
        if (!current_component)
            throw new Error('Function called outside component initialization');
        return current_component;
    }
    function onMount(fn) {
        get_current_component().$$.on_mount.push(fn);
    }

    const dirty_components = [];
    const binding_callbacks = [];
    const render_callbacks = [];
    const flush_callbacks = [];
    const resolved_promise = Promise.resolve();
    let update_scheduled = false;
    function schedule_update() {
        if (!update_scheduled) {
            update_scheduled = true;
            resolved_promise.then(flush);
        }
    }
    function add_render_callback(fn) {
        render_callbacks.push(fn);
    }
    function add_flush_callback(fn) {
        flush_callbacks.push(fn);
    }
    let flushing = false;
    const seen_callbacks = new Set();
    function flush() {
        if (flushing)
            return;
        flushing = true;
        do {
            // first, call beforeUpdate functions
            // and update components
            for (let i = 0; i < dirty_components.length; i += 1) {
                const component = dirty_components[i];
                set_current_component(component);
                update(component.$$);
            }
            set_current_component(null);
            dirty_components.length = 0;
            while (binding_callbacks.length)
                binding_callbacks.pop()();
            // then, once components are updated, call
            // afterUpdate functions. This may cause
            // subsequent updates...
            for (let i = 0; i < render_callbacks.length; i += 1) {
                const callback = render_callbacks[i];
                if (!seen_callbacks.has(callback)) {
                    // ...so guard against infinite loops
                    seen_callbacks.add(callback);
                    callback();
                }
            }
            render_callbacks.length = 0;
        } while (dirty_components.length);
        while (flush_callbacks.length) {
            flush_callbacks.pop()();
        }
        update_scheduled = false;
        flushing = false;
        seen_callbacks.clear();
    }
    function update($$) {
        if ($$.fragment !== null) {
            $$.update();
            run_all($$.before_update);
            const dirty = $$.dirty;
            $$.dirty = [-1];
            $$.fragment && $$.fragment.p($$.ctx, dirty);
            $$.after_update.forEach(add_render_callback);
        }
    }

    let promise;
    function wait() {
        if (!promise) {
            promise = Promise.resolve();
            promise.then(() => {
                promise = null;
            });
        }
        return promise;
    }
    function dispatch(node, direction, kind) {
        node.dispatchEvent(custom_event(`${direction ? 'intro' : 'outro'}${kind}`));
    }
    const outroing = new Set();
    let outros;
    function group_outros() {
        outros = {
            r: 0,
            c: [],
            p: outros // parent group
        };
    }
    function check_outros() {
        if (!outros.r) {
            run_all(outros.c);
        }
        outros = outros.p;
    }
    function transition_in(block, local) {
        if (block && block.i) {
            outroing.delete(block);
            block.i(local);
        }
    }
    function transition_out(block, local, detach, callback) {
        if (block && block.o) {
            if (outroing.has(block))
                return;
            outroing.add(block);
            outros.c.push(() => {
                outroing.delete(block);
                if (callback) {
                    if (detach)
                        block.d(1);
                    callback();
                }
            });
            block.o(local);
        }
    }
    const null_transition = { duration: 0 };
    function create_in_transition(node, fn, params) {
        let config = fn(node, params);
        let running = false;
        let animation_name;
        let task;
        let uid = 0;
        function cleanup() {
            if (animation_name)
                delete_rule(node, animation_name);
        }
        function go() {
            const { delay = 0, duration = 300, easing = identity, tick = noop, css } = config || null_transition;
            if (css)
                animation_name = create_rule(node, 0, 1, duration, delay, easing, css, uid++);
            tick(0, 1);
            const start_time = now() + delay;
            const end_time = start_time + duration;
            if (task)
                task.abort();
            running = true;
            add_render_callback(() => dispatch(node, true, 'start'));
            task = loop(now => {
                if (running) {
                    if (now >= end_time) {
                        tick(1, 0);
                        dispatch(node, true, 'end');
                        cleanup();
                        return running = false;
                    }
                    if (now >= start_time) {
                        const t = easing((now - start_time) / duration);
                        tick(t, 1 - t);
                    }
                }
                return running;
            });
        }
        let started = false;
        return {
            start() {
                if (started)
                    return;
                started = true;
                delete_rule(node);
                if (is_function(config)) {
                    config = config();
                    wait().then(go);
                }
                else {
                    go();
                }
            },
            invalidate() {
                started = false;
            },
            end() {
                if (running) {
                    cleanup();
                    running = false;
                }
            }
        };
    }
    function create_out_transition(node, fn, params) {
        let config = fn(node, params);
        let running = true;
        let animation_name;
        const group = outros;
        group.r += 1;
        function go() {
            const { delay = 0, duration = 300, easing = identity, tick = noop, css } = config || null_transition;
            if (css)
                animation_name = create_rule(node, 1, 0, duration, delay, easing, css);
            const start_time = now() + delay;
            const end_time = start_time + duration;
            add_render_callback(() => dispatch(node, false, 'start'));
            loop(now => {
                if (running) {
                    if (now >= end_time) {
                        tick(0, 1);
                        dispatch(node, false, 'end');
                        if (!--group.r) {
                            // this will result in `end()` being called,
                            // so we don't need to clean up here
                            run_all(group.c);
                        }
                        return false;
                    }
                    if (now >= start_time) {
                        const t = easing((now - start_time) / duration);
                        tick(1 - t, t);
                    }
                }
                return running;
            });
        }
        if (is_function(config)) {
            wait().then(() => {
                // @ts-ignore
                config = config();
                go();
            });
        }
        else {
            go();
        }
        return {
            end(reset) {
                if (reset && config.tick) {
                    config.tick(1, 0);
                }
                if (running) {
                    if (animation_name)
                        delete_rule(node, animation_name);
                    running = false;
                }
            }
        };
    }
    function create_bidirectional_transition(node, fn, params, intro) {
        let config = fn(node, params);
        let t = intro ? 0 : 1;
        let running_program = null;
        let pending_program = null;
        let animation_name = null;
        function clear_animation() {
            if (animation_name)
                delete_rule(node, animation_name);
        }
        function init(program, duration) {
            const d = (program.b - t);
            duration *= Math.abs(d);
            return {
                a: t,
                b: program.b,
                d,
                duration,
                start: program.start,
                end: program.start + duration,
                group: program.group
            };
        }
        function go(b) {
            const { delay = 0, duration = 300, easing = identity, tick = noop, css } = config || null_transition;
            const program = {
                start: now() + delay,
                b
            };
            if (!b) {
                // @ts-ignore todo: improve typings
                program.group = outros;
                outros.r += 1;
            }
            if (running_program || pending_program) {
                pending_program = program;
            }
            else {
                // if this is an intro, and there's a delay, we need to do
                // an initial tick and/or apply CSS animation immediately
                if (css) {
                    clear_animation();
                    animation_name = create_rule(node, t, b, duration, delay, easing, css);
                }
                if (b)
                    tick(0, 1);
                running_program = init(program, duration);
                add_render_callback(() => dispatch(node, b, 'start'));
                loop(now => {
                    if (pending_program && now > pending_program.start) {
                        running_program = init(pending_program, duration);
                        pending_program = null;
                        dispatch(node, running_program.b, 'start');
                        if (css) {
                            clear_animation();
                            animation_name = create_rule(node, t, running_program.b, running_program.duration, 0, easing, config.css);
                        }
                    }
                    if (running_program) {
                        if (now >= running_program.end) {
                            tick(t = running_program.b, 1 - t);
                            dispatch(node, running_program.b, 'end');
                            if (!pending_program) {
                                // we're done
                                if (running_program.b) {
                                    // intro — we can tidy up immediately
                                    clear_animation();
                                }
                                else {
                                    // outro — needs to be coordinated
                                    if (!--running_program.group.r)
                                        run_all(running_program.group.c);
                                }
                            }
                            running_program = null;
                        }
                        else if (now >= running_program.start) {
                            const p = now - running_program.start;
                            t = running_program.a + running_program.d * easing(p / running_program.duration);
                            tick(t, 1 - t);
                        }
                    }
                    return !!(running_program || pending_program);
                });
            }
        }
        return {
            run(b) {
                if (is_function(config)) {
                    wait().then(() => {
                        // @ts-ignore
                        config = config();
                        go(b);
                    });
                }
                else {
                    go(b);
                }
            },
            end() {
                clear_animation();
                running_program = pending_program = null;
            }
        };
    }

    const globals = (typeof window !== 'undefined'
        ? window
        : typeof globalThis !== 'undefined'
            ? globalThis
            : global);

    function destroy_block(block, lookup) {
        block.d(1);
        lookup.delete(block.key);
    }
    function outro_and_destroy_block(block, lookup) {
        transition_out(block, 1, 1, () => {
            lookup.delete(block.key);
        });
    }
    function fix_and_destroy_block(block, lookup) {
        block.f();
        destroy_block(block, lookup);
    }
    function update_keyed_each(old_blocks, dirty, get_key, dynamic, ctx, list, lookup, node, destroy, create_each_block, next, get_context) {
        let o = old_blocks.length;
        let n = list.length;
        let i = o;
        const old_indexes = {};
        while (i--)
            old_indexes[old_blocks[i].key] = i;
        const new_blocks = [];
        const new_lookup = new Map();
        const deltas = new Map();
        i = n;
        while (i--) {
            const child_ctx = get_context(ctx, list, i);
            const key = get_key(child_ctx);
            let block = lookup.get(key);
            if (!block) {
                block = create_each_block(key, child_ctx);
                block.c();
            }
            else if (dynamic) {
                block.p(child_ctx, dirty);
            }
            new_lookup.set(key, new_blocks[i] = block);
            if (key in old_indexes)
                deltas.set(key, Math.abs(i - old_indexes[key]));
        }
        const will_move = new Set();
        const did_move = new Set();
        function insert(block) {
            transition_in(block, 1);
            block.m(node, next);
            lookup.set(block.key, block);
            next = block.first;
            n--;
        }
        while (o && n) {
            const new_block = new_blocks[n - 1];
            const old_block = old_blocks[o - 1];
            const new_key = new_block.key;
            const old_key = old_block.key;
            if (new_block === old_block) {
                // do nothing
                next = new_block.first;
                o--;
                n--;
            }
            else if (!new_lookup.has(old_key)) {
                // remove old block
                destroy(old_block, lookup);
                o--;
            }
            else if (!lookup.has(new_key) || will_move.has(new_key)) {
                insert(new_block);
            }
            else if (did_move.has(old_key)) {
                o--;
            }
            else if (deltas.get(new_key) > deltas.get(old_key)) {
                did_move.add(new_key);
                insert(new_block);
            }
            else {
                will_move.add(old_key);
                o--;
            }
        }
        while (o--) {
            const old_block = old_blocks[o];
            if (!new_lookup.has(old_block.key))
                destroy(old_block, lookup);
        }
        while (n)
            insert(new_blocks[n - 1]);
        return new_blocks;
    }
    function validate_each_keys(ctx, list, get_context, get_key) {
        const keys = new Set();
        for (let i = 0; i < list.length; i++) {
            const key = get_key(get_context(ctx, list, i));
            if (keys.has(key)) {
                throw new Error('Cannot have duplicate keys in a keyed each');
            }
            keys.add(key);
        }
    }

    function bind(component, name, callback) {
        const index = component.$$.props[name];
        if (index !== undefined) {
            component.$$.bound[index] = callback;
            callback(component.$$.ctx[index]);
        }
    }
    function create_component(block) {
        block && block.c();
    }
    function mount_component(component, target, anchor, customElement) {
        const { fragment, on_mount, on_destroy, after_update } = component.$$;
        fragment && fragment.m(target, anchor);
        if (!customElement) {
            // onMount happens before the initial afterUpdate
            add_render_callback(() => {
                const new_on_destroy = on_mount.map(run).filter(is_function);
                if (on_destroy) {
                    on_destroy.push(...new_on_destroy);
                }
                else {
                    // Edge case - component was destroyed immediately,
                    // most likely as a result of a binding initialising
                    run_all(new_on_destroy);
                }
                component.$$.on_mount = [];
            });
        }
        after_update.forEach(add_render_callback);
    }
    function destroy_component(component, detaching) {
        const $$ = component.$$;
        if ($$.fragment !== null) {
            run_all($$.on_destroy);
            $$.fragment && $$.fragment.d(detaching);
            // TODO null out other refs, including component.$$ (but need to
            // preserve final state?)
            $$.on_destroy = $$.fragment = null;
            $$.ctx = [];
        }
    }
    function make_dirty(component, i) {
        if (component.$$.dirty[0] === -1) {
            dirty_components.push(component);
            schedule_update();
            component.$$.dirty.fill(0);
        }
        component.$$.dirty[(i / 31) | 0] |= (1 << (i % 31));
    }
    function init(component, options, instance, create_fragment, not_equal, props, append_styles, dirty = [-1]) {
        const parent_component = current_component;
        set_current_component(component);
        const $$ = component.$$ = {
            fragment: null,
            ctx: null,
            // state
            props,
            update: noop,
            not_equal,
            bound: blank_object(),
            // lifecycle
            on_mount: [],
            on_destroy: [],
            on_disconnect: [],
            before_update: [],
            after_update: [],
            context: new Map(options.context || (parent_component ? parent_component.$$.context : [])),
            // everything else
            callbacks: blank_object(),
            dirty,
            skip_bound: false,
            root: options.target || parent_component.$$.root
        };
        append_styles && append_styles($$.root);
        let ready = false;
        $$.ctx = instance
            ? instance(component, options.props || {}, (i, ret, ...rest) => {
                const value = rest.length ? rest[0] : ret;
                if ($$.ctx && not_equal($$.ctx[i], $$.ctx[i] = value)) {
                    if (!$$.skip_bound && $$.bound[i])
                        $$.bound[i](value);
                    if (ready)
                        make_dirty(component, i);
                }
                return ret;
            })
            : [];
        $$.update();
        ready = true;
        run_all($$.before_update);
        // `false` as a special case of no DOM component
        $$.fragment = create_fragment ? create_fragment($$.ctx) : false;
        if (options.target) {
            if (options.hydrate) {
                const nodes = children(options.target);
                // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
                $$.fragment && $$.fragment.l(nodes);
                nodes.forEach(detach);
            }
            else {
                // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
                $$.fragment && $$.fragment.c();
            }
            if (options.intro)
                transition_in(component.$$.fragment);
            mount_component(component, options.target, options.anchor, options.customElement);
            flush();
        }
        set_current_component(parent_component);
    }
    /**
     * Base class for Svelte components. Used when dev=false.
     */
    class SvelteComponent {
        $destroy() {
            destroy_component(this, 1);
            this.$destroy = noop;
        }
        $on(type, callback) {
            const callbacks = (this.$$.callbacks[type] || (this.$$.callbacks[type] = []));
            callbacks.push(callback);
            return () => {
                const index = callbacks.indexOf(callback);
                if (index !== -1)
                    callbacks.splice(index, 1);
            };
        }
        $set($$props) {
            if (this.$$set && !is_empty($$props)) {
                this.$$.skip_bound = true;
                this.$$set($$props);
                this.$$.skip_bound = false;
            }
        }
    }

    function dispatch_dev(type, detail) {
        document.dispatchEvent(custom_event(type, Object.assign({ version: '3.44.2' }, detail), true));
    }
    function append_dev(target, node) {
        dispatch_dev('SvelteDOMInsert', { target, node });
        append(target, node);
    }
    function insert_dev(target, node, anchor) {
        dispatch_dev('SvelteDOMInsert', { target, node, anchor });
        insert(target, node, anchor);
    }
    function detach_dev(node) {
        dispatch_dev('SvelteDOMRemove', { node });
        detach(node);
    }
    function listen_dev(node, event, handler, options, has_prevent_default, has_stop_propagation) {
        const modifiers = options === true ? ['capture'] : options ? Array.from(Object.keys(options)) : [];
        if (has_prevent_default)
            modifiers.push('preventDefault');
        if (has_stop_propagation)
            modifiers.push('stopPropagation');
        dispatch_dev('SvelteDOMAddEventListener', { node, event, handler, modifiers });
        const dispose = listen(node, event, handler, options);
        return () => {
            dispatch_dev('SvelteDOMRemoveEventListener', { node, event, handler, modifiers });
            dispose();
        };
    }
    function attr_dev(node, attribute, value) {
        attr(node, attribute, value);
        if (value == null)
            dispatch_dev('SvelteDOMRemoveAttribute', { node, attribute });
        else
            dispatch_dev('SvelteDOMSetAttribute', { node, attribute, value });
    }
    function prop_dev(node, property, value) {
        node[property] = value;
        dispatch_dev('SvelteDOMSetProperty', { node, property, value });
    }
    function set_data_dev(text, data) {
        data = '' + data;
        if (text.wholeText === data)
            return;
        dispatch_dev('SvelteDOMSetData', { node: text, data });
        text.data = data;
    }
    function validate_each_argument(arg) {
        if (typeof arg !== 'string' && !(arg && typeof arg === 'object' && 'length' in arg)) {
            let msg = '{#each} only iterates over array-like objects.';
            if (typeof Symbol === 'function' && arg && Symbol.iterator in arg) {
                msg += ' You can use a spread to convert this iterable into an array.';
            }
            throw new Error(msg);
        }
    }
    function validate_slots(name, slot, keys) {
        for (const slot_key of Object.keys(slot)) {
            if (!~keys.indexOf(slot_key)) {
                console.warn(`<${name}> received an unexpected slot "${slot_key}".`);
            }
        }
    }
    /**
     * Base class for Svelte components with some minor dev-enhancements. Used when dev=true.
     */
    class SvelteComponentDev extends SvelteComponent {
        constructor(options) {
            if (!options || (!options.target && !options.$$inline)) {
                throw new Error("'target' is a required option");
            }
            super();
        }
        $destroy() {
            super.$destroy();
            this.$destroy = () => {
                console.warn('Component was already destroyed'); // eslint-disable-line no-console
            };
        }
        $capture_state() { }
        $inject_state() { }
    }

    const subscriber_queue = [];
    /**
     * Creates a `Readable` store that allows reading by subscription.
     * @param value initial value
     * @param {StartStopNotifier}start start and stop notifications for subscriptions
     */
    function readable(value, start) {
        return {
            subscribe: writable(value, start).subscribe
        };
    }
    /**
     * Create a `Writable` store that allows both updating and reading by subscription.
     * @param {*=}value initial value
     * @param {StartStopNotifier=}start start and stop notifications for subscriptions
     */
    function writable(value, start = noop) {
        let stop;
        const subscribers = new Set();
        function set(new_value) {
            if (safe_not_equal(value, new_value)) {
                value = new_value;
                if (stop) { // store is ready
                    const run_queue = !subscriber_queue.length;
                    for (const subscriber of subscribers) {
                        subscriber[1]();
                        subscriber_queue.push(subscriber, value);
                    }
                    if (run_queue) {
                        for (let i = 0; i < subscriber_queue.length; i += 2) {
                            subscriber_queue[i][0](subscriber_queue[i + 1]);
                        }
                        subscriber_queue.length = 0;
                    }
                }
            }
        }
        function update(fn) {
            set(fn(value));
        }
        function subscribe(run, invalidate = noop) {
            const subscriber = [run, invalidate];
            subscribers.add(subscriber);
            if (subscribers.size === 1) {
                stop = start(set) || noop;
            }
            run(value);
            return () => {
                subscribers.delete(subscriber);
                if (subscribers.size === 0) {
                    stop();
                    stop = null;
                }
            };
        }
        return { set, update, subscribe };
    }
    function derived(stores, fn, initial_value) {
        const single = !Array.isArray(stores);
        const stores_array = single
            ? [stores]
            : stores;
        const auto = fn.length < 2;
        return readable(initial_value, (set) => {
            let inited = false;
            const values = [];
            let pending = 0;
            let cleanup = noop;
            const sync = () => {
                if (pending) {
                    return;
                }
                cleanup();
                const result = fn(single ? values[0] : values, set);
                if (auto) {
                    set(result);
                }
                else {
                    cleanup = is_function(result) ? result : noop;
                }
            };
            const unsubscribers = stores_array.map((store, i) => subscribe(store, (value) => {
                values[i] = value;
                pending &= ~(1 << i);
                if (inited) {
                    sync();
                }
            }, () => {
                pending |= (1 << i);
            }));
            inited = true;
            sync();
            return function stop() {
                run_all(unsubscribers);
                cleanup();
            };
        });
    }

    var isMergeableObject = function isMergeableObject(value) {
    	return isNonNullObject(value)
    		&& !isSpecial(value)
    };

    function isNonNullObject(value) {
    	return !!value && typeof value === 'object'
    }

    function isSpecial(value) {
    	var stringValue = Object.prototype.toString.call(value);

    	return stringValue === '[object RegExp]'
    		|| stringValue === '[object Date]'
    		|| isReactElement(value)
    }

    // see https://github.com/facebook/react/blob/b5ac963fb791d1298e7f396236383bc955f916c1/src/isomorphic/classic/element/ReactElement.js#L21-L25
    var canUseSymbol = typeof Symbol === 'function' && Symbol.for;
    var REACT_ELEMENT_TYPE = canUseSymbol ? Symbol.for('react.element') : 0xeac7;

    function isReactElement(value) {
    	return value.$$typeof === REACT_ELEMENT_TYPE
    }

    function emptyTarget(val) {
    	return Array.isArray(val) ? [] : {}
    }

    function cloneUnlessOtherwiseSpecified(value, options) {
    	return (options.clone !== false && options.isMergeableObject(value))
    		? deepmerge(emptyTarget(value), value, options)
    		: value
    }

    function defaultArrayMerge(target, source, options) {
    	return target.concat(source).map(function(element) {
    		return cloneUnlessOtherwiseSpecified(element, options)
    	})
    }

    function getMergeFunction(key, options) {
    	if (!options.customMerge) {
    		return deepmerge
    	}
    	var customMerge = options.customMerge(key);
    	return typeof customMerge === 'function' ? customMerge : deepmerge
    }

    function getEnumerableOwnPropertySymbols(target) {
    	return Object.getOwnPropertySymbols
    		? Object.getOwnPropertySymbols(target).filter(function(symbol) {
    			return target.propertyIsEnumerable(symbol)
    		})
    		: []
    }

    function getKeys(target) {
    	return Object.keys(target).concat(getEnumerableOwnPropertySymbols(target))
    }

    function propertyIsOnObject(object, property) {
    	try {
    		return property in object
    	} catch(_) {
    		return false
    	}
    }

    // Protects from prototype poisoning and unexpected merging up the prototype chain.
    function propertyIsUnsafe(target, key) {
    	return propertyIsOnObject(target, key) // Properties are safe to merge if they don't exist in the target yet,
    		&& !(Object.hasOwnProperty.call(target, key) // unsafe if they exist up the prototype chain,
    			&& Object.propertyIsEnumerable.call(target, key)) // and also unsafe if they're nonenumerable.
    }

    function mergeObject(target, source, options) {
    	var destination = {};
    	if (options.isMergeableObject(target)) {
    		getKeys(target).forEach(function(key) {
    			destination[key] = cloneUnlessOtherwiseSpecified(target[key], options);
    		});
    	}
    	getKeys(source).forEach(function(key) {
    		if (propertyIsUnsafe(target, key)) {
    			return
    		}

    		if (propertyIsOnObject(target, key) && options.isMergeableObject(source[key])) {
    			destination[key] = getMergeFunction(key, options)(target[key], source[key], options);
    		} else {
    			destination[key] = cloneUnlessOtherwiseSpecified(source[key], options);
    		}
    	});
    	return destination
    }

    function deepmerge(target, source, options) {
    	options = options || {};
    	options.arrayMerge = options.arrayMerge || defaultArrayMerge;
    	options.isMergeableObject = options.isMergeableObject || isMergeableObject;
    	// cloneUnlessOtherwiseSpecified is added to `options` so that custom arrayMerge()
    	// implementations can use it. The caller may not replace it.
    	options.cloneUnlessOtherwiseSpecified = cloneUnlessOtherwiseSpecified;

    	var sourceIsArray = Array.isArray(source);
    	var targetIsArray = Array.isArray(target);
    	var sourceAndTargetTypesMatch = sourceIsArray === targetIsArray;

    	if (!sourceAndTargetTypesMatch) {
    		return cloneUnlessOtherwiseSpecified(source, options)
    	} else if (sourceIsArray) {
    		return options.arrayMerge(target, source, options)
    	} else {
    		return mergeObject(target, source, options)
    	}
    }

    deepmerge.all = function deepmergeAll(array, options) {
    	if (!Array.isArray(array)) {
    		throw new Error('first argument should be an array')
    	}

    	return array.reduce(function(prev, next) {
    		return deepmerge(prev, next, options)
    	}, {})
    };

    var deepmerge_1 = deepmerge;

    var cjs = deepmerge_1;

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation.

    Permission to use, copy, modify, and/or distribute this software for any
    purpose with or without fee is hereby granted.

    THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
    REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
    AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
    INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
    LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
    OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
    PERFORMANCE OF THIS SOFTWARE.
    ***************************************************************************** */
    /* global Reflect, Promise */

    var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };

    function __extends(d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    }

    var __assign = function() {
        __assign = Object.assign || function __assign(t) {
            for (var s, i = 1, n = arguments.length; i < n; i++) {
                s = arguments[i];
                for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
            }
            return t;
        };
        return __assign.apply(this, arguments);
    };

    function __spreadArray(to, from, pack) {
        if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
            if (ar || !(i in from)) {
                if (!ar) ar = Array.prototype.slice.call(from, 0, i);
                ar[i] = from[i];
            }
        }
        return to.concat(ar || Array.prototype.slice.call(from));
    }

    var ErrorKind;
    (function (ErrorKind) {
        /** Argument is unclosed (e.g. `{0`) */
        ErrorKind[ErrorKind["EXPECT_ARGUMENT_CLOSING_BRACE"] = 1] = "EXPECT_ARGUMENT_CLOSING_BRACE";
        /** Argument is empty (e.g. `{}`). */
        ErrorKind[ErrorKind["EMPTY_ARGUMENT"] = 2] = "EMPTY_ARGUMENT";
        /** Argument is malformed (e.g. `{foo!}``) */
        ErrorKind[ErrorKind["MALFORMED_ARGUMENT"] = 3] = "MALFORMED_ARGUMENT";
        /** Expect an argument type (e.g. `{foo,}`) */
        ErrorKind[ErrorKind["EXPECT_ARGUMENT_TYPE"] = 4] = "EXPECT_ARGUMENT_TYPE";
        /** Unsupported argument type (e.g. `{foo,foo}`) */
        ErrorKind[ErrorKind["INVALID_ARGUMENT_TYPE"] = 5] = "INVALID_ARGUMENT_TYPE";
        /** Expect an argument style (e.g. `{foo, number, }`) */
        ErrorKind[ErrorKind["EXPECT_ARGUMENT_STYLE"] = 6] = "EXPECT_ARGUMENT_STYLE";
        /** The number skeleton is invalid. */
        ErrorKind[ErrorKind["INVALID_NUMBER_SKELETON"] = 7] = "INVALID_NUMBER_SKELETON";
        /** The date time skeleton is invalid. */
        ErrorKind[ErrorKind["INVALID_DATE_TIME_SKELETON"] = 8] = "INVALID_DATE_TIME_SKELETON";
        /** Exepct a number skeleton following the `::` (e.g. `{foo, number, ::}`) */
        ErrorKind[ErrorKind["EXPECT_NUMBER_SKELETON"] = 9] = "EXPECT_NUMBER_SKELETON";
        /** Exepct a date time skeleton following the `::` (e.g. `{foo, date, ::}`) */
        ErrorKind[ErrorKind["EXPECT_DATE_TIME_SKELETON"] = 10] = "EXPECT_DATE_TIME_SKELETON";
        /** Unmatched apostrophes in the argument style (e.g. `{foo, number, 'test`) */
        ErrorKind[ErrorKind["UNCLOSED_QUOTE_IN_ARGUMENT_STYLE"] = 11] = "UNCLOSED_QUOTE_IN_ARGUMENT_STYLE";
        /** Missing select argument options (e.g. `{foo, select}`) */
        ErrorKind[ErrorKind["EXPECT_SELECT_ARGUMENT_OPTIONS"] = 12] = "EXPECT_SELECT_ARGUMENT_OPTIONS";
        /** Expecting an offset value in `plural` or `selectordinal` argument (e.g `{foo, plural, offset}`) */
        ErrorKind[ErrorKind["EXPECT_PLURAL_ARGUMENT_OFFSET_VALUE"] = 13] = "EXPECT_PLURAL_ARGUMENT_OFFSET_VALUE";
        /** Offset value in `plural` or `selectordinal` is invalid (e.g. `{foo, plural, offset: x}`) */
        ErrorKind[ErrorKind["INVALID_PLURAL_ARGUMENT_OFFSET_VALUE"] = 14] = "INVALID_PLURAL_ARGUMENT_OFFSET_VALUE";
        /** Expecting a selector in `select` argument (e.g `{foo, select}`) */
        ErrorKind[ErrorKind["EXPECT_SELECT_ARGUMENT_SELECTOR"] = 15] = "EXPECT_SELECT_ARGUMENT_SELECTOR";
        /** Expecting a selector in `plural` or `selectordinal` argument (e.g `{foo, plural}`) */
        ErrorKind[ErrorKind["EXPECT_PLURAL_ARGUMENT_SELECTOR"] = 16] = "EXPECT_PLURAL_ARGUMENT_SELECTOR";
        /** Expecting a message fragment after the `select` selector (e.g. `{foo, select, apple}`) */
        ErrorKind[ErrorKind["EXPECT_SELECT_ARGUMENT_SELECTOR_FRAGMENT"] = 17] = "EXPECT_SELECT_ARGUMENT_SELECTOR_FRAGMENT";
        /**
         * Expecting a message fragment after the `plural` or `selectordinal` selector
         * (e.g. `{foo, plural, one}`)
         */
        ErrorKind[ErrorKind["EXPECT_PLURAL_ARGUMENT_SELECTOR_FRAGMENT"] = 18] = "EXPECT_PLURAL_ARGUMENT_SELECTOR_FRAGMENT";
        /** Selector in `plural` or `selectordinal` is malformed (e.g. `{foo, plural, =x {#}}`) */
        ErrorKind[ErrorKind["INVALID_PLURAL_ARGUMENT_SELECTOR"] = 19] = "INVALID_PLURAL_ARGUMENT_SELECTOR";
        /**
         * Duplicate selectors in `plural` or `selectordinal` argument.
         * (e.g. {foo, plural, one {#} one {#}})
         */
        ErrorKind[ErrorKind["DUPLICATE_PLURAL_ARGUMENT_SELECTOR"] = 20] = "DUPLICATE_PLURAL_ARGUMENT_SELECTOR";
        /** Duplicate selectors in `select` argument.
         * (e.g. {foo, select, apple {apple} apple {apple}})
         */
        ErrorKind[ErrorKind["DUPLICATE_SELECT_ARGUMENT_SELECTOR"] = 21] = "DUPLICATE_SELECT_ARGUMENT_SELECTOR";
        /** Plural or select argument option must have `other` clause. */
        ErrorKind[ErrorKind["MISSING_OTHER_CLAUSE"] = 22] = "MISSING_OTHER_CLAUSE";
        /** The tag is malformed. (e.g. `<bold!>foo</bold!>) */
        ErrorKind[ErrorKind["INVALID_TAG"] = 23] = "INVALID_TAG";
        /** The tag name is invalid. (e.g. `<123>foo</123>`) */
        ErrorKind[ErrorKind["INVALID_TAG_NAME"] = 25] = "INVALID_TAG_NAME";
        /** The closing tag does not match the opening tag. (e.g. `<bold>foo</italic>`) */
        ErrorKind[ErrorKind["UNMATCHED_CLOSING_TAG"] = 26] = "UNMATCHED_CLOSING_TAG";
        /** The opening tag has unmatched closing tag. (e.g. `<bold>foo`) */
        ErrorKind[ErrorKind["UNCLOSED_TAG"] = 27] = "UNCLOSED_TAG";
    })(ErrorKind || (ErrorKind = {}));

    var TYPE;
    (function (TYPE) {
        /**
         * Raw text
         */
        TYPE[TYPE["literal"] = 0] = "literal";
        /**
         * Variable w/o any format, e.g `var` in `this is a {var}`
         */
        TYPE[TYPE["argument"] = 1] = "argument";
        /**
         * Variable w/ number format
         */
        TYPE[TYPE["number"] = 2] = "number";
        /**
         * Variable w/ date format
         */
        TYPE[TYPE["date"] = 3] = "date";
        /**
         * Variable w/ time format
         */
        TYPE[TYPE["time"] = 4] = "time";
        /**
         * Variable w/ select format
         */
        TYPE[TYPE["select"] = 5] = "select";
        /**
         * Variable w/ plural format
         */
        TYPE[TYPE["plural"] = 6] = "plural";
        /**
         * Only possible within plural argument.
         * This is the `#` symbol that will be substituted with the count.
         */
        TYPE[TYPE["pound"] = 7] = "pound";
        /**
         * XML-like tag
         */
        TYPE[TYPE["tag"] = 8] = "tag";
    })(TYPE || (TYPE = {}));
    var SKELETON_TYPE;
    (function (SKELETON_TYPE) {
        SKELETON_TYPE[SKELETON_TYPE["number"] = 0] = "number";
        SKELETON_TYPE[SKELETON_TYPE["dateTime"] = 1] = "dateTime";
    })(SKELETON_TYPE || (SKELETON_TYPE = {}));
    /**
     * Type Guards
     */
    function isLiteralElement(el) {
        return el.type === TYPE.literal;
    }
    function isArgumentElement(el) {
        return el.type === TYPE.argument;
    }
    function isNumberElement(el) {
        return el.type === TYPE.number;
    }
    function isDateElement(el) {
        return el.type === TYPE.date;
    }
    function isTimeElement(el) {
        return el.type === TYPE.time;
    }
    function isSelectElement(el) {
        return el.type === TYPE.select;
    }
    function isPluralElement(el) {
        return el.type === TYPE.plural;
    }
    function isPoundElement(el) {
        return el.type === TYPE.pound;
    }
    function isTagElement(el) {
        return el.type === TYPE.tag;
    }
    function isNumberSkeleton(el) {
        return !!(el && typeof el === 'object' && el.type === SKELETON_TYPE.number);
    }
    function isDateTimeSkeleton(el) {
        return !!(el && typeof el === 'object' && el.type === SKELETON_TYPE.dateTime);
    }

    // @generated from regex-gen.ts
    var SPACE_SEPARATOR_REGEX = /[ \xA0\u1680\u2000-\u200A\u202F\u205F\u3000]/;

    /**
     * https://unicode.org/reports/tr35/tr35-dates.html#Date_Field_Symbol_Table
     * Credit: https://github.com/caridy/intl-datetimeformat-pattern/blob/master/index.js
     * with some tweaks
     */
    var DATE_TIME_REGEX = /(?:[Eec]{1,6}|G{1,5}|[Qq]{1,5}|(?:[yYur]+|U{1,5})|[ML]{1,5}|d{1,2}|D{1,3}|F{1}|[abB]{1,5}|[hkHK]{1,2}|w{1,2}|W{1}|m{1,2}|s{1,2}|[zZOvVxX]{1,4})(?=([^']*'[^']*')*[^']*$)/g;
    /**
     * Parse Date time skeleton into Intl.DateTimeFormatOptions
     * Ref: https://unicode.org/reports/tr35/tr35-dates.html#Date_Field_Symbol_Table
     * @public
     * @param skeleton skeleton string
     */
    function parseDateTimeSkeleton(skeleton) {
        var result = {};
        skeleton.replace(DATE_TIME_REGEX, function (match) {
            var len = match.length;
            switch (match[0]) {
                // Era
                case 'G':
                    result.era = len === 4 ? 'long' : len === 5 ? 'narrow' : 'short';
                    break;
                // Year
                case 'y':
                    result.year = len === 2 ? '2-digit' : 'numeric';
                    break;
                case 'Y':
                case 'u':
                case 'U':
                case 'r':
                    throw new RangeError('`Y/u/U/r` (year) patterns are not supported, use `y` instead');
                // Quarter
                case 'q':
                case 'Q':
                    throw new RangeError('`q/Q` (quarter) patterns are not supported');
                // Month
                case 'M':
                case 'L':
                    result.month = ['numeric', '2-digit', 'short', 'long', 'narrow'][len - 1];
                    break;
                // Week
                case 'w':
                case 'W':
                    throw new RangeError('`w/W` (week) patterns are not supported');
                case 'd':
                    result.day = ['numeric', '2-digit'][len - 1];
                    break;
                case 'D':
                case 'F':
                case 'g':
                    throw new RangeError('`D/F/g` (day) patterns are not supported, use `d` instead');
                // Weekday
                case 'E':
                    result.weekday = len === 4 ? 'short' : len === 5 ? 'narrow' : 'short';
                    break;
                case 'e':
                    if (len < 4) {
                        throw new RangeError('`e..eee` (weekday) patterns are not supported');
                    }
                    result.weekday = ['short', 'long', 'narrow', 'short'][len - 4];
                    break;
                case 'c':
                    if (len < 4) {
                        throw new RangeError('`c..ccc` (weekday) patterns are not supported');
                    }
                    result.weekday = ['short', 'long', 'narrow', 'short'][len - 4];
                    break;
                // Period
                case 'a': // AM, PM
                    result.hour12 = true;
                    break;
                case 'b': // am, pm, noon, midnight
                case 'B': // flexible day periods
                    throw new RangeError('`b/B` (period) patterns are not supported, use `a` instead');
                // Hour
                case 'h':
                    result.hourCycle = 'h12';
                    result.hour = ['numeric', '2-digit'][len - 1];
                    break;
                case 'H':
                    result.hourCycle = 'h23';
                    result.hour = ['numeric', '2-digit'][len - 1];
                    break;
                case 'K':
                    result.hourCycle = 'h11';
                    result.hour = ['numeric', '2-digit'][len - 1];
                    break;
                case 'k':
                    result.hourCycle = 'h24';
                    result.hour = ['numeric', '2-digit'][len - 1];
                    break;
                case 'j':
                case 'J':
                case 'C':
                    throw new RangeError('`j/J/C` (hour) patterns are not supported, use `h/H/K/k` instead');
                // Minute
                case 'm':
                    result.minute = ['numeric', '2-digit'][len - 1];
                    break;
                // Second
                case 's':
                    result.second = ['numeric', '2-digit'][len - 1];
                    break;
                case 'S':
                case 'A':
                    throw new RangeError('`S/A` (second) patterns are not supported, use `s` instead');
                // Zone
                case 'z': // 1..3, 4: specific non-location format
                    result.timeZoneName = len < 4 ? 'short' : 'long';
                    break;
                case 'Z': // 1..3, 4, 5: The ISO8601 varios formats
                case 'O': // 1, 4: miliseconds in day short, long
                case 'v': // 1, 4: generic non-location format
                case 'V': // 1, 2, 3, 4: time zone ID or city
                case 'X': // 1, 2, 3, 4: The ISO8601 varios formats
                case 'x': // 1, 2, 3, 4: The ISO8601 varios formats
                    throw new RangeError('`Z/O/v/V/X/x` (timeZone) patterns are not supported, use `z` instead');
            }
            return '';
        });
        return result;
    }

    // @generated from regex-gen.ts
    var WHITE_SPACE_REGEX = /[\t-\r \x85\u200E\u200F\u2028\u2029]/i;

    function parseNumberSkeletonFromString(skeleton) {
        if (skeleton.length === 0) {
            throw new Error('Number skeleton cannot be empty');
        }
        // Parse the skeleton
        var stringTokens = skeleton
            .split(WHITE_SPACE_REGEX)
            .filter(function (x) { return x.length > 0; });
        var tokens = [];
        for (var _i = 0, stringTokens_1 = stringTokens; _i < stringTokens_1.length; _i++) {
            var stringToken = stringTokens_1[_i];
            var stemAndOptions = stringToken.split('/');
            if (stemAndOptions.length === 0) {
                throw new Error('Invalid number skeleton');
            }
            var stem = stemAndOptions[0], options = stemAndOptions.slice(1);
            for (var _a = 0, options_1 = options; _a < options_1.length; _a++) {
                var option = options_1[_a];
                if (option.length === 0) {
                    throw new Error('Invalid number skeleton');
                }
            }
            tokens.push({ stem: stem, options: options });
        }
        return tokens;
    }
    function icuUnitToEcma(unit) {
        return unit.replace(/^(.*?)-/, '');
    }
    var FRACTION_PRECISION_REGEX = /^\.(?:(0+)(\*)?|(#+)|(0+)(#+))$/g;
    var SIGNIFICANT_PRECISION_REGEX = /^(@+)?(\+|#+)?[rs]?$/g;
    var INTEGER_WIDTH_REGEX = /(\*)(0+)|(#+)(0+)|(0+)/g;
    var CONCISE_INTEGER_WIDTH_REGEX = /^(0+)$/;
    function parseSignificantPrecision(str) {
        var result = {};
        if (str[str.length - 1] === 'r') {
            result.roundingPriority = 'morePrecision';
        }
        else if (str[str.length - 1] === 's') {
            result.roundingPriority = 'lessPrecision';
        }
        str.replace(SIGNIFICANT_PRECISION_REGEX, function (_, g1, g2) {
            // @@@ case
            if (typeof g2 !== 'string') {
                result.minimumSignificantDigits = g1.length;
                result.maximumSignificantDigits = g1.length;
            }
            // @@@+ case
            else if (g2 === '+') {
                result.minimumSignificantDigits = g1.length;
            }
            // .### case
            else if (g1[0] === '#') {
                result.maximumSignificantDigits = g1.length;
            }
            // .@@## or .@@@ case
            else {
                result.minimumSignificantDigits = g1.length;
                result.maximumSignificantDigits =
                    g1.length + (typeof g2 === 'string' ? g2.length : 0);
            }
            return '';
        });
        return result;
    }
    function parseSign(str) {
        switch (str) {
            case 'sign-auto':
                return {
                    signDisplay: 'auto',
                };
            case 'sign-accounting':
            case '()':
                return {
                    currencySign: 'accounting',
                };
            case 'sign-always':
            case '+!':
                return {
                    signDisplay: 'always',
                };
            case 'sign-accounting-always':
            case '()!':
                return {
                    signDisplay: 'always',
                    currencySign: 'accounting',
                };
            case 'sign-except-zero':
            case '+?':
                return {
                    signDisplay: 'exceptZero',
                };
            case 'sign-accounting-except-zero':
            case '()?':
                return {
                    signDisplay: 'exceptZero',
                    currencySign: 'accounting',
                };
            case 'sign-never':
            case '+_':
                return {
                    signDisplay: 'never',
                };
        }
    }
    function parseConciseScientificAndEngineeringStem(stem) {
        // Engineering
        var result;
        if (stem[0] === 'E' && stem[1] === 'E') {
            result = {
                notation: 'engineering',
            };
            stem = stem.slice(2);
        }
        else if (stem[0] === 'E') {
            result = {
                notation: 'scientific',
            };
            stem = stem.slice(1);
        }
        if (result) {
            var signDisplay = stem.slice(0, 2);
            if (signDisplay === '+!') {
                result.signDisplay = 'always';
                stem = stem.slice(2);
            }
            else if (signDisplay === '+?') {
                result.signDisplay = 'exceptZero';
                stem = stem.slice(2);
            }
            if (!CONCISE_INTEGER_WIDTH_REGEX.test(stem)) {
                throw new Error('Malformed concise eng/scientific notation');
            }
            result.minimumIntegerDigits = stem.length;
        }
        return result;
    }
    function parseNotationOptions(opt) {
        var result = {};
        var signOpts = parseSign(opt);
        if (signOpts) {
            return signOpts;
        }
        return result;
    }
    /**
     * https://github.com/unicode-org/icu/blob/master/docs/userguide/format_parse/numbers/skeletons.md#skeleton-stems-and-options
     */
    function parseNumberSkeleton(tokens) {
        var result = {};
        for (var _i = 0, tokens_1 = tokens; _i < tokens_1.length; _i++) {
            var token = tokens_1[_i];
            switch (token.stem) {
                case 'percent':
                case '%':
                    result.style = 'percent';
                    continue;
                case '%x100':
                    result.style = 'percent';
                    result.scale = 100;
                    continue;
                case 'currency':
                    result.style = 'currency';
                    result.currency = token.options[0];
                    continue;
                case 'group-off':
                case ',_':
                    result.useGrouping = false;
                    continue;
                case 'precision-integer':
                case '.':
                    result.maximumFractionDigits = 0;
                    continue;
                case 'measure-unit':
                case 'unit':
                    result.style = 'unit';
                    result.unit = icuUnitToEcma(token.options[0]);
                    continue;
                case 'compact-short':
                case 'K':
                    result.notation = 'compact';
                    result.compactDisplay = 'short';
                    continue;
                case 'compact-long':
                case 'KK':
                    result.notation = 'compact';
                    result.compactDisplay = 'long';
                    continue;
                case 'scientific':
                    result = __assign(__assign(__assign({}, result), { notation: 'scientific' }), token.options.reduce(function (all, opt) { return (__assign(__assign({}, all), parseNotationOptions(opt))); }, {}));
                    continue;
                case 'engineering':
                    result = __assign(__assign(__assign({}, result), { notation: 'engineering' }), token.options.reduce(function (all, opt) { return (__assign(__assign({}, all), parseNotationOptions(opt))); }, {}));
                    continue;
                case 'notation-simple':
                    result.notation = 'standard';
                    continue;
                // https://github.com/unicode-org/icu/blob/master/icu4c/source/i18n/unicode/unumberformatter.h
                case 'unit-width-narrow':
                    result.currencyDisplay = 'narrowSymbol';
                    result.unitDisplay = 'narrow';
                    continue;
                case 'unit-width-short':
                    result.currencyDisplay = 'code';
                    result.unitDisplay = 'short';
                    continue;
                case 'unit-width-full-name':
                    result.currencyDisplay = 'name';
                    result.unitDisplay = 'long';
                    continue;
                case 'unit-width-iso-code':
                    result.currencyDisplay = 'symbol';
                    continue;
                case 'scale':
                    result.scale = parseFloat(token.options[0]);
                    continue;
                // https://unicode-org.github.io/icu/userguide/format_parse/numbers/skeletons.html#integer-width
                case 'integer-width':
                    if (token.options.length > 1) {
                        throw new RangeError('integer-width stems only accept a single optional option');
                    }
                    token.options[0].replace(INTEGER_WIDTH_REGEX, function (_, g1, g2, g3, g4, g5) {
                        if (g1) {
                            result.minimumIntegerDigits = g2.length;
                        }
                        else if (g3 && g4) {
                            throw new Error('We currently do not support maximum integer digits');
                        }
                        else if (g5) {
                            throw new Error('We currently do not support exact integer digits');
                        }
                        return '';
                    });
                    continue;
            }
            // https://unicode-org.github.io/icu/userguide/format_parse/numbers/skeletons.html#integer-width
            if (CONCISE_INTEGER_WIDTH_REGEX.test(token.stem)) {
                result.minimumIntegerDigits = token.stem.length;
                continue;
            }
            if (FRACTION_PRECISION_REGEX.test(token.stem)) {
                // Precision
                // https://unicode-org.github.io/icu/userguide/format_parse/numbers/skeletons.html#fraction-precision
                // precision-integer case
                if (token.options.length > 1) {
                    throw new RangeError('Fraction-precision stems only accept a single optional option');
                }
                token.stem.replace(FRACTION_PRECISION_REGEX, function (_, g1, g2, g3, g4, g5) {
                    // .000* case (before ICU67 it was .000+)
                    if (g2 === '*') {
                        result.minimumFractionDigits = g1.length;
                    }
                    // .### case
                    else if (g3 && g3[0] === '#') {
                        result.maximumFractionDigits = g3.length;
                    }
                    // .00## case
                    else if (g4 && g5) {
                        result.minimumFractionDigits = g4.length;
                        result.maximumFractionDigits = g4.length + g5.length;
                    }
                    else {
                        result.minimumFractionDigits = g1.length;
                        result.maximumFractionDigits = g1.length;
                    }
                    return '';
                });
                var opt = token.options[0];
                // https://unicode-org.github.io/icu/userguide/format_parse/numbers/skeletons.html#trailing-zero-display
                if (opt === 'w') {
                    result = __assign(__assign({}, result), { trailingZeroDisplay: 'stripIfInteger' });
                }
                else if (opt) {
                    result = __assign(__assign({}, result), parseSignificantPrecision(opt));
                }
                continue;
            }
            // https://unicode-org.github.io/icu/userguide/format_parse/numbers/skeletons.html#significant-digits-precision
            if (SIGNIFICANT_PRECISION_REGEX.test(token.stem)) {
                result = __assign(__assign({}, result), parseSignificantPrecision(token.stem));
                continue;
            }
            var signOpts = parseSign(token.stem);
            if (signOpts) {
                result = __assign(__assign({}, result), signOpts);
            }
            var conciseScientificAndEngineeringOpts = parseConciseScientificAndEngineeringStem(token.stem);
            if (conciseScientificAndEngineeringOpts) {
                result = __assign(__assign({}, result), conciseScientificAndEngineeringOpts);
            }
        }
        return result;
    }

    var _a;
    var SPACE_SEPARATOR_START_REGEX = new RegExp("^".concat(SPACE_SEPARATOR_REGEX.source, "*"));
    var SPACE_SEPARATOR_END_REGEX = new RegExp("".concat(SPACE_SEPARATOR_REGEX.source, "*$"));
    function createLocation(start, end) {
        return { start: start, end: end };
    }
    // #region Ponyfills
    // Consolidate these variables up top for easier toggling during debugging
    var hasNativeStartsWith = !!String.prototype.startsWith;
    var hasNativeFromCodePoint = !!String.fromCodePoint;
    var hasNativeFromEntries = !!Object.fromEntries;
    var hasNativeCodePointAt = !!String.prototype.codePointAt;
    var hasTrimStart = !!String.prototype.trimStart;
    var hasTrimEnd = !!String.prototype.trimEnd;
    var hasNativeIsSafeInteger = !!Number.isSafeInteger;
    var isSafeInteger = hasNativeIsSafeInteger
        ? Number.isSafeInteger
        : function (n) {
            return (typeof n === 'number' &&
                isFinite(n) &&
                Math.floor(n) === n &&
                Math.abs(n) <= 0x1fffffffffffff);
        };
    // IE11 does not support y and u.
    var REGEX_SUPPORTS_U_AND_Y = true;
    try {
        var re = RE('([^\\p{White_Space}\\p{Pattern_Syntax}]*)', 'yu');
        /**
         * legacy Edge or Xbox One browser
         * Unicode flag support: supported
         * Pattern_Syntax support: not supported
         * See https://github.com/formatjs/formatjs/issues/2822
         */
        REGEX_SUPPORTS_U_AND_Y = ((_a = re.exec('a')) === null || _a === void 0 ? void 0 : _a[0]) === 'a';
    }
    catch (_) {
        REGEX_SUPPORTS_U_AND_Y = false;
    }
    var startsWith = hasNativeStartsWith
        ? // Native
            function startsWith(s, search, position) {
                return s.startsWith(search, position);
            }
        : // For IE11
            function startsWith(s, search, position) {
                return s.slice(position, position + search.length) === search;
            };
    var fromCodePoint = hasNativeFromCodePoint
        ? String.fromCodePoint
        : // IE11
            function fromCodePoint() {
                var codePoints = [];
                for (var _i = 0; _i < arguments.length; _i++) {
                    codePoints[_i] = arguments[_i];
                }
                var elements = '';
                var length = codePoints.length;
                var i = 0;
                var code;
                while (length > i) {
                    code = codePoints[i++];
                    if (code > 0x10ffff)
                        throw RangeError(code + ' is not a valid code point');
                    elements +=
                        code < 0x10000
                            ? String.fromCharCode(code)
                            : String.fromCharCode(((code -= 0x10000) >> 10) + 0xd800, (code % 0x400) + 0xdc00);
                }
                return elements;
            };
    var fromEntries = 
    // native
    hasNativeFromEntries
        ? Object.fromEntries
        : // Ponyfill
            function fromEntries(entries) {
                var obj = {};
                for (var _i = 0, entries_1 = entries; _i < entries_1.length; _i++) {
                    var _a = entries_1[_i], k = _a[0], v = _a[1];
                    obj[k] = v;
                }
                return obj;
            };
    var codePointAt = hasNativeCodePointAt
        ? // Native
            function codePointAt(s, index) {
                return s.codePointAt(index);
            }
        : // IE 11
            function codePointAt(s, index) {
                var size = s.length;
                if (index < 0 || index >= size) {
                    return undefined;
                }
                var first = s.charCodeAt(index);
                var second;
                return first < 0xd800 ||
                    first > 0xdbff ||
                    index + 1 === size ||
                    (second = s.charCodeAt(index + 1)) < 0xdc00 ||
                    second > 0xdfff
                    ? first
                    : ((first - 0xd800) << 10) + (second - 0xdc00) + 0x10000;
            };
    var trimStart = hasTrimStart
        ? // Native
            function trimStart(s) {
                return s.trimStart();
            }
        : // Ponyfill
            function trimStart(s) {
                return s.replace(SPACE_SEPARATOR_START_REGEX, '');
            };
    var trimEnd = hasTrimEnd
        ? // Native
            function trimEnd(s) {
                return s.trimEnd();
            }
        : // Ponyfill
            function trimEnd(s) {
                return s.replace(SPACE_SEPARATOR_END_REGEX, '');
            };
    // Prevent minifier to translate new RegExp to literal form that might cause syntax error on IE11.
    function RE(s, flag) {
        return new RegExp(s, flag);
    }
    // #endregion
    var matchIdentifierAtIndex;
    if (REGEX_SUPPORTS_U_AND_Y) {
        // Native
        var IDENTIFIER_PREFIX_RE_1 = RE('([^\\p{White_Space}\\p{Pattern_Syntax}]*)', 'yu');
        matchIdentifierAtIndex = function matchIdentifierAtIndex(s, index) {
            var _a;
            IDENTIFIER_PREFIX_RE_1.lastIndex = index;
            var match = IDENTIFIER_PREFIX_RE_1.exec(s);
            return (_a = match[1]) !== null && _a !== void 0 ? _a : '';
        };
    }
    else {
        // IE11
        matchIdentifierAtIndex = function matchIdentifierAtIndex(s, index) {
            var match = [];
            while (true) {
                var c = codePointAt(s, index);
                if (c === undefined || _isWhiteSpace(c) || _isPatternSyntax(c)) {
                    break;
                }
                match.push(c);
                index += c >= 0x10000 ? 2 : 1;
            }
            return fromCodePoint.apply(void 0, match);
        };
    }
    var Parser = /** @class */ (function () {
        function Parser(message, options) {
            if (options === void 0) { options = {}; }
            this.message = message;
            this.position = { offset: 0, line: 1, column: 1 };
            this.ignoreTag = !!options.ignoreTag;
            this.requiresOtherClause = !!options.requiresOtherClause;
            this.shouldParseSkeletons = !!options.shouldParseSkeletons;
        }
        Parser.prototype.parse = function () {
            if (this.offset() !== 0) {
                throw Error('parser can only be used once');
            }
            return this.parseMessage(0, '', false);
        };
        Parser.prototype.parseMessage = function (nestingLevel, parentArgType, expectingCloseTag) {
            var elements = [];
            while (!this.isEOF()) {
                var char = this.char();
                if (char === 123 /* `{` */) {
                    var result = this.parseArgument(nestingLevel, expectingCloseTag);
                    if (result.err) {
                        return result;
                    }
                    elements.push(result.val);
                }
                else if (char === 125 /* `}` */ && nestingLevel > 0) {
                    break;
                }
                else if (char === 35 /* `#` */ &&
                    (parentArgType === 'plural' || parentArgType === 'selectordinal')) {
                    var position = this.clonePosition();
                    this.bump();
                    elements.push({
                        type: TYPE.pound,
                        location: createLocation(position, this.clonePosition()),
                    });
                }
                else if (char === 60 /* `<` */ &&
                    !this.ignoreTag &&
                    this.peek() === 47 // char code for '/'
                ) {
                    if (expectingCloseTag) {
                        break;
                    }
                    else {
                        return this.error(ErrorKind.UNMATCHED_CLOSING_TAG, createLocation(this.clonePosition(), this.clonePosition()));
                    }
                }
                else if (char === 60 /* `<` */ &&
                    !this.ignoreTag &&
                    _isAlpha(this.peek() || 0)) {
                    var result = this.parseTag(nestingLevel, parentArgType);
                    if (result.err) {
                        return result;
                    }
                    elements.push(result.val);
                }
                else {
                    var result = this.parseLiteral(nestingLevel, parentArgType);
                    if (result.err) {
                        return result;
                    }
                    elements.push(result.val);
                }
            }
            return { val: elements, err: null };
        };
        /**
         * A tag name must start with an ASCII lower/upper case letter. The grammar is based on the
         * [custom element name][] except that a dash is NOT always mandatory and uppercase letters
         * are accepted:
         *
         * ```
         * tag ::= "<" tagName (whitespace)* "/>" | "<" tagName (whitespace)* ">" message "</" tagName (whitespace)* ">"
         * tagName ::= [a-z] (PENChar)*
         * PENChar ::=
         *     "-" | "." | [0-9] | "_" | [a-z] | [A-Z] | #xB7 | [#xC0-#xD6] | [#xD8-#xF6] | [#xF8-#x37D] |
         *     [#x37F-#x1FFF] | [#x200C-#x200D] | [#x203F-#x2040] | [#x2070-#x218F] | [#x2C00-#x2FEF] |
         *     [#x3001-#xD7FF] | [#xF900-#xFDCF] | [#xFDF0-#xFFFD] | [#x10000-#xEFFFF]
         * ```
         *
         * [custom element name]: https://html.spec.whatwg.org/multipage/custom-elements.html#valid-custom-element-name
         * NOTE: We're a bit more lax here since HTML technically does not allow uppercase HTML element but we do
         * since other tag-based engines like React allow it
         */
        Parser.prototype.parseTag = function (nestingLevel, parentArgType) {
            var startPosition = this.clonePosition();
            this.bump(); // `<`
            var tagName = this.parseTagName();
            this.bumpSpace();
            if (this.bumpIf('/>')) {
                // Self closing tag
                return {
                    val: {
                        type: TYPE.literal,
                        value: "<".concat(tagName, "/>"),
                        location: createLocation(startPosition, this.clonePosition()),
                    },
                    err: null,
                };
            }
            else if (this.bumpIf('>')) {
                var childrenResult = this.parseMessage(nestingLevel + 1, parentArgType, true);
                if (childrenResult.err) {
                    return childrenResult;
                }
                var children = childrenResult.val;
                // Expecting a close tag
                var endTagStartPosition = this.clonePosition();
                if (this.bumpIf('</')) {
                    if (this.isEOF() || !_isAlpha(this.char())) {
                        return this.error(ErrorKind.INVALID_TAG, createLocation(endTagStartPosition, this.clonePosition()));
                    }
                    var closingTagNameStartPosition = this.clonePosition();
                    var closingTagName = this.parseTagName();
                    if (tagName !== closingTagName) {
                        return this.error(ErrorKind.UNMATCHED_CLOSING_TAG, createLocation(closingTagNameStartPosition, this.clonePosition()));
                    }
                    this.bumpSpace();
                    if (!this.bumpIf('>')) {
                        return this.error(ErrorKind.INVALID_TAG, createLocation(endTagStartPosition, this.clonePosition()));
                    }
                    return {
                        val: {
                            type: TYPE.tag,
                            value: tagName,
                            children: children,
                            location: createLocation(startPosition, this.clonePosition()),
                        },
                        err: null,
                    };
                }
                else {
                    return this.error(ErrorKind.UNCLOSED_TAG, createLocation(startPosition, this.clonePosition()));
                }
            }
            else {
                return this.error(ErrorKind.INVALID_TAG, createLocation(startPosition, this.clonePosition()));
            }
        };
        /**
         * This method assumes that the caller has peeked ahead for the first tag character.
         */
        Parser.prototype.parseTagName = function () {
            var startOffset = this.offset();
            this.bump(); // the first tag name character
            while (!this.isEOF() && _isPotentialElementNameChar(this.char())) {
                this.bump();
            }
            return this.message.slice(startOffset, this.offset());
        };
        Parser.prototype.parseLiteral = function (nestingLevel, parentArgType) {
            var start = this.clonePosition();
            var value = '';
            while (true) {
                var parseQuoteResult = this.tryParseQuote(parentArgType);
                if (parseQuoteResult) {
                    value += parseQuoteResult;
                    continue;
                }
                var parseUnquotedResult = this.tryParseUnquoted(nestingLevel, parentArgType);
                if (parseUnquotedResult) {
                    value += parseUnquotedResult;
                    continue;
                }
                var parseLeftAngleResult = this.tryParseLeftAngleBracket();
                if (parseLeftAngleResult) {
                    value += parseLeftAngleResult;
                    continue;
                }
                break;
            }
            var location = createLocation(start, this.clonePosition());
            return {
                val: { type: TYPE.literal, value: value, location: location },
                err: null,
            };
        };
        Parser.prototype.tryParseLeftAngleBracket = function () {
            if (!this.isEOF() &&
                this.char() === 60 /* `<` */ &&
                (this.ignoreTag ||
                    // If at the opening tag or closing tag position, bail.
                    !_isAlphaOrSlash(this.peek() || 0))) {
                this.bump(); // `<`
                return '<';
            }
            return null;
        };
        /**
         * Starting with ICU 4.8, an ASCII apostrophe only starts quoted text if it immediately precedes
         * a character that requires quoting (that is, "only where needed"), and works the same in
         * nested messages as on the top level of the pattern. The new behavior is otherwise compatible.
         */
        Parser.prototype.tryParseQuote = function (parentArgType) {
            if (this.isEOF() || this.char() !== 39 /* `'` */) {
                return null;
            }
            // Parse escaped char following the apostrophe, or early return if there is no escaped char.
            // Check if is valid escaped character
            switch (this.peek()) {
                case 39 /* `'` */:
                    // double quote, should return as a single quote.
                    this.bump();
                    this.bump();
                    return "'";
                // '{', '<', '>', '}'
                case 123:
                case 60:
                case 62:
                case 125:
                    break;
                case 35: // '#'
                    if (parentArgType === 'plural' || parentArgType === 'selectordinal') {
                        break;
                    }
                    return null;
                default:
                    return null;
            }
            this.bump(); // apostrophe
            var codePoints = [this.char()]; // escaped char
            this.bump();
            // read chars until the optional closing apostrophe is found
            while (!this.isEOF()) {
                var ch = this.char();
                if (ch === 39 /* `'` */) {
                    if (this.peek() === 39 /* `'` */) {
                        codePoints.push(39);
                        // Bump one more time because we need to skip 2 characters.
                        this.bump();
                    }
                    else {
                        // Optional closing apostrophe.
                        this.bump();
                        break;
                    }
                }
                else {
                    codePoints.push(ch);
                }
                this.bump();
            }
            return fromCodePoint.apply(void 0, codePoints);
        };
        Parser.prototype.tryParseUnquoted = function (nestingLevel, parentArgType) {
            if (this.isEOF()) {
                return null;
            }
            var ch = this.char();
            if (ch === 60 /* `<` */ ||
                ch === 123 /* `{` */ ||
                (ch === 35 /* `#` */ &&
                    (parentArgType === 'plural' || parentArgType === 'selectordinal')) ||
                (ch === 125 /* `}` */ && nestingLevel > 0)) {
                return null;
            }
            else {
                this.bump();
                return fromCodePoint(ch);
            }
        };
        Parser.prototype.parseArgument = function (nestingLevel, expectingCloseTag) {
            var openingBracePosition = this.clonePosition();
            this.bump(); // `{`
            this.bumpSpace();
            if (this.isEOF()) {
                return this.error(ErrorKind.EXPECT_ARGUMENT_CLOSING_BRACE, createLocation(openingBracePosition, this.clonePosition()));
            }
            if (this.char() === 125 /* `}` */) {
                this.bump();
                return this.error(ErrorKind.EMPTY_ARGUMENT, createLocation(openingBracePosition, this.clonePosition()));
            }
            // argument name
            var value = this.parseIdentifierIfPossible().value;
            if (!value) {
                return this.error(ErrorKind.MALFORMED_ARGUMENT, createLocation(openingBracePosition, this.clonePosition()));
            }
            this.bumpSpace();
            if (this.isEOF()) {
                return this.error(ErrorKind.EXPECT_ARGUMENT_CLOSING_BRACE, createLocation(openingBracePosition, this.clonePosition()));
            }
            switch (this.char()) {
                // Simple argument: `{name}`
                case 125 /* `}` */: {
                    this.bump(); // `}`
                    return {
                        val: {
                            type: TYPE.argument,
                            // value does not include the opening and closing braces.
                            value: value,
                            location: createLocation(openingBracePosition, this.clonePosition()),
                        },
                        err: null,
                    };
                }
                // Argument with options: `{name, format, ...}`
                case 44 /* `,` */: {
                    this.bump(); // `,`
                    this.bumpSpace();
                    if (this.isEOF()) {
                        return this.error(ErrorKind.EXPECT_ARGUMENT_CLOSING_BRACE, createLocation(openingBracePosition, this.clonePosition()));
                    }
                    return this.parseArgumentOptions(nestingLevel, expectingCloseTag, value, openingBracePosition);
                }
                default:
                    return this.error(ErrorKind.MALFORMED_ARGUMENT, createLocation(openingBracePosition, this.clonePosition()));
            }
        };
        /**
         * Advance the parser until the end of the identifier, if it is currently on
         * an identifier character. Return an empty string otherwise.
         */
        Parser.prototype.parseIdentifierIfPossible = function () {
            var startingPosition = this.clonePosition();
            var startOffset = this.offset();
            var value = matchIdentifierAtIndex(this.message, startOffset);
            var endOffset = startOffset + value.length;
            this.bumpTo(endOffset);
            var endPosition = this.clonePosition();
            var location = createLocation(startingPosition, endPosition);
            return { value: value, location: location };
        };
        Parser.prototype.parseArgumentOptions = function (nestingLevel, expectingCloseTag, value, openingBracePosition) {
            var _a;
            // Parse this range:
            // {name, type, style}
            //        ^---^
            var typeStartPosition = this.clonePosition();
            var argType = this.parseIdentifierIfPossible().value;
            var typeEndPosition = this.clonePosition();
            switch (argType) {
                case '':
                    // Expecting a style string number, date, time, plural, selectordinal, or select.
                    return this.error(ErrorKind.EXPECT_ARGUMENT_TYPE, createLocation(typeStartPosition, typeEndPosition));
                case 'number':
                case 'date':
                case 'time': {
                    // Parse this range:
                    // {name, number, style}
                    //              ^-------^
                    this.bumpSpace();
                    var styleAndLocation = null;
                    if (this.bumpIf(',')) {
                        this.bumpSpace();
                        var styleStartPosition = this.clonePosition();
                        var result = this.parseSimpleArgStyleIfPossible();
                        if (result.err) {
                            return result;
                        }
                        var style = trimEnd(result.val);
                        if (style.length === 0) {
                            return this.error(ErrorKind.EXPECT_ARGUMENT_STYLE, createLocation(this.clonePosition(), this.clonePosition()));
                        }
                        var styleLocation = createLocation(styleStartPosition, this.clonePosition());
                        styleAndLocation = { style: style, styleLocation: styleLocation };
                    }
                    var argCloseResult = this.tryParseArgumentClose(openingBracePosition);
                    if (argCloseResult.err) {
                        return argCloseResult;
                    }
                    var location_1 = createLocation(openingBracePosition, this.clonePosition());
                    // Extract style or skeleton
                    if (styleAndLocation && startsWith(styleAndLocation === null || styleAndLocation === void 0 ? void 0 : styleAndLocation.style, '::', 0)) {
                        // Skeleton starts with `::`.
                        var skeleton = trimStart(styleAndLocation.style.slice(2));
                        if (argType === 'number') {
                            var result = this.parseNumberSkeletonFromString(skeleton, styleAndLocation.styleLocation);
                            if (result.err) {
                                return result;
                            }
                            return {
                                val: { type: TYPE.number, value: value, location: location_1, style: result.val },
                                err: null,
                            };
                        }
                        else {
                            if (skeleton.length === 0) {
                                return this.error(ErrorKind.EXPECT_DATE_TIME_SKELETON, location_1);
                            }
                            var style = {
                                type: SKELETON_TYPE.dateTime,
                                pattern: skeleton,
                                location: styleAndLocation.styleLocation,
                                parsedOptions: this.shouldParseSkeletons
                                    ? parseDateTimeSkeleton(skeleton)
                                    : {},
                            };
                            var type = argType === 'date' ? TYPE.date : TYPE.time;
                            return {
                                val: { type: type, value: value, location: location_1, style: style },
                                err: null,
                            };
                        }
                    }
                    // Regular style or no style.
                    return {
                        val: {
                            type: argType === 'number'
                                ? TYPE.number
                                : argType === 'date'
                                    ? TYPE.date
                                    : TYPE.time,
                            value: value,
                            location: location_1,
                            style: (_a = styleAndLocation === null || styleAndLocation === void 0 ? void 0 : styleAndLocation.style) !== null && _a !== void 0 ? _a : null,
                        },
                        err: null,
                    };
                }
                case 'plural':
                case 'selectordinal':
                case 'select': {
                    // Parse this range:
                    // {name, plural, options}
                    //              ^---------^
                    var typeEndPosition_1 = this.clonePosition();
                    this.bumpSpace();
                    if (!this.bumpIf(',')) {
                        return this.error(ErrorKind.EXPECT_SELECT_ARGUMENT_OPTIONS, createLocation(typeEndPosition_1, __assign({}, typeEndPosition_1)));
                    }
                    this.bumpSpace();
                    // Parse offset:
                    // {name, plural, offset:1, options}
                    //                ^-----^
                    //
                    // or the first option:
                    //
                    // {name, plural, one {...} other {...}}
                    //                ^--^
                    var identifierAndLocation = this.parseIdentifierIfPossible();
                    var pluralOffset = 0;
                    if (argType !== 'select' && identifierAndLocation.value === 'offset') {
                        if (!this.bumpIf(':')) {
                            return this.error(ErrorKind.EXPECT_PLURAL_ARGUMENT_OFFSET_VALUE, createLocation(this.clonePosition(), this.clonePosition()));
                        }
                        this.bumpSpace();
                        var result = this.tryParseDecimalInteger(ErrorKind.EXPECT_PLURAL_ARGUMENT_OFFSET_VALUE, ErrorKind.INVALID_PLURAL_ARGUMENT_OFFSET_VALUE);
                        if (result.err) {
                            return result;
                        }
                        // Parse another identifier for option parsing
                        this.bumpSpace();
                        identifierAndLocation = this.parseIdentifierIfPossible();
                        pluralOffset = result.val;
                    }
                    var optionsResult = this.tryParsePluralOrSelectOptions(nestingLevel, argType, expectingCloseTag, identifierAndLocation);
                    if (optionsResult.err) {
                        return optionsResult;
                    }
                    var argCloseResult = this.tryParseArgumentClose(openingBracePosition);
                    if (argCloseResult.err) {
                        return argCloseResult;
                    }
                    var location_2 = createLocation(openingBracePosition, this.clonePosition());
                    if (argType === 'select') {
                        return {
                            val: {
                                type: TYPE.select,
                                value: value,
                                options: fromEntries(optionsResult.val),
                                location: location_2,
                            },
                            err: null,
                        };
                    }
                    else {
                        return {
                            val: {
                                type: TYPE.plural,
                                value: value,
                                options: fromEntries(optionsResult.val),
                                offset: pluralOffset,
                                pluralType: argType === 'plural' ? 'cardinal' : 'ordinal',
                                location: location_2,
                            },
                            err: null,
                        };
                    }
                }
                default:
                    return this.error(ErrorKind.INVALID_ARGUMENT_TYPE, createLocation(typeStartPosition, typeEndPosition));
            }
        };
        Parser.prototype.tryParseArgumentClose = function (openingBracePosition) {
            // Parse: {value, number, ::currency/GBP }
            //
            if (this.isEOF() || this.char() !== 125 /* `}` */) {
                return this.error(ErrorKind.EXPECT_ARGUMENT_CLOSING_BRACE, createLocation(openingBracePosition, this.clonePosition()));
            }
            this.bump(); // `}`
            return { val: true, err: null };
        };
        /**
         * See: https://github.com/unicode-org/icu/blob/af7ed1f6d2298013dc303628438ec4abe1f16479/icu4c/source/common/messagepattern.cpp#L659
         */
        Parser.prototype.parseSimpleArgStyleIfPossible = function () {
            var nestedBraces = 0;
            var startPosition = this.clonePosition();
            while (!this.isEOF()) {
                var ch = this.char();
                switch (ch) {
                    case 39 /* `'` */: {
                        // Treat apostrophe as quoting but include it in the style part.
                        // Find the end of the quoted literal text.
                        this.bump();
                        var apostrophePosition = this.clonePosition();
                        if (!this.bumpUntil("'")) {
                            return this.error(ErrorKind.UNCLOSED_QUOTE_IN_ARGUMENT_STYLE, createLocation(apostrophePosition, this.clonePosition()));
                        }
                        this.bump();
                        break;
                    }
                    case 123 /* `{` */: {
                        nestedBraces += 1;
                        this.bump();
                        break;
                    }
                    case 125 /* `}` */: {
                        if (nestedBraces > 0) {
                            nestedBraces -= 1;
                        }
                        else {
                            return {
                                val: this.message.slice(startPosition.offset, this.offset()),
                                err: null,
                            };
                        }
                        break;
                    }
                    default:
                        this.bump();
                        break;
                }
            }
            return {
                val: this.message.slice(startPosition.offset, this.offset()),
                err: null,
            };
        };
        Parser.prototype.parseNumberSkeletonFromString = function (skeleton, location) {
            var tokens = [];
            try {
                tokens = parseNumberSkeletonFromString(skeleton);
            }
            catch (e) {
                return this.error(ErrorKind.INVALID_NUMBER_SKELETON, location);
            }
            return {
                val: {
                    type: SKELETON_TYPE.number,
                    tokens: tokens,
                    location: location,
                    parsedOptions: this.shouldParseSkeletons
                        ? parseNumberSkeleton(tokens)
                        : {},
                },
                err: null,
            };
        };
        /**
         * @param nesting_level The current nesting level of messages.
         *     This can be positive when parsing message fragment in select or plural argument options.
         * @param parent_arg_type The parent argument's type.
         * @param parsed_first_identifier If provided, this is the first identifier-like selector of
         *     the argument. It is a by-product of a previous parsing attempt.
         * @param expecting_close_tag If true, this message is directly or indirectly nested inside
         *     between a pair of opening and closing tags. The nested message will not parse beyond
         *     the closing tag boundary.
         */
        Parser.prototype.tryParsePluralOrSelectOptions = function (nestingLevel, parentArgType, expectCloseTag, parsedFirstIdentifier) {
            var _a;
            var hasOtherClause = false;
            var options = [];
            var parsedSelectors = new Set();
            var selector = parsedFirstIdentifier.value, selectorLocation = parsedFirstIdentifier.location;
            // Parse:
            // one {one apple}
            // ^--^
            while (true) {
                if (selector.length === 0) {
                    var startPosition = this.clonePosition();
                    if (parentArgType !== 'select' && this.bumpIf('=')) {
                        // Try parse `={number}` selector
                        var result = this.tryParseDecimalInteger(ErrorKind.EXPECT_PLURAL_ARGUMENT_SELECTOR, ErrorKind.INVALID_PLURAL_ARGUMENT_SELECTOR);
                        if (result.err) {
                            return result;
                        }
                        selectorLocation = createLocation(startPosition, this.clonePosition());
                        selector = this.message.slice(startPosition.offset, this.offset());
                    }
                    else {
                        break;
                    }
                }
                // Duplicate selector clauses
                if (parsedSelectors.has(selector)) {
                    return this.error(parentArgType === 'select'
                        ? ErrorKind.DUPLICATE_SELECT_ARGUMENT_SELECTOR
                        : ErrorKind.DUPLICATE_PLURAL_ARGUMENT_SELECTOR, selectorLocation);
                }
                if (selector === 'other') {
                    hasOtherClause = true;
                }
                // Parse:
                // one {one apple}
                //     ^----------^
                this.bumpSpace();
                var openingBracePosition = this.clonePosition();
                if (!this.bumpIf('{')) {
                    return this.error(parentArgType === 'select'
                        ? ErrorKind.EXPECT_SELECT_ARGUMENT_SELECTOR_FRAGMENT
                        : ErrorKind.EXPECT_PLURAL_ARGUMENT_SELECTOR_FRAGMENT, createLocation(this.clonePosition(), this.clonePosition()));
                }
                var fragmentResult = this.parseMessage(nestingLevel + 1, parentArgType, expectCloseTag);
                if (fragmentResult.err) {
                    return fragmentResult;
                }
                var argCloseResult = this.tryParseArgumentClose(openingBracePosition);
                if (argCloseResult.err) {
                    return argCloseResult;
                }
                options.push([
                    selector,
                    {
                        value: fragmentResult.val,
                        location: createLocation(openingBracePosition, this.clonePosition()),
                    },
                ]);
                // Keep track of the existing selectors
                parsedSelectors.add(selector);
                // Prep next selector clause.
                this.bumpSpace();
                (_a = this.parseIdentifierIfPossible(), selector = _a.value, selectorLocation = _a.location);
            }
            if (options.length === 0) {
                return this.error(parentArgType === 'select'
                    ? ErrorKind.EXPECT_SELECT_ARGUMENT_SELECTOR
                    : ErrorKind.EXPECT_PLURAL_ARGUMENT_SELECTOR, createLocation(this.clonePosition(), this.clonePosition()));
            }
            if (this.requiresOtherClause && !hasOtherClause) {
                return this.error(ErrorKind.MISSING_OTHER_CLAUSE, createLocation(this.clonePosition(), this.clonePosition()));
            }
            return { val: options, err: null };
        };
        Parser.prototype.tryParseDecimalInteger = function (expectNumberError, invalidNumberError) {
            var sign = 1;
            var startingPosition = this.clonePosition();
            if (this.bumpIf('+')) ;
            else if (this.bumpIf('-')) {
                sign = -1;
            }
            var hasDigits = false;
            var decimal = 0;
            while (!this.isEOF()) {
                var ch = this.char();
                if (ch >= 48 /* `0` */ && ch <= 57 /* `9` */) {
                    hasDigits = true;
                    decimal = decimal * 10 + (ch - 48);
                    this.bump();
                }
                else {
                    break;
                }
            }
            var location = createLocation(startingPosition, this.clonePosition());
            if (!hasDigits) {
                return this.error(expectNumberError, location);
            }
            decimal *= sign;
            if (!isSafeInteger(decimal)) {
                return this.error(invalidNumberError, location);
            }
            return { val: decimal, err: null };
        };
        Parser.prototype.offset = function () {
            return this.position.offset;
        };
        Parser.prototype.isEOF = function () {
            return this.offset() === this.message.length;
        };
        Parser.prototype.clonePosition = function () {
            // This is much faster than `Object.assign` or spread.
            return {
                offset: this.position.offset,
                line: this.position.line,
                column: this.position.column,
            };
        };
        /**
         * Return the code point at the current position of the parser.
         * Throws if the index is out of bound.
         */
        Parser.prototype.char = function () {
            var offset = this.position.offset;
            if (offset >= this.message.length) {
                throw Error('out of bound');
            }
            var code = codePointAt(this.message, offset);
            if (code === undefined) {
                throw Error("Offset ".concat(offset, " is at invalid UTF-16 code unit boundary"));
            }
            return code;
        };
        Parser.prototype.error = function (kind, location) {
            return {
                val: null,
                err: {
                    kind: kind,
                    message: this.message,
                    location: location,
                },
            };
        };
        /** Bump the parser to the next UTF-16 code unit. */
        Parser.prototype.bump = function () {
            if (this.isEOF()) {
                return;
            }
            var code = this.char();
            if (code === 10 /* '\n' */) {
                this.position.line += 1;
                this.position.column = 1;
                this.position.offset += 1;
            }
            else {
                this.position.column += 1;
                // 0 ~ 0x10000 -> unicode BMP, otherwise skip the surrogate pair.
                this.position.offset += code < 0x10000 ? 1 : 2;
            }
        };
        /**
         * If the substring starting at the current position of the parser has
         * the given prefix, then bump the parser to the character immediately
         * following the prefix and return true. Otherwise, don't bump the parser
         * and return false.
         */
        Parser.prototype.bumpIf = function (prefix) {
            if (startsWith(this.message, prefix, this.offset())) {
                for (var i = 0; i < prefix.length; i++) {
                    this.bump();
                }
                return true;
            }
            return false;
        };
        /**
         * Bump the parser until the pattern character is found and return `true`.
         * Otherwise bump to the end of the file and return `false`.
         */
        Parser.prototype.bumpUntil = function (pattern) {
            var currentOffset = this.offset();
            var index = this.message.indexOf(pattern, currentOffset);
            if (index >= 0) {
                this.bumpTo(index);
                return true;
            }
            else {
                this.bumpTo(this.message.length);
                return false;
            }
        };
        /**
         * Bump the parser to the target offset.
         * If target offset is beyond the end of the input, bump the parser to the end of the input.
         */
        Parser.prototype.bumpTo = function (targetOffset) {
            if (this.offset() > targetOffset) {
                throw Error("targetOffset ".concat(targetOffset, " must be greater than or equal to the current offset ").concat(this.offset()));
            }
            targetOffset = Math.min(targetOffset, this.message.length);
            while (true) {
                var offset = this.offset();
                if (offset === targetOffset) {
                    break;
                }
                if (offset > targetOffset) {
                    throw Error("targetOffset ".concat(targetOffset, " is at invalid UTF-16 code unit boundary"));
                }
                this.bump();
                if (this.isEOF()) {
                    break;
                }
            }
        };
        /** advance the parser through all whitespace to the next non-whitespace code unit. */
        Parser.prototype.bumpSpace = function () {
            while (!this.isEOF() && _isWhiteSpace(this.char())) {
                this.bump();
            }
        };
        /**
         * Peek at the *next* Unicode codepoint in the input without advancing the parser.
         * If the input has been exhausted, then this returns null.
         */
        Parser.prototype.peek = function () {
            if (this.isEOF()) {
                return null;
            }
            var code = this.char();
            var offset = this.offset();
            var nextCode = this.message.charCodeAt(offset + (code >= 0x10000 ? 2 : 1));
            return nextCode !== null && nextCode !== void 0 ? nextCode : null;
        };
        return Parser;
    }());
    /**
     * This check if codepoint is alphabet (lower & uppercase)
     * @param codepoint
     * @returns
     */
    function _isAlpha(codepoint) {
        return ((codepoint >= 97 && codepoint <= 122) ||
            (codepoint >= 65 && codepoint <= 90));
    }
    function _isAlphaOrSlash(codepoint) {
        return _isAlpha(codepoint) || codepoint === 47; /* '/' */
    }
    /** See `parseTag` function docs. */
    function _isPotentialElementNameChar(c) {
        return (c === 45 /* '-' */ ||
            c === 46 /* '.' */ ||
            (c >= 48 && c <= 57) /* 0..9 */ ||
            c === 95 /* '_' */ ||
            (c >= 97 && c <= 122) /** a..z */ ||
            (c >= 65 && c <= 90) /* A..Z */ ||
            c == 0xb7 ||
            (c >= 0xc0 && c <= 0xd6) ||
            (c >= 0xd8 && c <= 0xf6) ||
            (c >= 0xf8 && c <= 0x37d) ||
            (c >= 0x37f && c <= 0x1fff) ||
            (c >= 0x200c && c <= 0x200d) ||
            (c >= 0x203f && c <= 0x2040) ||
            (c >= 0x2070 && c <= 0x218f) ||
            (c >= 0x2c00 && c <= 0x2fef) ||
            (c >= 0x3001 && c <= 0xd7ff) ||
            (c >= 0xf900 && c <= 0xfdcf) ||
            (c >= 0xfdf0 && c <= 0xfffd) ||
            (c >= 0x10000 && c <= 0xeffff));
    }
    /**
     * Code point equivalent of regex `\p{White_Space}`.
     * From: https://www.unicode.org/Public/UCD/latest/ucd/PropList.txt
     */
    function _isWhiteSpace(c) {
        return ((c >= 0x0009 && c <= 0x000d) ||
            c === 0x0020 ||
            c === 0x0085 ||
            (c >= 0x200e && c <= 0x200f) ||
            c === 0x2028 ||
            c === 0x2029);
    }
    /**
     * Code point equivalent of regex `\p{Pattern_Syntax}`.
     * See https://www.unicode.org/Public/UCD/latest/ucd/PropList.txt
     */
    function _isPatternSyntax(c) {
        return ((c >= 0x0021 && c <= 0x0023) ||
            c === 0x0024 ||
            (c >= 0x0025 && c <= 0x0027) ||
            c === 0x0028 ||
            c === 0x0029 ||
            c === 0x002a ||
            c === 0x002b ||
            c === 0x002c ||
            c === 0x002d ||
            (c >= 0x002e && c <= 0x002f) ||
            (c >= 0x003a && c <= 0x003b) ||
            (c >= 0x003c && c <= 0x003e) ||
            (c >= 0x003f && c <= 0x0040) ||
            c === 0x005b ||
            c === 0x005c ||
            c === 0x005d ||
            c === 0x005e ||
            c === 0x0060 ||
            c === 0x007b ||
            c === 0x007c ||
            c === 0x007d ||
            c === 0x007e ||
            c === 0x00a1 ||
            (c >= 0x00a2 && c <= 0x00a5) ||
            c === 0x00a6 ||
            c === 0x00a7 ||
            c === 0x00a9 ||
            c === 0x00ab ||
            c === 0x00ac ||
            c === 0x00ae ||
            c === 0x00b0 ||
            c === 0x00b1 ||
            c === 0x00b6 ||
            c === 0x00bb ||
            c === 0x00bf ||
            c === 0x00d7 ||
            c === 0x00f7 ||
            (c >= 0x2010 && c <= 0x2015) ||
            (c >= 0x2016 && c <= 0x2017) ||
            c === 0x2018 ||
            c === 0x2019 ||
            c === 0x201a ||
            (c >= 0x201b && c <= 0x201c) ||
            c === 0x201d ||
            c === 0x201e ||
            c === 0x201f ||
            (c >= 0x2020 && c <= 0x2027) ||
            (c >= 0x2030 && c <= 0x2038) ||
            c === 0x2039 ||
            c === 0x203a ||
            (c >= 0x203b && c <= 0x203e) ||
            (c >= 0x2041 && c <= 0x2043) ||
            c === 0x2044 ||
            c === 0x2045 ||
            c === 0x2046 ||
            (c >= 0x2047 && c <= 0x2051) ||
            c === 0x2052 ||
            c === 0x2053 ||
            (c >= 0x2055 && c <= 0x205e) ||
            (c >= 0x2190 && c <= 0x2194) ||
            (c >= 0x2195 && c <= 0x2199) ||
            (c >= 0x219a && c <= 0x219b) ||
            (c >= 0x219c && c <= 0x219f) ||
            c === 0x21a0 ||
            (c >= 0x21a1 && c <= 0x21a2) ||
            c === 0x21a3 ||
            (c >= 0x21a4 && c <= 0x21a5) ||
            c === 0x21a6 ||
            (c >= 0x21a7 && c <= 0x21ad) ||
            c === 0x21ae ||
            (c >= 0x21af && c <= 0x21cd) ||
            (c >= 0x21ce && c <= 0x21cf) ||
            (c >= 0x21d0 && c <= 0x21d1) ||
            c === 0x21d2 ||
            c === 0x21d3 ||
            c === 0x21d4 ||
            (c >= 0x21d5 && c <= 0x21f3) ||
            (c >= 0x21f4 && c <= 0x22ff) ||
            (c >= 0x2300 && c <= 0x2307) ||
            c === 0x2308 ||
            c === 0x2309 ||
            c === 0x230a ||
            c === 0x230b ||
            (c >= 0x230c && c <= 0x231f) ||
            (c >= 0x2320 && c <= 0x2321) ||
            (c >= 0x2322 && c <= 0x2328) ||
            c === 0x2329 ||
            c === 0x232a ||
            (c >= 0x232b && c <= 0x237b) ||
            c === 0x237c ||
            (c >= 0x237d && c <= 0x239a) ||
            (c >= 0x239b && c <= 0x23b3) ||
            (c >= 0x23b4 && c <= 0x23db) ||
            (c >= 0x23dc && c <= 0x23e1) ||
            (c >= 0x23e2 && c <= 0x2426) ||
            (c >= 0x2427 && c <= 0x243f) ||
            (c >= 0x2440 && c <= 0x244a) ||
            (c >= 0x244b && c <= 0x245f) ||
            (c >= 0x2500 && c <= 0x25b6) ||
            c === 0x25b7 ||
            (c >= 0x25b8 && c <= 0x25c0) ||
            c === 0x25c1 ||
            (c >= 0x25c2 && c <= 0x25f7) ||
            (c >= 0x25f8 && c <= 0x25ff) ||
            (c >= 0x2600 && c <= 0x266e) ||
            c === 0x266f ||
            (c >= 0x2670 && c <= 0x2767) ||
            c === 0x2768 ||
            c === 0x2769 ||
            c === 0x276a ||
            c === 0x276b ||
            c === 0x276c ||
            c === 0x276d ||
            c === 0x276e ||
            c === 0x276f ||
            c === 0x2770 ||
            c === 0x2771 ||
            c === 0x2772 ||
            c === 0x2773 ||
            c === 0x2774 ||
            c === 0x2775 ||
            (c >= 0x2794 && c <= 0x27bf) ||
            (c >= 0x27c0 && c <= 0x27c4) ||
            c === 0x27c5 ||
            c === 0x27c6 ||
            (c >= 0x27c7 && c <= 0x27e5) ||
            c === 0x27e6 ||
            c === 0x27e7 ||
            c === 0x27e8 ||
            c === 0x27e9 ||
            c === 0x27ea ||
            c === 0x27eb ||
            c === 0x27ec ||
            c === 0x27ed ||
            c === 0x27ee ||
            c === 0x27ef ||
            (c >= 0x27f0 && c <= 0x27ff) ||
            (c >= 0x2800 && c <= 0x28ff) ||
            (c >= 0x2900 && c <= 0x2982) ||
            c === 0x2983 ||
            c === 0x2984 ||
            c === 0x2985 ||
            c === 0x2986 ||
            c === 0x2987 ||
            c === 0x2988 ||
            c === 0x2989 ||
            c === 0x298a ||
            c === 0x298b ||
            c === 0x298c ||
            c === 0x298d ||
            c === 0x298e ||
            c === 0x298f ||
            c === 0x2990 ||
            c === 0x2991 ||
            c === 0x2992 ||
            c === 0x2993 ||
            c === 0x2994 ||
            c === 0x2995 ||
            c === 0x2996 ||
            c === 0x2997 ||
            c === 0x2998 ||
            (c >= 0x2999 && c <= 0x29d7) ||
            c === 0x29d8 ||
            c === 0x29d9 ||
            c === 0x29da ||
            c === 0x29db ||
            (c >= 0x29dc && c <= 0x29fb) ||
            c === 0x29fc ||
            c === 0x29fd ||
            (c >= 0x29fe && c <= 0x2aff) ||
            (c >= 0x2b00 && c <= 0x2b2f) ||
            (c >= 0x2b30 && c <= 0x2b44) ||
            (c >= 0x2b45 && c <= 0x2b46) ||
            (c >= 0x2b47 && c <= 0x2b4c) ||
            (c >= 0x2b4d && c <= 0x2b73) ||
            (c >= 0x2b74 && c <= 0x2b75) ||
            (c >= 0x2b76 && c <= 0x2b95) ||
            c === 0x2b96 ||
            (c >= 0x2b97 && c <= 0x2bff) ||
            (c >= 0x2e00 && c <= 0x2e01) ||
            c === 0x2e02 ||
            c === 0x2e03 ||
            c === 0x2e04 ||
            c === 0x2e05 ||
            (c >= 0x2e06 && c <= 0x2e08) ||
            c === 0x2e09 ||
            c === 0x2e0a ||
            c === 0x2e0b ||
            c === 0x2e0c ||
            c === 0x2e0d ||
            (c >= 0x2e0e && c <= 0x2e16) ||
            c === 0x2e17 ||
            (c >= 0x2e18 && c <= 0x2e19) ||
            c === 0x2e1a ||
            c === 0x2e1b ||
            c === 0x2e1c ||
            c === 0x2e1d ||
            (c >= 0x2e1e && c <= 0x2e1f) ||
            c === 0x2e20 ||
            c === 0x2e21 ||
            c === 0x2e22 ||
            c === 0x2e23 ||
            c === 0x2e24 ||
            c === 0x2e25 ||
            c === 0x2e26 ||
            c === 0x2e27 ||
            c === 0x2e28 ||
            c === 0x2e29 ||
            (c >= 0x2e2a && c <= 0x2e2e) ||
            c === 0x2e2f ||
            (c >= 0x2e30 && c <= 0x2e39) ||
            (c >= 0x2e3a && c <= 0x2e3b) ||
            (c >= 0x2e3c && c <= 0x2e3f) ||
            c === 0x2e40 ||
            c === 0x2e41 ||
            c === 0x2e42 ||
            (c >= 0x2e43 && c <= 0x2e4f) ||
            (c >= 0x2e50 && c <= 0x2e51) ||
            c === 0x2e52 ||
            (c >= 0x2e53 && c <= 0x2e7f) ||
            (c >= 0x3001 && c <= 0x3003) ||
            c === 0x3008 ||
            c === 0x3009 ||
            c === 0x300a ||
            c === 0x300b ||
            c === 0x300c ||
            c === 0x300d ||
            c === 0x300e ||
            c === 0x300f ||
            c === 0x3010 ||
            c === 0x3011 ||
            (c >= 0x3012 && c <= 0x3013) ||
            c === 0x3014 ||
            c === 0x3015 ||
            c === 0x3016 ||
            c === 0x3017 ||
            c === 0x3018 ||
            c === 0x3019 ||
            c === 0x301a ||
            c === 0x301b ||
            c === 0x301c ||
            c === 0x301d ||
            (c >= 0x301e && c <= 0x301f) ||
            c === 0x3020 ||
            c === 0x3030 ||
            c === 0xfd3e ||
            c === 0xfd3f ||
            (c >= 0xfe45 && c <= 0xfe46));
    }

    function pruneLocation(els) {
        els.forEach(function (el) {
            delete el.location;
            if (isSelectElement(el) || isPluralElement(el)) {
                for (var k in el.options) {
                    delete el.options[k].location;
                    pruneLocation(el.options[k].value);
                }
            }
            else if (isNumberElement(el) && isNumberSkeleton(el.style)) {
                delete el.style.location;
            }
            else if ((isDateElement(el) || isTimeElement(el)) &&
                isDateTimeSkeleton(el.style)) {
                delete el.style.location;
            }
            else if (isTagElement(el)) {
                pruneLocation(el.children);
            }
        });
    }
    function parse(message, opts) {
        if (opts === void 0) { opts = {}; }
        opts = __assign({ shouldParseSkeletons: true, requiresOtherClause: true }, opts);
        var result = new Parser(message, opts).parse();
        if (result.err) {
            var error = SyntaxError(ErrorKind[result.err.kind]);
            // @ts-expect-error Assign to error object
            error.location = result.err.location;
            // @ts-expect-error Assign to error object
            error.originalMessage = result.err.message;
            throw error;
        }
        if (!(opts === null || opts === void 0 ? void 0 : opts.captureLocation)) {
            pruneLocation(result.val);
        }
        return result.val;
    }

    //
    // Main
    //
    function memoize(fn, options) {
        var cache = options && options.cache ? options.cache : cacheDefault;
        var serializer = options && options.serializer ? options.serializer : serializerDefault;
        var strategy = options && options.strategy ? options.strategy : strategyDefault;
        return strategy(fn, {
            cache: cache,
            serializer: serializer,
        });
    }
    //
    // Strategy
    //
    function isPrimitive(value) {
        return (value == null || typeof value === 'number' || typeof value === 'boolean'); // || typeof value === "string" 'unsafe' primitive for our needs
    }
    function monadic(fn, cache, serializer, arg) {
        var cacheKey = isPrimitive(arg) ? arg : serializer(arg);
        var computedValue = cache.get(cacheKey);
        if (typeof computedValue === 'undefined') {
            computedValue = fn.call(this, arg);
            cache.set(cacheKey, computedValue);
        }
        return computedValue;
    }
    function variadic(fn, cache, serializer) {
        var args = Array.prototype.slice.call(arguments, 3);
        var cacheKey = serializer(args);
        var computedValue = cache.get(cacheKey);
        if (typeof computedValue === 'undefined') {
            computedValue = fn.apply(this, args);
            cache.set(cacheKey, computedValue);
        }
        return computedValue;
    }
    function assemble(fn, context, strategy, cache, serialize) {
        return strategy.bind(context, fn, cache, serialize);
    }
    function strategyDefault(fn, options) {
        var strategy = fn.length === 1 ? monadic : variadic;
        return assemble(fn, this, strategy, options.cache.create(), options.serializer);
    }
    function strategyVariadic(fn, options) {
        return assemble(fn, this, variadic, options.cache.create(), options.serializer);
    }
    function strategyMonadic(fn, options) {
        return assemble(fn, this, monadic, options.cache.create(), options.serializer);
    }
    //
    // Serializer
    //
    var serializerDefault = function () {
        return JSON.stringify(arguments);
    };
    //
    // Cache
    //
    function ObjectWithoutPrototypeCache() {
        this.cache = Object.create(null);
    }
    ObjectWithoutPrototypeCache.prototype.get = function (key) {
        return this.cache[key];
    };
    ObjectWithoutPrototypeCache.prototype.set = function (key, value) {
        this.cache[key] = value;
    };
    var cacheDefault = {
        create: function create() {
            // @ts-ignore
            return new ObjectWithoutPrototypeCache();
        },
    };
    var strategies = {
        variadic: strategyVariadic,
        monadic: strategyMonadic,
    };

    var ErrorCode;
    (function (ErrorCode) {
        // When we have a placeholder but no value to format
        ErrorCode["MISSING_VALUE"] = "MISSING_VALUE";
        // When value supplied is invalid
        ErrorCode["INVALID_VALUE"] = "INVALID_VALUE";
        // When we need specific Intl API but it's not available
        ErrorCode["MISSING_INTL_API"] = "MISSING_INTL_API";
    })(ErrorCode || (ErrorCode = {}));
    var FormatError = /** @class */ (function (_super) {
        __extends(FormatError, _super);
        function FormatError(msg, code, originalMessage) {
            var _this = _super.call(this, msg) || this;
            _this.code = code;
            _this.originalMessage = originalMessage;
            return _this;
        }
        FormatError.prototype.toString = function () {
            return "[formatjs Error: ".concat(this.code, "] ").concat(this.message);
        };
        return FormatError;
    }(Error));
    var InvalidValueError = /** @class */ (function (_super) {
        __extends(InvalidValueError, _super);
        function InvalidValueError(variableId, value, options, originalMessage) {
            return _super.call(this, "Invalid values for \"".concat(variableId, "\": \"").concat(value, "\". Options are \"").concat(Object.keys(options).join('", "'), "\""), ErrorCode.INVALID_VALUE, originalMessage) || this;
        }
        return InvalidValueError;
    }(FormatError));
    var InvalidValueTypeError = /** @class */ (function (_super) {
        __extends(InvalidValueTypeError, _super);
        function InvalidValueTypeError(value, type, originalMessage) {
            return _super.call(this, "Value for \"".concat(value, "\" must be of type ").concat(type), ErrorCode.INVALID_VALUE, originalMessage) || this;
        }
        return InvalidValueTypeError;
    }(FormatError));
    var MissingValueError = /** @class */ (function (_super) {
        __extends(MissingValueError, _super);
        function MissingValueError(variableId, originalMessage) {
            return _super.call(this, "The intl string context variable \"".concat(variableId, "\" was not provided to the string \"").concat(originalMessage, "\""), ErrorCode.MISSING_VALUE, originalMessage) || this;
        }
        return MissingValueError;
    }(FormatError));

    var PART_TYPE;
    (function (PART_TYPE) {
        PART_TYPE[PART_TYPE["literal"] = 0] = "literal";
        PART_TYPE[PART_TYPE["object"] = 1] = "object";
    })(PART_TYPE || (PART_TYPE = {}));
    function mergeLiteral(parts) {
        if (parts.length < 2) {
            return parts;
        }
        return parts.reduce(function (all, part) {
            var lastPart = all[all.length - 1];
            if (!lastPart ||
                lastPart.type !== PART_TYPE.literal ||
                part.type !== PART_TYPE.literal) {
                all.push(part);
            }
            else {
                lastPart.value += part.value;
            }
            return all;
        }, []);
    }
    function isFormatXMLElementFn(el) {
        return typeof el === 'function';
    }
    // TODO(skeleton): add skeleton support
    function formatToParts(els, locales, formatters, formats, values, currentPluralValue, 
    // For debugging
    originalMessage) {
        // Hot path for straight simple msg translations
        if (els.length === 1 && isLiteralElement(els[0])) {
            return [
                {
                    type: PART_TYPE.literal,
                    value: els[0].value,
                },
            ];
        }
        var result = [];
        for (var _i = 0, els_1 = els; _i < els_1.length; _i++) {
            var el = els_1[_i];
            // Exit early for string parts.
            if (isLiteralElement(el)) {
                result.push({
                    type: PART_TYPE.literal,
                    value: el.value,
                });
                continue;
            }
            // TODO: should this part be literal type?
            // Replace `#` in plural rules with the actual numeric value.
            if (isPoundElement(el)) {
                if (typeof currentPluralValue === 'number') {
                    result.push({
                        type: PART_TYPE.literal,
                        value: formatters.getNumberFormat(locales).format(currentPluralValue),
                    });
                }
                continue;
            }
            var varName = el.value;
            // Enforce that all required values are provided by the caller.
            if (!(values && varName in values)) {
                throw new MissingValueError(varName, originalMessage);
            }
            var value = values[varName];
            if (isArgumentElement(el)) {
                if (!value || typeof value === 'string' || typeof value === 'number') {
                    value =
                        typeof value === 'string' || typeof value === 'number'
                            ? String(value)
                            : '';
                }
                result.push({
                    type: typeof value === 'string' ? PART_TYPE.literal : PART_TYPE.object,
                    value: value,
                });
                continue;
            }
            // Recursively format plural and select parts' option — which can be a
            // nested pattern structure. The choosing of the option to use is
            // abstracted-by and delegated-to the part helper object.
            if (isDateElement(el)) {
                var style = typeof el.style === 'string'
                    ? formats.date[el.style]
                    : isDateTimeSkeleton(el.style)
                        ? el.style.parsedOptions
                        : undefined;
                result.push({
                    type: PART_TYPE.literal,
                    value: formatters
                        .getDateTimeFormat(locales, style)
                        .format(value),
                });
                continue;
            }
            if (isTimeElement(el)) {
                var style = typeof el.style === 'string'
                    ? formats.time[el.style]
                    : isDateTimeSkeleton(el.style)
                        ? el.style.parsedOptions
                        : undefined;
                result.push({
                    type: PART_TYPE.literal,
                    value: formatters
                        .getDateTimeFormat(locales, style)
                        .format(value),
                });
                continue;
            }
            if (isNumberElement(el)) {
                var style = typeof el.style === 'string'
                    ? formats.number[el.style]
                    : isNumberSkeleton(el.style)
                        ? el.style.parsedOptions
                        : undefined;
                if (style && style.scale) {
                    value =
                        value *
                            (style.scale || 1);
                }
                result.push({
                    type: PART_TYPE.literal,
                    value: formatters
                        .getNumberFormat(locales, style)
                        .format(value),
                });
                continue;
            }
            if (isTagElement(el)) {
                var children = el.children, value_1 = el.value;
                var formatFn = values[value_1];
                if (!isFormatXMLElementFn(formatFn)) {
                    throw new InvalidValueTypeError(value_1, 'function', originalMessage);
                }
                var parts = formatToParts(children, locales, formatters, formats, values, currentPluralValue);
                var chunks = formatFn(parts.map(function (p) { return p.value; }));
                if (!Array.isArray(chunks)) {
                    chunks = [chunks];
                }
                result.push.apply(result, chunks.map(function (c) {
                    return {
                        type: typeof c === 'string' ? PART_TYPE.literal : PART_TYPE.object,
                        value: c,
                    };
                }));
            }
            if (isSelectElement(el)) {
                var opt = el.options[value] || el.options.other;
                if (!opt) {
                    throw new InvalidValueError(el.value, value, Object.keys(el.options), originalMessage);
                }
                result.push.apply(result, formatToParts(opt.value, locales, formatters, formats, values));
                continue;
            }
            if (isPluralElement(el)) {
                var opt = el.options["=".concat(value)];
                if (!opt) {
                    if (!Intl.PluralRules) {
                        throw new FormatError("Intl.PluralRules is not available in this environment.\nTry polyfilling it using \"@formatjs/intl-pluralrules\"\n", ErrorCode.MISSING_INTL_API, originalMessage);
                    }
                    var rule = formatters
                        .getPluralRules(locales, { type: el.pluralType })
                        .select(value - (el.offset || 0));
                    opt = el.options[rule] || el.options.other;
                }
                if (!opt) {
                    throw new InvalidValueError(el.value, value, Object.keys(el.options), originalMessage);
                }
                result.push.apply(result, formatToParts(opt.value, locales, formatters, formats, values, value - (el.offset || 0)));
                continue;
            }
        }
        return mergeLiteral(result);
    }

    /*
    Copyright (c) 2014, Yahoo! Inc. All rights reserved.
    Copyrights licensed under the New BSD License.
    See the accompanying LICENSE file for terms.
    */
    // -- MessageFormat --------------------------------------------------------
    function mergeConfig(c1, c2) {
        if (!c2) {
            return c1;
        }
        return __assign(__assign(__assign({}, (c1 || {})), (c2 || {})), Object.keys(c1).reduce(function (all, k) {
            all[k] = __assign(__assign({}, c1[k]), (c2[k] || {}));
            return all;
        }, {}));
    }
    function mergeConfigs(defaultConfig, configs) {
        if (!configs) {
            return defaultConfig;
        }
        return Object.keys(defaultConfig).reduce(function (all, k) {
            all[k] = mergeConfig(defaultConfig[k], configs[k]);
            return all;
        }, __assign({}, defaultConfig));
    }
    function createFastMemoizeCache(store) {
        return {
            create: function () {
                return {
                    get: function (key) {
                        return store[key];
                    },
                    set: function (key, value) {
                        store[key] = value;
                    },
                };
            },
        };
    }
    function createDefaultFormatters(cache) {
        if (cache === void 0) { cache = {
            number: {},
            dateTime: {},
            pluralRules: {},
        }; }
        return {
            getNumberFormat: memoize(function () {
                var _a;
                var args = [];
                for (var _i = 0; _i < arguments.length; _i++) {
                    args[_i] = arguments[_i];
                }
                return new ((_a = Intl.NumberFormat).bind.apply(_a, __spreadArray([void 0], args, false)))();
            }, {
                cache: createFastMemoizeCache(cache.number),
                strategy: strategies.variadic,
            }),
            getDateTimeFormat: memoize(function () {
                var _a;
                var args = [];
                for (var _i = 0; _i < arguments.length; _i++) {
                    args[_i] = arguments[_i];
                }
                return new ((_a = Intl.DateTimeFormat).bind.apply(_a, __spreadArray([void 0], args, false)))();
            }, {
                cache: createFastMemoizeCache(cache.dateTime),
                strategy: strategies.variadic,
            }),
            getPluralRules: memoize(function () {
                var _a;
                var args = [];
                for (var _i = 0; _i < arguments.length; _i++) {
                    args[_i] = arguments[_i];
                }
                return new ((_a = Intl.PluralRules).bind.apply(_a, __spreadArray([void 0], args, false)))();
            }, {
                cache: createFastMemoizeCache(cache.pluralRules),
                strategy: strategies.variadic,
            }),
        };
    }
    var IntlMessageFormat = /** @class */ (function () {
        function IntlMessageFormat(message, locales, overrideFormats, opts) {
            var _this = this;
            if (locales === void 0) { locales = IntlMessageFormat.defaultLocale; }
            this.formatterCache = {
                number: {},
                dateTime: {},
                pluralRules: {},
            };
            this.format = function (values) {
                var parts = _this.formatToParts(values);
                // Hot path for straight simple msg translations
                if (parts.length === 1) {
                    return parts[0].value;
                }
                var result = parts.reduce(function (all, part) {
                    if (!all.length ||
                        part.type !== PART_TYPE.literal ||
                        typeof all[all.length - 1] !== 'string') {
                        all.push(part.value);
                    }
                    else {
                        all[all.length - 1] += part.value;
                    }
                    return all;
                }, []);
                if (result.length <= 1) {
                    return result[0] || '';
                }
                return result;
            };
            this.formatToParts = function (values) {
                return formatToParts(_this.ast, _this.locales, _this.formatters, _this.formats, values, undefined, _this.message);
            };
            this.resolvedOptions = function () { return ({
                locale: Intl.NumberFormat.supportedLocalesOf(_this.locales)[0],
            }); };
            this.getAst = function () { return _this.ast; };
            if (typeof message === 'string') {
                this.message = message;
                if (!IntlMessageFormat.__parse) {
                    throw new TypeError('IntlMessageFormat.__parse must be set to process `message` of type `string`');
                }
                // Parse string messages into an AST.
                this.ast = IntlMessageFormat.__parse(message, {
                    ignoreTag: opts === null || opts === void 0 ? void 0 : opts.ignoreTag,
                });
            }
            else {
                this.ast = message;
            }
            if (!Array.isArray(this.ast)) {
                throw new TypeError('A message must be provided as a String or AST.');
            }
            // Creates a new object with the specified `formats` merged with the default
            // formats.
            this.formats = mergeConfigs(IntlMessageFormat.formats, overrideFormats);
            // Defined first because it's used to build the format pattern.
            this.locales = locales;
            this.formatters =
                (opts && opts.formatters) || createDefaultFormatters(this.formatterCache);
        }
        Object.defineProperty(IntlMessageFormat, "defaultLocale", {
            get: function () {
                if (!IntlMessageFormat.memoizedDefaultLocale) {
                    IntlMessageFormat.memoizedDefaultLocale =
                        new Intl.NumberFormat().resolvedOptions().locale;
                }
                return IntlMessageFormat.memoizedDefaultLocale;
            },
            enumerable: false,
            configurable: true
        });
        IntlMessageFormat.memoizedDefaultLocale = null;
        IntlMessageFormat.__parse = parse;
        // Default format options used as the prototype of the `formats` provided to the
        // constructor. These are used when constructing the internal Intl.NumberFormat
        // and Intl.DateTimeFormat instances.
        IntlMessageFormat.formats = {
            number: {
                integer: {
                    maximumFractionDigits: 0,
                },
                currency: {
                    style: 'currency',
                },
                percent: {
                    style: 'percent',
                },
            },
            date: {
                short: {
                    month: 'numeric',
                    day: 'numeric',
                    year: '2-digit',
                },
                medium: {
                    month: 'short',
                    day: 'numeric',
                    year: 'numeric',
                },
                long: {
                    month: 'long',
                    day: 'numeric',
                    year: 'numeric',
                },
                full: {
                    weekday: 'long',
                    month: 'long',
                    day: 'numeric',
                    year: 'numeric',
                },
            },
            time: {
                short: {
                    hour: 'numeric',
                    minute: 'numeric',
                },
                medium: {
                    hour: 'numeric',
                    minute: 'numeric',
                    second: 'numeric',
                },
                long: {
                    hour: 'numeric',
                    minute: 'numeric',
                    second: 'numeric',
                    timeZoneName: 'short',
                },
                full: {
                    hour: 'numeric',
                    minute: 'numeric',
                    second: 'numeric',
                    timeZoneName: 'short',
                },
            },
        };
        return IntlMessageFormat;
    }());

    /*
    Copyright (c) 2014, Yahoo! Inc. All rights reserved.
    Copyrights licensed under the New BSD License.
    See the accompanying LICENSE file for terms.
    */
    var o = IntlMessageFormat;

    const r={},i=(e,n,t)=>t?(n in r||(r[n]={}),e in r[n]||(r[n][e]=t),t):t,l=(e,n)=>{if(null==n)return;if(n in r&&e in r[n])return r[n][e];const t=E(n);for(let o=0;o<t.length;o++){const r=c(t[o],e);if(r)return i(e,n,r)}};let a;const s=writable({});function u(e){return e in a}function c(e,n){if(!u(e))return null;return function(e,n){if(null==n)return;if(n in e)return e[n];const t=n.split(".");let o=e;for(let e=0;e<t.length;e++)if("object"==typeof o){if(e>0){const n=t.slice(e,t.length).join(".");if(n in o){o=o[n];break}}o=o[t[e]];}else o=void 0;return o}(function(e){return a[e]||null}(e),n)}function m(e,...n){delete r[e],s.update((o=>(o[e]=cjs.all([o[e]||{},...n]),o)));}const f=derived([s],(([e])=>Object.keys(e)));s.subscribe((e=>a=e));const d={};function g(e){return d[e]}function w(e){return null!=e&&E(e).some((e=>{var n;return null===(n=g(e))||void 0===n?void 0:n.size}))}function h(e,n){return Promise.all(n.map((n=>(function(e,n){d[e].delete(n),0===d[e].size&&delete d[e];}(e,n),n().then((e=>e.default||e)))))).then((n=>m(e,...n)))}const p={};function b(e){if(!w(e))return e in p?p[e]:Promise.resolve();const n=function(e){return E(e).map((e=>{const n=g(e);return [e,n?[...n]:[]]})).filter((([,e])=>e.length>0))}(e);return p[e]=Promise.all(n.map((([e,n])=>h(e,n)))).then((()=>{if(w(e))return b(e);delete p[e];})),p[e]}function y(e,n){g(e)||function(e){d[e]=new Set;}(e);const t=g(e);g(e).has(n)||(u(e)||s.update((n=>(n[e]={},n))),t.add(n));}
    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation.

    Permission to use, copy, modify, and/or distribute this software for any
    purpose with or without fee is hereby granted.

    THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
    REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
    AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
    INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
    LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
    OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
    PERFORMANCE OF THIS SOFTWARE.
    ***************************************************************************** */function v(e,n){var t={};for(var o in e)Object.prototype.hasOwnProperty.call(e,o)&&n.indexOf(o)<0&&(t[o]=e[o]);if(null!=e&&"function"==typeof Object.getOwnPropertySymbols){var r=0;for(o=Object.getOwnPropertySymbols(e);r<o.length;r++)n.indexOf(o[r])<0&&Object.prototype.propertyIsEnumerable.call(e,o[r])&&(t[o[r]]=e[o[r]]);}return t}const O={fallbackLocale:null,loadingDelay:200,formats:{number:{scientific:{notation:"scientific"},engineering:{notation:"engineering"},compactLong:{notation:"compact",compactDisplay:"long"},compactShort:{notation:"compact",compactDisplay:"short"}},date:{short:{month:"numeric",day:"numeric",year:"2-digit"},medium:{month:"short",day:"numeric",year:"numeric"},long:{month:"long",day:"numeric",year:"numeric"},full:{weekday:"long",month:"long",day:"numeric",year:"numeric"}},time:{short:{hour:"numeric",minute:"numeric"},medium:{hour:"numeric",minute:"numeric",second:"numeric"},long:{hour:"numeric",minute:"numeric",second:"numeric",timeZoneName:"short"},full:{hour:"numeric",minute:"numeric",second:"numeric",timeZoneName:"short"}}},warnOnMissingMessages:!0,ignoreTag:!0};function j(){return O}function $(e){const{formats:n}=e,t=v(e,["formats"]),o=e.initialLocale||e.fallbackLocale;return Object.assign(O,t,{initialLocale:o}),n&&("number"in n&&Object.assign(O.formats.number,n.number),"date"in n&&Object.assign(O.formats.date,n.date),"time"in n&&Object.assign(O.formats.time,n.time)),M.set(o)}const k=writable(!1);let L;const T=writable(null);function x(e){return e.split("-").map(((e,n,t)=>t.slice(0,n+1).join("-"))).reverse()}function E(e,n=j().fallbackLocale){const t=x(e);return n?[...new Set([...t,...x(n)])]:t}function D(){return null!=L?L:void 0}T.subscribe((e=>{L=null!=e?e:void 0,"undefined"!=typeof window&&null!=e&&document.documentElement.setAttribute("lang",e);}));const M=Object.assign(Object.assign({},T),{set:e=>{if(e&&function(e){if(null==e)return;const n=E(e);for(let e=0;e<n.length;e++){const t=n[e];if(u(t))return t}}(e)&&w(e)){const{loadingDelay:n}=j();let t;return "undefined"!=typeof window&&null!=D()&&n?t=window.setTimeout((()=>k.set(!0)),n):k.set(!0),b(e).then((()=>{T.set(e);})).finally((()=>{clearTimeout(t),k.set(!1);}))}return T.set(e)}}),Z=e=>{const n=Object.create(null);return t=>{const o=JSON.stringify(t);return o in n?n[o]:n[o]=e(t)}},C=(e,n)=>{const{formats:t}=j();if(e in t&&n in t[e])return t[e][n];throw new Error(`[svelte-i18n] Unknown "${n}" ${e} format.`)},G=Z((e=>{var{locale:n,format:t}=e,o=v(e,["locale","format"]);if(null==n)throw new Error('[svelte-i18n] A "locale" must be set to format numbers');return t&&(o=C("number",t)),new Intl.NumberFormat(n,o)})),J=Z((e=>{var{locale:n,format:t}=e,o=v(e,["locale","format"]);if(null==n)throw new Error('[svelte-i18n] A "locale" must be set to format dates');return t?o=C("date",t):0===Object.keys(o).length&&(o=C("date","short")),new Intl.DateTimeFormat(n,o)})),U=Z((e=>{var{locale:n,format:t}=e,o=v(e,["locale","format"]);if(null==n)throw new Error('[svelte-i18n] A "locale" must be set to format time values');return t?o=C("time",t):0===Object.keys(o).length&&(o=C("time","short")),new Intl.DateTimeFormat(n,o)})),_=(e={})=>{var{locale:n=D()}=e,t=v(e,["locale"]);return G(Object.assign({locale:n},t))},q=(e={})=>{var{locale:n=D()}=e,t=v(e,["locale"]);return J(Object.assign({locale:n},t))},B=(e={})=>{var{locale:n=D()}=e,t=v(e,["locale"]);return U(Object.assign({locale:n},t))},H=Z(((e,n=D())=>new o(e,n,j().formats,{ignoreTag:j().ignoreTag}))),K=(e,n={})=>{let t=n;"object"==typeof e&&(t=e,e=t.id);const{values:o,locale:r=D(),default:i}=t;if(null==r)throw new Error("[svelte-i18n] Cannot format a message without first setting the initial locale.");let a=l(e,r);if(a){if("string"!=typeof a)return console.warn(`[svelte-i18n] Message with id "${e}" must be of type "string", found: "${typeof a}". Gettin its value through the "$format" method is deprecated; use the "json" method instead.`),a}else j().warnOnMissingMessages&&console.warn(`[svelte-i18n] The message "${e}" was not found in "${E(r).join('", "')}".${w(D())?"\n\nNote: there are at least one loader still registered to this locale that wasn't executed.":""}`),a=null!=i?i:e;if(!o)return a;let s=a;try{s=H(a,r).format(o);}catch(n){console.warn(`[svelte-i18n] Message "${e}" has syntax error:`,n.message);}return s},Q=(e,n)=>B(n).format(e),R=(e,n)=>q(n).format(e),V=(e,n)=>_(n).format(e),W=(e,n=D())=>l(e,n),X=derived([M,s],(()=>K));derived([M],(()=>Q));derived([M],(()=>R));derived([M],(()=>V));derived([M,s],(()=>W));

    const forEach = (selector, callback) => {
        Array.from(document.querySelectorAll(selector)).forEach(element => {
            callback(element);
        });
    };
    function ra(array) {
        return array[Math.floor(Math.random() * array.length)];
    }
    // return random value from weighted array
    function rw(object, save = true) {
        if (object.array) {
            return ra(object.array);
        }
        const array = [];
        for (const key in object) {
            for (let i = 0; i < object[key]; i++) {
                array.push(key);
            }
        }
        if (save) {
            Object.defineProperty(object, "array", {
                enumerable: false,
                configurable: true,
                writable: false,
                value: array
            });
        }
        return ra(array);
    }
    function P(probability) {
        return Math.random() < probability;
    }
    function camelize(str) {
        return str
            .toLowerCase()
            .replace(/\.[^/.]+$/, "") // remove extension
            .replace(/[()]/g, "") // remove parentheses
            .replace(/[^a-zA-Z0-9]+(.)/g, (m, c) => c.toUpperCase())
            .replace(/^[0-9]/, "_"); // first char should not be a number
    }
    const capitalize = (str) => str.charAt(0).toUpperCase() + str.slice(1);
    function link(url, text) {
        return `<a href="${url}" target="_blank">${text}</a>`;
    }
    function openURL(url) {
        return window.open(url, "_blank");
    }
    const minmax = (value, min, max) => {
        return Math.max(Math.min(Math.round(value), max), min);
    };
    const fetcher = (url) => () => {
        return fetch(url).then(result => result.json());
    };

    const shields = {
      types: {basic: 10, regional: 2, historical: 1, specific: 1, banner: 1, simple: 2, fantasy: 1, middleEarth: 0},
      basic: {heater: 12, spanish: 6, french: 1},
      regional: {horsehead: 1, horsehead2: 1, polish: 1, hessen: 1, swiss: 1},
      historical: {boeotian: 1, roman: 2, kite: 1, oldFrench: 5, renaissance: 2, baroque: 2},
      specific: {targe: 1, targe2: 0, pavise: 5, wedged: 10},
      banner: {flag: 1, pennon: 0, guidon: 0, banner: 0, dovetail: 1, gonfalon: 5, pennant: 0},
      simple: {round: 12, oval: 6, vesicaPiscis: 1, square: 1, diamond: 2, no: 0},
      middleEarth: {noldor: 1, gondor: 1, easterling: 1, erebor: 1, ironHills: 1, urukHai: 1, moriaOrc: 1},
      fantasy: {fantasy1: 2, fantasy2: 2, fantasy3: 1, fantasy4: 1, fantasy5: 3}
    };

    const shieldTypes = ["basic", "regional", "historical", "specific", "banner", "simple", "middleEarth", "fantasy"];

    const shieldPaths = {
      heater: "m25,25 h150 v50 a150,150,0,0,1,-75,125 a150,150,0,0,1,-75,-125 z",
      spanish: "m25,25 h150 v100 a75,75,0,0,1,-150,0 z",
      french: "m 25,25 h 150 v 139.15 c 0,41.745 -66,18.15 -75,36.3 -9,-18.15 -75,5.445 -75,-36.3 v 0 z",
      horsehead:
        "m 20,40 c 0,60 40,80 40,100 0,10 -4,15 -0.35,30 C 65,185.7 81,200 100,200 c 19.1,0 35.3,-14.6 40.5,-30.4 C 144.2,155 140,150 140,140 140,120 180,100 180,40 142.72,40 150,15 100,15 55,15 55,40 20,40 Z",
      horsehead2: "M60 20c-5 20-10 35-35 55 25 35 35 65 30 100 20 0 35 10 45 26 10-16 30-26 45-26-5-35 5-65 30-100a87 87 0 01-35-55c-25 3-55 3-80 0z",
      polish:
        "m 90.3,6.3 c -12.7,0 -20.7,10.9 -40.5,14 0,11.8 -4.9,23.5 -11.4,31.1 0,0 12.7,6 12.7,19.3 C 51.1,90.8 30,90.8 30,90.8 c 0,0 -3.6,7.4 -3.6,22.4 0,34.3 23.1,60.2 40.7,68.2 17.6,8 27.7,11.4 32.9,18.6 5.2,-7.3 15.3,-10.7 32.8,-18.6 17.6,-8 40.7,-33.9 40.7,-68.2 0,-15 -3.6,-22.4 -3.6,-22.4 0,0 -21.1,0 -21.1,-20.1 0,-13.3 12.7,-19.3 12.7,-19.3 C 155.1,43.7 150.2,32.1 150.2,20.3 130.4,17.2 122.5,6.3 109.7,6.3 102.5,6.3 100,10 100,10 c 0,0 -2.5,-3.7 -9.7,-3.7 z",
      hessen: "M170 20c4 5 8 13 15 20 0 0-10 0-10 15 0 100-15 140-75 145-65-5-75-45-75-145 0-15-10-15-10-15l15-20c0 15 10-5 70-5s70 20 70 5z",
      swiss:
        "m 25,20 c -0.1,0 25.2,8.5 37.6,8.5 C 75.1,28.5 99.1,20 100,20 c 0.6,0 24.9,8.5 37.3,8.5 C 149.8,28.5 174.4,20 175,20 l -0.3,22.6 C 173.2,160.3 100,200 100,200 100,200 26.5,160.9 25.2,42.6 Z",
      boeotian:
        "M150 115c-5 0-10-5-10-15s5-15 10-15c10 0 7 10 15 10 10 0 0-30 0-30-10-25-30-55-65-55S45 40 35 65c0 0-10 30 0 30 8 0 5-10 15-10 5 0 10 5 10 15s-5 15-10 15c-10 0-7-10-15-10-10 0 0 30 0 30 10 25 30 55 65 55s55-30 65-55c0 0 10-30 0-30-8 0-5 10-15 10z",
      roman: "m 160,170 c -40,20 -80,20 -120,0 V 30 C 80,10 120,10 160,30 Z",
      kite: "m 53.3,46.4 c 0,4.1 1,12.3 1,12.3 7.1,55.7 45.7,141.3 45.7,141.3 0,0 38.6,-85.6 45.7,-141.2 0,0 1,-8.1 1,-12.3 C 146.7,20.9 125.8,0.1 100,0.1 74.2,0.1 53.3,20.9 53.3,46.4 Z",
      oldFrench: "m25,25 h150 v75 a100,100,0,0,1,-75,100 a100,100,0,0,1,-75,-100 z",
      renaissance:
        "M 25,33.9 C 33.4,50.3 36.2,72.9 36.2,81.7 36.2,109.9 25,122.6 25,141 c 0,29.4 24.9,44.1 40.2,47.7 15.3,3.7 29.3,0 34.8,11.3 5.5,-11.3 19.6,-7.6 34.8,-11.3 C 150.1,185 175,170.3 175,141 c 0,-18.4 -11.2,-31.1 -11.2,-59.3 0,-8.8 2.8,-31.3 11.2,-47.7 L 155.7,14.4 C 138.2,21.8 119.3,25.7 100,25.7 c -19.3,0 -38.2,-3.9 -55.7,-11.3 z",
      baroque:
        "m 100,25 c 18,0 50,2 75,14 v 37 l -2.7,3.2 c -4.9,5.4 -6.6,9.6 -6.7,16.2 0,6.5 2,11.6 6.9,17.2 l 2.8,3.1 v 10.2 c 0,17.7 -2.2,27.7 -7.8,35.9 -5,7.3 -11.7,11.3 -32.3,19.4 -12.6,5 -20.2,8.8 -28.6,14.5 C 103.3,198 100,200 100,200 c 0,0 -2.8,-2.3 -6.4,-4.7 C 85.6,189.8 78,186 65,180.9 32.4,168.1 26.9,160.9 25.8,129.3 L 25,116 l 3.3,-3.3 c 4.8,-5.2 7,-10.7 7,-17.3 0,-6.8 -1.8,-11.1 -6.5,-16.1 L 25,76 V 39 C 50,27 82,25 100,25 Z",
      targe:
        "m 20,35 c 15,0 115,-60 155,-10 -5,10 -15,15 -10,50 5,45 10,70 -10,90 C 125,195 75,195 50,175 25,150 30,130 35,85 50,95 65,85 65,70 65,50 50,45 40,50 30,55 27,65 30,70 23,73 20,70 14,70 11,60 20,45 20,35 Z",
      targe2:
        "m 84,32.2 c 6.2,-1 19.5,-31.4 94.1,-20.2 -30.57,33.64 -21.66,67.37 -11.2,95 20.2,69.5 -41.17549,84.7 -66.88,84.7 C 74.32,191.7071 8.38,168.95 32,105.9 36.88,92.88 31,89 31,82.6 35.15,82.262199 56.79,86.17 56.5,69.8 56.20,52.74 42.2,47.9 25.9,55.2 25.9,51.4 39.8,6.7 84,32.2 Z",
      pavise: "M95 7L39.9 37.3a10 10 0 00-5.1 9.5L46 180c.4 5.2 3.7 10 9 10h90c5.3 0 9.6-4.8 10-10l10.6-133.2a10 10 0 00-5-9.5L105 7c-4.2-2.3-6.2-2.3-10 0z",
      wedged: "m 51.2,19 h 96.4 c 3.1,12.7 10.7,20.9 26.5,20.8 C 175.7,94.5 165.3,144.3 100,200 43.5,154.2 22.8,102.8 25.1,39.7 37,38.9 47.1,34.7 51.2,19 Z",
      round: "m 185,100 a 85,85 0 0 1 -85,85 85,85 0 0 1 -85,-85 85,85 0 0 1 85,-85 85,85 0 0 1 85,85",
      oval: "m 32.3,99.5 a 67.7,93.7 0 1 1 0,1.3 z",
      vesicaPiscis: "M 100,0 C 63.9,20.4 41,58.5 41,100 c 0,41.5 22.9,79.6 59,100 36.1,-20.4 59,-58.5 59,-100 C 159,58.5 136.1,20.4 100,0 Z",
      square: "M 25,25 H 175 V 175 H 25 Z",
      diamond: "M 25,100 100,200 175,100 100,0 Z",
      no: "m0,0 h200 v200 h-200 z",
      flag: "M 10,40 h180 v120 h-180 Z",
      pennon: "M 10,40 l190,60 -190,60 Z",
      guidon: "M 10,40 h190 l-65,60 65,60 h-190 Z",
      banner: "m 25,25 v 170 l 25,-40 25,40 25,-40 25,40 25,-40 25,40 V 25 Z",
      dovetail: "m 25,25 v 175 l 75,-40 75,40 V 25 Z",
      gonfalon: "m 25,25 v 125 l 75,50 75,-50 V 25 Z",
      pennant: "M 25,15 100,200 175,15 Z",
      fantasy1: "M 100,5 C 85,30 40,35 15,40 c 40,35 20,90 40,115 15,25 40,30 45,45 5,-15 30,-20 45,-45 20,-25 0,-80 40,-115 C 160,35 115,30 100,5 Z",
      fantasy2:
        "m 152,21 c 0,0 -27,14 -52,-4 C 75,35 48,21 48,21 50,45 30,55 30,75 60,75 60,115 32,120 c 3,40 53,50 68,80 15,-30 65,-40 68,-80 -28,-5 -28,-45 2,-45 C 170,55 150,45 152,21 Z",
      fantasy3: "M 167,67 C 165,0 35,0 33,67 c 32,-7 27,53 -3,43 -5,45 60,65 70,90 10,-25 75,-47.51058 70,-90 -30,10 -35,-50 -3,-43 z",
      fantasy4: "M100 9C55 48 27 27 13 39c23 50 3 119 49 150 14 9 28 11 38 11s27-4 38-11c55-39 24-108 49-150-14-12-45 7-87-30z",
      fantasy5: "M 100,0 C 75,25 30,25 30,25 c 0,69 20,145 70,175 50,-30 71,-106 70,-175 0,0 -45,0 -70,-25 z",
      noldor: "m 55,75 h 2 c 3,-25 38,-10 3,20 15,50 30,75 40,105 10,-30 25,-55 40,-105 -35,-30 0,-45 3,-20 h 2 C 150,30 110,20 100,0 90,20 50,30 55,75 Z",
      gondor: "m 100,200 c 15,-15 38,-35 45,-60 h 5 V 30 h -5 C 133,10 67,10 55,30 h -5 v 110 h 5 c 7,25 30,45 45,60 z",
      easterling: "M 160,185 C 120,170 80,170 40,185 V 15 c 40,15 80,15 120,0 z",
      erebor: "M25 135 V60 l22-13 16-37 h75 l15 37 22 13 v75l-22 18-16 37 H63l-16-37z",
      ironHills: "m 30,25 60,-10 10,10 10,-10 60,10 -5,125 -65,50 -65,-50 z",
      urukHai: "M 30,60 C 40,60 60,50 60,20 l -5,-3 45,-17 75,40 -5,5 -35,155 -5,-35 H 70 v 35 z",
      moriaOrc:
        "M45 35c5 3 7 10 13 9h19c4-2 7-4 9-9 6 1 9 9 16 11 7-2 14 0 21 0 6-3 6-10 10-15 2-5 1-10-2-15-2-4-5-14-4-16 3 6 7 11 12 14 7 3 3 12 7 16 3 6 4 12 9 18 2 4 6 8 5 14 0 6-1 12 3 18-3 6-2 13-1 20 1 6-2 12-1 18 0 6-3 13 0 18 8 4 0 8-5 7-4 3-9 3-13 9-5 5-5 13-8 19 0 6 0 15-7 16-1 6-7 6-10 12-1-6 0-6-2-9l2-19c2-4 5-12-3-12-4-5-11-5-15 1l-13-18c-3-4-2 9-3 12 2 2-4-6-7-5-8-2-8 7-11 11-2 4-5 10-8 9 3-10 3-16 1-23-1-4 2-9-4-11 0-6 1-13-2-19-4-2-9-6-13-7V91c4-7-5-13 0-19-3-7 2-11 2-18-1-6 1-12 3-17v-1z"
    };

    const shieldBox = {
      heater: "0 10 200 200",
      spanish: "0 10 200 200",
      french: "0 10 200 200",

      horsehead: "0 10 200 200",
      horsehead2: "0 10 200 200",
      polish: "0 0 200 200",
      hessen: "0 5 200 200",
      swiss: "0 10 200 200",

      boeotian: "0 0 200 200",
      roman: "0 0 200 200",
      kite: "0 0 200 200",
      oldFrench: "0 10 200 200",
      renaissance: "0 5 200 200",
      baroque: "0 10 200 200",

      targe: "0 0 200 200",
      targe2: "0 0 200 200",
      pavise: "0 0 200 200",
      wedged: "0 10 200 200",

      flag: "0 0 200 200",
      pennon: "2.5 0 200 200",
      guidon: "2.5 0 200 200",
      banner: "0 10 200 200",
      dovetail: "0 10 200 200",
      gonfalon: "0 10 200 200",
      pennant: "0 0 200 200",

      round: "0 0 200 200",
      oval: "0 0 200 200",
      vesicaPiscis: "0 0 200 200",
      square: "0 0 200 200",
      diamond: "0 0 200 200",
      no: "0 0 200 200",

      fantasy1: "0 0 200 200",
      fantasy2: "0 5 200 200",
      fantasy3: "0 5 200 200",
      fantasy4: "0 5 200 200",
      fantasy5: "0 0 200 200",

      noldor: "0 0 200 200",
      gondor: "0 5 200 200",
      easterling: "0 0 200 200",
      erebor: "0 0 200 200",
      ironHills: "0 5 200 200",
      urukHai: "0 0 200 200",
      moriaOrc: "0 0 200 200"
    };

    // size modifier applied for charges, default is 1
    const shieldSize = {
      horsehead: 0.9,
      horsehead2: 0.9,
      polish: 0.85,
      swiss: 0.95,
      boeotian: 0.75,
      roman: 0.95,
      kite: 0.65,
      targe2: 0.9,
      pavise: 0.9,
      wedged: 0.95,
      flag: 0.7,
      pennon: 0.5,
      guidon: 0.65,
      banner: 0.8,
      dovetail: 0.8,
      pennant: 0.6,
      oval: 0.95,
      vesicaPiscis: 0.8,
      diamond: 0.8,
      no: 1.2,
      fantasy1: 0.8,
      fantasy2: 0.7,
      fantasy3: 0.7,
      fantasy5: 0.9,
      noldor: 0.5,
      gondor: 0.75,
      easterling: 0.8,
      erebor: 0.9,
      urukHai: 0.8,
      moriaOrc: 0.7
    };

    const shieldPositions = {
      // shield-specific position: [x, y] (relative to center)
      heater: {
        a: [-43.75, -50],
        b: [0, -50],
        c: [43.75, -50],
        d: [-43.75, 0],
        e: [0, 0],
        f: [43.75, 0],
        g: [-32.25, 37.5],
        h: [0, 50],
        i: [32.25, 37.5],
        y: [-50, -50],
        z: [0, 62.5],
        j: [-37.5, -37.5],
        k: [0, -37.5],
        l: [37.5, -37.5],
        m: [-30, 30],
        n: [0, 42.5],
        o: [30, 30],
        p: [-37.5, 0],
        q: [37.5, 0],
        A: [-66.2, -66.6],
        B: [-22, -66.6],
        C: [22, -66.6],
        D: [66.2, -66.6],
        K: [-66.2, -20],
        E: [66.2, -20],
        J: [-55.5, 26],
        F: [55.5, 26],
        I: [-33, 62],
        G: [33, 62],
        H: [0, 89.5]
      },
      spanish: {
        a: [-43.75, -50],
        b: [0, -50],
        c: [43.75, -50],
        d: [-43.75, 0],
        e: [0, 0],
        f: [43.75, 0],
        g: [-43.75, 50],
        h: [0, 50],
        i: [43.75, 50],
        y: [-50, -50],
        z: [0, 50],
        j: [-37.5, -37.5],
        k: [0, -37.5],
        l: [37.5, -37.5],
        m: [-37.5, 37.5],
        n: [0, 37.5],
        o: [37.5, 37.5],
        p: [-37.5, 0],
        q: [37.5, 0],
        A: [-66.2, -66.6],
        B: [-22, -66.6],
        C: [22, -66.6],
        D: [66.2, -66.6],
        K: [-66.4, -20],
        E: [66.4, -20],
        J: [-66.4, 26],
        F: [66.4, 26],
        I: [-49, 70],
        G: [49, 70],
        H: [0, 92]
      },
      french: {
        a: [-43.75, -50],
        b: [0, -50],
        c: [43.75, -50],
        d: [-43.75, 0],
        e: [0, 0],
        f: [43.75, 0],
        g: [-43.75, 50],
        h: [0, 50],
        i: [43.75, 50],
        y: [-50, -50],
        z: [0, 65],
        j: [-37.5, -37.5],
        k: [0, -37.5],
        l: [37.5, -37.5],
        m: [-37.5, 37.5],
        n: [0, 37.5],
        o: [37.5, 37.5],
        p: [-37.5, 0],
        q: [37.5, 0],
        A: [-66.2, -66.6],
        B: [-22, -66.6],
        C: [22, -66.6],
        D: [66.2, -66.6],
        K: [-66.4, -20],
        E: [66.4, -20],
        J: [-66.4, 26],
        F: [66.4, 26],
        I: [-65.4, 70],
        G: [65.4, 70],
        H: [0, 89]
      },
      horsehead: {
        a: [-43.75, -47.5],
        b: [0, -50],
        c: [43.75, -47.5],
        d: [-35, 0],
        e: [0, 0],
        f: [35, 0],
        h: [0, 50],
        y: [-50, -50],
        z: [0, 55],
        j: [-35, -35],
        k: [0, -40],
        l: [35, -35],
        m: [-30, 30],
        n: [0, 40],
        o: [30, 30],
        p: [-27.5, 0],
        q: [27.5, 0],
        A: [-71, -52],
        B: [-24, -73],
        C: [24, -73],
        D: [71, -52],
        K: [-62, -16],
        E: [62, -16],
        J: [-39, 20],
        F: [39, 20],
        I: [-33.5, 60],
        G: [33.5, 60],
        H: [0, 91.5]
      },
      horsehead2: {
        a: [-37.5, -47.5],
        b: [0, -50],
        c: [37.5, -47.5],
        d: [-35, 0],
        e: [0, 0],
        f: [35, 0],
        g: [-35, 47.5],
        h: [0, 50],
        i: [35, 47.5],
        y: [-50, -50],
        z: [0, 55],
        j: [-30, -30],
        k: [0, -40],
        l: [30, -30],
        m: [-30, 30],
        n: [0, 40],
        o: [30, 30],
        p: [-27.5, 0],
        q: [27.5, 0],
        A: [-49, -39],
        B: [-22, -70],
        C: [22, -70],
        D: [49, -39],
        K: [-51, -2],
        E: [51, -2],
        J: [-38.5, 31],
        F: [38.5, 31],
        I: [-35, 67],
        G: [35, 67],
        H: [0, 85]
      },
      polish: {
        a: [-35, -50],
        b: [0, -50],
        c: [35, -50],
        d: [-40, 0],
        e: [0, 0],
        f: [40, 0],
        g: [-37.5, 50],
        h: [0, 50],
        i: [37.5, 50],
        y: [-50, -50],
        z: [0, 65],
        j: [-27.5, -27.5],
        k: [0, -45],
        l: [27.5, -27.5],
        m: [-27.5, 27.5],
        n: [0, 45],
        o: [27.5, 27.5],
        p: [-32.5, 0],
        q: [32.5, 0],
        A: [-48, -52],
        B: [-23, -80],
        C: [23, -80],
        D: [48, -52],
        K: [-47, -10],
        E: [47, -10],
        J: [-62, 32],
        F: [62, 32],
        I: [-37, 68],
        G: [37, 68],
        H: [0, 86]
      },
      hessen: {
        a: [-43.75, -50],
        b: [0, -50],
        c: [43.75, -50],
        d: [-43.75, 0],
        e: [0, 0],
        f: [43.75, 0],
        g: [-43.75, 50],
        h: [0, 50],
        i: [43.75, 50],
        y: [-50, -50],
        z: [0, 52.5],
        j: [-40, -40],
        k: [0, -40],
        l: [40, -40],
        m: [-40, 40],
        n: [0, 40],
        o: [40, 40],
        p: [-40, 0],
        q: [40, 0],
        A: [-69, -64],
        B: [-22, -76],
        C: [22, -76],
        D: [69, -64],
        K: [-66.4, -20],
        E: [66.4, -20],
        J: [-62, 26],
        F: [62, 26],
        I: [-46, 70],
        G: [46, 70],
        H: [0, 91.5]
      },
      swiss: {
        a: [-43.75, -50],
        b: [0, -50],
        c: [43.75, -50],
        d: [-43.75, 0],
        e: [0, 0],
        f: [43.75, 0],
        g: [-32, 37.5],
        h: [0, 50],
        i: [32, 37.5],
        y: [-50, -50],
        z: [0, 62.5],
        j: [-37.5, -37.5],
        k: [0, -37.5],
        l: [37.5, -37.5],
        m: [-32, 32.5],
        n: [0, 42.5],
        o: [32, 32.5],
        p: [-37.5, 0],
        q: [37.5, 0],
        A: [-66.2, -66.6],
        B: [-22, -66],
        C: [22, -66],
        D: [66.2, -66.6],
        K: [-63, -20],
        E: [63, -20],
        J: [-50, 26],
        F: [50, 26],
        I: [-29, 62],
        G: [29, 62],
        H: [0, 89.5]
      },
      boeotian: {
        a: [-37.5, -47.5],
        b: [0, -47.5],
        c: [37.5, -47.5],
        d: [-25, 0],
        e: [0, 0],
        f: [25, 0],
        g: [-37.5, 47.5],
        h: [0, 47.5],
        i: [37.5, 47.5],
        y: [-48, -48],
        z: [0, 60],
        j: [-32.5, -37.5],
        k: [0, -45],
        l: [32.5, -37.5],
        m: [-32.5, 37.5],
        n: [0, 45],
        o: [32.5, 37.5],
        p: [-20, 0],
        q: [20, 0],
        A: [-45, -55],
        B: [-20, -77],
        C: [20, -77],
        D: [45, -55],
        K: [-59, -25],
        E: [59, -25],
        J: [-58, 27],
        F: [58, 27],
        I: [-39, 63],
        G: [39, 63],
        H: [0, 81]
      },
      roman: {
        a: [-40, -52.5],
        b: [0, -52.5],
        c: [40, -52.5],
        d: [-40, 0],
        e: [0, 0],
        f: [40, 0],
        g: [-40, 52.5],
        h: [0, 52.5],
        i: [40, 52.5],
        y: [-42.5, -52.5],
        z: [0, 65],
        j: [-30, -37.5],
        k: [0, -37.5],
        l: [30, -37.5],
        m: [-30, 37.5],
        n: [0, 37.5],
        o: [30, 37.5],
        p: [-30, 0],
        q: [30, 0],
        A: [-51.5, -65],
        B: [-17, -75],
        C: [17, -75],
        D: [51.5, -65],
        K: [-51.5, -21],
        E: [51.5, -21],
        J: [-51.5, 21],
        F: [51.5, 21],
        I: [-51.5, 65],
        G: [51.5, 65],
        H: [-17, 75],
        L: [17, 75]
      },
      kite: {
        b: [0, -65],
        e: [0, -15],
        h: [0, 35],
        z: [0, 35],
        k: [0, -50],
        n: [0, 20],
        p: [-20, -15],
        q: [20, -15],
        A: [-38, -52],
        B: [-29, -78],
        C: [29, -78],
        D: [38, -52],
        K: [-33, -20],
        E: [33, -20],
        J: [-25, 11],
        F: [25, 11],
        I: [-15, 42],
        G: [15, 42],
        H: [0, 73],
        L: [0, -91]
      },
      oldFrench: {
        a: [-43.75, -50],
        b: [0, -50],
        c: [43.75, -50],
        d: [-43.75, 0],
        e: [0, 0],
        f: [43.75, 0],
        g: [-37.5, 50],
        h: [0, 50],
        i: [37.5, 50],
        y: [-50, -50],
        z: [0, 62.5],
        j: [-37.5, -37.5],
        k: [0, -37.5],
        l: [37.5, -37.5],
        m: [-37.5, 37.5],
        n: [0, 45],
        o: [37.5, 37.5],
        p: [-37.5, 0],
        q: [37.5, 0],
        A: [-66.2, -66.6],
        B: [-22, -66.6],
        C: [22, -66.6],
        D: [66.2, -66.6],
        K: [-66.2, -20],
        E: [66.2, -20],
        J: [-64, 26],
        F: [64, 26],
        I: [-45, 62],
        G: [45, 62],
        H: [0, 91]
      },
      renaissance: {
        a: [-43.75, -50],
        b: [0, -50],
        c: [43.75, -50],
        d: [-41.5, 0],
        e: [0, 0],
        f: [41.5, 0],
        g: [-43.75, 50],
        h: [0, 50],
        i: [43.75, 50],
        y: [-50, -50],
        z: [0, 62.5],
        j: [-37.5, -37.5],
        k: [0, -37.5],
        l: [37.5, -37.5],
        m: [-37.5, 37.5],
        n: [0, 37.5],
        o: [37.5, 37.5],
        p: [-37.5, 0],
        q: [37.5, 0],
        A: [-61, -55],
        B: [-23, -67],
        C: [23, -67],
        D: [61, -55],
        K: [-55, -11],
        E: [55, -11],
        J: [-65, 31],
        F: [65, 31],
        I: [-45, 76],
        G: [45, 76],
        H: [0, 87]
      },
      baroque: {
        a: [-43.75, -45],
        b: [0, -45],
        c: [43.75, -45],
        d: [-43.75, 0],
        e: [0, 0],
        f: [43.75, 0],
        g: [-43.75, 50],
        h: [0, 50],
        i: [43.75, 50],
        y: [-50, -50],
        z: [0, 60],
        j: [-37.5, -37.5],
        k: [0, -37.5],
        l: [37.5, -37.5],
        m: [-37.5, 37.5],
        n: [0, 37.5],
        o: [37.5, 37.5],
        p: [-37.5, 0],
        q: [37.5, 0],
        A: [-65, -54.5],
        B: [-22, -65],
        C: [22, -65],
        D: [65, -54.5],
        K: [-58.5, -15],
        E: [58.5, -15],
        J: [-65, 31],
        F: [66, 31],
        I: [-35, 73],
        G: [35, 73],
        H: [0, 89]
      },
      targe: {
        a: [-43.75, -50],
        b: [0, -50],
        c: [43.75, -50],
        d: [-43.75, 0],
        e: [0, 0],
        f: [43.75, 0],
        g: [-43.75, 50],
        h: [0, 50],
        i: [43.75, 50],
        y: [-50, -50],
        z: [0, 50],
        j: [-40, -40],
        k: [0, -40],
        l: [40, -40],
        m: [-40, 40],
        n: [0, 40],
        o: [40, 40],
        p: [-32.5, 0],
        q: [32.5, 0],
        A: [-66.2, -60],
        B: [-22, -77],
        C: [22, -86],
        D: [60, -66.6],
        K: [-28, -20],
        E: [57, -20],
        J: [-61, 26],
        F: [61, 26],
        I: [-49, 63],
        G: [49, 59],
        H: [0, 80]
      },
      targe2: {
        a: [-43.75, -50],
        b: [0, -50],
        c: [43.75, -50],
        d: [-40, 0],
        e: [0, 0],
        f: [40, 0],
        g: [-43.75, 50],
        h: [0, 50],
        i: [43.75, 50],
        y: [-50, -50],
        z: [0, 60],
        j: [-37.5, -37.5],
        k: [0, -37.5],
        l: [37.5, -37.5],
        m: [-37.5, 37.5],
        n: [0, 37.5],
        o: [37.5, 37.5],
        p: [-32.5, 0],
        q: [32.5, 0],
        A: [-55, -59],
        B: [-15, -59],
        C: [24, -79],
        D: [51, -58],
        K: [-40, -14],
        E: [51, -14],
        J: [-64, 26],
        F: [62, 26],
        I: [-46, 66],
        G: [48, 67],
        H: [0, 83]
      },
      pavise: {
        a: [-40, -52.5],
        b: [0, -52.5],
        c: [40, -52.5],
        d: [-40, 0],
        e: [0, 0],
        f: [40, 0],
        g: [-40, 52.5],
        h: [0, 52.5],
        i: [40, 52.5],
        y: [-42.5, -52.5],
        z: [0, 60],
        j: [-30, -35],
        k: [0, -37.5],
        l: [30, -35],
        m: [-30, 35],
        n: [0, 37.5],
        o: [30, 35],
        p: [-30, 0],
        q: [30, 0],
        A: [-57, -55],
        B: [-22, -74],
        C: [22, -74],
        D: [57, -55],
        K: [-54, -11],
        E: [54, -11],
        J: [-50, 36],
        F: [50, 36],
        I: [-46, 81],
        G: [46, 81],
        H: [0, 81]
      },
      wedged: {
        a: [-43.75, -50],
        b: [0, -50],
        c: [43.75, -50],
        d: [-43.75, 0],
        e: [0, 0],
        f: [43.75, 0],
        g: [-32.25, 37.5],
        h: [0, 50],
        i: [32.25, 37.5],
        y: [-50, -50],
        z: [0, 62.5],
        j: [-37.5, -37.5],
        k: [0, -37.5],
        l: [37.5, -37.5],
        m: [-32.5, 32.5],
        n: [0, 42.5],
        o: [32.5, 32.5],
        p: [-37.5, 0],
        q: [37.5, 0],
        A: [-66, -53],
        B: [-22, -72.5],
        C: [22, -72.5],
        D: [66, -53],
        K: [-62.6, -13],
        E: [62.6, -13],
        J: [-50, 26],
        F: [50, 26],
        I: [-27, 62],
        G: [27, 62],
        H: [0, 87]
      },
      flag: {
        a: [-60, -40],
        b: [0, -40],
        c: [60, -40],
        d: [-60, 0],
        e: [0, 0],
        f: [60, 0],
        g: [-60, 40],
        h: [0, 40],
        i: [60, 40],
        y: [-60, -42.5],
        z: [0, 40],
        j: [-45, -30],
        k: [0, -30],
        l: [45, -30],
        m: [-45, 30],
        n: [0, 30],
        o: [45, 30],
        p: [-45, 0],
        q: [45, 0],
        A: [-81, -51],
        B: [-27, -51],
        C: [27, -51],
        D: [81, -51],
        K: [-81, -17],
        E: [81, -17],
        J: [-81, 17],
        F: [81, 17],
        I: [-81, 51],
        G: [81, 51],
        H: [-27, 51],
        L: [27, 51]
      },
      pennon: {
        a: [-75, -40],
        d: [-75, 0],
        e: [-25, 0],
        f: [25, 0],
        g: [-75, 40],
        y: [-70, -42.5],
        j: [-60, -30],
        m: [-60, 30],
        p: [-60, 0],
        q: [5, 0],
        A: [-81, -48],
        B: [-43, -36],
        C: [-4.5, -24],
        D: [33, -12],
        E: [72, 0],
        F: [33, 12],
        G: [-4.5, 24],
        H: [-43, 36],
        I: [-81, 48],
        J: [-81, 17],
        K: [-81, -17]
      },
      guidon: {
        a: [-60, -40],
        b: [0, -40],
        c: [60, -40],
        d: [-60, 0],
        e: [0, 0],
        g: [-60, 40],
        h: [0, 40],
        i: [60, 40],
        y: [-60, -42.5],
        z: [0, 40],
        j: [-45, -30],
        k: [0, -30],
        l: [45, -30],
        m: [-45, 30],
        n: [0, 30],
        o: [45, 30],
        p: [-45, 0],
        A: [-81, -51],
        B: [-27, -51],
        C: [27, -51],
        D: [78, -51],
        K: [-81, -17],
        E: [40.5, -17],
        J: [-81, 17],
        F: [40.5, 17],
        I: [-81, 51],
        G: [78, 51],
        H: [-27, 51],
        L: [27, 51]
      },
      banner: {
        a: [-50, -50],
        b: [0, -50],
        c: [50, -50],
        d: [-50, 0],
        e: [0, 0],
        f: [50, 0],
        g: [-50, 40],
        h: [0, 40],
        i: [50, 40],
        y: [-50, -50],
        z: [0, 40],
        j: [-37.5, -37.5],
        k: [0, -37.5],
        l: [37.5, -37.5],
        m: [-37.5, 27.5],
        n: [0, 27.5],
        o: [37.5, 27.5],
        p: [-37.5, 0],
        q: [37.5, 0],
        A: [-66.5, -66.5],
        B: [-22, -66.5],
        C: [22, -66.5],
        D: [66.5, -66.5],
        K: [-66.5, -20],
        E: [66.5, -20],
        J: [-66.5, 26],
        F: [66.5, 26],
        I: [-66.5, 66.5],
        G: [66.5, 66.5],
        H: [-25, 75],
        L: [25, 75]
      },
      dovetail: {
        a: [-49.75, -50],
        b: [0, -50],
        c: [49.75, -50],
        d: [-49.75, 0],
        e: [0, 0],
        f: [49.75, 0],
        g: [-49.75, 50],
        i: [49.75, 50],
        y: [-50, -50],
        z: [0, 40],
        j: [-37.5, -37.5],
        k: [0, -37.5],
        l: [37.5, -37.5],
        m: [-37.5, 37.5],
        n: [0, 32.5],
        o: [37.5, 37.5],
        p: [-37.5, 0],
        q: [37.5, 0],
        A: [-66.5, -66.5],
        B: [-22, -66.5],
        C: [22, -66.5],
        D: [66.5, -66.5],
        K: [-66.5, -16.5],
        E: [66.5, -16.5],
        J: [-66.5, 34.5],
        F: [66.5, 34.5],
        I: [-66.5, 84.5],
        G: [66.5, 84.5],
        H: [-25, 64],
        L: [25, 64]
      },
      gonfalon: {
        a: [-49.75, -50],
        b: [0, -50],
        c: [49.75, -50],
        d: [-49.75, 0],
        e: [0, 0],
        f: [49.75, 0],
        g: [-49.75, 50],
        h: [0, 50],
        i: [49.75, 50],
        y: [-50, -50],
        z: [0, 50],
        j: [-37.5, -37.5],
        k: [0, -37.5],
        l: [37.5, -37.5],
        m: [-37.5, 37.5],
        n: [0, 37.5],
        o: [37.5, 37.5],
        p: [-37.5, 0],
        q: [37.5, 0],
        A: [-66.5, -66.5],
        B: [-22, -66.5],
        C: [22, -66.5],
        D: [66.5, -66.5],
        K: [-66.5, -20],
        E: [66.5, -20],
        J: [-66.5, 26],
        F: [66.5, 26],
        I: [-40, 63],
        G: [40, 63],
        H: [0, 88]
      },
      pennant: {
        a: [-45, -50],
        b: [0, -50],
        c: [45, -50],
        e: [0, 0],
        h: [0, 50],
        y: [-50, -50],
        z: [0, 50],
        j: [-32.5, -37.5],
        k: [0, -37.5],
        l: [32.5, -37.5],
        n: [0, 37.5],
        A: [-60, -76],
        B: [-22, -76],
        C: [22, -76],
        D: [60, -76],
        K: [-46, -38],
        E: [46, -38],
        J: [-31, 0],
        F: [31, 0],
        I: [-16, 38],
        G: [16, 38],
        H: [0, 76]
      },
      round: {
        a: [-40, -40],
        b: [0, -40],
        c: [40, -40],
        d: [-40, 0],
        e: [0, 0],
        f: [40, 0],
        g: [-40, 40],
        h: [0, 40],
        i: [40, 40],
        y: [-48, -48],
        z: [0, 57.5],
        j: [-35.5, -35.5],
        k: [0, -37.5],
        l: [35.5, -35.5],
        m: [-35.5, 35.5],
        n: [0, 37.5],
        o: [35.5, 35.5],
        p: [-36.5, 0],
        q: [36.5, 0],
        A: [-59, -48],
        B: [-23, -73],
        C: [23, -73],
        D: [59, -48],
        K: [-76, -10],
        E: [76, -10],
        J: [-70, 31],
        F: [70, 31],
        I: [-42, 64],
        G: [42, 64],
        H: [0, 77]
      },
      oval: {
        a: [-37.5, -50],
        b: [0, -50],
        c: [37.5, -50],
        d: [-43, 0],
        e: [0, 0],
        f: [43, 0],
        g: [-37.5, 50],
        h: [0, 50],
        i: [37.5, 50],
        y: [-48, -48],
        z: [0, 60],
        j: [-35.5, -37.5],
        k: [0, -37.5],
        l: [35.5, -37.5],
        m: [-35.5, 37.5],
        n: [0, 50],
        o: [35.5, 37.5],
        p: [-36.5, 0],
        q: [36.5, 0],
        A: [-48, -48],
        B: [-23, -78],
        C: [23, -78],
        D: [48, -48],
        K: [-59, -10],
        E: [59, -10],
        J: [-55, 31],
        F: [55, 31],
        I: [-36, 68],
        G: [36, 68],
        H: [0, 85]
      },
      vesicaPiscis: {
        a: [-32, -37],
        b: [0, -50],
        c: [32, -37],
        d: [-32, 0],
        e: [0, 0],
        f: [32, 0],
        g: [-32, 37],
        h: [0, 50],
        i: [32, 37],
        y: [-50, -50],
        z: [0, 62],
        j: [-27.5, -27.5],
        k: [0, -37],
        l: [27.5, -27.5],
        m: [-27.5, 27.5],
        n: [0, 42],
        o: [27.5, 27.5],
        p: [-27.5, 0],
        q: [27.5, 0],
        A: [-45, -32],
        B: [-29, -63],
        C: [29, -63],
        D: [45, -32],
        K: [-50, 0],
        E: [50, 0],
        J: [-45, 32],
        F: [45, 32],
        I: [-29, 63],
        G: [29, 63],
        H: [0, 89],
        L: [0, -89]
      },
      square: {
        a: [-49.75, -50],
        b: [0, -50],
        c: [49.75, -50],
        d: [-49.75, 0],
        e: [0, 0],
        f: [49.75, 0],
        g: [-49.75, 50],
        h: [0, 50],
        i: [49.75, 50],
        y: [-50, -50],
        z: [0, 50],
        j: [-37.5, -37.5],
        k: [0, -37.5],
        l: [37.5, -37.5],
        m: [-37.5, 37.5],
        n: [0, 37.5],
        o: [37.5, 37.5],
        p: [-37.5, 0],
        q: [37.5, 0],
        A: [-66.5, -66.5],
        B: [-22, -66.5],
        C: [22, -66.5],
        D: [66.5, -66.5],
        K: [-66.5, -20],
        E: [66.5, -20],
        J: [-66.5, 26],
        F: [66.5, 26],
        I: [-66.5, 66.5],
        G: [66.5, 66.5],
        H: [-22, 66.5],
        L: [22, 66.5]
      },
      diamond: {
        a: [-32, -37],
        b: [0, -50],
        c: [32, -37],
        d: [-43, 0],
        e: [0, 0],
        f: [43, 0],
        g: [-32, 37],
        h: [0, 50],
        i: [32, 37],
        y: [-50, -50],
        z: [0, 62],
        j: [-27.5, -27.5],
        k: [0, -37],
        l: [27.5, -27.5],
        m: [-27.5, 27.5],
        n: [0, 42],
        o: [27.5, 27.5],
        p: [-37, 0],
        q: [37, 0],
        A: [-43, -28],
        B: [-22, -56],
        C: [22, -56],
        D: [43, -28],
        K: [-63, 0],
        E: [63, 0],
        J: [-42, 28],
        F: [42, 28],
        I: [-22, 56],
        G: [22, 56],
        H: [0, 83],
        L: [0, -82]
      },
      no: {
        a: [-66.5, -66.5],
        b: [0, -66.5],
        c: [66.5, -66.5],
        d: [-66.5, 0],
        e: [0, 0],
        f: [66.5, 0],
        g: [-66.5, 66.5],
        h: [0, 66.5],
        i: [66.5, 66.5],
        y: [-50, -50],
        z: [0, 75],
        j: [-50, -50],
        k: [0, -50],
        l: [50, -50],
        m: [-50, 50],
        n: [0, 50],
        o: [50, 50],
        p: [-50, 0],
        q: [50, 0],
        A: [-91.5, -91.5],
        B: [-30.5, -91.5],
        C: [30.5, -91.5],
        D: [91.5, -91.5],
        K: [-91.5, -30.5],
        E: [91.5, -30.5],
        J: [-91.5, 30.5],
        F: [91.5, 30.5],
        I: [-91.5, 91.5],
        G: [91.5, 91.5],
        H: [-30.5, 91.5],
        L: [30.5, 91.5]
      },
      fantasy1: {
        a: [-45, -45],
        b: [0, -50],
        c: [45, -45],
        d: [-40, 0],
        e: [0, 0],
        f: [40, 0],
        g: [-36, 42.5],
        h: [0, 50],
        i: [36, 42.5],
        y: [-50, -50],
        z: [0, 60],
        j: [-37, -37],
        k: [0, -40],
        l: [37, -37],
        m: [-32, 32],
        n: [0, 40],
        o: [32, 32],
        p: [-28.5, 0],
        q: [28.5, 0],
        A: [-66, -55],
        B: [-22, -67],
        C: [22, -67],
        D: [66, -55],
        K: [-53, -20],
        E: [53, -20],
        J: [-46, 26],
        F: [46, 26],
        I: [-29, 62],
        G: [29, 62],
        H: [0, 84]
      },
      fantasy2: {
        a: [-45, -45],
        b: [0, -45],
        c: [45, -45],
        d: [-35, 0],
        e: [0, 0],
        f: [35, 0],
        g: [-36, 42.5],
        h: [0, 45],
        i: [36, 42.5],
        y: [-50, -50],
        z: [0, 55],
        j: [-32.5, -32.5],
        k: [0, -40],
        l: [32.5, -32.5],
        m: [-30, 30],
        n: [0, 40],
        o: [30, 30],
        p: [-27.5, 0],
        q: [27.5, 0],
        A: [-58, -35],
        B: [-44, -67],
        C: [44, -67],
        D: [58, -35],
        K: [-39, -5],
        E: [39, -5],
        J: [-57, 26],
        F: [57, 26],
        I: [-32, 58],
        G: [32, 58],
        H: [0, 83],
        L: [0, -72]
      },
      fantasy3: {
        a: [-40, -45],
        b: [0, -50],
        c: [40, -45],
        d: [-35, 0],
        e: [0, 0],
        f: [35, 0],
        g: [-36, 42.5],
        h: [0, 50],
        i: [36, 42.5],
        y: [-50, -50],
        z: [0, 55],
        j: [-32.5, -32.5],
        k: [0, -40],
        l: [32.5, -32.5],
        m: [-30, 30],
        n: [0, 40],
        o: [30, 30],
        p: [-27.5, 0],
        q: [27.5, 0],
        A: [-56, -42],
        B: [-22, -72],
        C: [22, -72],
        D: [56, -42],
        K: [-37, -11],
        E: [37, -11],
        J: [-60, 20],
        F: [60, 20],
        I: [-34, 56],
        G: [34, 56],
        H: [0, 83]
      },
      fantasy4: {
        a: [-50, -45],
        b: [0, -50],
        c: [50, -45],
        d: [-45, 0],
        e: [0, 0],
        f: [45, 0],
        g: [-40, 45],
        h: [0, 50],
        i: [40, 45],
        y: [-50, -50],
        z: [0, 62.5],
        j: [-37.5, -37.5],
        k: [0, -45],
        l: [37.5, -37.5],
        m: [-37.5, 37.5],
        n: [0, 45],
        o: [37.5, 37.5],
        p: [-35, 0],
        q: [35, 0],
        A: [-75, -56],
        B: [-36, -61],
        C: [36, -61],
        D: [75, -56],
        K: [-67, -12],
        E: [67, -12],
        J: [-63, 32],
        F: [63, 32],
        I: [-42, 75],
        G: [42, 75],
        H: [0, 91.5],
        L: [0, -79]
      },
      fantasy5: {
        a: [-45, -50],
        b: [0, -50],
        c: [45, -50],
        d: [-40, 0],
        e: [0, 0],
        f: [40, 0],
        g: [-30, 45],
        h: [0, 50],
        i: [30, 45],
        y: [-50, -50],
        z: [0, 60],
        j: [-37, -37],
        k: [0, -40],
        l: [37, -37],
        m: [-32, 32],
        n: [0, 40],
        o: [32, 32],
        p: [-28.5, 0],
        q: [28.5, 0],
        A: [-61, -67],
        B: [-22, -76],
        C: [22, -76],
        D: [61, -67],
        K: [-58, -25],
        E: [58, -25],
        J: [-48, 20],
        F: [48, 20],
        I: [-28.5, 60],
        G: [28.5, 60],
        H: [0, 89]
      },
      noldor: {
        b: [0, -65],
        e: [0, -15],
        h: [0, 35],
        z: [0, 35],
        k: [0, -50],
        n: [0, 30],
        p: [-20, -15],
        q: [20, -15],
        A: [-34, -47],
        B: [-20, -68],
        C: [20, -68],
        D: [34, -47],
        K: [-18, -20],
        E: [18, -20],
        J: [-26, 11],
        F: [26, 11],
        I: [-14, 43],
        G: [14, 43],
        H: [0, 74],
        L: [0, -85]
      },
      gondor: {
        a: [-32.5, -50],
        b: [0, -50],
        c: [32.5, -50],
        d: [-32.5, 0],
        e: [0, 0],
        f: [32.5, 0],
        g: [-32.5, 50],
        h: [0, 50],
        i: [32.5, 50],
        y: [-42.5, -52.5],
        z: [0, 65],
        j: [-25, -37.5],
        k: [0, -37.5],
        l: [25, -37.5],
        m: [-25, 30],
        n: [0, 37.5],
        o: [25, 30],
        p: [-25, 0],
        q: [25, 0],
        A: [-42, -52],
        B: [-17, -75],
        C: [17, -75],
        D: [42, -52],
        K: [-42, -15],
        E: [42, -15],
        J: [-42, 22],
        F: [42, 22],
        I: [-26, 60],
        G: [26, 60],
        H: [0, 87]
      },
      easterling: {
        a: [-40, -47.5],
        b: [0, -47.5],
        c: [40, -47.5],
        d: [-40, 0],
        e: [0, 0],
        f: [40, 0],
        g: [-40, 47.5],
        h: [0, 47.5],
        i: [40, 47.5],
        y: [-42.5, -52.5],
        z: [0, 65],
        j: [-30, -37.5],
        k: [0, -37.5],
        l: [30, -37.5],
        m: [-30, 37.5],
        n: [0, 37.5],
        o: [30, 37.5],
        p: [-30, 0],
        q: [30, 0],
        A: [-52, -72],
        B: [0, -65],
        D: [52, -72],
        K: [-52, -24],
        E: [52, -24],
        J: [-52, 24],
        F: [52, 24],
        I: [-52, 72],
        G: [52, 72],
        H: [0, 65]
      },
      erebor: {
        a: [-40, -40],
        b: [0, -55],
        c: [40, -40],
        d: [-40, 0],
        e: [0, 0],
        f: [40, 0],
        g: [-40, 40],
        h: [0, 55],
        i: [40, 40],
        y: [-50, -50],
        z: [0, 50],
        j: [-35, -35],
        k: [0, -45],
        l: [35, -35],
        m: [-35, 35],
        n: [0, 45],
        o: [35, 35],
        p: [-37.5, 0],
        q: [37.5, 0],
        A: [-47, -46],
        B: [-22, -81],
        C: [22, -81],
        D: [47, -46],
        K: [-66.5, 0],
        E: [66.5, 0],
        J: [-47, 46],
        F: [47, 46],
        I: [-22, 81],
        G: [22, 81]
      },
      ironHills: {
        a: [-43.75, -50],
        b: [0, -50],
        c: [43.75, -50],
        d: [-43.25, 0],
        e: [0, 0],
        f: [43.25, 0],
        g: [-42.5, 42.5],
        h: [0, 50],
        i: [42.5, 42.5],
        y: [-50, -50],
        z: [0, 62.5],
        j: [-32.5, -32.5],
        k: [0, -40],
        l: [32.5, -32.5],
        m: [-32.5, 32.5],
        n: [0, 40],
        o: [32.5, 32.5],
        p: [-37.5, 0],
        q: [37.5, 0],
        A: [-61, -67],
        B: [-22, -74],
        C: [22, -74],
        D: [61, -67],
        K: [-59, -20],
        E: [59, -20],
        J: [-57, 26],
        F: [57, 26],
        I: [-33, 64],
        G: [33, 64],
        H: [0, 88]
      },
      urukHai: {
        a: [-40, -45],
        b: [0, -45],
        c: [40, -45],
        d: [-36, 0],
        e: [0, 0],
        f: [36, 0],
        g: [-32.25, 40],
        h: [0, 40],
        i: [32.25, 40],
        y: [-50, -50],
        z: [0, 40],
        j: [-32.5, -32.5],
        k: [0, -37.5],
        l: [32.5, -32.5],
        m: [-27.5, 27.5],
        n: [0, 32.5],
        o: [27.5, 27.5],
        p: [-37.5, 0],
        q: [37.5, 0],
        A: [-31, -79],
        B: [-1, -90],
        C: [31, -74],
        D: [61, -57],
        K: [-55, -19],
        E: [53, -19],
        J: [-45, 19],
        F: [45, 19],
        I: [-33, 57],
        G: [35, 57],
        H: [0, 57],
        L: [-39, -50]
      },
      moriaOrc: {
        a: [-37.5, -37.5],
        b: [0, -37.5],
        c: [37.5, -37.5],
        d: [-37.5, 0],
        e: [0, 0],
        f: [37.5, 0],
        g: [-37.5, 37.5],
        h: [0, 37.5],
        i: [37.5, 37.5],
        y: [-50, -50],
        z: [0, 40],
        j: [-30, -30],
        k: [0, -30],
        l: [30, -30],
        m: [-30, 30],
        n: [0, 30],
        o: [30, 30],
        p: [-30, 0],
        q: [30, 0],
        A: [-48, -48],
        B: [-16, -50],
        C: [16, -46],
        D: [39, -61],
        K: [-52, -19],
        E: [52, -26],
        J: [-42, 9],
        F: [52, 9],
        I: [-31, 40],
        G: [40, 43],
        H: [4, 47]
      }
    };

    const DEFAULT_SIZE = 200;
    const DEFAULT_DIAPER = "no";
    const DEFAULT_GRADIENTS = ["luster", "spotlight", "backlight"];
    const DEFAULT_BORDER = "#333333";
    const DEFAULT_BORDER_WIDTH = 1;
    const DEFAULT_BACKGROUND = "#333333";
    const DEFAULT_SCALE = 2;
    const DEFAULT_GRID = 1;
    const DEFAULT_SHOW_GRID = false;
    const DEFAULT_COLORS = {
        argent: "#fafafa",
        or: "#ffe066",
        gules: "#d7374a",
        sable: "#333333",
        azure: "#377cd7",
        vert: "#26c061",
        purpure: "#522d5b",
        murrey: "#85185b",
        sanguine: "#b63a3a",
        tenné: "#cc7f19"
    };
    const DEFAULT_TINCTURES = {
        field: { metals: 32, colours: 49, stains: 1, patterns: 14 },
        division: { metals: 35, colours: 49, stains: 1, patterns: 8 },
        charge: { metals: 16, colours: 24, stains: 1, patterns: 0 },
        metals: { argent: 3, or: 2 },
        colours: { gules: 5, azure: 4, sable: 3, purpure: 3, vert: 2 },
        stains: { murrey: 1, sanguine: 1, tenné: 1 },
        patterns: {
            semy: 8,
            ermine: 6,
            vair: 4,
            counterVair: 1,
            vairInPale: 1,
            vairEnPointe: 2,
            vairAncien: 2,
            potent: 2,
            counterPotent: 1,
            potentInPale: 1,
            potentEnPointe: 1,
            chequy: 8,
            lozengy: 5,
            fusily: 2,
            pally: 8,
            barry: 10,
            gemelles: 1,
            bendy: 8,
            bendySinister: 4,
            palyBendy: 2,
            barryBendy: 1,
            pappellony: 2,
            pappellony2: 3,
            scaly: 1,
            plumetty: 1,
            masoned: 6,
            fretty: 3,
            grillage: 1,
            chainy: 1,
            maily: 2,
            honeycombed: 1
        }
    };

    const validateTinctures = (tinctures) => {
        const mandatoryElements = ["field", "division", "charge"];
        const mandatoryTypes = ["metals", "colours"];
        try {
            for (const element of mandatoryElements) {
                if (!tinctures[element])
                    throw new Error(`Missing ${element}`);
                for (const type of mandatoryTypes) {
                    if (!tinctures[element][type])
                        throw new Error(`Missing ${type} in ${element}`);
                }
            }
            for (const type of mandatoryTypes) {
                if (!tinctures[type])
                    throw new Error(`Missing ${type}`);
                const keys = Object.keys(tinctures[type]);
                if (keys.length < 2)
                    throw new Error(`Type ${type} must have more than 2 tinctures`);
                const totalChance = Object.values(tinctures[type]).reduce((a, b) => a + b, 0);
                if (totalChance < 1)
                    throw new Error(`Total chance for type ${type} must be more that zero`);
            }
            return true;
        }
        catch (err) {
            console.error("Invalid stored tinctures data, switching to defaults.", err.message, tinctures);
            return false;
        }
    };

    const isTextReady = writable(false);
    const options = defineInitialOptions();
    const size = writable(options.size);
    const grad = writable(options.grad);
    const diaper = writable(options.diaper);
    const shield = writable(options.shield);
    const colors = writable(options.colors);
    const tinctures = writable(options.tinctures);
    const background = writable(options.background);
    const scale = writable(options.scale);
    const border = writable(options.border);
    const borderWidth = writable(options.borderWidth);
    const grid = writable(options.grid);
    const showGrid = writable(options.showGrid);
    const history = writable([]);
    const matrices = writable([]);
    const matrix = writable(0);
    const state = writable({ edit: 0, about: 0, license: 0, tinctures: 0, raster: 0, vector: 0, i: 0, c: 0, view: 0 });
    const iconedNav = writable(false);
    const createMessageStore = () => {
        const { subscribe, set } = writable(null);
        const defaultTimeout = 5000;
        return {
            subscribe,
            clear: () => set(null),
            success: (text, timeout = defaultTimeout) => {
                set({ type: "success", text, timeout });
            },
            info: (text, timeout = defaultTimeout) => {
                set({ type: "info", text, timeout });
            },
            error: (text, timeout = defaultTimeout) => {
                set({ type: "error", text, timeout });
            }
        };
    };
    const message = createMessageStore();
    const createChangesStore = () => {
        const { subscribe, set, update } = writable(["", -1]);
        let history = [];
        let position = -1;
        return {
            subscribe,
            length: () => history.length,
            reset: () => {
                history = [];
                position = -1;
                set(["", -1]);
            },
            add: (value) => {
                if (value === history[position])
                    return; // no change
                if (position < history.length - 1)
                    history = history.slice(0, position + 1); // cut future history
                history.push(value);
                position += 1;
                set([history[position], position]);
            },
            undo: () => update(() => {
                if (position > 0)
                    position -= 1;
                return [history[position], position];
            }),
            redo: () => update(() => {
                if (position < history.length - 1)
                    position += 1;
                return [history[position], position];
            })
        };
    };
    const changes = createChangesStore();
    function defineInitialOptions() {
        const stored = (key) => {
            const value = localStorage.getItem(key);
            if (value === "null")
                return null;
            return value;
        };
        const storedObj = (key) => {
            return localStorage.getItem(key) ? JSON.parse(localStorage.getItem(key)) : null;
        };
        const getShieldFromURL = () => {
            const coaParam = new URL(window.location.href).searchParams.get("coa");
            if (!coaParam)
                return null;
            const coa = JSON.parse(coaParam);
            return coa?.shield;
        };
        const size = +stored("size") || DEFAULT_SIZE;
        const diaper = stored("diaper") || DEFAULT_DIAPER;
        const grad = stored("grad") || ra(DEFAULT_GRADIENTS);
        const shield = getShieldFromURL() || stored("shield") || rw(shields[rw(shields.types)]);
        const colors = storedObj("colors") || DEFAULT_COLORS;
        const border = stored("border") || DEFAULT_BORDER;
        const borderWidth = +stored("borderWidth") || DEFAULT_BORDER_WIDTH;
        const background = stored("background") || DEFAULT_BACKGROUND;
        const scale = +stored("scale") || DEFAULT_SCALE;
        const grid = +stored("grid") || DEFAULT_GRID;
        const showGrid = storedObj("showGrid") || DEFAULT_SHOW_GRID;
        const storedTinctures = storedObj("tinctures");
        const areTincturesValid = storedTinctures ? validateTinctures(storedTinctures) : false;
        const tinctures = areTincturesValid ? storedTinctures : DEFAULT_TINCTURES;
        return {
            size,
            diaper,
            grad,
            shield,
            colors,
            tinctures,
            border,
            borderWidth,
            background,
            scale,
            grid,
            showGrid
        };
    }

    const isFirefox = navigator.userAgent.includes("Firefox");

    async function download(i, format = "png") {
      const coas = i || i === 0 ? [document.getElementById("coa" + i)] : document.querySelectorAll("svg.coa");
      let {width, height} = coas[0].getBoundingClientRect();
      const numberX = coas.length > 1 ? Math.floor(window.innerWidth / width) : 1;
      const numberY = coas.length > 1 ? Math.ceil(coas.length / numberX) : 1;

      const scaleValue = get_store_value(scale);
      width = Math.round(width * scaleValue);
      height = Math.round(height * scaleValue);

      const canvas = document.createElement("canvas");
      const ctx = canvas.getContext("2d");
      canvas.width = width * numberX;
      canvas.height = height * numberY;

      let loaded = 0;
      coas.forEach(async function (svg, i) {
        const url = await getURL(svg, width, height);
        format === "svg" ? downloadVector(url) : downloadRaster(url, i);
      });

      function downloadVector(url) {
        const link = document.createElement("a");
        link.download = `armoria_${getTimestamp()}.svg`;
        link.href = url;
        link.click();
        window.setTimeout(() => window.URL.revokeObjectURL(URL), 5000);
      }

      function downloadRaster(url, i) {
        const img = new Image();
        img.src = url;
        img.onload = () => {
          URL.revokeObjectURL(url);
          ctx.drawImage(img, (i % numberX) * width, Math.floor(i / numberX) * height, width, height);
          loaded++;
          if (loaded === coas.length) drawCanvas(canvas, format);
        };
      }
    }

    async function getURL(svg, width, height) {
      const addedElements = {};
      const clone = svg.cloneNode(true); // clone svg
      clone.setAttribute("width", width);
      clone.setAttribute("height", height);
      clone.removeAttribute("class");
      clone.removeAttribute("id");
      const d = clone.getElementsByTagName("defs")[0];

      // remove grid if any
      const grid = clone.getElementById("grid");
      const gridPattern = clone.getElementById("gridPattern");
      if (grid) grid.remove();
      if (gridPattern) gridPattern.remove();

      const gr = get_store_value(grad),
        di = get_store_value(diaper);
      if (gr && gr !== "no") d.insertAdjacentHTML("beforeend", defs.getElementById(gr).outerHTML);
      if (di && di !== "no") d.insertAdjacentHTML("beforeend", defs.getElementById(di).outerHTML);
      clone.querySelectorAll(".charge[charge]").forEach(el => {
        const charge = el.getAttribute("charge");
        if (addedElements[charge]) return;
        d.insertAdjacentHTML("beforeend", defs.getElementById(charge).outerHTML);
        addedElements[charge] = true;
      });
      const fieldPattern = clone.getElementsByClassName("field")[0].getAttribute("fill").split("(#")[1]?.split(")")[0];
      if (fieldPattern) addPattern(fieldPattern, d);
      const divisionPattern = clone.getElementsByClassName("division")[0]?.querySelector("rect").getAttribute("fill").split("(#")[1]?.split(")")[0];
      if (divisionPattern) addPattern(divisionPattern, d);

      function addPattern(pattern, d) {
        if (addedElements[pattern]) return;
        d.insertAdjacentHTML("beforeend", document.getElementById(pattern).outerHTML);

        if (pattern.slice(0, 4) === "semy") {
          const charge = pattern.match(/semy_of_(.*?)-/)[1];
          if (!addedElements[charge]) {
            d.insertAdjacentHTML("beforeend", document.getElementById(charge).outerHTML);
            addedElements[charge] = true;
          }
        }
        addedElements[pattern] = true;
      }

      const serialized = new XMLSerializer().serializeToString(clone);
      const pretty = isFirefox ? serialized : prettify(serialized); // don't prettify in Firefox
      const blob = new Blob([pretty], {type: "image/svg+xml;charset=utf-8"});
      const url = window.URL.createObjectURL(blob);
      window.setTimeout(() => window.URL.revokeObjectURL(url), 6000);
      return url;
    }

    function drawCanvas(canvas, format) {
      const link = document.createElement("a");
      link.download = `armoria_${getTimestamp()}.${format}`;

      const URL = canvas.toDataURL("image/" + format, 0.92);
      link.href = URL;
      link.click();

      setTimeout(function () {
        canvas.remove();
        window.URL.revokeObjectURL(link.href);
      }, 5000);
    }

    function getTimestamp() {
      const formatTime = time => (time < 10 ? "0" + time : time);
      const date = new Date();
      const year = date.getFullYear();
      const month = formatTime(date.getMonth() + 1);
      const day = formatTime(date.getDate());
      const hour = formatTime(date.getHours());
      const minutes = formatTime(date.getMinutes());
      const seconds = formatTime(date.getSeconds());
      return [year, month, day, hour, minutes, seconds].join("-");
    }

    function prettify(source) {
      const xmlDoc = new DOMParser().parseFromString(source, "image/svg+xml");
      const xsltDoc = new DOMParser().parseFromString(
        [
          '<xsl:stylesheet xmlns:xsl="http://www.w3.org/1999/XSL/Transform">',
          '  <xsl:strip-space elements="*"/>',
          '  <xsl:template match="para[content-style][not(text())]">',
          '    <xsl:value-of select="normalize-space(.)"/>',
          "  </xsl:template>",
          '  <xsl:template match="node()|@*">',
          '    <xsl:copy><xsl:apply-templates select="node()|@*"/></xsl:copy>',
          "  </xsl:template>",
          '  <xsl:output indent="yes"/>',
          "</xsl:stylesheet>"
        ].join("\n"),
        "application/xml"
      );

      const xsltProcessor = new XSLTProcessor();
      xsltProcessor.importStylesheet(xsltDoc);
      const resultDoc = xsltProcessor.transformToDocument(xmlDoc);
      const resultXml = new XMLSerializer().serializeToString(resultDoc);
      return resultXml;
    }

    const MIN_WIDTH = 1132;
    const checkForIconedNav = () => {
        const isIconed = get_store_value(iconedNav);
        const makeIconed = window.innerWidth < MIN_WIDTH;
        if (isIconed !== makeIconed)
            iconedNav.set(makeIconed);
    };
    checkForIconedNav();

    /* src/components/WindowEvents.svelte generated by Svelte v3.44.2 */

    const { window: window_1 } = globals;

    function create_fragment$12(ctx) {
    	let mounted;
    	let dispose;

    	const block = {
    		c: noop,
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			if (!mounted) {
    				dispose = [
    					listen_dev(window_1, "keydown", /*handleKeydown*/ ctx[0], false, false, false),
    					listen_dev(window_1, "touchstart", /*handleTouchStart*/ ctx[1], false, false, false),
    					listen_dev(window_1, "touchend", /*handleTouchEnd*/ ctx[2], false, false, false),
    					listen_dev(window_1, "resize", checkForIconedNav, false, false, false)
    				];

    				mounted = true;
    			}
    		},
    		p: noop,
    		i: noop,
    		o: noop,
    		d: function destroy(detaching) {
    			mounted = false;
    			run_all(dispose);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$12.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$12($$self, $$props, $$invalidate) {
    	let $matrix;
    	let $state;
    	let $changes;
    	let $history;
    	validate_store(matrix, 'matrix');
    	component_subscribe($$self, matrix, $$value => $$invalidate(4, $matrix = $$value));
    	validate_store(state, 'state');
    	component_subscribe($$self, state, $$value => $$invalidate(5, $state = $$value));
    	validate_store(changes, 'changes');
    	component_subscribe($$self, changes, $$value => $$invalidate(6, $changes = $$value));
    	validate_store(history, 'history');
    	component_subscribe($$self, history, $$value => $$invalidate(7, $history = $$value));
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('WindowEvents', slots, []);
    	let touch = { startX: 0, startY: 0 };

    	// prevent unwanted refresh
    	if (location.host === "azgaar.github.io" && !navigator.userAgent.includes("Electron")) {
    		window.onbeforeunload = () => "Are you sure you want to navigate away?";
    	}

    	function close() {
    		if ($state.edit) {
    			// save current edit to gallery history
    			set_store_value(history, $history[$state.c] = JSON.parse($changes[0]), $history);
    		}

    		state.set({
    			...$state,
    			about: 0,
    			raster: 0,
    			vector: 0,
    			tinctures: 0,
    			edit: 0
    		});

    		message.clear();
    	}

    	const keybinding = {
    		Backspace: () => $matrix > 0 && matrix.set($matrix - 1), // Rollback
    		Enter: () => matrix.set(set_store_value(matrix, $matrix += 1, $matrix)), // Reroll
    		KeyZ: changes.undo,
    		KeyX: changes.redo,
    		KeyS: ctrl => ctrl && download(null, "svg"),
    		KeyP: ctrl => ctrl && download(null, "png"),
    		KeyJ: ctrl => ctrl && download(null, "jpeg"),
    		F1: () => state.set({ ...$state, about: !$state.about }),
    		Escape: close, // Close all windows
    		
    	};

    	// keyboard shortcuts
    	function handleKeydown(event) {
    		const code = event.code;
    		const ctrl = event.ctrlKey;
    		const reserved = ["Backspace", "Enter", "KeyZ", "KeyX", "KeyS", "KeyP", "KeyJ", "F1", "Escape"];
    		if (!ctrl && !reserved.includes(code)) return;
    		const active = document.activeElement.tagName;
    		if (active === "INPUT" || active === "SELECT" || active === "TEXTAREA") return;
    		event.preventDefault();
    		const action = keybinding[code];
    		if (action) action(ctrl);
    	}

    	function handleTouchStart(event) {
    		const { screenX, screenY } = event.changedTouches[0];
    		touch.startX = screenX;
    		touch.startY = screenY;
    	}

    	function handleTouchEnd(event) {
    		const menu = document.getElementById("menu");
    		const navbar = document.getElementById("navbar");
    		if (menu?.contains(event.target)) return; // cancel touch event if start area is menu
    		if (navbar?.contains(event.target)) return; // cancel touch event if start area is nav bar
    		const { screenX, screenY } = event.changedTouches[0];
    		const { startX, startY } = touch;
    		const diffX = screenX - startX;
    		const diffY = screenY - startY;
    		const ratioX = Math.abs(diffX / diffY);
    		const ratioY = Math.abs(diffY / diffX);
    		const absDiff = Math.abs(ratioX > ratioY ? diffX : diffY);
    		if (absDiff < 100) return; // ignore small movements
    		if (ratioX > ratioY) diffX >= 0 ? swipeRight() : swipeLeft(); else diffY >= 0 ? swipeDown() : swipeUp();
    	}

    	function swipeRight() {
    		if ($state.edit) changes.redo(); else set_store_value(matrix, $matrix += 1, $matrix);
    	}

    	function swipeDown() {
    		set_store_value(matrix, $matrix += 1, $matrix);
    	}

    	function swipeLeft() {
    		if ($state.edit) changes.undo(); else if ($matrix > 0) set_store_value(matrix, $matrix -= 1, $matrix);
    	}

    	function swipeUp() {
    		if ($matrix > 0) set_store_value(matrix, $matrix -= 1, $matrix);
    	}

    	const writable_props = [];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<WindowEvents> was created with unknown prop '${key}'`);
    	});

    	$$self.$capture_state = () => ({
    		state,
    		matrix,
    		changes,
    		history,
    		message,
    		download,
    		checkForIconedNav,
    		touch,
    		close,
    		keybinding,
    		handleKeydown,
    		handleTouchStart,
    		handleTouchEnd,
    		swipeRight,
    		swipeDown,
    		swipeLeft,
    		swipeUp,
    		$matrix,
    		$state,
    		$changes,
    		$history
    	});

    	$$self.$inject_state = $$props => {
    		if ('touch' in $$props) touch = $$props.touch;
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [handleKeydown, handleTouchStart, handleTouchEnd];
    }

    class WindowEvents extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$12, create_fragment$12, safe_not_equal, {});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "WindowEvents",
    			options,
    			id: create_fragment$12.name
    		});
    	}
    }

    /* src/components/navigation/header/menu/Logo.svelte generated by Svelte v3.44.2 */
    const file$T = "src/components/navigation/header/menu/Logo.svelte";

    // (8:0) {#if !$iconedNav}
    function create_if_block$o(ctx) {
    	let li;
    	let svg;
    	let path;
    	let mounted;
    	let dispose;

    	const block = {
    		c: function create() {
    			li = element("li");
    			svg = svg_element("svg");
    			path = svg_element("path");
    			attr_dev(path, "fill", "#fff");
    			attr_dev(path, "stroke", "none");
    			attr_dev(path, "d", "m 46,3 0.6,1.4 c -1.5,0.7 -2.6,1.4 -3.3,2.2 -0.7,0.7 -1.2,1.5 -1.5,2.4 -0.3,0.9 -0.4,2.2 -0.4,3.9 0,0.6 0,1.3 0,2.2 l 0.5,23.2 c 0,2.5 0.3,4.2 0.8,5 0.4,0.6 0.8,0.8 1.3,0.8 0.6,0 1.5,-0.6 2.8,-1.8 l 0.9,1.1 -5.8,4.9 -1.9,1.6 C 38.4,49.2 37.2,48.2 36.5,46.9 35.8,45.7 35.3,36.7 35.2,34 c -7.6,0.1 -20.2,0 -20.2,0 0,0 -7.4,9.1 -7.4,11.1 0,0.6 0.2,1.1 0.6,1.8 0.5,0.9 0.8,1.4 0.8,1.7 0,0.4 -0.1,0.7 -0.4,1 -0.3,0.3 -0.6,0.4 -1.1,0.4 -0.5,0 -0.9,-0.2 -1.2,-0.6 -0.5,-0.6 -0.7,-1.3 -0.7,-2.2 0,-1 0.3,-2.1 0.8,-3.3 C 8.8,39.9 11.3,36.7 14.1,32.9 11.1,30.7 9,28.5 7.8,26.4 6.6,24.4 6,22.1 6,19.5 c 0,-3 0.8,-5.7 2.3,-8.3 1.5,-2.5 3.8,-4.5 6.9,-6 3.1,-1.5 6.2,-2.2 9.4,-2.2 4.9,0 9.7,1.7 14.3,5.1 1.1,-1.2 2.2,-2.1 3.2,-2.9 1,-0.8 2.4,-1.5 4,-2.3 z M 30.7,10.2 c -2.6,-1.3 -5.2,-1.9 -7.8,-1.9 -2.7,0 -5.3,0.6 -7.8,1.8 -2.4,1.2 -4.2,2.8 -5.4,4.7 -1.2,1.9 -1.8,3.9 -1.8,5.9 0,4.2 2.3,8 6.9,11.3 L 25.2,17.7 c -1.6,-0.8 -2.9,-1.3 -4.2,-1.3 -1.7,0 -3.1,0.8 -4.2,2.4 -0.4,0.7 -1,0.5 -1.1,-0.2 0,-0.6 0.3,-1.5 1,-2.7 0.7,-1.1 1.6,-2.1 2.9,-2.8 1.3,-0.7 2.6,-1.1 4,-1.1 1.4,0 3.1,0.4 4.9,1.1 z m 4,3.2 C 34,12.4 32.8,11.5 32,11 L 18.4,29.4 h 16.7 z");
    			add_location(path, file$T, 10, 6, 286);
    			attr_dev(svg, "width", "35");
    			attr_dev(svg, "height", "35");
    			attr_dev(svg, "viewBox", "-2 -1 55 55");
    			attr_dev(svg, "class", "svelte-1fl894");
    			add_location(svg, file$T, 9, 4, 203);
    			attr_dev(li, "class", "svelte-1fl894");
    			add_location(li, file$T, 8, 2, 194);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, li, anchor);
    			append_dev(li, svg);
    			append_dev(svg, path);

    			if (!mounted) {
    				dispose = listen_dev(svg, "click", /*redirectToHome*/ ctx[1], false, false, false);
    				mounted = true;
    			}
    		},
    		p: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(li);
    			mounted = false;
    			dispose();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block$o.name,
    		type: "if",
    		source: "(8:0) {#if !$iconedNav}",
    		ctx
    	});

    	return block;
    }

    function create_fragment$11(ctx) {
    	let if_block_anchor;
    	let if_block = !/*$iconedNav*/ ctx[0] && create_if_block$o(ctx);

    	const block = {
    		c: function create() {
    			if (if_block) if_block.c();
    			if_block_anchor = empty();
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			if (if_block) if_block.m(target, anchor);
    			insert_dev(target, if_block_anchor, anchor);
    		},
    		p: function update(ctx, [dirty]) {
    			if (!/*$iconedNav*/ ctx[0]) {
    				if (if_block) {
    					if_block.p(ctx, dirty);
    				} else {
    					if_block = create_if_block$o(ctx);
    					if_block.c();
    					if_block.m(if_block_anchor.parentNode, if_block_anchor);
    				}
    			} else if (if_block) {
    				if_block.d(1);
    				if_block = null;
    			}
    		},
    		i: noop,
    		o: noop,
    		d: function destroy(detaching) {
    			if (if_block) if_block.d(detaching);
    			if (detaching) detach_dev(if_block_anchor);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$11.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$11($$self, $$props, $$invalidate) {
    	let $iconedNav;
    	validate_store(iconedNav, 'iconedNav');
    	component_subscribe($$self, iconedNav, $$value => $$invalidate(0, $iconedNav = $$value));
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('Logo', slots, []);

    	const redirectToHome = () => {
    		location.href = location.origin + location.pathname;
    	};

    	const writable_props = [];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<Logo> was created with unknown prop '${key}'`);
    	});

    	$$self.$capture_state = () => ({ iconedNav, redirectToHome, $iconedNav });
    	return [$iconedNav, redirectToHome];
    }

    class Logo extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$11, create_fragment$11, safe_not_equal, {});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Logo",
    			options,
    			id: create_fragment$11.name
    		});
    	}
    }

    const translate = get_store_value(X);
    const tooltip = (element) => {
        if (!element.dataset.tooltip) {
            return;
        }
        const isTouchAvailable = "ontouchstart" in window;
        const div = document.createElement("div");
        let limit;
        const gesture = element.dataset.gesture;
        const hotkey = element.dataset.hotkey;
        function mouseEnter() {
            removeTooltip();
            let text = element.dataset.tooltip;
            if (isTouchAvailable && gesture)
                text = `${text}. ${translate("tooltip.gesture")}: ${gesture}`;
            if (!isTouchAvailable && hotkey)
                text = `${text}. ${translate("tooltip.hotkey")}: ${hotkey}`;
            div.textContent = text;
            div.className = "tooltip";
            document.body.appendChild(div);
            const bbox = div.getBoundingClientRect();
            limit = [window.innerWidth - bbox.width, window.innerHeight - bbox.height];
        }
        function mouseMove(event) {
            div.style.left = `${Math.min(event.pageX + 10, limit[0])}px`;
            div.style.top = `${Math.min(event.pageY + 10, limit[1])}px`;
        }
        function removeTooltip() {
            forEach(".tooltip", el => el.remove());
        }
        element.on("mouseenter", mouseEnter);
        element.on("mousemove", mouseMove);
        element.on("mouseleave", removeTooltip);
        return {
            destroy() {
                removeTooltip();
            }
        };
    };

    function cubicInOut(t) {
        return t < 0.5 ? 4.0 * t * t * t : 0.5 * Math.pow(2.0 * t - 2.0, 3.0) + 1.0;
    }
    function cubicOut(t) {
        const f = t - 1.0;
        return f * f * f + 1.0;
    }

    function fade(node, { delay = 0, duration = 400, easing = identity } = {}) {
        const o = +getComputedStyle(node).opacity;
        return {
            delay,
            duration,
            easing,
            css: t => `opacity: ${t * o}`
        };
    }
    function fly(node, { delay = 0, duration = 400, easing = cubicOut, x = 0, y = 0, opacity = 0 } = {}) {
        const style = getComputedStyle(node);
        const target_opacity = +style.opacity;
        const transform = style.transform === 'none' ? '' : style.transform;
        const od = target_opacity * (1 - opacity);
        return {
            delay,
            duration,
            easing,
            css: (t, u) => `
			transform: ${transform} translate(${(1 - t) * x}px, ${(1 - t) * y}px);
			opacity: ${target_opacity - (od * u)}`
        };
    }
    function slide(node, { delay = 0, duration = 400, easing = cubicOut } = {}) {
        const style = getComputedStyle(node);
        const opacity = +style.opacity;
        const height = parseFloat(style.height);
        const padding_top = parseFloat(style.paddingTop);
        const padding_bottom = parseFloat(style.paddingBottom);
        const margin_top = parseFloat(style.marginTop);
        const margin_bottom = parseFloat(style.marginBottom);
        const border_top_width = parseFloat(style.borderTopWidth);
        const border_bottom_width = parseFloat(style.borderBottomWidth);
        return {
            delay,
            duration,
            easing,
            css: t => 'overflow: hidden;' +
                `opacity: ${Math.min(t * 20, 1) * opacity};` +
                `height: ${t * height}px;` +
                `padding-top: ${t * padding_top}px;` +
                `padding-bottom: ${t * padding_bottom}px;` +
                `margin-top: ${t * margin_top}px;` +
                `margin-bottom: ${t * margin_bottom}px;` +
                `border-top-width: ${t * border_top_width}px;` +
                `border-bottom-width: ${t * border_bottom_width}px;`
        };
    }
    function draw(node, { delay = 0, speed, duration, easing = cubicInOut } = {}) {
        let len = node.getTotalLength();
        const style = getComputedStyle(node);
        if (style.strokeLinecap !== 'butt') {
            len += parseInt(style.strokeWidth);
        }
        if (duration === undefined) {
            if (speed === undefined) {
                duration = 800;
            }
            else {
                duration = len / speed;
            }
        }
        else if (typeof duration === 'function') {
            duration = duration(len);
        }
        return {
            delay,
            duration,
            easing,
            css: (t, u) => `stroke-dasharray: ${t * len} ${u * len}`
        };
    }

    /* src/components/navigation/header/shared/NavLabel.svelte generated by Svelte v3.44.2 */
    const file$S = "src/components/navigation/header/shared/NavLabel.svelte";

    // (7:0) {#if label && $isTextReady}
    function create_if_block$n(ctx) {
    	let span;
    	let t;
    	let span_intro;

    	const block = {
    		c: function create() {
    			span = element("span");
    			t = text(/*label*/ ctx[0]);
    			add_location(span, file$S, 7, 2, 187);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, span, anchor);
    			append_dev(span, t);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*label*/ 1) set_data_dev(t, /*label*/ ctx[0]);
    		},
    		i: function intro(local) {
    			if (!span_intro) {
    				add_render_callback(() => {
    					span_intro = create_in_transition(span, fade, { duration: 100 });
    					span_intro.start();
    				});
    			}
    		},
    		o: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(span);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block$n.name,
    		type: "if",
    		source: "(7:0) {#if label && $isTextReady}",
    		ctx
    	});

    	return block;
    }

    function create_fragment$10(ctx) {
    	let if_block_anchor;
    	let if_block = /*label*/ ctx[0] && /*$isTextReady*/ ctx[1] && create_if_block$n(ctx);

    	const block = {
    		c: function create() {
    			if (if_block) if_block.c();
    			if_block_anchor = empty();
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			if (if_block) if_block.m(target, anchor);
    			insert_dev(target, if_block_anchor, anchor);
    		},
    		p: function update(ctx, [dirty]) {
    			if (/*label*/ ctx[0] && /*$isTextReady*/ ctx[1]) {
    				if (if_block) {
    					if_block.p(ctx, dirty);

    					if (dirty & /*label, $isTextReady*/ 3) {
    						transition_in(if_block, 1);
    					}
    				} else {
    					if_block = create_if_block$n(ctx);
    					if_block.c();
    					transition_in(if_block, 1);
    					if_block.m(if_block_anchor.parentNode, if_block_anchor);
    				}
    			} else if (if_block) {
    				if_block.d(1);
    				if_block = null;
    			}
    		},
    		i: function intro(local) {
    			transition_in(if_block);
    		},
    		o: noop,
    		d: function destroy(detaching) {
    			if (if_block) if_block.d(detaching);
    			if (detaching) detach_dev(if_block_anchor);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$10.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$10($$self, $$props, $$invalidate) {
    	let $isTextReady;
    	validate_store(isTextReady, 'isTextReady');
    	component_subscribe($$self, isTextReady, $$value => $$invalidate(1, $isTextReady = $$value));
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('NavLabel', slots, []);
    	let { label = undefined } = $$props;
    	const writable_props = ['label'];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<NavLabel> was created with unknown prop '${key}'`);
    	});

    	$$self.$$set = $$props => {
    		if ('label' in $$props) $$invalidate(0, label = $$props.label);
    	};

    	$$self.$capture_state = () => ({ fade, isTextReady, label, $isTextReady });

    	$$self.$inject_state = $$props => {
    		if ('label' in $$props) $$invalidate(0, label = $$props.label);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [label, $isTextReady];
    }

    class NavLabel extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$10, create_fragment$10, safe_not_equal, { label: 0 });

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "NavLabel",
    			options,
    			id: create_fragment$10.name
    		});
    	}

    	get label() {
    		throw new Error("<NavLabel>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set label(value) {
    		throw new Error("<NavLabel>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /* src/components/navigation/header/shared/NavItem.svelte generated by Svelte v3.44.2 */
    const file$R = "src/components/navigation/header/shared/NavItem.svelte";

    // (16:2) {:else}
    function create_else_block$8(ctx) {
    	let navlabel;
    	let current;

    	navlabel = new NavLabel({
    			props: { label: /*label*/ ctx[1] },
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(navlabel.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(navlabel, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const navlabel_changes = {};
    			if (dirty & /*label*/ 2) navlabel_changes.label = /*label*/ ctx[1];
    			navlabel.$set(navlabel_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(navlabel.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(navlabel.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(navlabel, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_else_block$8.name,
    		type: "else",
    		source: "(16:2) {:else}",
    		ctx
    	});

    	return block;
    }

    // (12:2) {#if value && $iconedNav}
    function create_if_block$m(ctx) {
    	let svg;
    	let use;
    	let use_href_value;

    	const block = {
    		c: function create() {
    			svg = svg_element("svg");
    			use = svg_element("use");
    			attr_dev(use, "href", use_href_value = "#" + /*value*/ ctx[0] + "-icon");
    			add_location(use, file$R, 13, 6, 372);
    			attr_dev(svg, "class", "svelte-1cyv4ar");
    			add_location(svg, file$R, 12, 4, 360);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, svg, anchor);
    			append_dev(svg, use);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*value*/ 1 && use_href_value !== (use_href_value = "#" + /*value*/ ctx[0] + "-icon")) {
    				attr_dev(use, "href", use_href_value);
    			}
    		},
    		i: noop,
    		o: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(svg);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block$m.name,
    		type: "if",
    		source: "(12:2) {#if value && $iconedNav}",
    		ctx
    	});

    	return block;
    }

    function create_fragment$$(ctx) {
    	let li;
    	let current_block_type_index;
    	let if_block;
    	let t;
    	let current;
    	let mounted;
    	let dispose;
    	const if_block_creators = [create_if_block$m, create_else_block$8];
    	const if_blocks = [];

    	function select_block_type(ctx, dirty) {
    		if (/*value*/ ctx[0] && /*$iconedNav*/ ctx[4]) return 0;
    		return 1;
    	}

    	current_block_type_index = select_block_type(ctx);
    	if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
    	const default_slot_template = /*#slots*/ ctx[6].default;
    	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[5], null);

    	const block = {
    		c: function create() {
    			li = element("li");
    			if_block.c();
    			t = space();
    			if (default_slot) default_slot.c();
    			attr_dev(li, "data-tooltip", /*tip*/ ctx[2]);
    			attr_dev(li, "class", "svelte-1cyv4ar");
    			toggle_class(li, "wide", /*wide*/ ctx[3]);
    			add_location(li, file$R, 10, 0, 281);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, li, anchor);
    			if_blocks[current_block_type_index].m(li, null);
    			append_dev(li, t);

    			if (default_slot) {
    				default_slot.m(li, null);
    			}

    			current = true;

    			if (!mounted) {
    				dispose = action_destroyer(tooltip.call(null, li));
    				mounted = true;
    			}
    		},
    		p: function update(ctx, [dirty]) {
    			let previous_block_index = current_block_type_index;
    			current_block_type_index = select_block_type(ctx);

    			if (current_block_type_index === previous_block_index) {
    				if_blocks[current_block_type_index].p(ctx, dirty);
    			} else {
    				group_outros();

    				transition_out(if_blocks[previous_block_index], 1, 1, () => {
    					if_blocks[previous_block_index] = null;
    				});

    				check_outros();
    				if_block = if_blocks[current_block_type_index];

    				if (!if_block) {
    					if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
    					if_block.c();
    				} else {
    					if_block.p(ctx, dirty);
    				}

    				transition_in(if_block, 1);
    				if_block.m(li, t);
    			}

    			if (default_slot) {
    				if (default_slot.p && (!current || dirty & /*$$scope*/ 32)) {
    					update_slot_base(
    						default_slot,
    						default_slot_template,
    						ctx,
    						/*$$scope*/ ctx[5],
    						!current
    						? get_all_dirty_from_scope(/*$$scope*/ ctx[5])
    						: get_slot_changes(default_slot_template, /*$$scope*/ ctx[5], dirty, null),
    						null
    					);
    				}
    			}

    			if (!current || dirty & /*tip*/ 4) {
    				attr_dev(li, "data-tooltip", /*tip*/ ctx[2]);
    			}

    			if (dirty & /*wide*/ 8) {
    				toggle_class(li, "wide", /*wide*/ ctx[3]);
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(if_block);
    			transition_in(default_slot, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(if_block);
    			transition_out(default_slot, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(li);
    			if_blocks[current_block_type_index].d();
    			if (default_slot) default_slot.d(detaching);
    			mounted = false;
    			dispose();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$$.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$$($$self, $$props, $$invalidate) {
    	let $iconedNav;
    	validate_store(iconedNav, 'iconedNav');
    	component_subscribe($$self, iconedNav, $$value => $$invalidate(4, $iconedNav = $$value));
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('NavItem', slots, ['default']);
    	let { value = undefined } = $$props;
    	let { label = undefined } = $$props;
    	let { tip = undefined } = $$props;
    	let { wide = false } = $$props;
    	const writable_props = ['value', 'label', 'tip', 'wide'];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<NavItem> was created with unknown prop '${key}'`);
    	});

    	$$self.$$set = $$props => {
    		if ('value' in $$props) $$invalidate(0, value = $$props.value);
    		if ('label' in $$props) $$invalidate(1, label = $$props.label);
    		if ('tip' in $$props) $$invalidate(2, tip = $$props.tip);
    		if ('wide' in $$props) $$invalidate(3, wide = $$props.wide);
    		if ('$$scope' in $$props) $$invalidate(5, $$scope = $$props.$$scope);
    	};

    	$$self.$capture_state = () => ({
    		tooltip,
    		iconedNav,
    		NavLabel,
    		value,
    		label,
    		tip,
    		wide,
    		$iconedNav
    	});

    	$$self.$inject_state = $$props => {
    		if ('value' in $$props) $$invalidate(0, value = $$props.value);
    		if ('label' in $$props) $$invalidate(1, label = $$props.label);
    		if ('tip' in $$props) $$invalidate(2, tip = $$props.tip);
    		if ('wide' in $$props) $$invalidate(3, wide = $$props.wide);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [value, label, tip, wide, $iconedNav, $$scope, slots];
    }

    class NavItem extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$$, create_fragment$$, safe_not_equal, { value: 0, label: 1, tip: 2, wide: 3 });

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "NavItem",
    			options,
    			id: create_fragment$$.name
    		});
    	}

    	get value() {
    		throw new Error("<NavItem>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set value(value) {
    		throw new Error("<NavItem>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get label() {
    		throw new Error("<NavItem>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set label(value) {
    		throw new Error("<NavItem>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get tip() {
    		throw new Error("<NavItem>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set tip(value) {
    		throw new Error("<NavItem>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get wide() {
    		throw new Error("<NavItem>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set wide(value) {
    		throw new Error("<NavItem>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /* src/components/navigation/header/shared/NavButton.svelte generated by Svelte v3.44.2 */
    const file$Q = "src/components/navigation/header/shared/NavButton.svelte";

    // (26:2) {:else}
    function create_else_block$7(ctx) {
    	let navlabel;
    	let current;

    	navlabel = new NavLabel({
    			props: { label: /*label*/ ctx[1] },
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(navlabel.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(navlabel, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const navlabel_changes = {};
    			if (dirty & /*label*/ 2) navlabel_changes.label = /*label*/ ctx[1];
    			navlabel.$set(navlabel_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(navlabel.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(navlabel.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(navlabel, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_else_block$7.name,
    		type: "else",
    		source: "(26:2) {:else}",
    		ctx
    	});

    	return block;
    }

    // (22:2) {#if value && $iconedNav}
    function create_if_block$l(ctx) {
    	let svg;
    	let use;
    	let use_href_value;

    	const block = {
    		c: function create() {
    			svg = svg_element("svg");
    			use = svg_element("use");
    			attr_dev(use, "href", use_href_value = "#" + /*value*/ ctx[0] + "-icon");
    			add_location(use, file$Q, 23, 6, 734);
    			attr_dev(svg, "class", "svelte-5uhu10");
    			add_location(svg, file$Q, 22, 4, 722);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, svg, anchor);
    			append_dev(svg, use);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*value*/ 1 && use_href_value !== (use_href_value = "#" + /*value*/ ctx[0] + "-icon")) {
    				attr_dev(use, "href", use_href_value);
    			}
    		},
    		i: noop,
    		o: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(svg);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block$l.name,
    		type: "if",
    		source: "(22:2) {#if value && $iconedNav}",
    		ctx
    	});

    	return block;
    }

    function create_fragment$_(ctx) {
    	let li;
    	let current_block_type_index;
    	let if_block;
    	let t;
    	let current;
    	let mounted;
    	let dispose;
    	const if_block_creators = [create_if_block$l, create_else_block$7];
    	const if_blocks = [];

    	function select_block_type(ctx, dirty) {
    		if (/*value*/ ctx[0] && /*$iconedNav*/ ctx[9]) return 0;
    		return 1;
    	}

    	current_block_type_index = select_block_type(ctx);
    	if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
    	const default_slot_template = /*#slots*/ ctx[13].default;
    	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[12], null);

    	const block = {
    		c: function create() {
    			li = element("li");
    			if_block.c();
    			t = space();
    			if (default_slot) default_slot.c();
    			attr_dev(li, "data-tooltip", /*tip*/ ctx[2]);
    			attr_dev(li, "data-gesture", /*gesture*/ ctx[3]);
    			attr_dev(li, "data-hotkey", /*hotkey*/ ctx[4]);
    			attr_dev(li, "class", "svelte-5uhu10");
    			toggle_class(li, "disabled", /*disabled*/ ctx[5]);
    			toggle_class(li, "selected", /*selected*/ ctx[6]);
    			toggle_class(li, "flutter", /*flutter*/ ctx[7]);
    			toggle_class(li, "right", /*right*/ ctx[8]);
    			add_location(li, file$Q, 20, 0, 531);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, li, anchor);
    			if_blocks[current_block_type_index].m(li, null);
    			append_dev(li, t);

    			if (default_slot) {
    				default_slot.m(li, null);
    			}

    			current = true;

    			if (!mounted) {
    				dispose = [
    					listen_dev(li, "click", /*handleClick*/ ctx[10], false, false, false),
    					action_destroyer(tooltip.call(null, li))
    				];

    				mounted = true;
    			}
    		},
    		p: function update(ctx, [dirty]) {
    			let previous_block_index = current_block_type_index;
    			current_block_type_index = select_block_type(ctx);

    			if (current_block_type_index === previous_block_index) {
    				if_blocks[current_block_type_index].p(ctx, dirty);
    			} else {
    				group_outros();

    				transition_out(if_blocks[previous_block_index], 1, 1, () => {
    					if_blocks[previous_block_index] = null;
    				});

    				check_outros();
    				if_block = if_blocks[current_block_type_index];

    				if (!if_block) {
    					if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
    					if_block.c();
    				} else {
    					if_block.p(ctx, dirty);
    				}

    				transition_in(if_block, 1);
    				if_block.m(li, t);
    			}

    			if (default_slot) {
    				if (default_slot.p && (!current || dirty & /*$$scope*/ 4096)) {
    					update_slot_base(
    						default_slot,
    						default_slot_template,
    						ctx,
    						/*$$scope*/ ctx[12],
    						!current
    						? get_all_dirty_from_scope(/*$$scope*/ ctx[12])
    						: get_slot_changes(default_slot_template, /*$$scope*/ ctx[12], dirty, null),
    						null
    					);
    				}
    			}

    			if (!current || dirty & /*tip*/ 4) {
    				attr_dev(li, "data-tooltip", /*tip*/ ctx[2]);
    			}

    			if (!current || dirty & /*gesture*/ 8) {
    				attr_dev(li, "data-gesture", /*gesture*/ ctx[3]);
    			}

    			if (!current || dirty & /*hotkey*/ 16) {
    				attr_dev(li, "data-hotkey", /*hotkey*/ ctx[4]);
    			}

    			if (dirty & /*disabled*/ 32) {
    				toggle_class(li, "disabled", /*disabled*/ ctx[5]);
    			}

    			if (dirty & /*selected*/ 64) {
    				toggle_class(li, "selected", /*selected*/ ctx[6]);
    			}

    			if (dirty & /*flutter*/ 128) {
    				toggle_class(li, "flutter", /*flutter*/ ctx[7]);
    			}

    			if (dirty & /*right*/ 256) {
    				toggle_class(li, "right", /*right*/ ctx[8]);
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(if_block);
    			transition_in(default_slot, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(if_block);
    			transition_out(default_slot, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(li);
    			if_blocks[current_block_type_index].d();
    			if (default_slot) default_slot.d(detaching);
    			mounted = false;
    			run_all(dispose);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$_.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$_($$self, $$props, $$invalidate) {
    	let $iconedNav;
    	validate_store(iconedNav, 'iconedNav');
    	component_subscribe($$self, iconedNav, $$value => $$invalidate(9, $iconedNav = $$value));
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('NavButton', slots, ['default']);
    	let { value = undefined } = $$props;
    	let { label = undefined } = $$props;
    	let { tip = undefined } = $$props;
    	let { gesture = undefined } = $$props;
    	let { hotkey = undefined } = $$props;
    	let { disabled = false } = $$props;
    	let { selected = false } = $$props;
    	let { flutter = false } = $$props;
    	let { right = false } = $$props;
    	let { onclick } = $$props;

    	const handleClick = event => {
    		event.stopPropagation();
    		onclick();
    	};

    	const writable_props = [
    		'value',
    		'label',
    		'tip',
    		'gesture',
    		'hotkey',
    		'disabled',
    		'selected',
    		'flutter',
    		'right',
    		'onclick'
    	];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<NavButton> was created with unknown prop '${key}'`);
    	});

    	$$self.$$set = $$props => {
    		if ('value' in $$props) $$invalidate(0, value = $$props.value);
    		if ('label' in $$props) $$invalidate(1, label = $$props.label);
    		if ('tip' in $$props) $$invalidate(2, tip = $$props.tip);
    		if ('gesture' in $$props) $$invalidate(3, gesture = $$props.gesture);
    		if ('hotkey' in $$props) $$invalidate(4, hotkey = $$props.hotkey);
    		if ('disabled' in $$props) $$invalidate(5, disabled = $$props.disabled);
    		if ('selected' in $$props) $$invalidate(6, selected = $$props.selected);
    		if ('flutter' in $$props) $$invalidate(7, flutter = $$props.flutter);
    		if ('right' in $$props) $$invalidate(8, right = $$props.right);
    		if ('onclick' in $$props) $$invalidate(11, onclick = $$props.onclick);
    		if ('$$scope' in $$props) $$invalidate(12, $$scope = $$props.$$scope);
    	};

    	$$self.$capture_state = () => ({
    		tooltip,
    		iconedNav,
    		NavLabel,
    		value,
    		label,
    		tip,
    		gesture,
    		hotkey,
    		disabled,
    		selected,
    		flutter,
    		right,
    		onclick,
    		handleClick,
    		$iconedNav
    	});

    	$$self.$inject_state = $$props => {
    		if ('value' in $$props) $$invalidate(0, value = $$props.value);
    		if ('label' in $$props) $$invalidate(1, label = $$props.label);
    		if ('tip' in $$props) $$invalidate(2, tip = $$props.tip);
    		if ('gesture' in $$props) $$invalidate(3, gesture = $$props.gesture);
    		if ('hotkey' in $$props) $$invalidate(4, hotkey = $$props.hotkey);
    		if ('disabled' in $$props) $$invalidate(5, disabled = $$props.disabled);
    		if ('selected' in $$props) $$invalidate(6, selected = $$props.selected);
    		if ('flutter' in $$props) $$invalidate(7, flutter = $$props.flutter);
    		if ('right' in $$props) $$invalidate(8, right = $$props.right);
    		if ('onclick' in $$props) $$invalidate(11, onclick = $$props.onclick);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [
    		value,
    		label,
    		tip,
    		gesture,
    		hotkey,
    		disabled,
    		selected,
    		flutter,
    		right,
    		$iconedNav,
    		handleClick,
    		onclick,
    		$$scope,
    		slots
    	];
    }

    class NavButton extends SvelteComponentDev {
    	constructor(options) {
    		super(options);

    		init(this, options, instance$_, create_fragment$_, safe_not_equal, {
    			value: 0,
    			label: 1,
    			tip: 2,
    			gesture: 3,
    			hotkey: 4,
    			disabled: 5,
    			selected: 6,
    			flutter: 7,
    			right: 8,
    			onclick: 11
    		});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "NavButton",
    			options,
    			id: create_fragment$_.name
    		});

    		const { ctx } = this.$$;
    		const props = options.props || {};

    		if (/*onclick*/ ctx[11] === undefined && !('onclick' in props)) {
    			console.warn("<NavButton> was created without expected prop 'onclick'");
    		}
    	}

    	get value() {
    		throw new Error("<NavButton>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set value(value) {
    		throw new Error("<NavButton>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get label() {
    		throw new Error("<NavButton>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set label(value) {
    		throw new Error("<NavButton>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get tip() {
    		throw new Error("<NavButton>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set tip(value) {
    		throw new Error("<NavButton>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get gesture() {
    		throw new Error("<NavButton>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set gesture(value) {
    		throw new Error("<NavButton>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get hotkey() {
    		throw new Error("<NavButton>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set hotkey(value) {
    		throw new Error("<NavButton>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get disabled() {
    		throw new Error("<NavButton>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set disabled(value) {
    		throw new Error("<NavButton>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get selected() {
    		throw new Error("<NavButton>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set selected(value) {
    		throw new Error("<NavButton>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get flutter() {
    		throw new Error("<NavButton>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set flutter(value) {
    		throw new Error("<NavButton>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get right() {
    		throw new Error("<NavButton>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set right(value) {
    		throw new Error("<NavButton>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get onclick() {
    		throw new Error("<NavButton>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set onclick(value) {
    		throw new Error("<NavButton>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /* src/components/navigation/header/shared/Lock.svelte generated by Svelte v3.44.2 */
    const file$P = "src/components/navigation/header/shared/Lock.svelte";

    // (14:0) {#if Boolean(locked)}
    function create_if_block$k(ctx) {
    	let span;
    	let t_1;
    	let mounted;
    	let dispose;

    	const block = {
    		c: function create() {
    			span = element("span");
    			t_1 = text("🔖");
    			attr_dev(span, "data-tooltip", /*tip*/ ctx[1]);
    			attr_dev(span, "class", "svelte-e703nl");
    			add_location(span, file$P, 14, 2, 335);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, span, anchor);
    			append_dev(span, t_1);

    			if (!mounted) {
    				dispose = [
    					listen_dev(span, "click", /*unlock*/ ctx[2], false, false, false),
    					action_destroyer(tooltip.call(null, span))
    				];

    				mounted = true;
    			}
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*tip*/ 2) {
    				attr_dev(span, "data-tooltip", /*tip*/ ctx[1]);
    			}
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(span);
    			mounted = false;
    			run_all(dispose);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block$k.name,
    		type: "if",
    		source: "(14:0) {#if Boolean(locked)}",
    		ctx
    	});

    	return block;
    }

    function create_fragment$Z(ctx) {
    	let show_if = Boolean(/*locked*/ ctx[0]);
    	let if_block_anchor;
    	let if_block = show_if && create_if_block$k(ctx);

    	const block = {
    		c: function create() {
    			if (if_block) if_block.c();
    			if_block_anchor = empty();
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			if (if_block) if_block.m(target, anchor);
    			insert_dev(target, if_block_anchor, anchor);
    		},
    		p: function update(ctx, [dirty]) {
    			if (dirty & /*locked*/ 1) show_if = Boolean(/*locked*/ ctx[0]);

    			if (show_if) {
    				if (if_block) {
    					if_block.p(ctx, dirty);
    				} else {
    					if_block = create_if_block$k(ctx);
    					if_block.c();
    					if_block.m(if_block_anchor.parentNode, if_block_anchor);
    				}
    			} else if (if_block) {
    				if_block.d(1);
    				if_block = null;
    			}
    		},
    		i: noop,
    		o: noop,
    		d: function destroy(detaching) {
    			if (if_block) if_block.d(detaching);
    			if (detaching) detach_dev(if_block_anchor);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$Z.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$Z($$self, $$props, $$invalidate) {
    	let locked;
    	let tip;
    	let $t;
    	validate_store(X, 't');
    	component_subscribe($$self, X, $$value => $$invalidate(4, $t = $$value));
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('Lock', slots, []);
    	let { key } = $$props;

    	function unlock(event) {
    		event.stopPropagation();
    		localStorage.removeItem(key);
    		$$invalidate(0, locked = "");
    	}

    	const writable_props = ['key'];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<Lock> was created with unknown prop '${key}'`);
    	});

    	$$self.$$set = $$props => {
    		if ('key' in $$props) $$invalidate(3, key = $$props.key);
    	};

    	$$self.$capture_state = () => ({ t: X, tooltip, key, unlock, locked, tip, $t });

    	$$self.$inject_state = $$props => {
    		if ('key' in $$props) $$invalidate(3, key = $$props.key);
    		if ('locked' in $$props) $$invalidate(0, locked = $$props.locked);
    		if ('tip' in $$props) $$invalidate(1, tip = $$props.tip);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	$$self.$$.update = () => {
    		if ($$self.$$.dirty & /*key*/ 8) {
    			$$invalidate(0, locked = localStorage.getItem(key));
    		}

    		if ($$self.$$.dirty & /*$t*/ 16) {
    			$$invalidate(1, tip = $t(`tooltip.locked`));
    		}
    	};

    	return [locked, tip, unlock, key, $t];
    }

    class Lock extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$Z, create_fragment$Z, safe_not_equal, { key: 3 });

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Lock",
    			options,
    			id: create_fragment$Z.name
    		});

    		const { ctx } = this.$$;
    		const props = options.props || {};

    		if (/*key*/ ctx[3] === undefined && !('key' in props)) {
    			console.warn("<Lock> was created without expected prop 'key'");
    		}
    	}

    	get key() {
    		throw new Error("<Lock>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set key(value) {
    		throw new Error("<Lock>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /* src/components/navigation/header/menu/options/NavShieldOption.svelte generated by Svelte v3.44.2 */

    const { Object: Object_1$b } = globals;
    const file$O = "src/components/navigation/header/menu/options/NavShieldOption.svelte";

    function get_each_context$k(ctx, list, i) {
    	const child_ctx = ctx.slice();
    	child_ctx[6] = list[i];
    	return child_ctx;
    }

    function get_each_context_1$5(ctx, list, i) {
    	const child_ctx = ctx.slice();
    	child_ctx[9] = list[i];
    	return child_ctx;
    }

    // (26:12) <NavButton onclick={() => changeShield(shieldName)}>
    function create_default_slot_2$2(ctx) {
    	let svg;
    	let path;
    	let t0;
    	let t1_value = /*$t*/ ctx[1](`shield.${/*shieldType*/ ctx[6]}.${/*shieldName*/ ctx[9]}`) + "";
    	let t1;
    	let t2;

    	const block = {
    		c: function create() {
    			svg = svg_element("svg");
    			path = svg_element("path");
    			t0 = space();
    			t1 = text(t1_value);
    			t2 = space();
    			attr_dev(path, "d", shieldPaths[/*shieldName*/ ctx[9]]);
    			add_location(path, file$O, 27, 16, 1072);
    			attr_dev(svg, "width", "26");
    			attr_dev(svg, "height", "26");
    			attr_dev(svg, "viewBox", "0 0 200 210");
    			attr_dev(svg, "class", "svelte-ljo27");
    			toggle_class(svg, "selected", /*shieldName*/ ctx[9] === /*$shield*/ ctx[0]);
    			add_location(svg, file$O, 26, 14, 965);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, svg, anchor);
    			append_dev(svg, path);
    			insert_dev(target, t0, anchor);
    			insert_dev(target, t1, anchor);
    			insert_dev(target, t2, anchor);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*getShieldsInType, shieldTypes, $shield*/ 9) {
    				toggle_class(svg, "selected", /*shieldName*/ ctx[9] === /*$shield*/ ctx[0]);
    			}

    			if (dirty & /*$t*/ 2 && t1_value !== (t1_value = /*$t*/ ctx[1](`shield.${/*shieldType*/ ctx[6]}.${/*shieldName*/ ctx[9]}`) + "")) set_data_dev(t1, t1_value);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(svg);
    			if (detaching) detach_dev(t0);
    			if (detaching) detach_dev(t1);
    			if (detaching) detach_dev(t2);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_2$2.name,
    		type: "slot",
    		source: "(26:12) <NavButton onclick={() => changeShield(shieldName)}>",
    		ctx
    	});

    	return block;
    }

    // (25:10) {#each getShieldsInType(shieldType) as shieldName}
    function create_each_block_1$5(ctx) {
    	let navbutton;
    	let current;

    	function func() {
    		return /*func*/ ctx[4](/*shieldName*/ ctx[9]);
    	}

    	navbutton = new NavButton({
    			props: {
    				onclick: func,
    				$$slots: { default: [create_default_slot_2$2] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(navbutton.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(navbutton, target, anchor);
    			current = true;
    		},
    		p: function update(new_ctx, dirty) {
    			ctx = new_ctx;
    			const navbutton_changes = {};

    			if (dirty & /*$$scope, $t, $shield*/ 4099) {
    				navbutton_changes.$$scope = { dirty, ctx };
    			}

    			navbutton.$set(navbutton_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(navbutton.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(navbutton.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(navbutton, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_each_block_1$5.name,
    		type: "each",
    		source: "(25:10) {#each getShieldsInType(shieldType) as shieldName}",
    		ctx
    	});

    	return block;
    }

    // (35:8) <NavItem>
    function create_default_slot_1$8(ctx) {
    	let t_1_value = /*$t*/ ctx[1](`shield.types.${/*shieldType*/ ctx[6]}`) + "";
    	let t_1;

    	const block = {
    		c: function create() {
    			t_1 = text(t_1_value);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, t_1, anchor);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*$t*/ 2 && t_1_value !== (t_1_value = /*$t*/ ctx[1](`shield.types.${/*shieldType*/ ctx[6]}`) + "")) set_data_dev(t_1, t_1_value);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(t_1);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_1$8.name,
    		type: "slot",
    		source: "(35:8) <NavItem>",
    		ctx
    	});

    	return block;
    }

    // (22:4) {#each shieldTypes as shieldType}
    function create_each_block$k(ctx) {
    	let div1;
    	let div0;
    	let t0;
    	let navitem;
    	let t1;
    	let current;
    	let each_value_1 = /*getShieldsInType*/ ctx[3](/*shieldType*/ ctx[6]);
    	validate_each_argument(each_value_1);
    	let each_blocks = [];

    	for (let i = 0; i < each_value_1.length; i += 1) {
    		each_blocks[i] = create_each_block_1$5(get_each_context_1$5(ctx, each_value_1, i));
    	}

    	const out = i => transition_out(each_blocks[i], 1, 1, () => {
    		each_blocks[i] = null;
    	});

    	navitem = new NavItem({
    			props: {
    				$$slots: { default: [create_default_slot_1$8] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			div1 = element("div");
    			div0 = element("div");

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].c();
    			}

    			t0 = space();
    			create_component(navitem.$$.fragment);
    			t1 = space();
    			attr_dev(div0, "class", "dropdown level3 iconed svelte-ljo27");
    			add_location(div0, file$O, 23, 8, 788);
    			attr_dev(div1, "class", "container");
    			add_location(div1, file$O, 22, 6, 756);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div1, anchor);
    			append_dev(div1, div0);

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].m(div0, null);
    			}

    			append_dev(div1, t0);
    			mount_component(navitem, div1, null);
    			append_dev(div1, t1);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*changeShield, getShieldsInType, shieldTypes, $t, $shield, shieldPaths*/ 15) {
    				each_value_1 = /*getShieldsInType*/ ctx[3](/*shieldType*/ ctx[6]);
    				validate_each_argument(each_value_1);
    				let i;

    				for (i = 0; i < each_value_1.length; i += 1) {
    					const child_ctx = get_each_context_1$5(ctx, each_value_1, i);

    					if (each_blocks[i]) {
    						each_blocks[i].p(child_ctx, dirty);
    						transition_in(each_blocks[i], 1);
    					} else {
    						each_blocks[i] = create_each_block_1$5(child_ctx);
    						each_blocks[i].c();
    						transition_in(each_blocks[i], 1);
    						each_blocks[i].m(div0, null);
    					}
    				}

    				group_outros();

    				for (i = each_value_1.length; i < each_blocks.length; i += 1) {
    					out(i);
    				}

    				check_outros();
    			}

    			const navitem_changes = {};

    			if (dirty & /*$$scope, $t*/ 4098) {
    				navitem_changes.$$scope = { dirty, ctx };
    			}

    			navitem.$set(navitem_changes);
    		},
    		i: function intro(local) {
    			if (current) return;

    			for (let i = 0; i < each_value_1.length; i += 1) {
    				transition_in(each_blocks[i]);
    			}

    			transition_in(navitem.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			each_blocks = each_blocks.filter(Boolean);

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				transition_out(each_blocks[i]);
    			}

    			transition_out(navitem.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div1);
    			destroy_each(each_blocks, detaching);
    			destroy_component(navitem);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_each_block$k.name,
    		type: "each",
    		source: "(22:4) {#each shieldTypes as shieldType}",
    		ctx
    	});

    	return block;
    }

    // (41:4) <NavItem tip={$t("tooltip.shield")}>
    function create_default_slot$9(ctx) {
    	let lock;
    	let t0;
    	let t1_value = /*$t*/ ctx[1](`menu.shield`) + "";
    	let t1;
    	let current;
    	lock = new Lock({ props: { key: "shield" }, $$inline: true });

    	const block = {
    		c: function create() {
    			create_component(lock.$$.fragment);
    			t0 = space();
    			t1 = text(t1_value);
    		},
    		m: function mount(target, anchor) {
    			mount_component(lock, target, anchor);
    			insert_dev(target, t0, anchor);
    			insert_dev(target, t1, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			if ((!current || dirty & /*$t*/ 2) && t1_value !== (t1_value = /*$t*/ ctx[1](`menu.shield`) + "")) set_data_dev(t1, t1_value);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(lock.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(lock.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(lock, detaching);
    			if (detaching) detach_dev(t0);
    			if (detaching) detach_dev(t1);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot$9.name,
    		type: "slot",
    		source: "(41:4) <NavItem tip={$t(\\\"tooltip.shield\\\")}>",
    		ctx
    	});

    	return block;
    }

    // (40:2) {#key $shield}
    function create_key_block$5(ctx) {
    	let navitem;
    	let current;

    	navitem = new NavItem({
    			props: {
    				tip: /*$t*/ ctx[1]("tooltip.shield"),
    				$$slots: { default: [create_default_slot$9] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(navitem.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(navitem, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const navitem_changes = {};
    			if (dirty & /*$t*/ 2) navitem_changes.tip = /*$t*/ ctx[1]("tooltip.shield");

    			if (dirty & /*$$scope, $t*/ 4098) {
    				navitem_changes.$$scope = { dirty, ctx };
    			}

    			navitem.$set(navitem_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(navitem.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(navitem.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(navitem, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_key_block$5.name,
    		type: "key",
    		source: "(40:2) {#key $shield}",
    		ctx
    	});

    	return block;
    }

    function create_fragment$Y(ctx) {
    	let div1;
    	let div0;
    	let t_1;
    	let previous_key = /*$shield*/ ctx[0];
    	let current;
    	let each_value = shieldTypes;
    	validate_each_argument(each_value);
    	let each_blocks = [];

    	for (let i = 0; i < each_value.length; i += 1) {
    		each_blocks[i] = create_each_block$k(get_each_context$k(ctx, each_value, i));
    	}

    	const out = i => transition_out(each_blocks[i], 1, 1, () => {
    		each_blocks[i] = null;
    	});

    	let key_block = create_key_block$5(ctx);

    	const block = {
    		c: function create() {
    			div1 = element("div");
    			div0 = element("div");

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].c();
    			}

    			t_1 = space();
    			key_block.c();
    			attr_dev(div0, "class", "dropdown level2");
    			add_location(div0, file$O, 20, 2, 682);
    			attr_dev(div1, "class", "container");
    			add_location(div1, file$O, 19, 0, 656);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div1, anchor);
    			append_dev(div1, div0);

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].m(div0, null);
    			}

    			append_dev(div1, t_1);
    			key_block.m(div1, null);
    			current = true;
    		},
    		p: function update(ctx, [dirty]) {
    			if (dirty & /*$t, shieldTypes, getShieldsInType, changeShield, $shield, shieldPaths*/ 15) {
    				each_value = shieldTypes;
    				validate_each_argument(each_value);
    				let i;

    				for (i = 0; i < each_value.length; i += 1) {
    					const child_ctx = get_each_context$k(ctx, each_value, i);

    					if (each_blocks[i]) {
    						each_blocks[i].p(child_ctx, dirty);
    						transition_in(each_blocks[i], 1);
    					} else {
    						each_blocks[i] = create_each_block$k(child_ctx);
    						each_blocks[i].c();
    						transition_in(each_blocks[i], 1);
    						each_blocks[i].m(div0, null);
    					}
    				}

    				group_outros();

    				for (i = each_value.length; i < each_blocks.length; i += 1) {
    					out(i);
    				}

    				check_outros();
    			}

    			if (dirty & /*$shield*/ 1 && safe_not_equal(previous_key, previous_key = /*$shield*/ ctx[0])) {
    				group_outros();
    				transition_out(key_block, 1, 1, noop);
    				check_outros();
    				key_block = create_key_block$5(ctx);
    				key_block.c();
    				transition_in(key_block);
    				key_block.m(div1, null);
    			} else {
    				key_block.p(ctx, dirty);
    			}
    		},
    		i: function intro(local) {
    			if (current) return;

    			for (let i = 0; i < each_value.length; i += 1) {
    				transition_in(each_blocks[i]);
    			}

    			transition_in(key_block);
    			current = true;
    		},
    		o: function outro(local) {
    			each_blocks = each_blocks.filter(Boolean);

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				transition_out(each_blocks[i]);
    			}

    			transition_out(key_block);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div1);
    			destroy_each(each_blocks, detaching);
    			key_block.d(detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$Y.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$Y($$self, $$props, $$invalidate) {
    	let $shield;
    	let $changes;
    	let $t;
    	validate_store(shield, 'shield');
    	component_subscribe($$self, shield, $$value => $$invalidate(0, $shield = $$value));
    	validate_store(changes, 'changes');
    	component_subscribe($$self, changes, $$value => $$invalidate(5, $changes = $$value));
    	validate_store(X, 't');
    	component_subscribe($$self, X, $$value => $$invalidate(1, $t = $$value));
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('NavShieldOption', slots, []);

    	const changeShield = value => {
    		shield.set(value);
    		localStorage.setItem("shield", value);

    		if (changes.length()) {
    			const coa = JSON.parse($changes[0]);
    			coa.shield = $shield;
    			changes.add(JSON.stringify(coa));
    		}
    	};

    	const getShieldsInType = type => Object.keys(shields[type]);
    	const writable_props = [];

    	Object_1$b.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<NavShieldOption> was created with unknown prop '${key}'`);
    	});

    	const func = shieldName => changeShield(shieldName);

    	$$self.$capture_state = () => ({
    		t: X,
    		NavButton,
    		NavItem,
    		Lock,
    		shields,
    		shieldPaths,
    		shieldTypes,
    		shield,
    		changes,
    		changeShield,
    		getShieldsInType,
    		$shield,
    		$changes,
    		$t
    	});

    	return [$shield, $t, changeShield, getShieldsInType, func];
    }

    class NavShieldOption extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$Y, create_fragment$Y, safe_not_equal, {});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "NavShieldOption",
    			options,
    			id: create_fragment$Y.name
    		});
    	}
    }

    /* src/components/navigation/header/menu/options/NavColorsOption.svelte generated by Svelte v3.44.2 */

    // (11:0) <NavButton onclick={showTinctures} tip={$t("tooltip.colors")}>
    function create_default_slot$8(ctx) {
    	let lock0;
    	let t0;
    	let lock1;
    	let t1;
    	let t2_value = /*$t*/ ctx[0](`menu.colors`) + "";
    	let t2;
    	let current;

    	lock0 = new Lock({
    			props: { key: "tinctures" },
    			$$inline: true
    		});

    	lock1 = new Lock({ props: { key: "colors" }, $$inline: true });

    	const block = {
    		c: function create() {
    			create_component(lock0.$$.fragment);
    			t0 = space();
    			create_component(lock1.$$.fragment);
    			t1 = space();
    			t2 = text(t2_value);
    		},
    		m: function mount(target, anchor) {
    			mount_component(lock0, target, anchor);
    			insert_dev(target, t0, anchor);
    			mount_component(lock1, target, anchor);
    			insert_dev(target, t1, anchor);
    			insert_dev(target, t2, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			if ((!current || dirty & /*$t*/ 1) && t2_value !== (t2_value = /*$t*/ ctx[0](`menu.colors`) + "")) set_data_dev(t2, t2_value);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(lock0.$$.fragment, local);
    			transition_in(lock1.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(lock0.$$.fragment, local);
    			transition_out(lock1.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(lock0, detaching);
    			if (detaching) detach_dev(t0);
    			destroy_component(lock1, detaching);
    			if (detaching) detach_dev(t1);
    			if (detaching) detach_dev(t2);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot$8.name,
    		type: "slot",
    		source: "(11:0) <NavButton onclick={showTinctures} tip={$t(\\\"tooltip.colors\\\")}>",
    		ctx
    	});

    	return block;
    }

    function create_fragment$X(ctx) {
    	let navbutton;
    	let current;

    	navbutton = new NavButton({
    			props: {
    				onclick: /*showTinctures*/ ctx[1],
    				tip: /*$t*/ ctx[0]("tooltip.colors"),
    				$$slots: { default: [create_default_slot$8] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(navbutton.$$.fragment);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			mount_component(navbutton, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, [dirty]) {
    			const navbutton_changes = {};
    			if (dirty & /*$t*/ 1) navbutton_changes.tip = /*$t*/ ctx[0]("tooltip.colors");

    			if (dirty & /*$$scope, $t*/ 9) {
    				navbutton_changes.$$scope = { dirty, ctx };
    			}

    			navbutton.$set(navbutton_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(navbutton.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(navbutton.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(navbutton, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$X.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$X($$self, $$props, $$invalidate) {
    	let $state;
    	let $t;
    	validate_store(state, 'state');
    	component_subscribe($$self, state, $$value => $$invalidate(2, $state = $$value));
    	validate_store(X, 't');
    	component_subscribe($$self, X, $$value => $$invalidate(0, $t = $$value));
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('NavColorsOption', slots, []);

    	const showTinctures = () => {
    		set_store_value(state, $state.tinctures = 1, $state);
    	};

    	const writable_props = [];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<NavColorsOption> was created with unknown prop '${key}'`);
    	});

    	$$self.$capture_state = () => ({
    		t: X,
    		state,
    		Lock,
    		NavButton,
    		showTinctures,
    		$state,
    		$t
    	});

    	return [$t, showTinctures];
    }

    class NavColorsOption extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$X, create_fragment$X, safe_not_equal, {});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "NavColorsOption",
    			options,
    			id: create_fragment$X.name
    		});
    	}
    }

    const sizes = [
      [80, "giant"],
      [100, "huge"],
      [150, "large"],
      [200, "medium"],
      [300, "small"],
      [400, "tiny"]
    ];

    const gradients = ["no", "luster", "spotlight", "backlight", "brink"];

    const diapers = ["no", "nourse", "tessellation", "sennwald", "sulzbach"];

    /* src/components/navigation/header/menu/options/NavGradientOption.svelte generated by Svelte v3.44.2 */
    const file$N = "src/components/navigation/header/menu/options/NavGradientOption.svelte";

    function get_each_context$j(ctx, list, i) {
    	const child_ctx = ctx.slice();
    	child_ctx[4] = list[i];
    	return child_ctx;
    }

    // (17:6) <NavButton selected={gradient === $grad} onclick={() => changeGradient(gradient)}>
    function create_default_slot_1$7(ctx) {
    	let t0_value = /*$t*/ ctx[1](`gradient.${/*gradient*/ ctx[4]}`) + "";
    	let t0;
    	let t1;

    	const block = {
    		c: function create() {
    			t0 = text(t0_value);
    			t1 = space();
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, t0, anchor);
    			insert_dev(target, t1, anchor);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*$t*/ 2 && t0_value !== (t0_value = /*$t*/ ctx[1](`gradient.${/*gradient*/ ctx[4]}`) + "")) set_data_dev(t0, t0_value);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(t0);
    			if (detaching) detach_dev(t1);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_1$7.name,
    		type: "slot",
    		source: "(17:6) <NavButton selected={gradient === $grad} onclick={() => changeGradient(gradient)}>",
    		ctx
    	});

    	return block;
    }

    // (16:4) {#each gradients as gradient}
    function create_each_block$j(ctx) {
    	let navbutton;
    	let current;

    	function func() {
    		return /*func*/ ctx[3](/*gradient*/ ctx[4]);
    	}

    	navbutton = new NavButton({
    			props: {
    				selected: /*gradient*/ ctx[4] === /*$grad*/ ctx[0],
    				onclick: func,
    				$$slots: { default: [create_default_slot_1$7] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(navbutton.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(navbutton, target, anchor);
    			current = true;
    		},
    		p: function update(new_ctx, dirty) {
    			ctx = new_ctx;
    			const navbutton_changes = {};
    			if (dirty & /*$grad*/ 1) navbutton_changes.selected = /*gradient*/ ctx[4] === /*$grad*/ ctx[0];

    			if (dirty & /*$$scope, $t*/ 130) {
    				navbutton_changes.$$scope = { dirty, ctx };
    			}

    			navbutton.$set(navbutton_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(navbutton.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(navbutton.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(navbutton, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_each_block$j.name,
    		type: "each",
    		source: "(16:4) {#each gradients as gradient}",
    		ctx
    	});

    	return block;
    }

    // (24:4) <NavItem tip={$t("tooltip.gradient")}>
    function create_default_slot$7(ctx) {
    	let lock;
    	let t0;
    	let t1_value = /*$t*/ ctx[1](`menu.gradient`) + "";
    	let t1;
    	let current;
    	lock = new Lock({ props: { key: "grad" }, $$inline: true });

    	const block = {
    		c: function create() {
    			create_component(lock.$$.fragment);
    			t0 = space();
    			t1 = text(t1_value);
    		},
    		m: function mount(target, anchor) {
    			mount_component(lock, target, anchor);
    			insert_dev(target, t0, anchor);
    			insert_dev(target, t1, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			if ((!current || dirty & /*$t*/ 2) && t1_value !== (t1_value = /*$t*/ ctx[1](`menu.gradient`) + "")) set_data_dev(t1, t1_value);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(lock.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(lock.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(lock, detaching);
    			if (detaching) detach_dev(t0);
    			if (detaching) detach_dev(t1);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot$7.name,
    		type: "slot",
    		source: "(24:4) <NavItem tip={$t(\\\"tooltip.gradient\\\")}>",
    		ctx
    	});

    	return block;
    }

    // (23:2) {#key $grad}
    function create_key_block$4(ctx) {
    	let navitem;
    	let current;

    	navitem = new NavItem({
    			props: {
    				tip: /*$t*/ ctx[1]("tooltip.gradient"),
    				$$slots: { default: [create_default_slot$7] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(navitem.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(navitem, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const navitem_changes = {};
    			if (dirty & /*$t*/ 2) navitem_changes.tip = /*$t*/ ctx[1]("tooltip.gradient");

    			if (dirty & /*$$scope, $t*/ 130) {
    				navitem_changes.$$scope = { dirty, ctx };
    			}

    			navitem.$set(navitem_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(navitem.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(navitem.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(navitem, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_key_block$4.name,
    		type: "key",
    		source: "(23:2) {#key $grad}",
    		ctx
    	});

    	return block;
    }

    function create_fragment$W(ctx) {
    	let div1;
    	let div0;
    	let t_1;
    	let previous_key = /*$grad*/ ctx[0];
    	let current;
    	let each_value = gradients;
    	validate_each_argument(each_value);
    	let each_blocks = [];

    	for (let i = 0; i < each_value.length; i += 1) {
    		each_blocks[i] = create_each_block$j(get_each_context$j(ctx, each_value, i));
    	}

    	const out = i => transition_out(each_blocks[i], 1, 1, () => {
    		each_blocks[i] = null;
    	});

    	let key_block = create_key_block$4(ctx);

    	const block = {
    		c: function create() {
    			div1 = element("div");
    			div0 = element("div");

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].c();
    			}

    			t_1 = space();
    			key_block.c();
    			attr_dev(div0, "class", "dropdown level2");
    			add_location(div0, file$N, 14, 2, 433);
    			attr_dev(div1, "class", "container");
    			add_location(div1, file$N, 13, 0, 407);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div1, anchor);
    			append_dev(div1, div0);

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].m(div0, null);
    			}

    			append_dev(div1, t_1);
    			key_block.m(div1, null);
    			current = true;
    		},
    		p: function update(ctx, [dirty]) {
    			if (dirty & /*gradients, $grad, changeGradient, $t*/ 7) {
    				each_value = gradients;
    				validate_each_argument(each_value);
    				let i;

    				for (i = 0; i < each_value.length; i += 1) {
    					const child_ctx = get_each_context$j(ctx, each_value, i);

    					if (each_blocks[i]) {
    						each_blocks[i].p(child_ctx, dirty);
    						transition_in(each_blocks[i], 1);
    					} else {
    						each_blocks[i] = create_each_block$j(child_ctx);
    						each_blocks[i].c();
    						transition_in(each_blocks[i], 1);
    						each_blocks[i].m(div0, null);
    					}
    				}

    				group_outros();

    				for (i = each_value.length; i < each_blocks.length; i += 1) {
    					out(i);
    				}

    				check_outros();
    			}

    			if (dirty & /*$grad*/ 1 && safe_not_equal(previous_key, previous_key = /*$grad*/ ctx[0])) {
    				group_outros();
    				transition_out(key_block, 1, 1, noop);
    				check_outros();
    				key_block = create_key_block$4(ctx);
    				key_block.c();
    				transition_in(key_block);
    				key_block.m(div1, null);
    			} else {
    				key_block.p(ctx, dirty);
    			}
    		},
    		i: function intro(local) {
    			if (current) return;

    			for (let i = 0; i < each_value.length; i += 1) {
    				transition_in(each_blocks[i]);
    			}

    			transition_in(key_block);
    			current = true;
    		},
    		o: function outro(local) {
    			each_blocks = each_blocks.filter(Boolean);

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				transition_out(each_blocks[i]);
    			}

    			transition_out(key_block);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div1);
    			destroy_each(each_blocks, detaching);
    			key_block.d(detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$W.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$W($$self, $$props, $$invalidate) {
    	let $grad;
    	let $t;
    	validate_store(grad, 'grad');
    	component_subscribe($$self, grad, $$value => $$invalidate(0, $grad = $$value));
    	validate_store(X, 't');
    	component_subscribe($$self, X, $$value => $$invalidate(1, $t = $$value));
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('NavGradientOption', slots, []);

    	const changeGradient = value => {
    		grad.set(value);
    		localStorage.setItem("grad", value);
    	};

    	const writable_props = [];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<NavGradientOption> was created with unknown prop '${key}'`);
    	});

    	const func = gradient => changeGradient(gradient);

    	$$self.$capture_state = () => ({
    		t: X,
    		NavButton,
    		NavItem,
    		Lock,
    		gradients,
    		grad,
    		changeGradient,
    		$grad,
    		$t
    	});

    	return [$grad, $t, changeGradient, func];
    }

    class NavGradientOption extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$W, create_fragment$W, safe_not_equal, {});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "NavGradientOption",
    			options,
    			id: create_fragment$W.name
    		});
    	}
    }

    /* src/components/navigation/header/menu/options/NavDamaskingOption.svelte generated by Svelte v3.44.2 */
    const file$M = "src/components/navigation/header/menu/options/NavDamaskingOption.svelte";

    function get_each_context$i(ctx, list, i) {
    	const child_ctx = ctx.slice();
    	child_ctx[4] = list[i];
    	return child_ctx;
    }

    // (17:6) <NavButton selected={d === $diaper} onclick={() => changeDamasking(d)}>
    function create_default_slot_1$6(ctx) {
    	let t0_value = /*$t*/ ctx[1](`diaper.${/*d*/ ctx[4]}`) + "";
    	let t0;
    	let t1;

    	const block = {
    		c: function create() {
    			t0 = text(t0_value);
    			t1 = space();
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, t0, anchor);
    			insert_dev(target, t1, anchor);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*$t*/ 2 && t0_value !== (t0_value = /*$t*/ ctx[1](`diaper.${/*d*/ ctx[4]}`) + "")) set_data_dev(t0, t0_value);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(t0);
    			if (detaching) detach_dev(t1);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_1$6.name,
    		type: "slot",
    		source: "(17:6) <NavButton selected={d === $diaper} onclick={() => changeDamasking(d)}>",
    		ctx
    	});

    	return block;
    }

    // (16:4) {#each diapers as d}
    function create_each_block$i(ctx) {
    	let navbutton;
    	let current;

    	function func() {
    		return /*func*/ ctx[3](/*d*/ ctx[4]);
    	}

    	navbutton = new NavButton({
    			props: {
    				selected: /*d*/ ctx[4] === /*$diaper*/ ctx[0],
    				onclick: func,
    				$$slots: { default: [create_default_slot_1$6] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(navbutton.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(navbutton, target, anchor);
    			current = true;
    		},
    		p: function update(new_ctx, dirty) {
    			ctx = new_ctx;
    			const navbutton_changes = {};
    			if (dirty & /*$diaper*/ 1) navbutton_changes.selected = /*d*/ ctx[4] === /*$diaper*/ ctx[0];

    			if (dirty & /*$$scope, $t*/ 130) {
    				navbutton_changes.$$scope = { dirty, ctx };
    			}

    			navbutton.$set(navbutton_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(navbutton.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(navbutton.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(navbutton, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_each_block$i.name,
    		type: "each",
    		source: "(16:4) {#each diapers as d}",
    		ctx
    	});

    	return block;
    }

    // (24:4) <NavItem tip={$t("tooltip.damasking")}>
    function create_default_slot$6(ctx) {
    	let lock;
    	let t0;
    	let t1_value = /*$t*/ ctx[1](`menu.damasking`) + "";
    	let t1;
    	let current;
    	lock = new Lock({ props: { key: "diaper" }, $$inline: true });

    	const block = {
    		c: function create() {
    			create_component(lock.$$.fragment);
    			t0 = space();
    			t1 = text(t1_value);
    		},
    		m: function mount(target, anchor) {
    			mount_component(lock, target, anchor);
    			insert_dev(target, t0, anchor);
    			insert_dev(target, t1, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			if ((!current || dirty & /*$t*/ 2) && t1_value !== (t1_value = /*$t*/ ctx[1](`menu.damasking`) + "")) set_data_dev(t1, t1_value);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(lock.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(lock.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(lock, detaching);
    			if (detaching) detach_dev(t0);
    			if (detaching) detach_dev(t1);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot$6.name,
    		type: "slot",
    		source: "(24:4) <NavItem tip={$t(\\\"tooltip.damasking\\\")}>",
    		ctx
    	});

    	return block;
    }

    // (23:2) {#key $diaper}
    function create_key_block$3(ctx) {
    	let navitem;
    	let current;

    	navitem = new NavItem({
    			props: {
    				tip: /*$t*/ ctx[1]("tooltip.damasking"),
    				$$slots: { default: [create_default_slot$6] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(navitem.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(navitem, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const navitem_changes = {};
    			if (dirty & /*$t*/ 2) navitem_changes.tip = /*$t*/ ctx[1]("tooltip.damasking");

    			if (dirty & /*$$scope, $t*/ 130) {
    				navitem_changes.$$scope = { dirty, ctx };
    			}

    			navitem.$set(navitem_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(navitem.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(navitem.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(navitem, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_key_block$3.name,
    		type: "key",
    		source: "(23:2) {#key $diaper}",
    		ctx
    	});

    	return block;
    }

    function create_fragment$V(ctx) {
    	let div1;
    	let div0;
    	let t_1;
    	let previous_key = /*$diaper*/ ctx[0];
    	let current;
    	let each_value = diapers;
    	validate_each_argument(each_value);
    	let each_blocks = [];

    	for (let i = 0; i < each_value.length; i += 1) {
    		each_blocks[i] = create_each_block$i(get_each_context$i(ctx, each_value, i));
    	}

    	const out = i => transition_out(each_blocks[i], 1, 1, () => {
    		each_blocks[i] = null;
    	});

    	let key_block = create_key_block$3(ctx);

    	const block = {
    		c: function create() {
    			div1 = element("div");
    			div0 = element("div");

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].c();
    			}

    			t_1 = space();
    			key_block.c();
    			attr_dev(div0, "class", "dropdown level2");
    			add_location(div0, file$M, 14, 2, 438);
    			attr_dev(div1, "class", "container");
    			add_location(div1, file$M, 13, 0, 412);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div1, anchor);
    			append_dev(div1, div0);

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].m(div0, null);
    			}

    			append_dev(div1, t_1);
    			key_block.m(div1, null);
    			current = true;
    		},
    		p: function update(ctx, [dirty]) {
    			if (dirty & /*diapers, $diaper, changeDamasking, $t*/ 7) {
    				each_value = diapers;
    				validate_each_argument(each_value);
    				let i;

    				for (i = 0; i < each_value.length; i += 1) {
    					const child_ctx = get_each_context$i(ctx, each_value, i);

    					if (each_blocks[i]) {
    						each_blocks[i].p(child_ctx, dirty);
    						transition_in(each_blocks[i], 1);
    					} else {
    						each_blocks[i] = create_each_block$i(child_ctx);
    						each_blocks[i].c();
    						transition_in(each_blocks[i], 1);
    						each_blocks[i].m(div0, null);
    					}
    				}

    				group_outros();

    				for (i = each_value.length; i < each_blocks.length; i += 1) {
    					out(i);
    				}

    				check_outros();
    			}

    			if (dirty & /*$diaper*/ 1 && safe_not_equal(previous_key, previous_key = /*$diaper*/ ctx[0])) {
    				group_outros();
    				transition_out(key_block, 1, 1, noop);
    				check_outros();
    				key_block = create_key_block$3(ctx);
    				key_block.c();
    				transition_in(key_block);
    				key_block.m(div1, null);
    			} else {
    				key_block.p(ctx, dirty);
    			}
    		},
    		i: function intro(local) {
    			if (current) return;

    			for (let i = 0; i < each_value.length; i += 1) {
    				transition_in(each_blocks[i]);
    			}

    			transition_in(key_block);
    			current = true;
    		},
    		o: function outro(local) {
    			each_blocks = each_blocks.filter(Boolean);

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				transition_out(each_blocks[i]);
    			}

    			transition_out(key_block);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div1);
    			destroy_each(each_blocks, detaching);
    			key_block.d(detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$V.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$V($$self, $$props, $$invalidate) {
    	let $diaper;
    	let $t;
    	validate_store(diaper, 'diaper');
    	component_subscribe($$self, diaper, $$value => $$invalidate(0, $diaper = $$value));
    	validate_store(X, 't');
    	component_subscribe($$self, X, $$value => $$invalidate(1, $t = $$value));
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('NavDamaskingOption', slots, []);

    	const changeDamasking = value => {
    		diaper.set(value);
    		localStorage.setItem("diaper", value);
    	};

    	const writable_props = [];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<NavDamaskingOption> was created with unknown prop '${key}'`);
    	});

    	const func = d => changeDamasking(d);

    	$$self.$capture_state = () => ({
    		t: X,
    		NavButton,
    		NavItem,
    		Lock,
    		diapers,
    		diaper,
    		changeDamasking,
    		$diaper,
    		$t
    	});

    	return [$diaper, $t, changeDamasking, func];
    }

    class NavDamaskingOption extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$V, create_fragment$V, safe_not_equal, {});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "NavDamaskingOption",
    			options,
    			id: create_fragment$V.name
    		});
    	}
    }

    /* src/components/navigation/header/menu/options/NavGalleryOption.svelte generated by Svelte v3.44.2 */
    const file$L = "src/components/navigation/header/menu/options/NavGalleryOption.svelte";

    function get_each_context$h(ctx, list, i) {
    	const child_ctx = ctx.slice();
    	child_ctx[4] = list[i][0];
    	child_ctx[5] = list[i][1];
    	return child_ctx;
    }

    // (19:6) <NavButton selected={sizeNumber === $size} onclick={() => changeSize(sizeNumber)}>
    function create_default_slot_1$5(ctx) {
    	let t0_value = /*$t*/ ctx[1](`gallery.${/*sizeName*/ ctx[5]}`) + "";
    	let t0;
    	let t1;

    	const block = {
    		c: function create() {
    			t0 = text(t0_value);
    			t1 = space();
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, t0, anchor);
    			insert_dev(target, t1, anchor);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*$t*/ 2 && t0_value !== (t0_value = /*$t*/ ctx[1](`gallery.${/*sizeName*/ ctx[5]}`) + "")) set_data_dev(t0, t0_value);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(t0);
    			if (detaching) detach_dev(t1);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_1$5.name,
    		type: "slot",
    		source: "(19:6) <NavButton selected={sizeNumber === $size} onclick={() => changeSize(sizeNumber)}>",
    		ctx
    	});

    	return block;
    }

    // (18:4) {#each sizes as [sizeNumber, sizeName]}
    function create_each_block$h(ctx) {
    	let navbutton;
    	let current;

    	function func() {
    		return /*func*/ ctx[3](/*sizeNumber*/ ctx[4]);
    	}

    	navbutton = new NavButton({
    			props: {
    				selected: /*sizeNumber*/ ctx[4] === /*$size*/ ctx[0],
    				onclick: func,
    				$$slots: { default: [create_default_slot_1$5] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(navbutton.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(navbutton, target, anchor);
    			current = true;
    		},
    		p: function update(new_ctx, dirty) {
    			ctx = new_ctx;
    			const navbutton_changes = {};
    			if (dirty & /*$size*/ 1) navbutton_changes.selected = /*sizeNumber*/ ctx[4] === /*$size*/ ctx[0];

    			if (dirty & /*$$scope, $t*/ 258) {
    				navbutton_changes.$$scope = { dirty, ctx };
    			}

    			navbutton.$set(navbutton_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(navbutton.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(navbutton.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(navbutton, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_each_block$h.name,
    		type: "each",
    		source: "(18:4) {#each sizes as [sizeNumber, sizeName]}",
    		ctx
    	});

    	return block;
    }

    // (26:4) <NavItem tip={$t("tooltip.gallery")}>
    function create_default_slot$5(ctx) {
    	let lock;
    	let t0;
    	let t1_value = /*$t*/ ctx[1](`menu.gallery`) + "";
    	let t1;
    	let current;
    	lock = new Lock({ props: { key: "size" }, $$inline: true });

    	const block = {
    		c: function create() {
    			create_component(lock.$$.fragment);
    			t0 = space();
    			t1 = text(t1_value);
    		},
    		m: function mount(target, anchor) {
    			mount_component(lock, target, anchor);
    			insert_dev(target, t0, anchor);
    			insert_dev(target, t1, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			if ((!current || dirty & /*$t*/ 2) && t1_value !== (t1_value = /*$t*/ ctx[1](`menu.gallery`) + "")) set_data_dev(t1, t1_value);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(lock.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(lock.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(lock, detaching);
    			if (detaching) detach_dev(t0);
    			if (detaching) detach_dev(t1);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot$5.name,
    		type: "slot",
    		source: "(26:4) <NavItem tip={$t(\\\"tooltip.gallery\\\")}>",
    		ctx
    	});

    	return block;
    }

    // (25:2) {#key $size}
    function create_key_block$2(ctx) {
    	let navitem;
    	let current;

    	navitem = new NavItem({
    			props: {
    				tip: /*$t*/ ctx[1]("tooltip.gallery"),
    				$$slots: { default: [create_default_slot$5] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(navitem.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(navitem, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const navitem_changes = {};
    			if (dirty & /*$t*/ 2) navitem_changes.tip = /*$t*/ ctx[1]("tooltip.gallery");

    			if (dirty & /*$$scope, $t*/ 258) {
    				navitem_changes.$$scope = { dirty, ctx };
    			}

    			navitem.$set(navitem_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(navitem.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(navitem.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(navitem, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_key_block$2.name,
    		type: "key",
    		source: "(25:2) {#key $size}",
    		ctx
    	});

    	return block;
    }

    function create_fragment$U(ctx) {
    	let div1;
    	let div0;
    	let t_1;
    	let previous_key = /*$size*/ ctx[0];
    	let current;
    	let each_value = sizes;
    	validate_each_argument(each_value);
    	let each_blocks = [];

    	for (let i = 0; i < each_value.length; i += 1) {
    		each_blocks[i] = create_each_block$h(get_each_context$h(ctx, each_value, i));
    	}

    	const out = i => transition_out(each_blocks[i], 1, 1, () => {
    		each_blocks[i] = null;
    	});

    	let key_block = create_key_block$2(ctx);

    	const block = {
    		c: function create() {
    			div1 = element("div");
    			div0 = element("div");

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].c();
    			}

    			t_1 = space();
    			key_block.c();
    			attr_dev(div0, "class", "dropdown level2");
    			add_location(div0, file$L, 16, 2, 484);
    			attr_dev(div1, "class", "container");
    			add_location(div1, file$L, 15, 0, 458);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div1, anchor);
    			append_dev(div1, div0);

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].m(div0, null);
    			}

    			append_dev(div1, t_1);
    			key_block.m(div1, null);
    			current = true;
    		},
    		p: function update(ctx, [dirty]) {
    			if (dirty & /*sizes, $size, changeSize, $t*/ 7) {
    				each_value = sizes;
    				validate_each_argument(each_value);
    				let i;

    				for (i = 0; i < each_value.length; i += 1) {
    					const child_ctx = get_each_context$h(ctx, each_value, i);

    					if (each_blocks[i]) {
    						each_blocks[i].p(child_ctx, dirty);
    						transition_in(each_blocks[i], 1);
    					} else {
    						each_blocks[i] = create_each_block$h(child_ctx);
    						each_blocks[i].c();
    						transition_in(each_blocks[i], 1);
    						each_blocks[i].m(div0, null);
    					}
    				}

    				group_outros();

    				for (i = each_value.length; i < each_blocks.length; i += 1) {
    					out(i);
    				}

    				check_outros();
    			}

    			if (dirty & /*$size*/ 1 && safe_not_equal(previous_key, previous_key = /*$size*/ ctx[0])) {
    				group_outros();
    				transition_out(key_block, 1, 1, noop);
    				check_outros();
    				key_block = create_key_block$2(ctx);
    				key_block.c();
    				transition_in(key_block);
    				key_block.m(div1, null);
    			} else {
    				key_block.p(ctx, dirty);
    			}
    		},
    		i: function intro(local) {
    			if (current) return;

    			for (let i = 0; i < each_value.length; i += 1) {
    				transition_in(each_blocks[i]);
    			}

    			transition_in(key_block);
    			current = true;
    		},
    		o: function outro(local) {
    			each_blocks = each_blocks.filter(Boolean);

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				transition_out(each_blocks[i]);
    			}

    			transition_out(key_block);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div1);
    			destroy_each(each_blocks, detaching);
    			key_block.d(detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$U.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$U($$self, $$props, $$invalidate) {
    	let $size;
    	let $t;
    	validate_store(size, 'size');
    	component_subscribe($$self, size, $$value => $$invalidate(0, $size = $$value));
    	validate_store(X, 't');
    	component_subscribe($$self, X, $$value => $$invalidate(1, $t = $$value));
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('NavGalleryOption', slots, []);

    	const changeSize = value => {
    		if (typeof value !== "number") return;
    		size.set(value);
    		localStorage.setItem("size", String(value));
    	};

    	const writable_props = [];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<NavGalleryOption> was created with unknown prop '${key}'`);
    	});

    	const func = sizeNumber => changeSize(sizeNumber);

    	$$self.$capture_state = () => ({
    		t: X,
    		NavButton,
    		NavItem,
    		Lock,
    		sizes,
    		size,
    		changeSize,
    		$size,
    		$t
    	});

    	return [$size, $t, changeSize, func];
    }

    class NavGalleryOption extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$U, create_fragment$U, safe_not_equal, {});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "NavGalleryOption",
    			options,
    			id: create_fragment$U.name
    		});
    	}
    }

    /* src/components/navigation/header/shared/IconButton.svelte generated by Svelte v3.44.2 */
    const file$K = "src/components/navigation/header/shared/IconButton.svelte";

    function create_fragment$T(ctx) {
    	let svg;
    	let use;
    	let use_href_value;
    	let mounted;
    	let dispose;

    	const block = {
    		c: function create() {
    			svg = svg_element("svg");
    			use = svg_element("use");
    			attr_dev(use, "href", use_href_value = "#" + /*icon*/ ctx[0] + "-icon");
    			add_location(use, file$K, 12, 2, 292);
    			attr_dev(svg, "data-tooltip", /*tip*/ ctx[1]);
    			attr_dev(svg, "class", "svelte-m0cv10");
    			add_location(svg, file$K, 11, 0, 230);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, svg, anchor);
    			append_dev(svg, use);

    			if (!mounted) {
    				dispose = [
    					listen_dev(svg, "click", /*handleClick*/ ctx[2], false, false, false),
    					action_destroyer(tooltip.call(null, svg))
    				];

    				mounted = true;
    			}
    		},
    		p: function update(ctx, [dirty]) {
    			if (dirty & /*icon*/ 1 && use_href_value !== (use_href_value = "#" + /*icon*/ ctx[0] + "-icon")) {
    				attr_dev(use, "href", use_href_value);
    			}

    			if (dirty & /*tip*/ 2) {
    				attr_dev(svg, "data-tooltip", /*tip*/ ctx[1]);
    			}
    		},
    		i: noop,
    		o: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(svg);
    			mounted = false;
    			run_all(dispose);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$T.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$T($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('IconButton', slots, []);
    	let { icon } = $$props;
    	let { tip = undefined } = $$props;
    	let { onclick } = $$props;

    	const handleClick = event => {
    		event.stopPropagation();
    		onclick();
    	};

    	const writable_props = ['icon', 'tip', 'onclick'];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<IconButton> was created with unknown prop '${key}'`);
    	});

    	$$self.$$set = $$props => {
    		if ('icon' in $$props) $$invalidate(0, icon = $$props.icon);
    		if ('tip' in $$props) $$invalidate(1, tip = $$props.tip);
    		if ('onclick' in $$props) $$invalidate(3, onclick = $$props.onclick);
    	};

    	$$self.$capture_state = () => ({ tooltip, icon, tip, onclick, handleClick });

    	$$self.$inject_state = $$props => {
    		if ('icon' in $$props) $$invalidate(0, icon = $$props.icon);
    		if ('tip' in $$props) $$invalidate(1, tip = $$props.tip);
    		if ('onclick' in $$props) $$invalidate(3, onclick = $$props.onclick);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [icon, tip, handleClick, onclick];
    }

    class IconButton extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$T, create_fragment$T, safe_not_equal, { icon: 0, tip: 1, onclick: 3 });

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "IconButton",
    			options,
    			id: create_fragment$T.name
    		});

    		const { ctx } = this.$$;
    		const props = options.props || {};

    		if (/*icon*/ ctx[0] === undefined && !('icon' in props)) {
    			console.warn("<IconButton> was created without expected prop 'icon'");
    		}

    		if (/*onclick*/ ctx[3] === undefined && !('onclick' in props)) {
    			console.warn("<IconButton> was created without expected prop 'onclick'");
    		}
    	}

    	get icon() {
    		throw new Error("<IconButton>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set icon(value) {
    		throw new Error("<IconButton>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get tip() {
    		throw new Error("<IconButton>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set tip(value) {
    		throw new Error("<IconButton>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get onclick() {
    		throw new Error("<IconButton>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set onclick(value) {
    		throw new Error("<IconButton>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /* src/components/shared/ColorInput.svelte generated by Svelte v3.44.2 */

    const file$J = "src/components/shared/ColorInput.svelte";

    function create_fragment$S(ctx) {
    	let input;
    	let mounted;
    	let dispose;

    	const block = {
    		c: function create() {
    			input = element("input");
    			attr_dev(input, "type", "color");
    			input.value = /*value*/ ctx[0];
    			attr_dev(input, "class", "svelte-sqg2wx");
    			add_location(input, file$J, 9, 0, 174);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, input, anchor);

    			if (!mounted) {
    				dispose = listen_dev(input, "input", /*handleInput*/ ctx[1], false, false, false);
    				mounted = true;
    			}
    		},
    		p: function update(ctx, [dirty]) {
    			if (dirty & /*value*/ 1) {
    				prop_dev(input, "value", /*value*/ ctx[0]);
    			}
    		},
    		i: noop,
    		o: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(input);
    			mounted = false;
    			dispose();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$S.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$S($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('ColorInput', slots, []);
    	let { value } = $$props;
    	let { oninput } = $$props;

    	const handleInput = event => {
    		const value = event.target.value;
    		oninput(value);
    	};

    	const writable_props = ['value', 'oninput'];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<ColorInput> was created with unknown prop '${key}'`);
    	});

    	$$self.$$set = $$props => {
    		if ('value' in $$props) $$invalidate(0, value = $$props.value);
    		if ('oninput' in $$props) $$invalidate(2, oninput = $$props.oninput);
    	};

    	$$self.$capture_state = () => ({ value, oninput, handleInput });

    	$$self.$inject_state = $$props => {
    		if ('value' in $$props) $$invalidate(0, value = $$props.value);
    		if ('oninput' in $$props) $$invalidate(2, oninput = $$props.oninput);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [value, handleInput, oninput];
    }

    class ColorInput extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$S, create_fragment$S, safe_not_equal, { value: 0, oninput: 2 });

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "ColorInput",
    			options,
    			id: create_fragment$S.name
    		});

    		const { ctx } = this.$$;
    		const props = options.props || {};

    		if (/*value*/ ctx[0] === undefined && !('value' in props)) {
    			console.warn("<ColorInput> was created without expected prop 'value'");
    		}

    		if (/*oninput*/ ctx[2] === undefined && !('oninput' in props)) {
    			console.warn("<ColorInput> was created without expected prop 'oninput'");
    		}
    	}

    	get value() {
    		throw new Error("<ColorInput>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set value(value) {
    		throw new Error("<ColorInput>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get oninput() {
    		throw new Error("<ColorInput>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set oninput(value) {
    		throw new Error("<ColorInput>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /* src/components/shared/NumberInput.svelte generated by Svelte v3.44.2 */

    const file$I = "src/components/shared/NumberInput.svelte";

    function create_fragment$R(ctx) {
    	let input;
    	let mounted;
    	let dispose;

    	const block = {
    		c: function create() {
    			input = element("input");
    			attr_dev(input, "type", "number");
    			attr_dev(input, "min", /*min*/ ctx[1]);
    			attr_dev(input, "max", /*max*/ ctx[2]);
    			attr_dev(input, "step", /*step*/ ctx[3]);
    			input.value = /*value*/ ctx[0];
    			attr_dev(input, "class", "svelte-1h78xtb");
    			add_location(input, file$I, 12, 0, 243);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, input, anchor);

    			if (!mounted) {
    				dispose = listen_dev(input, "input", /*handleInput*/ ctx[4], false, false, false);
    				mounted = true;
    			}
    		},
    		p: function update(ctx, [dirty]) {
    			if (dirty & /*min*/ 2) {
    				attr_dev(input, "min", /*min*/ ctx[1]);
    			}

    			if (dirty & /*max*/ 4) {
    				attr_dev(input, "max", /*max*/ ctx[2]);
    			}

    			if (dirty & /*step*/ 8) {
    				attr_dev(input, "step", /*step*/ ctx[3]);
    			}

    			if (dirty & /*value*/ 1) {
    				prop_dev(input, "value", /*value*/ ctx[0]);
    			}
    		},
    		i: noop,
    		o: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(input);
    			mounted = false;
    			dispose();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$R.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$R($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('NumberInput', slots, []);
    	let { value } = $$props;
    	let { oninput } = $$props;
    	let { min = 0 } = $$props;
    	let { max = Infinity } = $$props;
    	let { step = 1 } = $$props;

    	const handleInput = event => {
    		const value = event.target.value;
    		oninput(+value);
    	};

    	const writable_props = ['value', 'oninput', 'min', 'max', 'step'];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<NumberInput> was created with unknown prop '${key}'`);
    	});

    	$$self.$$set = $$props => {
    		if ('value' in $$props) $$invalidate(0, value = $$props.value);
    		if ('oninput' in $$props) $$invalidate(5, oninput = $$props.oninput);
    		if ('min' in $$props) $$invalidate(1, min = $$props.min);
    		if ('max' in $$props) $$invalidate(2, max = $$props.max);
    		if ('step' in $$props) $$invalidate(3, step = $$props.step);
    	};

    	$$self.$capture_state = () => ({
    		value,
    		oninput,
    		min,
    		max,
    		step,
    		handleInput
    	});

    	$$self.$inject_state = $$props => {
    		if ('value' in $$props) $$invalidate(0, value = $$props.value);
    		if ('oninput' in $$props) $$invalidate(5, oninput = $$props.oninput);
    		if ('min' in $$props) $$invalidate(1, min = $$props.min);
    		if ('max' in $$props) $$invalidate(2, max = $$props.max);
    		if ('step' in $$props) $$invalidate(3, step = $$props.step);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [value, min, max, step, handleInput, oninput];
    }

    class NumberInput extends SvelteComponentDev {
    	constructor(options) {
    		super(options);

    		init(this, options, instance$R, create_fragment$R, safe_not_equal, {
    			value: 0,
    			oninput: 5,
    			min: 1,
    			max: 2,
    			step: 3
    		});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "NumberInput",
    			options,
    			id: create_fragment$R.name
    		});

    		const { ctx } = this.$$;
    		const props = options.props || {};

    		if (/*value*/ ctx[0] === undefined && !('value' in props)) {
    			console.warn("<NumberInput> was created without expected prop 'value'");
    		}

    		if (/*oninput*/ ctx[5] === undefined && !('oninput' in props)) {
    			console.warn("<NumberInput> was created without expected prop 'oninput'");
    		}
    	}

    	get value() {
    		throw new Error("<NumberInput>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set value(value) {
    		throw new Error("<NumberInput>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get oninput() {
    		throw new Error("<NumberInput>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set oninput(value) {
    		throw new Error("<NumberInput>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get min() {
    		throw new Error("<NumberInput>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set min(value) {
    		throw new Error("<NumberInput>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get max() {
    		throw new Error("<NumberInput>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set max(value) {
    		throw new Error("<NumberInput>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get step() {
    		throw new Error("<NumberInput>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set step(value) {
    		throw new Error("<NumberInput>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /* src/components/navigation/header/menu/options/NavBorderOption.svelte generated by Svelte v3.44.2 */
    const file$H = "src/components/navigation/header/menu/options/NavBorderOption.svelte";

    // (31:6) {#if $border !== DEFAULT_BORDER}
    function create_if_block_1$9(ctx) {
    	let iconbutton;
    	let current;

    	iconbutton = new IconButton({
    			props: {
    				icon: "undo",
    				tip: /*$t*/ ctx[0]("tooltip.undoColorChange"),
    				onclick: /*restoreDefaultBorder*/ ctx[3]
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(iconbutton.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(iconbutton, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const iconbutton_changes = {};
    			if (dirty & /*$t*/ 1) iconbutton_changes.tip = /*$t*/ ctx[0]("tooltip.undoColorChange");
    			iconbutton.$set(iconbutton_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(iconbutton.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(iconbutton.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(iconbutton, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_1$9.name,
    		type: "if",
    		source: "(31:6) {#if $border !== DEFAULT_BORDER}",
    		ctx
    	});

    	return block;
    }

    // (29:4) <NavItem>
    function create_default_slot_2$1(ctx) {
    	let t0_value = /*$t*/ ctx[0](`menu.color`) + "";
    	let t0;
    	let t1;
    	let t2;
    	let colorinput;
    	let current;
    	let if_block = /*$border*/ ctx[1] !== DEFAULT_BORDER && create_if_block_1$9(ctx);

    	colorinput = new ColorInput({
    			props: {
    				value: /*$border*/ ctx[1],
    				oninput: /*changeColor*/ ctx[6]
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			t0 = text(t0_value);
    			t1 = space();
    			if (if_block) if_block.c();
    			t2 = space();
    			create_component(colorinput.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, t0, anchor);
    			insert_dev(target, t1, anchor);
    			if (if_block) if_block.m(target, anchor);
    			insert_dev(target, t2, anchor);
    			mount_component(colorinput, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			if ((!current || dirty & /*$t*/ 1) && t0_value !== (t0_value = /*$t*/ ctx[0](`menu.color`) + "")) set_data_dev(t0, t0_value);

    			if (/*$border*/ ctx[1] !== DEFAULT_BORDER) {
    				if (if_block) {
    					if_block.p(ctx, dirty);

    					if (dirty & /*$border*/ 2) {
    						transition_in(if_block, 1);
    					}
    				} else {
    					if_block = create_if_block_1$9(ctx);
    					if_block.c();
    					transition_in(if_block, 1);
    					if_block.m(t2.parentNode, t2);
    				}
    			} else if (if_block) {
    				group_outros();

    				transition_out(if_block, 1, 1, () => {
    					if_block = null;
    				});

    				check_outros();
    			}

    			const colorinput_changes = {};
    			if (dirty & /*$border*/ 2) colorinput_changes.value = /*$border*/ ctx[1];
    			colorinput.$set(colorinput_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(if_block);
    			transition_in(colorinput.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(if_block);
    			transition_out(colorinput.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(t0);
    			if (detaching) detach_dev(t1);
    			if (if_block) if_block.d(detaching);
    			if (detaching) detach_dev(t2);
    			destroy_component(colorinput, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_2$1.name,
    		type: "slot",
    		source: "(29:4) <NavItem>",
    		ctx
    	});

    	return block;
    }

    // (39:6) {#if $borderWidth !== DEFAULT_BORDER_WIDTH}
    function create_if_block$j(ctx) {
    	let iconbutton;
    	let current;

    	iconbutton = new IconButton({
    			props: {
    				icon: "undo",
    				tip: /*$t*/ ctx[0]("tooltip.undoBorderWidthChange"),
    				onclick: /*restoreDefaultBorderWidth*/ ctx[4]
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(iconbutton.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(iconbutton, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const iconbutton_changes = {};
    			if (dirty & /*$t*/ 1) iconbutton_changes.tip = /*$t*/ ctx[0]("tooltip.undoBorderWidthChange");
    			iconbutton.$set(iconbutton_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(iconbutton.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(iconbutton.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(iconbutton, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block$j.name,
    		type: "if",
    		source: "(39:6) {#if $borderWidth !== DEFAULT_BORDER_WIDTH}",
    		ctx
    	});

    	return block;
    }

    // (37:4) <NavItem>
    function create_default_slot_1$4(ctx) {
    	let t0_value = /*$t*/ ctx[0](`menu.width`) + "";
    	let t0;
    	let t1;
    	let t2;
    	let numberinput;
    	let current;
    	let if_block = /*$borderWidth*/ ctx[2] !== DEFAULT_BORDER_WIDTH && create_if_block$j(ctx);

    	numberinput = new NumberInput({
    			props: {
    				min: 0,
    				max: 4,
    				step: 0.4,
    				value: /*$borderWidth*/ ctx[2],
    				oninput: /*changeWidth*/ ctx[5]
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			t0 = text(t0_value);
    			t1 = space();
    			if (if_block) if_block.c();
    			t2 = space();
    			create_component(numberinput.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, t0, anchor);
    			insert_dev(target, t1, anchor);
    			if (if_block) if_block.m(target, anchor);
    			insert_dev(target, t2, anchor);
    			mount_component(numberinput, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			if ((!current || dirty & /*$t*/ 1) && t0_value !== (t0_value = /*$t*/ ctx[0](`menu.width`) + "")) set_data_dev(t0, t0_value);

    			if (/*$borderWidth*/ ctx[2] !== DEFAULT_BORDER_WIDTH) {
    				if (if_block) {
    					if_block.p(ctx, dirty);

    					if (dirty & /*$borderWidth*/ 4) {
    						transition_in(if_block, 1);
    					}
    				} else {
    					if_block = create_if_block$j(ctx);
    					if_block.c();
    					transition_in(if_block, 1);
    					if_block.m(t2.parentNode, t2);
    				}
    			} else if (if_block) {
    				group_outros();

    				transition_out(if_block, 1, 1, () => {
    					if_block = null;
    				});

    				check_outros();
    			}

    			const numberinput_changes = {};
    			if (dirty & /*$borderWidth*/ 4) numberinput_changes.value = /*$borderWidth*/ ctx[2];
    			numberinput.$set(numberinput_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(if_block);
    			transition_in(numberinput.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(if_block);
    			transition_out(numberinput.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(t0);
    			if (detaching) detach_dev(t1);
    			if (if_block) if_block.d(detaching);
    			if (detaching) detach_dev(t2);
    			destroy_component(numberinput, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_1$4.name,
    		type: "slot",
    		source: "(37:4) <NavItem>",
    		ctx
    	});

    	return block;
    }

    // (46:2) <NavItem tip={$t("tooltip.border")}>
    function create_default_slot$4(ctx) {
    	let t_1_value = /*$t*/ ctx[0](`menu.border`) + "";
    	let t_1;

    	const block = {
    		c: function create() {
    			t_1 = text(t_1_value);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, t_1, anchor);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*$t*/ 1 && t_1_value !== (t_1_value = /*$t*/ ctx[0](`menu.border`) + "")) set_data_dev(t_1, t_1_value);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(t_1);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot$4.name,
    		type: "slot",
    		source: "(46:2) <NavItem tip={$t(\\\"tooltip.border\\\")}>",
    		ctx
    	});

    	return block;
    }

    function create_fragment$Q(ctx) {
    	let div1;
    	let div0;
    	let navitem0;
    	let t0;
    	let navitem1;
    	let t1;
    	let navitem2;
    	let current;

    	navitem0 = new NavItem({
    			props: {
    				$$slots: { default: [create_default_slot_2$1] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	navitem1 = new NavItem({
    			props: {
    				$$slots: { default: [create_default_slot_1$4] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	navitem2 = new NavItem({
    			props: {
    				tip: /*$t*/ ctx[0]("tooltip.border"),
    				$$slots: { default: [create_default_slot$4] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			div1 = element("div");
    			div0 = element("div");
    			create_component(navitem0.$$.fragment);
    			t0 = space();
    			create_component(navitem1.$$.fragment);
    			t1 = space();
    			create_component(navitem2.$$.fragment);
    			attr_dev(div0, "class", "dropdown level2");
    			add_location(div0, file$H, 27, 2, 925);
    			attr_dev(div1, "class", "container");
    			add_location(div1, file$H, 26, 0, 899);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div1, anchor);
    			append_dev(div1, div0);
    			mount_component(navitem0, div0, null);
    			append_dev(div0, t0);
    			mount_component(navitem1, div0, null);
    			append_dev(div1, t1);
    			mount_component(navitem2, div1, null);
    			current = true;
    		},
    		p: function update(ctx, [dirty]) {
    			const navitem0_changes = {};

    			if (dirty & /*$$scope, $border, $t*/ 131) {
    				navitem0_changes.$$scope = { dirty, ctx };
    			}

    			navitem0.$set(navitem0_changes);
    			const navitem1_changes = {};

    			if (dirty & /*$$scope, $borderWidth, $t*/ 133) {
    				navitem1_changes.$$scope = { dirty, ctx };
    			}

    			navitem1.$set(navitem1_changes);
    			const navitem2_changes = {};
    			if (dirty & /*$t*/ 1) navitem2_changes.tip = /*$t*/ ctx[0]("tooltip.border");

    			if (dirty & /*$$scope, $t*/ 129) {
    				navitem2_changes.$$scope = { dirty, ctx };
    			}

    			navitem2.$set(navitem2_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(navitem0.$$.fragment, local);
    			transition_in(navitem1.$$.fragment, local);
    			transition_in(navitem2.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(navitem0.$$.fragment, local);
    			transition_out(navitem1.$$.fragment, local);
    			transition_out(navitem2.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div1);
    			destroy_component(navitem0);
    			destroy_component(navitem1);
    			destroy_component(navitem2);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$Q.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$Q($$self, $$props, $$invalidate) {
    	let $t;
    	let $border;
    	let $borderWidth;
    	validate_store(X, 't');
    	component_subscribe($$self, X, $$value => $$invalidate(0, $t = $$value));
    	validate_store(border, 'border');
    	component_subscribe($$self, border, $$value => $$invalidate(1, $border = $$value));
    	validate_store(borderWidth, 'borderWidth');
    	component_subscribe($$self, borderWidth, $$value => $$invalidate(2, $borderWidth = $$value));
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('NavBorderOption', slots, []);

    	const restoreDefaultBorder = () => {
    		border.set(DEFAULT_BORDER);
    		localStorage.removeItem("border");
    	};

    	const restoreDefaultBorderWidth = () => {
    		borderWidth.set(DEFAULT_BORDER_WIDTH);
    		localStorage.removeItem("borderWidth");
    	};

    	const changeWidth = width => {
    		borderWidth.set(width);
    		localStorage.setItem("borderWidth", String(width));
    	};

    	const changeColor = color => {
    		border.set(color);
    		localStorage.setItem("border", color);
    	};

    	const writable_props = [];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<NavBorderOption> was created with unknown prop '${key}'`);
    	});

    	$$self.$capture_state = () => ({
    		t: X,
    		NavItem,
    		IconButton,
    		border,
    		borderWidth,
    		DEFAULT_BORDER,
    		DEFAULT_BORDER_WIDTH,
    		ColorInput,
    		NumberInput,
    		restoreDefaultBorder,
    		restoreDefaultBorderWidth,
    		changeWidth,
    		changeColor,
    		$t,
    		$border,
    		$borderWidth
    	});

    	return [
    		$t,
    		$border,
    		$borderWidth,
    		restoreDefaultBorder,
    		restoreDefaultBorderWidth,
    		changeWidth,
    		changeColor
    	];
    }

    class NavBorderOption extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$Q, create_fragment$Q, safe_not_equal, {});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "NavBorderOption",
    			options,
    			id: create_fragment$Q.name
    		});
    	}
    }

    /* src/components/navigation/header/menu/options/NavBackgroundOption.svelte generated by Svelte v3.44.2 */
    const file$G = "src/components/navigation/header/menu/options/NavBackgroundOption.svelte";

    // (30:6) {#if $background !== DEFAULT_BACKGROUND}
    function create_if_block$i(ctx) {
    	let iconbutton;
    	let current;

    	iconbutton = new IconButton({
    			props: {
    				icon: "undo",
    				tip: /*$t*/ ctx[0]("tooltip.undoColorChange"),
    				onclick: /*restoreDefaultBackground*/ ctx[2]
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(iconbutton.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(iconbutton, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const iconbutton_changes = {};
    			if (dirty & /*$t*/ 1) iconbutton_changes.tip = /*$t*/ ctx[0]("tooltip.undoColorChange");
    			iconbutton.$set(iconbutton_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(iconbutton.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(iconbutton.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(iconbutton, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block$i.name,
    		type: "if",
    		source: "(30:6) {#if $background !== DEFAULT_BACKGROUND}",
    		ctx
    	});

    	return block;
    }

    // (26:4) <NavItem>
    function create_default_slot_1$3(ctx) {
    	let t0_value = /*$t*/ ctx[0](`menu.color`) + "";
    	let t0;
    	let t1;
    	let iconbutton;
    	let t2;
    	let t3;
    	let colorinput;
    	let current;

    	iconbutton = new IconButton({
    			props: {
    				icon: "random",
    				tip: /*$t*/ ctx[0]("tooltip.randomColor"),
    				onclick: /*getRandomColor*/ ctx[3]
    			},
    			$$inline: true
    		});

    	let if_block = /*$background*/ ctx[1] !== DEFAULT_BACKGROUND && create_if_block$i(ctx);

    	colorinput = new ColorInput({
    			props: {
    				value: /*$background*/ ctx[1],
    				oninput: /*changeColor*/ ctx[4]
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			t0 = text(t0_value);
    			t1 = space();
    			create_component(iconbutton.$$.fragment);
    			t2 = space();
    			if (if_block) if_block.c();
    			t3 = space();
    			create_component(colorinput.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, t0, anchor);
    			insert_dev(target, t1, anchor);
    			mount_component(iconbutton, target, anchor);
    			insert_dev(target, t2, anchor);
    			if (if_block) if_block.m(target, anchor);
    			insert_dev(target, t3, anchor);
    			mount_component(colorinput, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			if ((!current || dirty & /*$t*/ 1) && t0_value !== (t0_value = /*$t*/ ctx[0](`menu.color`) + "")) set_data_dev(t0, t0_value);
    			const iconbutton_changes = {};
    			if (dirty & /*$t*/ 1) iconbutton_changes.tip = /*$t*/ ctx[0]("tooltip.randomColor");
    			iconbutton.$set(iconbutton_changes);

    			if (/*$background*/ ctx[1] !== DEFAULT_BACKGROUND) {
    				if (if_block) {
    					if_block.p(ctx, dirty);

    					if (dirty & /*$background*/ 2) {
    						transition_in(if_block, 1);
    					}
    				} else {
    					if_block = create_if_block$i(ctx);
    					if_block.c();
    					transition_in(if_block, 1);
    					if_block.m(t3.parentNode, t3);
    				}
    			} else if (if_block) {
    				group_outros();

    				transition_out(if_block, 1, 1, () => {
    					if_block = null;
    				});

    				check_outros();
    			}

    			const colorinput_changes = {};
    			if (dirty & /*$background*/ 2) colorinput_changes.value = /*$background*/ ctx[1];
    			colorinput.$set(colorinput_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(iconbutton.$$.fragment, local);
    			transition_in(if_block);
    			transition_in(colorinput.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(iconbutton.$$.fragment, local);
    			transition_out(if_block);
    			transition_out(colorinput.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(t0);
    			if (detaching) detach_dev(t1);
    			destroy_component(iconbutton, detaching);
    			if (detaching) detach_dev(t2);
    			if (if_block) if_block.d(detaching);
    			if (detaching) detach_dev(t3);
    			destroy_component(colorinput, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_1$3.name,
    		type: "slot",
    		source: "(26:4) <NavItem>",
    		ctx
    	});

    	return block;
    }

    // (38:2) <NavItem tip={$t("tooltip.background")}>
    function create_default_slot$3(ctx) {
    	let t_1_value = /*$t*/ ctx[0](`menu.background`) + "";
    	let t_1;

    	const block = {
    		c: function create() {
    			t_1 = text(t_1_value);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, t_1, anchor);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*$t*/ 1 && t_1_value !== (t_1_value = /*$t*/ ctx[0](`menu.background`) + "")) set_data_dev(t_1, t_1_value);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(t_1);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot$3.name,
    		type: "slot",
    		source: "(38:2) <NavItem tip={$t(\\\"tooltip.background\\\")}>",
    		ctx
    	});

    	return block;
    }

    function create_fragment$P(ctx) {
    	let div1;
    	let div0;
    	let navitem0;
    	let t_1;
    	let navitem1;
    	let current;

    	navitem0 = new NavItem({
    			props: {
    				$$slots: { default: [create_default_slot_1$3] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	navitem1 = new NavItem({
    			props: {
    				tip: /*$t*/ ctx[0]("tooltip.background"),
    				$$slots: { default: [create_default_slot$3] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			div1 = element("div");
    			div0 = element("div");
    			create_component(navitem0.$$.fragment);
    			t_1 = space();
    			create_component(navitem1.$$.fragment);
    			attr_dev(div0, "class", "dropdown level2");
    			add_location(div0, file$G, 24, 2, 857);
    			attr_dev(div1, "class", "container");
    			add_location(div1, file$G, 23, 0, 831);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div1, anchor);
    			append_dev(div1, div0);
    			mount_component(navitem0, div0, null);
    			append_dev(div1, t_1);
    			mount_component(navitem1, div1, null);
    			current = true;
    		},
    		p: function update(ctx, [dirty]) {
    			const navitem0_changes = {};

    			if (dirty & /*$$scope, $background, $t*/ 35) {
    				navitem0_changes.$$scope = { dirty, ctx };
    			}

    			navitem0.$set(navitem0_changes);
    			const navitem1_changes = {};
    			if (dirty & /*$t*/ 1) navitem1_changes.tip = /*$t*/ ctx[0]("tooltip.background");

    			if (dirty & /*$$scope, $t*/ 33) {
    				navitem1_changes.$$scope = { dirty, ctx };
    			}

    			navitem1.$set(navitem1_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(navitem0.$$.fragment, local);
    			transition_in(navitem1.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(navitem0.$$.fragment, local);
    			transition_out(navitem1.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div1);
    			destroy_component(navitem0);
    			destroy_component(navitem1);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$P.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$P($$self, $$props, $$invalidate) {
    	let $t;
    	let $background;
    	validate_store(X, 't');
    	component_subscribe($$self, X, $$value => $$invalidate(0, $t = $$value));
    	validate_store(background, 'background');
    	component_subscribe($$self, background, $$value => $$invalidate(1, $background = $$value));
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('NavBackgroundOption', slots, []);

    	const restoreDefaultBackground = () => {
    		background.set(DEFAULT_BACKGROUND);
    		localStorage.removeItem("background");
    	};

    	const getRandomColor = () => {
    		const symbols = "0123456789ABCDEF";
    		const color = "#" + [0, 0, 0, 0, 0, 0].map(() => symbols[Math.floor(Math.random() * 16)]).join("");
    		background.set(color);
    		localStorage.setItem("background", color);
    	};

    	const changeColor = color => {
    		background.set(color);
    		localStorage.setItem("background", color);
    	};

    	const writable_props = [];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<NavBackgroundOption> was created with unknown prop '${key}'`);
    	});

    	$$self.$capture_state = () => ({
    		t: X,
    		NavItem,
    		IconButton,
    		background,
    		DEFAULT_BACKGROUND,
    		ColorInput,
    		restoreDefaultBackground,
    		getRandomColor,
    		changeColor,
    		$t,
    		$background
    	});

    	return [$t, $background, restoreDefaultBackground, getRandomColor, changeColor];
    }

    class NavBackgroundOption extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$P, create_fragment$P, safe_not_equal, {});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "NavBackgroundOption",
    			options,
    			id: create_fragment$P.name
    		});
    	}
    }

    /* src/components/shared/RangeInput.svelte generated by Svelte v3.44.2 */

    const file$F = "src/components/shared/RangeInput.svelte";

    function create_fragment$O(ctx) {
    	let input0;
    	let t;
    	let input1;
    	let mounted;
    	let dispose;

    	const block = {
    		c: function create() {
    			input0 = element("input");
    			t = space();
    			input1 = element("input");
    			attr_dev(input0, "type", "range");
    			attr_dev(input0, "min", /*min*/ ctx[1]);
    			attr_dev(input0, "max", /*max*/ ctx[2]);
    			attr_dev(input0, "step", /*step*/ ctx[3]);
    			input0.value = /*value*/ ctx[0];
    			attr_dev(input0, "class", "svelte-1cxyc7");
    			add_location(input0, file$F, 12, 0, 243);
    			attr_dev(input1, "type", "number");
    			attr_dev(input1, "min", /*min*/ ctx[1]);
    			attr_dev(input1, "max", /*max*/ ctx[2]);
    			attr_dev(input1, "step", /*step*/ ctx[3]);
    			input1.value = /*value*/ ctx[0];
    			attr_dev(input1, "class", "svelte-1cxyc7");
    			add_location(input1, file$F, 13, 0, 316);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, input0, anchor);
    			insert_dev(target, t, anchor);
    			insert_dev(target, input1, anchor);

    			if (!mounted) {
    				dispose = [
    					listen_dev(input0, "input", /*handleInput*/ ctx[4], false, false, false),
    					listen_dev(input1, "input", /*handleInput*/ ctx[4], false, false, false)
    				];

    				mounted = true;
    			}
    		},
    		p: function update(ctx, [dirty]) {
    			if (dirty & /*min*/ 2) {
    				attr_dev(input0, "min", /*min*/ ctx[1]);
    			}

    			if (dirty & /*max*/ 4) {
    				attr_dev(input0, "max", /*max*/ ctx[2]);
    			}

    			if (dirty & /*step*/ 8) {
    				attr_dev(input0, "step", /*step*/ ctx[3]);
    			}

    			if (dirty & /*value*/ 1) {
    				prop_dev(input0, "value", /*value*/ ctx[0]);
    			}

    			if (dirty & /*min*/ 2) {
    				attr_dev(input1, "min", /*min*/ ctx[1]);
    			}

    			if (dirty & /*max*/ 4) {
    				attr_dev(input1, "max", /*max*/ ctx[2]);
    			}

    			if (dirty & /*step*/ 8) {
    				attr_dev(input1, "step", /*step*/ ctx[3]);
    			}

    			if (dirty & /*value*/ 1) {
    				prop_dev(input1, "value", /*value*/ ctx[0]);
    			}
    		},
    		i: noop,
    		o: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(input0);
    			if (detaching) detach_dev(t);
    			if (detaching) detach_dev(input1);
    			mounted = false;
    			run_all(dispose);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$O.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$O($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('RangeInput', slots, []);
    	let { value } = $$props;
    	let { oninput } = $$props;
    	let { min = 0 } = $$props;
    	let { max = Infinity } = $$props;
    	let { step = 1 } = $$props;

    	const handleInput = event => {
    		const value = event.target.value;
    		oninput(+value);
    	};

    	const writable_props = ['value', 'oninput', 'min', 'max', 'step'];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<RangeInput> was created with unknown prop '${key}'`);
    	});

    	$$self.$$set = $$props => {
    		if ('value' in $$props) $$invalidate(0, value = $$props.value);
    		if ('oninput' in $$props) $$invalidate(5, oninput = $$props.oninput);
    		if ('min' in $$props) $$invalidate(1, min = $$props.min);
    		if ('max' in $$props) $$invalidate(2, max = $$props.max);
    		if ('step' in $$props) $$invalidate(3, step = $$props.step);
    	};

    	$$self.$capture_state = () => ({
    		value,
    		oninput,
    		min,
    		max,
    		step,
    		handleInput
    	});

    	$$self.$inject_state = $$props => {
    		if ('value' in $$props) $$invalidate(0, value = $$props.value);
    		if ('oninput' in $$props) $$invalidate(5, oninput = $$props.oninput);
    		if ('min' in $$props) $$invalidate(1, min = $$props.min);
    		if ('max' in $$props) $$invalidate(2, max = $$props.max);
    		if ('step' in $$props) $$invalidate(3, step = $$props.step);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [value, min, max, step, handleInput, oninput];
    }

    class RangeInput extends SvelteComponentDev {
    	constructor(options) {
    		super(options);

    		init(this, options, instance$O, create_fragment$O, safe_not_equal, {
    			value: 0,
    			oninput: 5,
    			min: 1,
    			max: 2,
    			step: 3
    		});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "RangeInput",
    			options,
    			id: create_fragment$O.name
    		});

    		const { ctx } = this.$$;
    		const props = options.props || {};

    		if (/*value*/ ctx[0] === undefined && !('value' in props)) {
    			console.warn("<RangeInput> was created without expected prop 'value'");
    		}

    		if (/*oninput*/ ctx[5] === undefined && !('oninput' in props)) {
    			console.warn("<RangeInput> was created without expected prop 'oninput'");
    		}
    	}

    	get value() {
    		throw new Error("<RangeInput>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set value(value) {
    		throw new Error("<RangeInput>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get oninput() {
    		throw new Error("<RangeInput>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set oninput(value) {
    		throw new Error("<RangeInput>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get min() {
    		throw new Error("<RangeInput>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set min(value) {
    		throw new Error("<RangeInput>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get max() {
    		throw new Error("<RangeInput>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set max(value) {
    		throw new Error("<RangeInput>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get step() {
    		throw new Error("<RangeInput>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set step(value) {
    		throw new Error("<RangeInput>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /* src/components/navigation/header/menu/options/NavScaleOption.svelte generated by Svelte v3.44.2 */
    const file$E = "src/components/navigation/header/menu/options/NavScaleOption.svelte";

    // (14:4) <NavItem wide>
    function create_default_slot_1$2(ctx) {
    	let rangeinput;
    	let current;

    	rangeinput = new RangeInput({
    			props: {
    				min: 1,
    				max: 4,
    				step: 0.1,
    				value: /*$scale*/ ctx[0],
    				oninput: /*handleInput*/ ctx[2]
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(rangeinput.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(rangeinput, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const rangeinput_changes = {};
    			if (dirty & /*$scale*/ 1) rangeinput_changes.value = /*$scale*/ ctx[0];
    			rangeinput.$set(rangeinput_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(rangeinput.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(rangeinput.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(rangeinput, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_1$2.name,
    		type: "slot",
    		source: "(14:4) <NavItem wide>",
    		ctx
    	});

    	return block;
    }

    // (19:2) <NavItem tip={$t("tooltip.scale")}>
    function create_default_slot$2(ctx) {
    	let t_1_value = /*$t*/ ctx[1](`menu.scale`) + "";
    	let t_1;

    	const block = {
    		c: function create() {
    			t_1 = text(t_1_value);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, t_1, anchor);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*$t*/ 2 && t_1_value !== (t_1_value = /*$t*/ ctx[1](`menu.scale`) + "")) set_data_dev(t_1, t_1_value);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(t_1);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot$2.name,
    		type: "slot",
    		source: "(19:2) <NavItem tip={$t(\\\"tooltip.scale\\\")}>",
    		ctx
    	});

    	return block;
    }

    function create_fragment$N(ctx) {
    	let div1;
    	let div0;
    	let navitem0;
    	let t_1;
    	let navitem1;
    	let current;

    	navitem0 = new NavItem({
    			props: {
    				wide: true,
    				$$slots: { default: [create_default_slot_1$2] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	navitem1 = new NavItem({
    			props: {
    				tip: /*$t*/ ctx[1]("tooltip.scale"),
    				$$slots: { default: [create_default_slot$2] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			div1 = element("div");
    			div0 = element("div");
    			create_component(navitem0.$$.fragment);
    			t_1 = space();
    			create_component(navitem1.$$.fragment);
    			attr_dev(div0, "class", "dropdown level2");
    			add_location(div0, file$E, 12, 2, 361);
    			attr_dev(div1, "class", "container");
    			add_location(div1, file$E, 11, 0, 335);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div1, anchor);
    			append_dev(div1, div0);
    			mount_component(navitem0, div0, null);
    			append_dev(div1, t_1);
    			mount_component(navitem1, div1, null);
    			current = true;
    		},
    		p: function update(ctx, [dirty]) {
    			const navitem0_changes = {};

    			if (dirty & /*$$scope, $scale*/ 9) {
    				navitem0_changes.$$scope = { dirty, ctx };
    			}

    			navitem0.$set(navitem0_changes);
    			const navitem1_changes = {};
    			if (dirty & /*$t*/ 2) navitem1_changes.tip = /*$t*/ ctx[1]("tooltip.scale");

    			if (dirty & /*$$scope, $t*/ 10) {
    				navitem1_changes.$$scope = { dirty, ctx };
    			}

    			navitem1.$set(navitem1_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(navitem0.$$.fragment, local);
    			transition_in(navitem1.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(navitem0.$$.fragment, local);
    			transition_out(navitem1.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div1);
    			destroy_component(navitem0);
    			destroy_component(navitem1);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$N.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$N($$self, $$props, $$invalidate) {
    	let $scale;
    	let $t;
    	validate_store(scale, 'scale');
    	component_subscribe($$self, scale, $$value => $$invalidate(0, $scale = $$value));
    	validate_store(X, 't');
    	component_subscribe($$self, X, $$value => $$invalidate(1, $t = $$value));
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('NavScaleOption', slots, []);

    	const handleInput = value => {
    		scale.set(value);
    		localStorage.setItem("scale", String($scale));
    	};

    	const writable_props = [];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<NavScaleOption> was created with unknown prop '${key}'`);
    	});

    	$$self.$capture_state = () => ({
    		t: X,
    		NavItem,
    		RangeInput,
    		scale,
    		handleInput,
    		$scale,
    		$t
    	});

    	return [$scale, $t, handleInput];
    }

    class NavScaleOption extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$N, create_fragment$N, safe_not_equal, {});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "NavScaleOption",
    			options,
    			id: create_fragment$N.name
    		});
    	}
    }

    /* src/components/navigation/header/menu/options/Options.svelte generated by Svelte v3.44.2 */
    const file$D = "src/components/navigation/header/menu/options/Options.svelte";

    function create_fragment$M(ctx) {
    	let div1;
    	let navitem;
    	let t0;
    	let div0;
    	let navshieldoption;
    	let t1;
    	let navcolorsoption;
    	let t2;
    	let navgradientoption;
    	let t3;
    	let navdamaskingoption;
    	let t4;
    	let navgalleryoption;
    	let t5;
    	let navborderoption;
    	let t6;
    	let navbackgroundoption;
    	let t7;
    	let navscaleoption;
    	let current;

    	navitem = new NavItem({
    			props: {
    				value: "options",
    				label: /*$t*/ ctx[0](`menu.options`)
    			},
    			$$inline: true
    		});

    	navshieldoption = new NavShieldOption({ $$inline: true });
    	navcolorsoption = new NavColorsOption({ $$inline: true });
    	navgradientoption = new NavGradientOption({ $$inline: true });
    	navdamaskingoption = new NavDamaskingOption({ $$inline: true });
    	navgalleryoption = new NavGalleryOption({ $$inline: true });
    	navborderoption = new NavBorderOption({ $$inline: true });
    	navbackgroundoption = new NavBackgroundOption({ $$inline: true });
    	navscaleoption = new NavScaleOption({ $$inline: true });

    	const block = {
    		c: function create() {
    			div1 = element("div");
    			create_component(navitem.$$.fragment);
    			t0 = space();
    			div0 = element("div");
    			create_component(navshieldoption.$$.fragment);
    			t1 = space();
    			create_component(navcolorsoption.$$.fragment);
    			t2 = space();
    			create_component(navgradientoption.$$.fragment);
    			t3 = space();
    			create_component(navdamaskingoption.$$.fragment);
    			t4 = space();
    			create_component(navgalleryoption.$$.fragment);
    			t5 = space();
    			create_component(navborderoption.$$.fragment);
    			t6 = space();
    			create_component(navbackgroundoption.$$.fragment);
    			t7 = space();
    			create_component(navscaleoption.$$.fragment);
    			attr_dev(div0, "class", "dropdown level1");
    			add_location(div0, file$D, 16, 2, 676);
    			attr_dev(div1, "class", "container");
    			add_location(div1, file$D, 13, 0, 592);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div1, anchor);
    			mount_component(navitem, div1, null);
    			append_dev(div1, t0);
    			append_dev(div1, div0);
    			mount_component(navshieldoption, div0, null);
    			append_dev(div0, t1);
    			mount_component(navcolorsoption, div0, null);
    			append_dev(div0, t2);
    			mount_component(navgradientoption, div0, null);
    			append_dev(div0, t3);
    			mount_component(navdamaskingoption, div0, null);
    			append_dev(div0, t4);
    			mount_component(navgalleryoption, div0, null);
    			append_dev(div0, t5);
    			mount_component(navborderoption, div0, null);
    			append_dev(div0, t6);
    			mount_component(navbackgroundoption, div0, null);
    			append_dev(div0, t7);
    			mount_component(navscaleoption, div0, null);
    			current = true;
    		},
    		p: function update(ctx, [dirty]) {
    			const navitem_changes = {};
    			if (dirty & /*$t*/ 1) navitem_changes.label = /*$t*/ ctx[0](`menu.options`);
    			navitem.$set(navitem_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(navitem.$$.fragment, local);
    			transition_in(navshieldoption.$$.fragment, local);
    			transition_in(navcolorsoption.$$.fragment, local);
    			transition_in(navgradientoption.$$.fragment, local);
    			transition_in(navdamaskingoption.$$.fragment, local);
    			transition_in(navgalleryoption.$$.fragment, local);
    			transition_in(navborderoption.$$.fragment, local);
    			transition_in(navbackgroundoption.$$.fragment, local);
    			transition_in(navscaleoption.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(navitem.$$.fragment, local);
    			transition_out(navshieldoption.$$.fragment, local);
    			transition_out(navcolorsoption.$$.fragment, local);
    			transition_out(navgradientoption.$$.fragment, local);
    			transition_out(navdamaskingoption.$$.fragment, local);
    			transition_out(navgalleryoption.$$.fragment, local);
    			transition_out(navborderoption.$$.fragment, local);
    			transition_out(navbackgroundoption.$$.fragment, local);
    			transition_out(navscaleoption.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div1);
    			destroy_component(navitem);
    			destroy_component(navshieldoption);
    			destroy_component(navcolorsoption);
    			destroy_component(navgradientoption);
    			destroy_component(navdamaskingoption);
    			destroy_component(navgalleryoption);
    			destroy_component(navborderoption);
    			destroy_component(navbackgroundoption);
    			destroy_component(navscaleoption);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$M.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$M($$self, $$props, $$invalidate) {
    	let $t;
    	validate_store(X, 't');
    	component_subscribe($$self, X, $$value => $$invalidate(0, $t = $$value));
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('Options', slots, []);
    	const writable_props = [];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<Options> was created with unknown prop '${key}'`);
    	});

    	$$self.$capture_state = () => ({
    		t: X,
    		NavItem,
    		NavShieldOption,
    		NavColorsOption,
    		NavGradientOption,
    		NavDamaskingOption,
    		NavGalleryOption,
    		NavBorderOption,
    		NavBackgroundOption,
    		NavScaleOption,
    		$t
    	});

    	return [$t];
    }

    class Options extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$M, create_fragment$M, safe_not_equal, {});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Options",
    			options,
    			id: create_fragment$M.name
    		});
    	}
    }

    /* src/components/navigation/header/menu/Rollback.svelte generated by Svelte v3.44.2 */

    function create_fragment$L(ctx) {
    	let navbutton;
    	let current;

    	navbutton = new NavButton({
    			props: {
    				value: "rollback",
    				label: /*$t*/ ctx[1](`menu.rollback`),
    				disabled: !/*$matrix*/ ctx[0],
    				onclick: /*rollback*/ ctx[3],
    				tip: /*$t*/ ctx[1](/*$state*/ ctx[2].edit
    				? "tooltip.rollbackEdit"
    				: "tooltip.rollback"),
    				gesture: /*$t*/ ctx[1]("tooltip.swipeUp"),
    				hotkey: "Backspace"
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(navbutton.$$.fragment);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			mount_component(navbutton, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, [dirty]) {
    			const navbutton_changes = {};
    			if (dirty & /*$t*/ 2) navbutton_changes.label = /*$t*/ ctx[1](`menu.rollback`);
    			if (dirty & /*$matrix*/ 1) navbutton_changes.disabled = !/*$matrix*/ ctx[0];

    			if (dirty & /*$t, $state*/ 6) navbutton_changes.tip = /*$t*/ ctx[1](/*$state*/ ctx[2].edit
    			? "tooltip.rollbackEdit"
    			: "tooltip.rollback");

    			if (dirty & /*$t*/ 2) navbutton_changes.gesture = /*$t*/ ctx[1]("tooltip.swipeUp");
    			navbutton.$set(navbutton_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(navbutton.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(navbutton.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(navbutton, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$L.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$L($$self, $$props, $$invalidate) {
    	let $matrix;
    	let $t;
    	let $state;
    	validate_store(matrix, 'matrix');
    	component_subscribe($$self, matrix, $$value => $$invalidate(0, $matrix = $$value));
    	validate_store(X, 't');
    	component_subscribe($$self, X, $$value => $$invalidate(1, $t = $$value));
    	validate_store(state, 'state');
    	component_subscribe($$self, state, $$value => $$invalidate(2, $state = $$value));
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('Rollback', slots, []);

    	const rollback = () => {
    		set_store_value(matrix, $matrix -= 1, $matrix);
    	};

    	const writable_props = [];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<Rollback> was created with unknown prop '${key}'`);
    	});

    	$$self.$capture_state = () => ({
    		t: X,
    		state,
    		matrix,
    		NavButton,
    		rollback,
    		$matrix,
    		$t,
    		$state
    	});

    	return [$matrix, $t, $state, rollback];
    }

    class Rollback extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$L, create_fragment$L, safe_not_equal, {});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Rollback",
    			options,
    			id: create_fragment$L.name
    		});
    	}
    }

    /* src/components/navigation/header/menu/Reroll.svelte generated by Svelte v3.44.2 */

    function create_fragment$K(ctx) {
    	let navbutton;
    	let current;

    	navbutton = new NavButton({
    			props: {
    				value: "reroll",
    				label: /*$t*/ ctx[0](`menu.reroll`),
    				onclick: /*reroll*/ ctx[2],
    				tip: /*$t*/ ctx[0](/*$state*/ ctx[1].edit
    				? "tooltip.rerollEdit"
    				: "tooltip.reroll"),
    				gesture: /*$t*/ ctx[0]("tooltip.swipeDown"),
    				hotkey: "Enter"
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(navbutton.$$.fragment);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			mount_component(navbutton, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, [dirty]) {
    			const navbutton_changes = {};
    			if (dirty & /*$t*/ 1) navbutton_changes.label = /*$t*/ ctx[0](`menu.reroll`);

    			if (dirty & /*$t, $state*/ 3) navbutton_changes.tip = /*$t*/ ctx[0](/*$state*/ ctx[1].edit
    			? "tooltip.rerollEdit"
    			: "tooltip.reroll");

    			if (dirty & /*$t*/ 1) navbutton_changes.gesture = /*$t*/ ctx[0]("tooltip.swipeDown");
    			navbutton.$set(navbutton_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(navbutton.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(navbutton.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(navbutton, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$K.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$K($$self, $$props, $$invalidate) {
    	let $matrix;
    	let $t;
    	let $state;
    	validate_store(matrix, 'matrix');
    	component_subscribe($$self, matrix, $$value => $$invalidate(3, $matrix = $$value));
    	validate_store(X, 't');
    	component_subscribe($$self, X, $$value => $$invalidate(0, $t = $$value));
    	validate_store(state, 'state');
    	component_subscribe($$self, state, $$value => $$invalidate(1, $state = $$value));
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('Reroll', slots, []);

    	const reroll = () => {
    		set_store_value(matrix, $matrix += 1, $matrix);
    	};

    	const writable_props = [];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<Reroll> was created with unknown prop '${key}'`);
    	});

    	$$self.$capture_state = () => ({
    		t: X,
    		state,
    		matrix,
    		NavButton,
    		reroll,
    		$matrix,
    		$t,
    		$state
    	});

    	return [$t, $state, reroll];
    }

    class Reroll extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$K, create_fragment$K, safe_not_equal, {});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Reroll",
    			options,
    			id: create_fragment$K.name
    		});
    	}
    }

    /* src/components/navigation/header/menu/Save.svelte generated by Svelte v3.44.2 */

    const { console: console_1$1 } = globals;
    const file$C = "src/components/navigation/header/menu/Save.svelte";

    // (38:4) <NavButton onclick={() => download(null, "svg")} tip={$t("tooltip.downloadSVG")} hotkey="Ctrl + S">
    function create_default_slot_5(ctx) {
    	let t_1_value = /*$t*/ ctx[0](`menu.downloadSVG`) + "";
    	let t_1;

    	const block = {
    		c: function create() {
    			t_1 = text(t_1_value);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, t_1, anchor);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*$t*/ 1 && t_1_value !== (t_1_value = /*$t*/ ctx[0](`menu.downloadSVG`) + "")) set_data_dev(t_1, t_1_value);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(t_1);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_5.name,
    		type: "slot",
    		source: "(38:4) <NavButton onclick={() => download(null, \\\"svg\\\")} tip={$t(\\\"tooltip.downloadSVG\\\")} hotkey=\\\"Ctrl + S\\\">",
    		ctx
    	});

    	return block;
    }

    // (39:4) <NavButton onclick={() => download(null, "png")} tip={$t("tooltip.downloadPNG")} hotkey="Ctrl + P">
    function create_default_slot_4(ctx) {
    	let t_1_value = /*$t*/ ctx[0](`menu.downloadPNG`) + "";
    	let t_1;

    	const block = {
    		c: function create() {
    			t_1 = text(t_1_value);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, t_1, anchor);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*$t*/ 1 && t_1_value !== (t_1_value = /*$t*/ ctx[0](`menu.downloadPNG`) + "")) set_data_dev(t_1, t_1_value);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(t_1);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_4.name,
    		type: "slot",
    		source: "(39:4) <NavButton onclick={() => download(null, \\\"png\\\")} tip={$t(\\\"tooltip.downloadPNG\\\")} hotkey=\\\"Ctrl + P\\\">",
    		ctx
    	});

    	return block;
    }

    // (40:4) <NavButton onclick={() => download(null, "jpeg")} tip={$t("tooltip.downloadJPEG")} hotkey="Ctrl + J">
    function create_default_slot_3(ctx) {
    	let t_1_value = /*$t*/ ctx[0](`menu.downloadJPEG`) + "";
    	let t_1;

    	const block = {
    		c: function create() {
    			t_1 = text(t_1_value);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, t_1, anchor);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*$t*/ 1 && t_1_value !== (t_1_value = /*$t*/ ctx[0](`menu.downloadJPEG`) + "")) set_data_dev(t_1, t_1_value);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(t_1);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_3.name,
    		type: "slot",
    		source: "(40:4) <NavButton onclick={() => download(null, \\\"jpeg\\\")} tip={$t(\\\"tooltip.downloadJPEG\\\")} hotkey=\\\"Ctrl + J\\\">",
    		ctx
    	});

    	return block;
    }

    // (42:4) {#if $state.edit}
    function create_if_block$h(ctx) {
    	let navbutton0;
    	let t0;
    	let navbutton1;
    	let t1;
    	let navbutton2;
    	let current;

    	navbutton0 = new NavButton({
    			props: {
    				onclick: /*copyEditLink*/ ctx[2],
    				tip: /*$t*/ ctx[0]("tooltip.copyEditLink"),
    				$$slots: { default: [create_default_slot_2] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	navbutton1 = new NavButton({
    			props: {
    				onclick: /*copyApiLink*/ ctx[3],
    				tip: /*$t*/ ctx[0]("tooltip.copyApiLink"),
    				$$slots: { default: [create_default_slot_1$1] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	navbutton2 = new NavButton({
    			props: {
    				onclick: /*copyCoaString*/ ctx[4],
    				tip: /*$t*/ ctx[0]("tooltip.copyCoaString"),
    				$$slots: { default: [create_default_slot$1] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(navbutton0.$$.fragment);
    			t0 = space();
    			create_component(navbutton1.$$.fragment);
    			t1 = space();
    			create_component(navbutton2.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(navbutton0, target, anchor);
    			insert_dev(target, t0, anchor);
    			mount_component(navbutton1, target, anchor);
    			insert_dev(target, t1, anchor);
    			mount_component(navbutton2, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const navbutton0_changes = {};
    			if (dirty & /*$t*/ 1) navbutton0_changes.tip = /*$t*/ ctx[0]("tooltip.copyEditLink");

    			if (dirty & /*$$scope, $t*/ 1025) {
    				navbutton0_changes.$$scope = { dirty, ctx };
    			}

    			navbutton0.$set(navbutton0_changes);
    			const navbutton1_changes = {};
    			if (dirty & /*$t*/ 1) navbutton1_changes.tip = /*$t*/ ctx[0]("tooltip.copyApiLink");

    			if (dirty & /*$$scope, $t*/ 1025) {
    				navbutton1_changes.$$scope = { dirty, ctx };
    			}

    			navbutton1.$set(navbutton1_changes);
    			const navbutton2_changes = {};
    			if (dirty & /*$t*/ 1) navbutton2_changes.tip = /*$t*/ ctx[0]("tooltip.copyCoaString");

    			if (dirty & /*$$scope, $t*/ 1025) {
    				navbutton2_changes.$$scope = { dirty, ctx };
    			}

    			navbutton2.$set(navbutton2_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(navbutton0.$$.fragment, local);
    			transition_in(navbutton1.$$.fragment, local);
    			transition_in(navbutton2.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(navbutton0.$$.fragment, local);
    			transition_out(navbutton1.$$.fragment, local);
    			transition_out(navbutton2.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(navbutton0, detaching);
    			if (detaching) detach_dev(t0);
    			destroy_component(navbutton1, detaching);
    			if (detaching) detach_dev(t1);
    			destroy_component(navbutton2, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block$h.name,
    		type: "if",
    		source: "(42:4) {#if $state.edit}",
    		ctx
    	});

    	return block;
    }

    // (43:6) <NavButton onclick={copyEditLink} tip={$t("tooltip.copyEditLink")}>
    function create_default_slot_2(ctx) {
    	let t_1_value = /*$t*/ ctx[0](`menu.copyEditLink`) + "";
    	let t_1;

    	const block = {
    		c: function create() {
    			t_1 = text(t_1_value);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, t_1, anchor);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*$t*/ 1 && t_1_value !== (t_1_value = /*$t*/ ctx[0](`menu.copyEditLink`) + "")) set_data_dev(t_1, t_1_value);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(t_1);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_2.name,
    		type: "slot",
    		source: "(43:6) <NavButton onclick={copyEditLink} tip={$t(\\\"tooltip.copyEditLink\\\")}>",
    		ctx
    	});

    	return block;
    }

    // (44:6) <NavButton onclick={copyApiLink} tip={$t("tooltip.copyApiLink")}>
    function create_default_slot_1$1(ctx) {
    	let t_1_value = /*$t*/ ctx[0](`menu.copyApiLink`) + "";
    	let t_1;

    	const block = {
    		c: function create() {
    			t_1 = text(t_1_value);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, t_1, anchor);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*$t*/ 1 && t_1_value !== (t_1_value = /*$t*/ ctx[0](`menu.copyApiLink`) + "")) set_data_dev(t_1, t_1_value);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(t_1);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_1$1.name,
    		type: "slot",
    		source: "(44:6) <NavButton onclick={copyApiLink} tip={$t(\\\"tooltip.copyApiLink\\\")}>",
    		ctx
    	});

    	return block;
    }

    // (45:6) <NavButton onclick={copyCoaString} tip={$t("tooltip.copyCoaString")}>
    function create_default_slot$1(ctx) {
    	let t_1_value = /*$t*/ ctx[0](`menu.copyCoaString`) + "";
    	let t_1;

    	const block = {
    		c: function create() {
    			t_1 = text(t_1_value);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, t_1, anchor);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*$t*/ 1 && t_1_value !== (t_1_value = /*$t*/ ctx[0](`menu.copyCoaString`) + "")) set_data_dev(t_1, t_1_value);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(t_1);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot$1.name,
    		type: "slot",
    		source: "(45:6) <NavButton onclick={copyCoaString} tip={$t(\\\"tooltip.copyCoaString\\\")}>",
    		ctx
    	});

    	return block;
    }

    function create_fragment$J(ctx) {
    	let div1;
    	let navitem;
    	let t0;
    	let div0;
    	let navbutton0;
    	let t1;
    	let navbutton1;
    	let t2;
    	let navbutton2;
    	let t3;
    	let current;

    	navitem = new NavItem({
    			props: {
    				value: "save",
    				label: /*$t*/ ctx[0](`menu.save`)
    			},
    			$$inline: true
    		});

    	navbutton0 = new NavButton({
    			props: {
    				onclick: /*func*/ ctx[5],
    				tip: /*$t*/ ctx[0]("tooltip.downloadSVG"),
    				hotkey: "Ctrl + S",
    				$$slots: { default: [create_default_slot_5] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	navbutton1 = new NavButton({
    			props: {
    				onclick: /*func_1*/ ctx[6],
    				tip: /*$t*/ ctx[0]("tooltip.downloadPNG"),
    				hotkey: "Ctrl + P",
    				$$slots: { default: [create_default_slot_4] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	navbutton2 = new NavButton({
    			props: {
    				onclick: /*func_2*/ ctx[7],
    				tip: /*$t*/ ctx[0]("tooltip.downloadJPEG"),
    				hotkey: "Ctrl + J",
    				$$slots: { default: [create_default_slot_3] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	let if_block = /*$state*/ ctx[1].edit && create_if_block$h(ctx);

    	const block = {
    		c: function create() {
    			div1 = element("div");
    			create_component(navitem.$$.fragment);
    			t0 = space();
    			div0 = element("div");
    			create_component(navbutton0.$$.fragment);
    			t1 = space();
    			create_component(navbutton1.$$.fragment);
    			t2 = space();
    			create_component(navbutton2.$$.fragment);
    			t3 = space();
    			if (if_block) if_block.c();
    			attr_dev(div0, "class", "dropdown level1");
    			add_location(div0, file$C, 36, 2, 1236);
    			attr_dev(div1, "class", "container");
    			add_location(div1, file$C, 34, 0, 1159);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div1, anchor);
    			mount_component(navitem, div1, null);
    			append_dev(div1, t0);
    			append_dev(div1, div0);
    			mount_component(navbutton0, div0, null);
    			append_dev(div0, t1);
    			mount_component(navbutton1, div0, null);
    			append_dev(div0, t2);
    			mount_component(navbutton2, div0, null);
    			append_dev(div0, t3);
    			if (if_block) if_block.m(div0, null);
    			current = true;
    		},
    		p: function update(ctx, [dirty]) {
    			const navitem_changes = {};
    			if (dirty & /*$t*/ 1) navitem_changes.label = /*$t*/ ctx[0](`menu.save`);
    			navitem.$set(navitem_changes);
    			const navbutton0_changes = {};
    			if (dirty & /*$t*/ 1) navbutton0_changes.tip = /*$t*/ ctx[0]("tooltip.downloadSVG");

    			if (dirty & /*$$scope, $t*/ 1025) {
    				navbutton0_changes.$$scope = { dirty, ctx };
    			}

    			navbutton0.$set(navbutton0_changes);
    			const navbutton1_changes = {};
    			if (dirty & /*$t*/ 1) navbutton1_changes.tip = /*$t*/ ctx[0]("tooltip.downloadPNG");

    			if (dirty & /*$$scope, $t*/ 1025) {
    				navbutton1_changes.$$scope = { dirty, ctx };
    			}

    			navbutton1.$set(navbutton1_changes);
    			const navbutton2_changes = {};
    			if (dirty & /*$t*/ 1) navbutton2_changes.tip = /*$t*/ ctx[0]("tooltip.downloadJPEG");

    			if (dirty & /*$$scope, $t*/ 1025) {
    				navbutton2_changes.$$scope = { dirty, ctx };
    			}

    			navbutton2.$set(navbutton2_changes);

    			if (/*$state*/ ctx[1].edit) {
    				if (if_block) {
    					if_block.p(ctx, dirty);

    					if (dirty & /*$state*/ 2) {
    						transition_in(if_block, 1);
    					}
    				} else {
    					if_block = create_if_block$h(ctx);
    					if_block.c();
    					transition_in(if_block, 1);
    					if_block.m(div0, null);
    				}
    			} else if (if_block) {
    				group_outros();

    				transition_out(if_block, 1, 1, () => {
    					if_block = null;
    				});

    				check_outros();
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(navitem.$$.fragment, local);
    			transition_in(navbutton0.$$.fragment, local);
    			transition_in(navbutton1.$$.fragment, local);
    			transition_in(navbutton2.$$.fragment, local);
    			transition_in(if_block);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(navitem.$$.fragment, local);
    			transition_out(navbutton0.$$.fragment, local);
    			transition_out(navbutton1.$$.fragment, local);
    			transition_out(navbutton2.$$.fragment, local);
    			transition_out(if_block);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div1);
    			destroy_component(navitem);
    			destroy_component(navbutton0);
    			destroy_component(navbutton1);
    			destroy_component(navbutton2);
    			if (if_block) if_block.d();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$J.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$J($$self, $$props, $$invalidate) {
    	let $t;
    	let $changes;
    	let $state;
    	validate_store(X, 't');
    	component_subscribe($$self, X, $$value => $$invalidate(0, $t = $$value));
    	validate_store(changes, 'changes');
    	component_subscribe($$self, changes, $$value => $$invalidate(8, $changes = $$value));
    	validate_store(state, 'state');
    	component_subscribe($$self, state, $$value => $$invalidate(1, $state = $$value));
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('Save', slots, []);

    	function copyToClipboard(stringToCopy, text) {
    		message.clear();

    		navigator.clipboard.writeText(stringToCopy).then(
    			() => {
    				setTimeout(
    					() => {
    						message.success(text);
    					},
    					500
    				);
    			},
    			err => {
    				message.error($t("error.copyToClipboard"));
    				console.error(err);
    			}
    		);
    	}

    	function copyEditLink() {
    		const coa = $changes[0].replaceAll("#", "%23");
    		const url = location.origin + location.pathname + "?coa=" + coa;
    		copyToClipboard(url, $t("success.copyEditLink"));
    	}

    	function copyApiLink() {
    		const encoded = encodeURI($changes[0]);
    		const API = "https://armoria.herokuapp.com/";
    		const url = `${API}?size=500&format=png&coa=${encoded}`;
    		copyToClipboard(url, $t("success.copyApiLink"));
    	}

    	function copyCoaString() {
    		const encoded = encodeURI($changes[0]);
    		copyToClipboard(encoded, $t("success.copyCoaString"));
    	}

    	const writable_props = [];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console_1$1.warn(`<Save> was created with unknown prop '${key}'`);
    	});

    	const func = () => download(null, "svg");
    	const func_1 = () => download(null, "png");
    	const func_2 = () => download(null, "jpeg");

    	$$self.$capture_state = () => ({
    		t: X,
    		download,
    		changes,
    		message,
    		state,
    		NavButton,
    		NavItem,
    		copyToClipboard,
    		copyEditLink,
    		copyApiLink,
    		copyCoaString,
    		$t,
    		$changes,
    		$state
    	});

    	return [$t, $state, copyEditLink, copyApiLink, copyCoaString, func, func_1, func_2];
    }

    class Save extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$J, create_fragment$J, safe_not_equal, {});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Save",
    			options,
    			id: create_fragment$J.name
    		});
    	}
    }

    /* src/components/navigation/header/menu/Upload.svelte generated by Svelte v3.44.2 */
    const file$B = "src/components/navigation/header/menu/Upload.svelte";

    // (17:4) <NavButton onclick={showRasterUpload} tip={$t("tooltip.rasterCharge")}>
    function create_default_slot_1(ctx) {
    	let t_1_value = /*$t*/ ctx[0](`menu.rasterCharge`) + "";
    	let t_1;

    	const block = {
    		c: function create() {
    			t_1 = text(t_1_value);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, t_1, anchor);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*$t*/ 1 && t_1_value !== (t_1_value = /*$t*/ ctx[0](`menu.rasterCharge`) + "")) set_data_dev(t_1, t_1_value);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(t_1);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_1.name,
    		type: "slot",
    		source: "(17:4) <NavButton onclick={showRasterUpload} tip={$t(\\\"tooltip.rasterCharge\\\")}>",
    		ctx
    	});

    	return block;
    }

    // (21:4) <NavButton onclick={showVectorUpload} tip={$t("tooltip.vectorCharge")}>
    function create_default_slot(ctx) {
    	let t_1_value = /*$t*/ ctx[0](`menu.vectorCharge`) + "";
    	let t_1;

    	const block = {
    		c: function create() {
    			t_1 = text(t_1_value);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, t_1, anchor);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*$t*/ 1 && t_1_value !== (t_1_value = /*$t*/ ctx[0](`menu.vectorCharge`) + "")) set_data_dev(t_1, t_1_value);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(t_1);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot.name,
    		type: "slot",
    		source: "(21:4) <NavButton onclick={showVectorUpload} tip={$t(\\\"tooltip.vectorCharge\\\")}>",
    		ctx
    	});

    	return block;
    }

    function create_fragment$I(ctx) {
    	let div1;
    	let navitem;
    	let t0;
    	let div0;
    	let navbutton0;
    	let t1;
    	let navbutton1;
    	let current;

    	navitem = new NavItem({
    			props: {
    				value: "upload",
    				label: /*$t*/ ctx[0](`menu.upload`)
    			},
    			$$inline: true
    		});

    	navbutton0 = new NavButton({
    			props: {
    				onclick: /*showRasterUpload*/ ctx[1],
    				tip: /*$t*/ ctx[0]("tooltip.rasterCharge"),
    				$$slots: { default: [create_default_slot_1] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	navbutton1 = new NavButton({
    			props: {
    				onclick: /*showVectorUpload*/ ctx[2],
    				tip: /*$t*/ ctx[0]("tooltip.vectorCharge"),
    				$$slots: { default: [create_default_slot] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			div1 = element("div");
    			create_component(navitem.$$.fragment);
    			t0 = space();
    			div0 = element("div");
    			create_component(navbutton0.$$.fragment);
    			t1 = space();
    			create_component(navbutton1.$$.fragment);
    			attr_dev(div0, "class", "dropdown level1");
    			add_location(div0, file$B, 15, 2, 411);
    			attr_dev(div1, "class", "container");
    			add_location(div1, file$B, 13, 0, 330);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div1, anchor);
    			mount_component(navitem, div1, null);
    			append_dev(div1, t0);
    			append_dev(div1, div0);
    			mount_component(navbutton0, div0, null);
    			append_dev(div0, t1);
    			mount_component(navbutton1, div0, null);
    			current = true;
    		},
    		p: function update(ctx, [dirty]) {
    			const navitem_changes = {};
    			if (dirty & /*$t*/ 1) navitem_changes.label = /*$t*/ ctx[0](`menu.upload`);
    			navitem.$set(navitem_changes);
    			const navbutton0_changes = {};
    			if (dirty & /*$t*/ 1) navbutton0_changes.tip = /*$t*/ ctx[0]("tooltip.rasterCharge");

    			if (dirty & /*$$scope, $t*/ 17) {
    				navbutton0_changes.$$scope = { dirty, ctx };
    			}

    			navbutton0.$set(navbutton0_changes);
    			const navbutton1_changes = {};
    			if (dirty & /*$t*/ 1) navbutton1_changes.tip = /*$t*/ ctx[0]("tooltip.vectorCharge");

    			if (dirty & /*$$scope, $t*/ 17) {
    				navbutton1_changes.$$scope = { dirty, ctx };
    			}

    			navbutton1.$set(navbutton1_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(navitem.$$.fragment, local);
    			transition_in(navbutton0.$$.fragment, local);
    			transition_in(navbutton1.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(navitem.$$.fragment, local);
    			transition_out(navbutton0.$$.fragment, local);
    			transition_out(navbutton1.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div1);
    			destroy_component(navitem);
    			destroy_component(navbutton0);
    			destroy_component(navbutton1);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$I.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$I($$self, $$props, $$invalidate) {
    	let $state;
    	let $t;
    	validate_store(state, 'state');
    	component_subscribe($$self, state, $$value => $$invalidate(3, $state = $$value));
    	validate_store(X, 't');
    	component_subscribe($$self, X, $$value => $$invalidate(0, $t = $$value));
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('Upload', slots, []);

    	const showRasterUpload = () => {
    		set_store_value(state, $state.raster = 1, $state);
    	};

    	const showVectorUpload = () => {
    		set_store_value(state, $state.vector = 1, $state);
    	};

    	const writable_props = [];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<Upload> was created with unknown prop '${key}'`);
    	});

    	$$self.$capture_state = () => ({
    		t: X,
    		state,
    		NavButton,
    		NavItem,
    		showRasterUpload,
    		showVectorUpload,
    		$state,
    		$t
    	});

    	return [$t, showRasterUpload, showVectorUpload];
    }

    class Upload extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$I, create_fragment$I, safe_not_equal, {});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Upload",
    			options,
    			id: create_fragment$I.name
    		});
    	}
    }

    /* src/components/navigation/header/menu/Install.svelte generated by Svelte v3.44.2 */

    // (23:0) {#if installable}
    function create_if_block$g(ctx) {
    	let navbutton;
    	let current;

    	navbutton = new NavButton({
    			props: {
    				value: "install",
    				label: /*$t*/ ctx[1](`menu.install`),
    				onclick: /*install*/ ctx[2],
    				flutter: true,
    				tip: /*$t*/ ctx[1]("tooltip.install")
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(navbutton.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(navbutton, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const navbutton_changes = {};
    			if (dirty & /*$t*/ 2) navbutton_changes.label = /*$t*/ ctx[1](`menu.install`);
    			if (dirty & /*$t*/ 2) navbutton_changes.tip = /*$t*/ ctx[1]("tooltip.install");
    			navbutton.$set(navbutton_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(navbutton.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(navbutton.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(navbutton, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block$g.name,
    		type: "if",
    		source: "(23:0) {#if installable}",
    		ctx
    	});

    	return block;
    }

    function create_fragment$H(ctx) {
    	let if_block_anchor;
    	let current;
    	let if_block = /*installable*/ ctx[0] && create_if_block$g(ctx);

    	const block = {
    		c: function create() {
    			if (if_block) if_block.c();
    			if_block_anchor = empty();
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			if (if_block) if_block.m(target, anchor);
    			insert_dev(target, if_block_anchor, anchor);
    			current = true;
    		},
    		p: function update(ctx, [dirty]) {
    			if (/*installable*/ ctx[0]) {
    				if (if_block) {
    					if_block.p(ctx, dirty);

    					if (dirty & /*installable*/ 1) {
    						transition_in(if_block, 1);
    					}
    				} else {
    					if_block = create_if_block$g(ctx);
    					if_block.c();
    					transition_in(if_block, 1);
    					if_block.m(if_block_anchor.parentNode, if_block_anchor);
    				}
    			} else if (if_block) {
    				group_outros();

    				transition_out(if_block, 1, 1, () => {
    					if_block = null;
    				});

    				check_outros();
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(if_block);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(if_block);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (if_block) if_block.d(detaching);
    			if (detaching) detach_dev(if_block_anchor);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$H.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$H($$self, $$props, $$invalidate) {
    	let $t;
    	validate_store(X, 't');
    	component_subscribe($$self, X, $$value => $$invalidate(1, $t = $$value));
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('Install', slots, []);
    	let installable = false;
    	let promptEvent = null;

    	function install() {
    		$$invalidate(0, installable = false);
    		promptEvent.prompt();

    		promptEvent.userChoice.then(() => {
    			promptEvent = null;
    		});
    	}

    	window.addEventListener("beforeinstallprompt", event => {
    		promptEvent = event;
    		$$invalidate(0, installable = true);
    	});

    	window.addEventListener("appinstalled", () => {
    		message.success($t("success.install"));
    	});

    	const writable_props = [];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<Install> was created with unknown prop '${key}'`);
    	});

    	$$self.$capture_state = () => ({
    		t: X,
    		message,
    		NavButton,
    		installable,
    		promptEvent,
    		install,
    		$t
    	});

    	$$self.$inject_state = $$props => {
    		if ('installable' in $$props) $$invalidate(0, installable = $$props.installable);
    		if ('promptEvent' in $$props) promptEvent = $$props.promptEvent;
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [installable, $t, install];
    }

    class Install extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$H, create_fragment$H, safe_not_equal, {});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Install",
    			options,
    			id: create_fragment$H.name
    		});
    	}
    }

    /* src/components/navigation/header/menu/License.svelte generated by Svelte v3.44.2 */

    function create_fragment$G(ctx) {
    	let navbutton;
    	let current;

    	navbutton = new NavButton({
    			props: {
    				value: "license",
    				label: /*$t*/ ctx[0](`menu.license`),
    				onclick: /*showLicense*/ ctx[1],
    				tip: /*$t*/ ctx[0]("tooltip.license")
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(navbutton.$$.fragment);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			mount_component(navbutton, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, [dirty]) {
    			const navbutton_changes = {};
    			if (dirty & /*$t*/ 1) navbutton_changes.label = /*$t*/ ctx[0](`menu.license`);
    			if (dirty & /*$t*/ 1) navbutton_changes.tip = /*$t*/ ctx[0]("tooltip.license");
    			navbutton.$set(navbutton_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(navbutton.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(navbutton.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(navbutton, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$G.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$G($$self, $$props, $$invalidate) {
    	let $state;
    	let $t;
    	validate_store(state, 'state');
    	component_subscribe($$self, state, $$value => $$invalidate(2, $state = $$value));
    	validate_store(X, 't');
    	component_subscribe($$self, X, $$value => $$invalidate(0, $t = $$value));
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('License', slots, []);

    	const showLicense = () => {
    		set_store_value(state, $state.license = 1, $state);
    	};

    	const writable_props = [];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<License> was created with unknown prop '${key}'`);
    	});

    	$$self.$capture_state = () => ({
    		t: X,
    		state,
    		NavButton,
    		showLicense,
    		$state,
    		$t
    	});

    	return [$t, showLicense];
    }

    class License$1 extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$G, create_fragment$G, safe_not_equal, {});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "License",
    			options,
    			id: create_fragment$G.name
    		});
    	}
    }

    /* src/components/navigation/header/menu/About.svelte generated by Svelte v3.44.2 */

    function create_fragment$F(ctx) {
    	let navbutton;
    	let current;

    	navbutton = new NavButton({
    			props: {
    				value: "about",
    				label: /*$t*/ ctx[0](`menu.about`),
    				onclick: /*showAbout*/ ctx[1],
    				tip: /*$t*/ ctx[0]("tooltip.about"),
    				hotkey: "F1"
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(navbutton.$$.fragment);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			mount_component(navbutton, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, [dirty]) {
    			const navbutton_changes = {};
    			if (dirty & /*$t*/ 1) navbutton_changes.label = /*$t*/ ctx[0](`menu.about`);
    			if (dirty & /*$t*/ 1) navbutton_changes.tip = /*$t*/ ctx[0]("tooltip.about");
    			navbutton.$set(navbutton_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(navbutton.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(navbutton.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(navbutton, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$F.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$F($$self, $$props, $$invalidate) {
    	let $state;
    	let $t;
    	validate_store(state, 'state');
    	component_subscribe($$self, state, $$value => $$invalidate(2, $state = $$value));
    	validate_store(X, 't');
    	component_subscribe($$self, X, $$value => $$invalidate(0, $t = $$value));
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('About', slots, []);

    	const showAbout = () => {
    		set_store_value(state, $state.about = 1, $state);
    	};

    	const writable_props = [];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<About> was created with unknown prop '${key}'`);
    	});

    	$$self.$capture_state = () => ({
    		t: X,
    		state,
    		NavButton,
    		showAbout,
    		$state,
    		$t
    	});

    	return [$t, showAbout];
    }

    class About$1 extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$F, create_fragment$F, safe_not_equal, {});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "About",
    			options,
    			id: create_fragment$F.name
    		});
    	}
    }

    /* src/components/navigation/header/menu/Support.svelte generated by Svelte v3.44.2 */

    function create_fragment$E(ctx) {
    	let navbutton;
    	let current;

    	navbutton = new NavButton({
    			props: {
    				value: "support",
    				label: /*$t*/ ctx[0](`menu.support`),
    				onclick: /*openPatreon*/ ctx[1],
    				tip: /*$t*/ ctx[0]("tooltip.support")
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(navbutton.$$.fragment);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			mount_component(navbutton, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, [dirty]) {
    			const navbutton_changes = {};
    			if (dirty & /*$t*/ 1) navbutton_changes.label = /*$t*/ ctx[0](`menu.support`);
    			if (dirty & /*$t*/ 1) navbutton_changes.tip = /*$t*/ ctx[0]("tooltip.support");
    			navbutton.$set(navbutton_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(navbutton.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(navbutton.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(navbutton, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$E.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$E($$self, $$props, $$invalidate) {
    	let $t;
    	validate_store(X, 't');
    	component_subscribe($$self, X, $$value => $$invalidate(0, $t = $$value));
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('Support', slots, []);

    	const openPatreon = () => {
    		openURL("https://www.patreon.com/azgaar");
    	};

    	const writable_props = [];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<Support> was created with unknown prop '${key}'`);
    	});

    	$$self.$capture_state = () => ({ t: X, NavButton, openURL, openPatreon, $t });
    	return [$t, openPatreon];
    }

    class Support extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$E, create_fragment$E, safe_not_equal, {});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Support",
    			options,
    			id: create_fragment$E.name
    		});
    	}
    }

    /* src/components/navigation/header/menu/Language.svelte generated by Svelte v3.44.2 */
    const file$A = "src/components/navigation/header/menu/Language.svelte";

    function get_each_context$g(ctx, list, i) {
    	const child_ctx = ctx.slice();
    	child_ctx[5] = list[i];
    	return child_ctx;
    }

    // (19:4) {#each $locales as langCode}
    function create_each_block$g(ctx) {
    	let navbutton;
    	let current;

    	navbutton = new NavButton({
    			props: {
    				selected: /*$locale*/ ctx[2] === /*langCode*/ ctx[5],
    				label: /*getLocaleName*/ ctx[4](/*langCode*/ ctx[5]),
    				onclick: /*changeLanguage*/ ctx[3](/*langCode*/ ctx[5])
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(navbutton.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(navbutton, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const navbutton_changes = {};
    			if (dirty & /*$locale, $locales*/ 6) navbutton_changes.selected = /*$locale*/ ctx[2] === /*langCode*/ ctx[5];
    			if (dirty & /*$locales*/ 2) navbutton_changes.label = /*getLocaleName*/ ctx[4](/*langCode*/ ctx[5]);
    			if (dirty & /*$locales*/ 2) navbutton_changes.onclick = /*changeLanguage*/ ctx[3](/*langCode*/ ctx[5]);
    			navbutton.$set(navbutton_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(navbutton.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(navbutton.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(navbutton, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_each_block$g.name,
    		type: "each",
    		source: "(19:4) {#each $locales as langCode}",
    		ctx
    	});

    	return block;
    }

    function create_fragment$D(ctx) {
    	let div1;
    	let navitem;
    	let t_1;
    	let div0;
    	let current;

    	navitem = new NavItem({
    			props: {
    				value: "language",
    				label: /*$t*/ ctx[0](`menu.language`),
    				tip: /*$t*/ ctx[0]("tooltip.language")
    			},
    			$$inline: true
    		});

    	let each_value = /*$locales*/ ctx[1];
    	validate_each_argument(each_value);
    	let each_blocks = [];

    	for (let i = 0; i < each_value.length; i += 1) {
    		each_blocks[i] = create_each_block$g(get_each_context$g(ctx, each_value, i));
    	}

    	const out = i => transition_out(each_blocks[i], 1, 1, () => {
    		each_blocks[i] = null;
    	});

    	const block = {
    		c: function create() {
    			div1 = element("div");
    			create_component(navitem.$$.fragment);
    			t_1 = space();
    			div0 = element("div");

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].c();
    			}

    			attr_dev(div0, "class", "dropdown level1");
    			add_location(div0, file$A, 17, 2, 640);
    			attr_dev(div1, "class", "container");
    			add_location(div1, file$A, 15, 0, 526);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div1, anchor);
    			mount_component(navitem, div1, null);
    			append_dev(div1, t_1);
    			append_dev(div1, div0);

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].m(div0, null);
    			}

    			current = true;
    		},
    		p: function update(ctx, [dirty]) {
    			const navitem_changes = {};
    			if (dirty & /*$t*/ 1) navitem_changes.label = /*$t*/ ctx[0](`menu.language`);
    			if (dirty & /*$t*/ 1) navitem_changes.tip = /*$t*/ ctx[0]("tooltip.language");
    			navitem.$set(navitem_changes);

    			if (dirty & /*$locale, $locales, getLocaleName, changeLanguage*/ 30) {
    				each_value = /*$locales*/ ctx[1];
    				validate_each_argument(each_value);
    				let i;

    				for (i = 0; i < each_value.length; i += 1) {
    					const child_ctx = get_each_context$g(ctx, each_value, i);

    					if (each_blocks[i]) {
    						each_blocks[i].p(child_ctx, dirty);
    						transition_in(each_blocks[i], 1);
    					} else {
    						each_blocks[i] = create_each_block$g(child_ctx);
    						each_blocks[i].c();
    						transition_in(each_blocks[i], 1);
    						each_blocks[i].m(div0, null);
    					}
    				}

    				group_outros();

    				for (i = each_value.length; i < each_blocks.length; i += 1) {
    					out(i);
    				}

    				check_outros();
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(navitem.$$.fragment, local);

    			for (let i = 0; i < each_value.length; i += 1) {
    				transition_in(each_blocks[i]);
    			}

    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(navitem.$$.fragment, local);
    			each_blocks = each_blocks.filter(Boolean);

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				transition_out(each_blocks[i]);
    			}

    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div1);
    			destroy_component(navitem);
    			destroy_each(each_blocks, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$D.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$D($$self, $$props, $$invalidate) {
    	let $t;
    	let $locales;
    	let $locale;
    	validate_store(X, 't');
    	component_subscribe($$self, X, $$value => $$invalidate(0, $t = $$value));
    	validate_store(f, 'locales');
    	component_subscribe($$self, f, $$value => $$invalidate(1, $locales = $$value));
    	validate_store(M, 'locale');
    	component_subscribe($$self, M, $$value => $$invalidate(2, $locale = $$value));
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('Language', slots, []);

    	const changeLanguage = newLocale => () => {
    		M.set(newLocale);
    		localStorage.setItem("locale", newLocale);
    	};

    	const getLocaleName = locale => {
    		const languageName = new Intl.DisplayNames([locale], { type: "language" });
    		return capitalize(languageName.of(locale));
    	};

    	const writable_props = [];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<Language> was created with unknown prop '${key}'`);
    	});

    	$$self.$capture_state = () => ({
    		locale: M,
    		locales: f,
    		t: X,
    		capitalize,
    		NavButton,
    		NavItem,
    		changeLanguage,
    		getLocaleName,
    		$t,
    		$locales,
    		$locale
    	});

    	return [$t, $locales, $locale, changeLanguage, getLocaleName];
    }

    class Language extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$D, create_fragment$D, safe_not_equal, {});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Language",
    			options,
    			id: create_fragment$D.name
    		});
    	}
    }

    /* src/components/navigation/header/menu/Other.svelte generated by Svelte v3.44.2 */
    const file$z = "src/components/navigation/header/menu/Other.svelte";

    function create_fragment$C(ctx) {
    	let div1;
    	let navitem;
    	let t0;
    	let div0;
    	let language;
    	let t1;
    	let license;
    	let t2;
    	let support;
    	let t3;
    	let about;
    	let current;

    	navitem = new NavItem({
    			props: { value: "other" },
    			$$inline: true
    		});

    	language = new Language({ $$inline: true });
    	license = new License$1({ $$inline: true });
    	support = new Support({ $$inline: true });
    	about = new About$1({ $$inline: true });

    	const block = {
    		c: function create() {
    			div1 = element("div");
    			create_component(navitem.$$.fragment);
    			t0 = space();
    			div0 = element("div");
    			create_component(language.$$.fragment);
    			t1 = space();
    			create_component(license.$$.fragment);
    			t2 = space();
    			create_component(support.$$.fragment);
    			t3 = space();
    			create_component(about.$$.fragment);
    			attr_dev(div0, "class", "dropdown horizontal");
    			add_location(div0, file$z, 11, 2, 303);
    			attr_dev(div1, "class", "container");
    			add_location(div1, file$z, 8, 0, 248);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div1, anchor);
    			mount_component(navitem, div1, null);
    			append_dev(div1, t0);
    			append_dev(div1, div0);
    			mount_component(language, div0, null);
    			append_dev(div0, t1);
    			mount_component(license, div0, null);
    			append_dev(div0, t2);
    			mount_component(support, div0, null);
    			append_dev(div0, t3);
    			mount_component(about, div0, null);
    			current = true;
    		},
    		p: noop,
    		i: function intro(local) {
    			if (current) return;
    			transition_in(navitem.$$.fragment, local);
    			transition_in(language.$$.fragment, local);
    			transition_in(license.$$.fragment, local);
    			transition_in(support.$$.fragment, local);
    			transition_in(about.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(navitem.$$.fragment, local);
    			transition_out(language.$$.fragment, local);
    			transition_out(license.$$.fragment, local);
    			transition_out(support.$$.fragment, local);
    			transition_out(about.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div1);
    			destroy_component(navitem);
    			destroy_component(language);
    			destroy_component(license);
    			destroy_component(support);
    			destroy_component(about);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$C.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$C($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('Other', slots, []);
    	const writable_props = [];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<Other> was created with unknown prop '${key}'`);
    	});

    	$$self.$capture_state = () => ({
    		NavItem,
    		License: License$1,
    		About: About$1,
    		Support,
    		Language
    	});

    	return [];
    }

    class Other extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$C, create_fragment$C, safe_not_equal, {});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Other",
    			options,
    			id: create_fragment$C.name
    		});
    	}
    }

    /* src/components/navigation/header/menu/Undo.svelte generated by Svelte v3.44.2 */

    function create_fragment$B(ctx) {
    	let navbutton;
    	let current;

    	navbutton = new NavButton({
    			props: {
    				value: "undo",
    				label: /*$t*/ ctx[1](`menu.undo`),
    				disabled: !/*position*/ ctx[0],
    				onclick: changes.undo,
    				tip: /*$t*/ ctx[1]("tooltip.undo"),
    				gesture: /*$t*/ ctx[1]("tooltip.swipeLeft"),
    				hotkey: "Z"
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(navbutton.$$.fragment);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			mount_component(navbutton, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, [dirty]) {
    			const navbutton_changes = {};
    			if (dirty & /*$t*/ 2) navbutton_changes.label = /*$t*/ ctx[1](`menu.undo`);
    			if (dirty & /*position*/ 1) navbutton_changes.disabled = !/*position*/ ctx[0];
    			if (dirty & /*$t*/ 2) navbutton_changes.tip = /*$t*/ ctx[1]("tooltip.undo");
    			if (dirty & /*$t*/ 2) navbutton_changes.gesture = /*$t*/ ctx[1]("tooltip.swipeLeft");
    			navbutton.$set(navbutton_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(navbutton.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(navbutton.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(navbutton, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$B.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$B($$self, $$props, $$invalidate) {
    	let position;
    	let $changes;
    	let $t;
    	validate_store(changes, 'changes');
    	component_subscribe($$self, changes, $$value => $$invalidate(2, $changes = $$value));
    	validate_store(X, 't');
    	component_subscribe($$self, X, $$value => $$invalidate(1, $t = $$value));
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('Undo', slots, []);
    	const writable_props = [];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<Undo> was created with unknown prop '${key}'`);
    	});

    	$$self.$capture_state = () => ({
    		t: X,
    		changes,
    		NavButton,
    		position,
    		$changes,
    		$t
    	});

    	$$self.$inject_state = $$props => {
    		if ('position' in $$props) $$invalidate(0, position = $$props.position);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	$$self.$$.update = () => {
    		if ($$self.$$.dirty & /*$changes*/ 4) {
    			$$invalidate(0, position = $changes[1]);
    		}
    	};

    	return [position, $t, $changes];
    }

    class Undo extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$B, create_fragment$B, safe_not_equal, {});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Undo",
    			options,
    			id: create_fragment$B.name
    		});
    	}
    }

    /* src/components/navigation/header/menu/Redo.svelte generated by Svelte v3.44.2 */

    function create_fragment$A(ctx) {
    	let navbutton;
    	let current;

    	navbutton = new NavButton({
    			props: {
    				value: "redo",
    				label: /*$t*/ ctx[1](`menu.redo`),
    				disabled: !/*redoable*/ ctx[0],
    				onclick: changes.redo,
    				tip: /*$t*/ ctx[1](`tooltip.redo`),
    				gesture: /*$t*/ ctx[1]("tooltip.swipeRight"),
    				hotkey: "X"
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(navbutton.$$.fragment);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			mount_component(navbutton, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, [dirty]) {
    			const navbutton_changes = {};
    			if (dirty & /*$t*/ 2) navbutton_changes.label = /*$t*/ ctx[1](`menu.redo`);
    			if (dirty & /*redoable*/ 1) navbutton_changes.disabled = !/*redoable*/ ctx[0];
    			if (dirty & /*$t*/ 2) navbutton_changes.tip = /*$t*/ ctx[1](`tooltip.redo`);
    			if (dirty & /*$t*/ 2) navbutton_changes.gesture = /*$t*/ ctx[1]("tooltip.swipeRight");
    			navbutton.$set(navbutton_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(navbutton.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(navbutton.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(navbutton, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$A.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$A($$self, $$props, $$invalidate) {
    	let redoable;
    	let $changes;
    	let $t;
    	validate_store(changes, 'changes');
    	component_subscribe($$self, changes, $$value => $$invalidate(2, $changes = $$value));
    	validate_store(X, 't');
    	component_subscribe($$self, X, $$value => $$invalidate(1, $t = $$value));
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('Redo', slots, []);
    	const writable_props = [];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<Redo> was created with unknown prop '${key}'`);
    	});

    	$$self.$capture_state = () => ({
    		t: X,
    		changes,
    		NavButton,
    		redoable,
    		$changes,
    		$t
    	});

    	$$self.$inject_state = $$props => {
    		if ('redoable' in $$props) $$invalidate(0, redoable = $$props.redoable);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	$$self.$$.update = () => {
    		if ($$self.$$.dirty & /*$changes*/ 4) {
    			$$invalidate(0, redoable = $changes[1] < changes.length() - 1);
    		}
    	};

    	return [redoable, $t, $changes];
    }

    class Redo extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$A, create_fragment$A, safe_not_equal, {});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Redo",
    			options,
    			id: create_fragment$A.name
    		});
    	}
    }

    /* src/components/navigation/header/menu/Back.svelte generated by Svelte v3.44.2 */

    function create_fragment$z(ctx) {
    	let navbutton;
    	let current;

    	navbutton = new NavButton({
    			props: {
    				right: true,
    				value: "back",
    				label: /*$t*/ ctx[0](`menu.back`),
    				onclick: /*exitEdit*/ ctx[1],
    				tip: /*$t*/ ctx[0]("tooltip.back"),
    				hotkey: "Escape"
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(navbutton.$$.fragment);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			mount_component(navbutton, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, [dirty]) {
    			const navbutton_changes = {};
    			if (dirty & /*$t*/ 1) navbutton_changes.label = /*$t*/ ctx[0](`menu.back`);
    			if (dirty & /*$t*/ 1) navbutton_changes.tip = /*$t*/ ctx[0]("tooltip.back");
    			navbutton.$set(navbutton_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(navbutton.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(navbutton.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(navbutton, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$z.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$z($$self, $$props, $$invalidate) {
    	let $state;
    	let $changes;
    	let $history;
    	let $t;
    	validate_store(state, 'state');
    	component_subscribe($$self, state, $$value => $$invalidate(2, $state = $$value));
    	validate_store(changes, 'changes');
    	component_subscribe($$self, changes, $$value => $$invalidate(3, $changes = $$value));
    	validate_store(history, 'history');
    	component_subscribe($$self, history, $$value => $$invalidate(4, $history = $$value));
    	validate_store(X, 't');
    	component_subscribe($$self, X, $$value => $$invalidate(0, $t = $$value));
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('Back', slots, []);

    	const exitEdit = () => {
    		set_store_value(history, $history[$state.c] = JSON.parse($changes[0]), $history);
    		set_store_value(state, $state.edit = 0, $state);
    	};

    	const writable_props = [];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<Back> was created with unknown prop '${key}'`);
    	});

    	$$self.$capture_state = () => ({
    		t: X,
    		changes,
    		state,
    		history,
    		NavButton,
    		exitEdit,
    		$state,
    		$changes,
    		$history,
    		$t
    	});

    	return [$t, exitEdit];
    }

    class Back extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$z, create_fragment$z, safe_not_equal, {});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Back",
    			options,
    			id: create_fragment$z.name
    		});
    	}
    }

    /* src/components/navigation/header/Navbar.svelte generated by Svelte v3.44.2 */
    const file$y = "src/components/navigation/header/Navbar.svelte";

    // (31:2) {:else}
    function create_else_block$6(ctx) {
    	let language;
    	let t0;
    	let license;
    	let t1;
    	let support;
    	let t2;
    	let about;
    	let current;
    	language = new Language({ $$inline: true });
    	license = new License$1({ $$inline: true });
    	support = new Support({ $$inline: true });
    	about = new About$1({ $$inline: true });

    	const block = {
    		c: function create() {
    			create_component(language.$$.fragment);
    			t0 = space();
    			create_component(license.$$.fragment);
    			t1 = space();
    			create_component(support.$$.fragment);
    			t2 = space();
    			create_component(about.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(language, target, anchor);
    			insert_dev(target, t0, anchor);
    			mount_component(license, target, anchor);
    			insert_dev(target, t1, anchor);
    			mount_component(support, target, anchor);
    			insert_dev(target, t2, anchor);
    			mount_component(about, target, anchor);
    			current = true;
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(language.$$.fragment, local);
    			transition_in(license.$$.fragment, local);
    			transition_in(support.$$.fragment, local);
    			transition_in(about.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(language.$$.fragment, local);
    			transition_out(license.$$.fragment, local);
    			transition_out(support.$$.fragment, local);
    			transition_out(about.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(language, detaching);
    			if (detaching) detach_dev(t0);
    			destroy_component(license, detaching);
    			if (detaching) detach_dev(t1);
    			destroy_component(support, detaching);
    			if (detaching) detach_dev(t2);
    			destroy_component(about, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_else_block$6.name,
    		type: "else",
    		source: "(31:2) {:else}",
    		ctx
    	});

    	return block;
    }

    // (29:2) {#if $iconedNav && $state.edit}
    function create_if_block_1$8(ctx) {
    	let other;
    	let current;
    	other = new Other({ $$inline: true });

    	const block = {
    		c: function create() {
    			create_component(other.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(other, target, anchor);
    			current = true;
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(other.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(other.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(other, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_1$8.name,
    		type: "if",
    		source: "(29:2) {#if $iconedNav && $state.edit}",
    		ctx
    	});

    	return block;
    }

    // (38:2) {#if $state.edit}
    function create_if_block$f(ctx) {
    	let undo;
    	let t0;
    	let redo;
    	let t1;
    	let back;
    	let current;
    	undo = new Undo({ $$inline: true });
    	redo = new Redo({ $$inline: true });
    	back = new Back({ $$inline: true });

    	const block = {
    		c: function create() {
    			create_component(undo.$$.fragment);
    			t0 = space();
    			create_component(redo.$$.fragment);
    			t1 = space();
    			create_component(back.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(undo, target, anchor);
    			insert_dev(target, t0, anchor);
    			mount_component(redo, target, anchor);
    			insert_dev(target, t1, anchor);
    			mount_component(back, target, anchor);
    			current = true;
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(undo.$$.fragment, local);
    			transition_in(redo.$$.fragment, local);
    			transition_in(back.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(undo.$$.fragment, local);
    			transition_out(redo.$$.fragment, local);
    			transition_out(back.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(undo, detaching);
    			if (detaching) detach_dev(t0);
    			destroy_component(redo, detaching);
    			if (detaching) detach_dev(t1);
    			destroy_component(back, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block$f.name,
    		type: "if",
    		source: "(38:2) {#if $state.edit}",
    		ctx
    	});

    	return block;
    }

    function create_fragment$y(ctx) {
    	let nav;
    	let logo;
    	let t0;
    	let options;
    	let t1;
    	let rollback;
    	let t2;
    	let reroll;
    	let t3;
    	let save;
    	let t4;
    	let upload;
    	let t5;
    	let install;
    	let t6;
    	let current_block_type_index;
    	let if_block0;
    	let t7;
    	let current;
    	logo = new Logo({ $$inline: true });
    	options = new Options({ $$inline: true });
    	rollback = new Rollback({ $$inline: true });
    	reroll = new Reroll({ $$inline: true });
    	save = new Save({ $$inline: true });
    	upload = new Upload({ $$inline: true });
    	install = new Install({ $$inline: true });
    	const if_block_creators = [create_if_block_1$8, create_else_block$6];
    	const if_blocks = [];

    	function select_block_type(ctx, dirty) {
    		if (/*$iconedNav*/ ctx[0] && /*$state*/ ctx[1].edit) return 0;
    		return 1;
    	}

    	current_block_type_index = select_block_type(ctx);
    	if_block0 = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
    	let if_block1 = /*$state*/ ctx[1].edit && create_if_block$f(ctx);

    	const block = {
    		c: function create() {
    			nav = element("nav");
    			create_component(logo.$$.fragment);
    			t0 = space();
    			create_component(options.$$.fragment);
    			t1 = space();
    			create_component(rollback.$$.fragment);
    			t2 = space();
    			create_component(reroll.$$.fragment);
    			t3 = space();
    			create_component(save.$$.fragment);
    			t4 = space();
    			create_component(upload.$$.fragment);
    			t5 = space();
    			create_component(install.$$.fragment);
    			t6 = space();
    			if_block0.c();
    			t7 = space();
    			if (if_block1) if_block1.c();
    			attr_dev(nav, "class", "svelte-1sxoqy9");
    			add_location(nav, file$y, 19, 0, 735);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, nav, anchor);
    			mount_component(logo, nav, null);
    			append_dev(nav, t0);
    			mount_component(options, nav, null);
    			append_dev(nav, t1);
    			mount_component(rollback, nav, null);
    			append_dev(nav, t2);
    			mount_component(reroll, nav, null);
    			append_dev(nav, t3);
    			mount_component(save, nav, null);
    			append_dev(nav, t4);
    			mount_component(upload, nav, null);
    			append_dev(nav, t5);
    			mount_component(install, nav, null);
    			append_dev(nav, t6);
    			if_blocks[current_block_type_index].m(nav, null);
    			append_dev(nav, t7);
    			if (if_block1) if_block1.m(nav, null);
    			current = true;
    		},
    		p: function update(ctx, [dirty]) {
    			let previous_block_index = current_block_type_index;
    			current_block_type_index = select_block_type(ctx);

    			if (current_block_type_index !== previous_block_index) {
    				group_outros();

    				transition_out(if_blocks[previous_block_index], 1, 1, () => {
    					if_blocks[previous_block_index] = null;
    				});

    				check_outros();
    				if_block0 = if_blocks[current_block_type_index];

    				if (!if_block0) {
    					if_block0 = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
    					if_block0.c();
    				}

    				transition_in(if_block0, 1);
    				if_block0.m(nav, t7);
    			}

    			if (/*$state*/ ctx[1].edit) {
    				if (if_block1) {
    					if (dirty & /*$state*/ 2) {
    						transition_in(if_block1, 1);
    					}
    				} else {
    					if_block1 = create_if_block$f(ctx);
    					if_block1.c();
    					transition_in(if_block1, 1);
    					if_block1.m(nav, null);
    				}
    			} else if (if_block1) {
    				group_outros();

    				transition_out(if_block1, 1, 1, () => {
    					if_block1 = null;
    				});

    				check_outros();
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(logo.$$.fragment, local);
    			transition_in(options.$$.fragment, local);
    			transition_in(rollback.$$.fragment, local);
    			transition_in(reroll.$$.fragment, local);
    			transition_in(save.$$.fragment, local);
    			transition_in(upload.$$.fragment, local);
    			transition_in(install.$$.fragment, local);
    			transition_in(if_block0);
    			transition_in(if_block1);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(logo.$$.fragment, local);
    			transition_out(options.$$.fragment, local);
    			transition_out(rollback.$$.fragment, local);
    			transition_out(reroll.$$.fragment, local);
    			transition_out(save.$$.fragment, local);
    			transition_out(upload.$$.fragment, local);
    			transition_out(install.$$.fragment, local);
    			transition_out(if_block0);
    			transition_out(if_block1);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(nav);
    			destroy_component(logo);
    			destroy_component(options);
    			destroy_component(rollback);
    			destroy_component(reroll);
    			destroy_component(save);
    			destroy_component(upload);
    			destroy_component(install);
    			if_blocks[current_block_type_index].d();
    			if (if_block1) if_block1.d();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$y.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$y($$self, $$props, $$invalidate) {
    	let $iconedNav;
    	let $state;
    	validate_store(iconedNav, 'iconedNav');
    	component_subscribe($$self, iconedNav, $$value => $$invalidate(0, $iconedNav = $$value));
    	validate_store(state, 'state');
    	component_subscribe($$self, state, $$value => $$invalidate(1, $state = $$value));
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('Navbar', slots, []);
    	const writable_props = [];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<Navbar> was created with unknown prop '${key}'`);
    	});

    	$$self.$capture_state = () => ({
    		iconedNav,
    		state,
    		Logo,
    		Options,
    		Rollback,
    		Reroll,
    		Save,
    		Upload,
    		Install,
    		Other,
    		Undo,
    		Redo,
    		License: License$1,
    		About: About$1,
    		Support,
    		Language,
    		Back,
    		$iconedNav,
    		$state
    	});

    	return [$iconedNav, $state];
    }

    class Navbar extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$y, create_fragment$y, safe_not_equal, {});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Navbar",
    			options,
    			id: create_fragment$y.name
    		});
    	}
    }

    /* src/components/navigation/AnimatedCOA.svelte generated by Svelte v3.44.2 */
    const file$x = "src/components/navigation/AnimatedCOA.svelte";

    function create_fragment$x(ctx) {
    	let svg;
    	let clipPath;
    	let path0;
    	let g1;
    	let path1;
    	let path1_intro;
    	let path2;
    	let path2_intro;
    	let g0;
    	let rect0;
    	let rect0_fill_value;
    	let path3;
    	let path3_fill_value;
    	let rect1;
    	let g0_intro;
    	let g2;
    	let path4;
    	let path4_intro;

    	const block = {
    		c: function create() {
    			svg = svg_element("svg");
    			clipPath = svg_element("clipPath");
    			path0 = svg_element("path");
    			g1 = svg_element("g");
    			path1 = svg_element("path");
    			path2 = svg_element("path");
    			g0 = svg_element("g");
    			rect0 = svg_element("rect");
    			path3 = svg_element("path");
    			rect1 = svg_element("rect");
    			g2 = svg_element("g");
    			path4 = svg_element("path");
    			attr_dev(path0, "d", shieldPaths.heater);
    			add_location(path0, file$x, 45, 4, 1965);
    			attr_dev(clipPath, "id", "shieldAbout");
    			add_location(clipPath, file$x, 44, 2, 1933);
    			attr_dev(path1, "stroke-width", "1");
    			attr_dev(path1, "d", "M25,25 h150 v50 a150,150,0,0,1,-75,125 a150,150,0,0,1,-75,-125 z");
    			add_location(path1, file$x, 49, 4, 2084);
    			attr_dev(path2, "d", /*paths*/ ctx[7][/*division*/ ctx[6]][0]);
    			add_location(path2, file$x, 50, 4, 2204);
    			attr_dev(rect0, "x", "0");
    			attr_dev(rect0, "y", "0");
    			attr_dev(rect0, "width", "200");
    			attr_dev(rect0, "height", "200");
    			attr_dev(rect0, "fill", rect0_fill_value = /*$colors*/ ctx[2][/*t1*/ ctx[4]]);
    			add_location(rect0, file$x, 53, 6, 2321);
    			attr_dev(path3, "d", /*paths*/ ctx[7][/*division*/ ctx[6]][1]);
    			attr_dev(path3, "fill", path3_fill_value = /*$colors*/ ctx[2][/*t2*/ ctx[5]]);
    			add_location(path3, file$x, 54, 6, 2392);
    			attr_dev(rect1, "x", "0");
    			attr_dev(rect1, "y", "0");
    			attr_dev(rect1, "width", "200");
    			attr_dev(rect1, "height", "200");
    			attr_dev(rect1, "fill", "url(#nourse)");
    			add_location(rect1, file$x, 55, 6, 2449);
    			attr_dev(g0, "stroke", "none");
    			add_location(g0, file$x, 52, 4, 2269);
    			attr_dev(g1, "clip-path", "url(#shieldAbout)");
    			attr_dev(g1, "stroke", "#fff");
    			attr_dev(g1, "stroke-width", ".5");
    			add_location(g1, file$x, 48, 2, 2014);
    			attr_dev(path4, "d", shieldPaths.heater);
    			add_location(path4, file$x, 60, 4, 2579);
    			attr_dev(g2, "stroke", "#000");
    			attr_dev(g2, "fill", "url(#backlight)");
    			add_location(g2, file$x, 59, 2, 2534);
    			attr_dev(svg, "width", /*size*/ ctx[1]);
    			attr_dev(svg, "height", /*size*/ ctx[1]);
    			attr_dev(svg, "viewBox", "0 0 200 200");
    			add_location(svg, file$x, 43, 0, 1876);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, svg, anchor);
    			append_dev(svg, clipPath);
    			append_dev(clipPath, path0);
    			append_dev(svg, g1);
    			append_dev(g1, path1);
    			append_dev(g1, path2);
    			append_dev(g1, g0);
    			append_dev(g0, rect0);
    			append_dev(g0, path3);
    			append_dev(g0, rect1);
    			append_dev(svg, g2);
    			append_dev(g2, path4);
    		},
    		p: function update(new_ctx, [dirty]) {
    			ctx = new_ctx;

    			if (dirty & /*$colors*/ 4 && rect0_fill_value !== (rect0_fill_value = /*$colors*/ ctx[2][/*t1*/ ctx[4]])) {
    				attr_dev(rect0, "fill", rect0_fill_value);
    			}

    			if (dirty & /*$colors*/ 4 && path3_fill_value !== (path3_fill_value = /*$colors*/ ctx[2][/*t2*/ ctx[5]])) {
    				attr_dev(path3, "fill", path3_fill_value);
    			}

    			if (dirty & /*size*/ 2) {
    				attr_dev(svg, "width", /*size*/ ctx[1]);
    			}

    			if (dirty & /*size*/ 2) {
    				attr_dev(svg, "height", /*size*/ ctx[1]);
    			}
    		},
    		i: function intro(local) {
    			if (!path1_intro) {
    				add_render_callback(() => {
    					path1_intro = create_in_transition(path1, draw, { duration: /*duration*/ ctx[0] });
    					path1_intro.start();
    				});
    			}

    			if (!path2_intro) {
    				add_render_callback(() => {
    					path2_intro = create_in_transition(path2, draw, { delay: /*duration*/ ctx[0] });
    					path2_intro.start();
    				});
    			}

    			if (!g0_intro) {
    				add_render_callback(() => {
    					g0_intro = create_in_transition(g0, fade, {
    						delay: /*delay*/ ctx[3],
    						duration: /*duration*/ ctx[0]
    					});

    					g0_intro.start();
    				});
    			}

    			if (!path4_intro) {
    				add_render_callback(() => {
    					path4_intro = create_in_transition(path4, draw, {
    						delay: /*delay*/ ctx[3],
    						duration: /*duration*/ ctx[0]
    					});

    					path4_intro.start();
    				});
    			}
    		},
    		o: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(svg);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$x.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$x($$self, $$props, $$invalidate) {
    	let $colors;
    	validate_store(colors, 'colors');
    	component_subscribe($$self, colors, $$value => $$invalidate(2, $colors = $$value));
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('AnimatedCOA', slots, []);
    	let { duration } = $$props;
    	const delay = duration * 2.6;

    	const tinctures = {
    		metals: { argent: 3, or: 2 },
    		colors: {
    			gules: 5,
    			sable: 3,
    			azure: 4,
    			vert: 2,
    			purpure: 3
    		}
    	};

    	const metal = Math.random() > 0.5;
    	const t1 = metal ? rw(tinctures.metals) : rw(tinctures.colors);
    	const t2 = metal ? rw(tinctures.colors) : rw(tinctures.metals);

    	const divisionVariants = {
    		perPale: 2,
    		perFess: 2,
    		perBend: 2,
    		perBendSinister: 1,
    		perCross: 6,
    		perChevron: 1,
    		perChevronReversed: 1,
    		perPile: 2,
    		perSaltire: 5,
    		gyronny: 1,
    		chevronny: 1
    	};

    	const division = rw(divisionVariants);

    	const paths = {
    		perPale: ["M100,25 v175", "M100,0 v200 h100 v-200 Z"],
    		perFess: ["M27.5,100 h145", "M0,100 h200 v100 h-200 Z"],
    		perBend: ["M0,0 l200,200", "M0,0 l200,200 h-200 Z"],
    		perBendSinister: ["M200,0 L0,200", "M200,0 L0,200 h200 Z"],
    		perCross: ["M100,25 v175 M27.5,100 h145", "M100,0 v200 h-100 v-100 h200 v-100 Z"],
    		perChevron: ["M0,0 l100,100 l100,-100", "M0,0 l100,100 l100,-100 Z"],
    		perChevronReversed: ["M0,200 l100,-100 l100,100", "M0,200 l100,-100 l100,100 Z"],
    		perPile: ["M15,0 l85,200 l85,-200", "M15,0 l85,200 l85,-200 Z"],
    		perSaltire: ["M0,0 L200,200 M200,0 l-200,200", "M0,0 L200,200 v-200 l-200,200 Z"],
    		gyronny: [
    			"M0,0 l200,200 M200,100 h-200 M100,0 v200 M0,200 l200,-200",
    			"M0,0 l200,200 v-100 h-200 h-100 M100,0 v200, h-100 l200,-200 h-100"
    		],
    		chevronny: [
    			"",
    			"M0,80 100,-15 200,80 200,120 100,25 0,120z M0,160 100,65 200,160 200,200 100,105 0,200z M0,240 100,145 200,240 0,240z"
    		]
    	};

    	let size = window.innerWidth < 600 ? window.innerWidth * 0.9 : 500;
    	if (window.innerHeight < 600) size *= 0.5;
    	const writable_props = ['duration'];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<AnimatedCOA> was created with unknown prop '${key}'`);
    	});

    	$$self.$$set = $$props => {
    		if ('duration' in $$props) $$invalidate(0, duration = $$props.duration);
    	};

    	$$self.$capture_state = () => ({
    		colors,
    		shieldPaths,
    		fade,
    		draw,
    		rw,
    		duration,
    		delay,
    		tinctures,
    		metal,
    		t1,
    		t2,
    		divisionVariants,
    		division,
    		paths,
    		size,
    		$colors
    	});

    	$$self.$inject_state = $$props => {
    		if ('duration' in $$props) $$invalidate(0, duration = $$props.duration);
    		if ('size' in $$props) $$invalidate(1, size = $$props.size);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [duration, size, $colors, delay, t1, t2, division, paths];
    }

    class AnimatedCOA extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$x, create_fragment$x, safe_not_equal, { duration: 0 });

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "AnimatedCOA",
    			options,
    			id: create_fragment$x.name
    		});

    		const { ctx } = this.$$;
    		const props = options.props || {};

    		if (/*duration*/ ctx[0] === undefined && !('duration' in props)) {
    			console.warn("<AnimatedCOA> was created without expected prop 'duration'");
    		}
    	}

    	get duration() {
    		throw new Error("<AnimatedCOA>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set duration(value) {
    		throw new Error("<AnimatedCOA>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /* src/components/navigation/About.svelte generated by Svelte v3.44.2 */
    const file$w = "src/components/navigation/About.svelte";

    function create_fragment$w(ctx) {
    	let div1;
    	let span0;
    	let t1;
    	let animatedcoa;
    	let t2;
    	let div0;
    	let a0;
    	let span1;
    	let t3_value = /*$t*/ ctx[0]("about.tutorial") + "";
    	let t3;
    	let t4;
    	let a1;
    	let span2;
    	let t5_value = /*$t*/ ctx[0]("about.discord") + "";
    	let t5;
    	let t6;
    	let a2;
    	let span3;
    	let t7_value = /*$t*/ ctx[0]("about.gitHub") + "";
    	let t7;
    	let t8;
    	let a3;
    	let span4;
    	let t9_value = /*$t*/ ctx[0]("about.api") + "";
    	let t9;
    	let t10;
    	let a4;
    	let span5;
    	let t11_value = /*$t*/ ctx[0]("about.patreon") + "";
    	let t11;
    	let div0_intro;
    	let div1_transition;
    	let current;
    	let mounted;
    	let dispose;
    	animatedcoa = new AnimatedCOA({ props: { duration }, $$inline: true });

    	const block = {
    		c: function create() {
    			div1 = element("div");
    			span0 = element("span");
    			span0.textContent = "×";
    			t1 = space();
    			create_component(animatedcoa.$$.fragment);
    			t2 = space();
    			div0 = element("div");
    			a0 = element("a");
    			span1 = element("span");
    			t3 = text(t3_value);
    			t4 = space();
    			a1 = element("a");
    			span2 = element("span");
    			t5 = text(t5_value);
    			t6 = space();
    			a2 = element("a");
    			span3 = element("span");
    			t7 = text(t7_value);
    			t8 = space();
    			a3 = element("a");
    			span4 = element("span");
    			t9 = text(t9_value);
    			t10 = space();
    			a4 = element("a");
    			span5 = element("span");
    			t11 = text(t11_value);
    			attr_dev(span0, "class", "close svelte-1ssn3sl");
    			add_location(span0, file$w, 12, 2, 319);
    			attr_dev(span1, "class", "svelte-1ssn3sl");
    			add_location(span1, file$w, 15, 86, 561);
    			attr_dev(a0, "target", "_blank");
    			attr_dev(a0, "href", "https://github.com/Azgaar/Armoria/wiki/Armoria-Tutorial");
    			attr_dev(a0, "class", "svelte-1ssn3sl");
    			add_location(a0, file$w, 15, 4, 479);
    			attr_dev(span2, "class", "svelte-1ssn3sl");
    			add_location(span2, file$w, 16, 65, 666);
    			attr_dev(a1, "target", "_blank");
    			attr_dev(a1, "href", "https://discord.com/invite/X7E84HU");
    			attr_dev(a1, "class", "svelte-1ssn3sl");
    			add_location(a1, file$w, 16, 4, 605);
    			attr_dev(span3, "class", "svelte-1ssn3sl");
    			add_location(span3, file$w, 17, 64, 769);
    			attr_dev(a2, "target", "_blank");
    			attr_dev(a2, "href", "https://github.com/Azgaar/Armoria");
    			attr_dev(a2, "class", "svelte-1ssn3sl");
    			add_location(a2, file$w, 17, 4, 709);
    			attr_dev(span4, "class", "svelte-1ssn3sl");
    			add_location(span4, file$w, 18, 75, 882);
    			attr_dev(a3, "target", "_blank");
    			attr_dev(a3, "href", "https://github.com/Azgaar/armoria-api#readme");
    			attr_dev(a3, "class", "svelte-1ssn3sl");
    			add_location(a3, file$w, 18, 4, 811);
    			attr_dev(span5, "class", "svelte-1ssn3sl");
    			add_location(span5, file$w, 19, 61, 978);
    			attr_dev(a4, "target", "_blank");
    			attr_dev(a4, "href", "https://www.patreon.com/azgaar");
    			attr_dev(a4, "class", "svelte-1ssn3sl");
    			add_location(a4, file$w, 19, 4, 921);
    			attr_dev(div0, "class", "buttons svelte-1ssn3sl");
    			add_location(div0, file$w, 14, 2, 408);
    			attr_dev(div1, "id", "about");
    			attr_dev(div1, "class", "svelte-1ssn3sl");
    			add_location(div1, file$w, 11, 0, 284);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div1, anchor);
    			append_dev(div1, span0);
    			append_dev(div1, t1);
    			mount_component(animatedcoa, div1, null);
    			append_dev(div1, t2);
    			append_dev(div1, div0);
    			append_dev(div0, a0);
    			append_dev(a0, span1);
    			append_dev(span1, t3);
    			append_dev(div0, t4);
    			append_dev(div0, a1);
    			append_dev(a1, span2);
    			append_dev(span2, t5);
    			append_dev(div0, t6);
    			append_dev(div0, a2);
    			append_dev(a2, span3);
    			append_dev(span3, t7);
    			append_dev(div0, t8);
    			append_dev(div0, a3);
    			append_dev(a3, span4);
    			append_dev(span4, t9);
    			append_dev(div0, t10);
    			append_dev(div0, a4);
    			append_dev(a4, span5);
    			append_dev(span5, t11);
    			current = true;

    			if (!mounted) {
    				dispose = listen_dev(span0, "click", /*handleClose*/ ctx[1], false, false, false);
    				mounted = true;
    			}
    		},
    		p: function update(new_ctx, [dirty]) {
    			ctx = new_ctx;
    			if ((!current || dirty & /*$t*/ 1) && t3_value !== (t3_value = /*$t*/ ctx[0]("about.tutorial") + "")) set_data_dev(t3, t3_value);
    			if ((!current || dirty & /*$t*/ 1) && t5_value !== (t5_value = /*$t*/ ctx[0]("about.discord") + "")) set_data_dev(t5, t5_value);
    			if ((!current || dirty & /*$t*/ 1) && t7_value !== (t7_value = /*$t*/ ctx[0]("about.gitHub") + "")) set_data_dev(t7, t7_value);
    			if ((!current || dirty & /*$t*/ 1) && t9_value !== (t9_value = /*$t*/ ctx[0]("about.api") + "")) set_data_dev(t9, t9_value);
    			if ((!current || dirty & /*$t*/ 1) && t11_value !== (t11_value = /*$t*/ ctx[0]("about.patreon") + "")) set_data_dev(t11, t11_value);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(animatedcoa.$$.fragment, local);

    			if (!div0_intro) {
    				add_render_callback(() => {
    					div0_intro = create_in_transition(div0, fly, { y: 200, delay: duration, duration });
    					div0_intro.start();
    				});
    			}

    			add_render_callback(() => {
    				if (!div1_transition) div1_transition = create_bidirectional_transition(div1, fade, {}, true);
    				div1_transition.run(1);
    			});

    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(animatedcoa.$$.fragment, local);
    			if (!div1_transition) div1_transition = create_bidirectional_transition(div1, fade, {}, false);
    			div1_transition.run(0);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div1);
    			destroy_component(animatedcoa);
    			if (detaching && div1_transition) div1_transition.end();
    			mounted = false;
    			dispose();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$w.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    const duration = 1000;

    function instance$w($$self, $$props, $$invalidate) {
    	let $state;
    	let $t;
    	validate_store(state, 'state');
    	component_subscribe($$self, state, $$value => $$invalidate(2, $state = $$value));
    	validate_store(X, 't');
    	component_subscribe($$self, X, $$value => $$invalidate(0, $t = $$value));
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('About', slots, []);

    	const handleClose = () => {
    		set_store_value(state, $state.about = 0, $state);
    	};

    	const writable_props = [];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<About> was created with unknown prop '${key}'`);
    	});

    	$$self.$capture_state = () => ({
    		t: X,
    		AnimatedCOA,
    		state,
    		fade,
    		fly,
    		duration,
    		handleClose,
    		$state,
    		$t
    	});

    	return [$t, handleClose];
    }

    class About extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$w, create_fragment$w, safe_not_equal, {});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "About",
    			options,
    			id: create_fragment$w.name
    		});
    	}
    }

    /* src/components/navigation/License.svelte generated by Svelte v3.44.2 */
    const file$v = "src/components/navigation/License.svelte";

    function get_each_context$f(ctx, list, i) {
    	const child_ctx = ctx.slice();
    	child_ctx[9] = list[i].charge;
    	child_ctx[21] = list[i].license;
    	child_ctx[22] = list[i].source;
    	return child_ctx;
    }

    // (66:4) {#if chargeData.length}
    function create_if_block_2$5(ctx) {
    	let hr;
    	let t0;
    	let h2;
    	let t1_value = /*$t*/ ctx[0]("license.currentCoas") + "";
    	let t1;

    	const block = {
    		c: function create() {
    			hr = element("hr");
    			t0 = space();
    			h2 = element("h2");
    			t1 = text(t1_value);
    			attr_dev(hr, "class", "svelte-1b7i60q");
    			add_location(hr, file$v, 66, 6, 2875);
    			add_location(h2, file$v, 67, 6, 2888);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, hr, anchor);
    			insert_dev(target, t0, anchor);
    			insert_dev(target, h2, anchor);
    			append_dev(h2, t1);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*$t*/ 1 && t1_value !== (t1_value = /*$t*/ ctx[0]("license.currentCoas") + "")) set_data_dev(t1, t1_value);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(hr);
    			if (detaching) detach_dev(t0);
    			if (detaching) detach_dev(h2);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_2$5.name,
    		type: "if",
    		source: "(66:4) {#if chargeData.length}",
    		ctx
    	});

    	return block;
    }

    // (73:4) {:else}
    function create_else_block$5(ctx) {
    	let div;
    	let each_value = /*chargeData*/ ctx[7];
    	validate_each_argument(each_value);
    	let each_blocks = [];

    	for (let i = 0; i < each_value.length; i += 1) {
    		each_blocks[i] = create_each_block$f(get_each_context$f(ctx, each_value, i));
    	}

    	const block = {
    		c: function create() {
    			div = element("div");

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].c();
    			}

    			attr_dev(div, "class", "chargesList svelte-1b7i60q");
    			add_location(div, file$v, 73, 6, 3104);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].m(div, null);
    			}
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*chargeData*/ 128) {
    				each_value = /*chargeData*/ ctx[7];
    				validate_each_argument(each_value);
    				let i;

    				for (i = 0; i < each_value.length; i += 1) {
    					const child_ctx = get_each_context$f(ctx, each_value, i);

    					if (each_blocks[i]) {
    						each_blocks[i].p(child_ctx, dirty);
    					} else {
    						each_blocks[i] = create_each_block$f(child_ctx);
    						each_blocks[i].c();
    						each_blocks[i].m(div, null);
    					}
    				}

    				for (; i < each_blocks.length; i += 1) {
    					each_blocks[i].d(1);
    				}

    				each_blocks.length = each_value.length;
    			}
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    			destroy_each(each_blocks, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_else_block$5.name,
    		type: "else",
    		source: "(73:4) {:else}",
    		ctx
    	});

    	return block;
    }

    // (71:4) {#if isLicenseSame}
    function create_if_block_1$7(ctx) {
    	let h3;

    	let t0_value = (/*chargeData*/ ctx[7].length > 1
    	? /*$t*/ ctx[0]("license.charges")
    	: /*charge*/ ctx[9].charge) + "";

    	let t0;
    	let t1;
    	let html_tag;
    	let raw0_value = /*charge*/ ctx[9].license + "";
    	let t2;
    	let html_tag_1;
    	let raw1_value = /*charge*/ ctx[9].source + "";

    	const block = {
    		c: function create() {
    			h3 = element("h3");
    			t0 = text(t0_value);
    			t1 = text(": ");
    			html_tag = new HtmlTag();
    			t2 = text(", ");
    			html_tag_1 = new HtmlTag();
    			html_tag.a = t2;
    			html_tag_1.a = null;
    			add_location(h3, file$v, 71, 6, 2966);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, h3, anchor);
    			append_dev(h3, t0);
    			append_dev(h3, t1);
    			html_tag.m(raw0_value, h3);
    			append_dev(h3, t2);
    			html_tag_1.m(raw1_value, h3);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*$t*/ 1 && t0_value !== (t0_value = (/*chargeData*/ ctx[7].length > 1
    			? /*$t*/ ctx[0]("license.charges")
    			: /*charge*/ ctx[9].charge) + "")) set_data_dev(t0, t0_value);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(h3);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_1$7.name,
    		type: "if",
    		source: "(71:4) {#if isLicenseSame}",
    		ctx
    	});

    	return block;
    }

    // (75:8) {#each chargeData as { charge, license, source }}
    function create_each_block$f(ctx) {
    	let div;
    	let span;
    	let t0_value = /*charge*/ ctx[9] + "";
    	let t0;
    	let t1;
    	let html_tag;
    	let raw0_value = /*license*/ ctx[21] + "";
    	let t2;
    	let html_tag_1;
    	let raw1_value = /*source*/ ctx[22] + "";

    	const block = {
    		c: function create() {
    			div = element("div");
    			span = element("span");
    			t0 = text(t0_value);
    			t1 = text(": ");
    			html_tag = new HtmlTag();
    			t2 = text(", ");
    			html_tag_1 = new HtmlTag();
    			attr_dev(span, "class", "charge svelte-1b7i60q");
    			add_location(span, file$v, 75, 15, 3203);
    			html_tag.a = t2;
    			html_tag_1.a = null;
    			add_location(div, file$v, 75, 10, 3198);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    			append_dev(div, span);
    			append_dev(span, t0);
    			append_dev(div, t1);
    			html_tag.m(raw0_value, div);
    			append_dev(div, t2);
    			html_tag_1.m(raw1_value, div);
    		},
    		p: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_each_block$f.name,
    		type: "each",
    		source: "(75:8) {#each chargeData as { charge, license, source }}",
    		ctx
    	});

    	return block;
    }

    // (81:4) {#if wetaShield($shield)}
    function create_if_block$e(ctx) {
    	let p;
    	let raw_value = /*$t*/ ctx[0]("license.wetaShield") + "";

    	const block = {
    		c: function create() {
    			p = element("p");
    			add_location(p, file$v, 81, 6, 3355);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, p, anchor);
    			p.innerHTML = raw_value;
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*$t*/ 1 && raw_value !== (raw_value = /*$t*/ ctx[0]("license.wetaShield") + "")) p.innerHTML = raw_value;		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(p);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block$e.name,
    		type: "if",
    		source: "(81:4) {#if wetaShield($shield)}",
    		ctx
    	});

    	return block;
    }

    function create_fragment$v(ctx) {
    	let div1;
    	let span;
    	let t1;
    	let div0;
    	let h1;
    	let t2_value = /*$t*/ ctx[0]("license.armoriaLicense") + "";
    	let t2;
    	let t3;
    	let t4;
    	let t5;
    	let show_if = /*wetaShield*/ ctx[3](/*$shield*/ ctx[2]);
    	let t6;
    	let hr0;
    	let t7;
    	let h20;
    	let t8_value = /*$t*/ ctx[0]("license.code") + "";
    	let t8;
    	let t9;
    	let html_tag;
    	let t10;
    	let p0;
    	let t11_value = /*$t*/ ctx[0]("license.textMain") + "";
    	let t11;
    	let t12;
    	let p1;
    	let t13_value = /*$t*/ ctx[0]("license.textRest") + "";
    	let t13;
    	let t14;
    	let hr1;
    	let t15;
    	let h21;
    	let t16_value = /*$t*/ ctx[0]("license.icons") + "";
    	let t16;
    	let t17;
    	let html_tag_1;
    	let t18;
    	let html_tag_2;
    	let t19;
    	let br;
    	let div1_transition;
    	let current;
    	let mounted;
    	let dispose;
    	let if_block0 = /*chargeData*/ ctx[7].length && create_if_block_2$5(ctx);

    	function select_block_type(ctx, dirty) {
    		if (/*isLicenseSame*/ ctx[8]) return create_if_block_1$7;
    		return create_else_block$5;
    	}

    	let current_block_type = select_block_type(ctx);
    	let if_block1 = current_block_type(ctx);
    	let if_block2 = show_if && create_if_block$e(ctx);

    	const block = {
    		c: function create() {
    			div1 = element("div");
    			span = element("span");
    			span.textContent = "×";
    			t1 = space();
    			div0 = element("div");
    			h1 = element("h1");
    			t2 = text(t2_value);
    			t3 = space();
    			if (if_block0) if_block0.c();
    			t4 = space();
    			if_block1.c();
    			t5 = space();
    			if (if_block2) if_block2.c();
    			t6 = space();
    			hr0 = element("hr");
    			t7 = space();
    			h20 = element("h2");
    			t8 = text(t8_value);
    			t9 = text(": MIT License, ");
    			html_tag = new HtmlTag();
    			t10 = space();
    			p0 = element("p");
    			t11 = text(t11_value);
    			t12 = space();
    			p1 = element("p");
    			t13 = text(t13_value);
    			t14 = space();
    			hr1 = element("hr");
    			t15 = space();
    			h21 = element("h2");
    			t16 = text(t16_value);
    			t17 = text(": ");
    			html_tag_1 = new HtmlTag();
    			t18 = text(", ");
    			html_tag_2 = new HtmlTag();
    			t19 = space();
    			br = element("br");
    			attr_dev(span, "class", "close svelte-1b7i60q");
    			add_location(span, file$v, 60, 2, 2692);
    			add_location(h1, file$v, 63, 4, 2800);
    			attr_dev(hr0, "class", "svelte-1b7i60q");
    			add_location(hr0, file$v, 84, 4, 3410);
    			html_tag.a = null;
    			add_location(h20, file$v, 85, 4, 3421);
    			add_location(p0, file$v, 86, 4, 3491);
    			add_location(p1, file$v, 87, 4, 3527);
    			attr_dev(hr1, "class", "svelte-1b7i60q");
    			add_location(hr1, file$v, 89, 4, 3564);
    			html_tag_1.a = t18;
    			html_tag_2.a = null;
    			add_location(h21, file$v, 90, 4, 3575);
    			add_location(br, file$v, 91, 4, 3645);
    			attr_dev(div0, "id", "licenseContainer");
    			attr_dev(div0, "class", "svelte-1b7i60q");
    			add_location(div0, file$v, 62, 2, 2768);
    			attr_dev(div1, "id", "license");
    			attr_dev(div1, "class", "svelte-1b7i60q");
    			add_location(div1, file$v, 59, 0, 2655);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div1, anchor);
    			append_dev(div1, span);
    			append_dev(div1, t1);
    			append_dev(div1, div0);
    			append_dev(div0, h1);
    			append_dev(h1, t2);
    			append_dev(div0, t3);
    			if (if_block0) if_block0.m(div0, null);
    			append_dev(div0, t4);
    			if_block1.m(div0, null);
    			append_dev(div0, t5);
    			if (if_block2) if_block2.m(div0, null);
    			append_dev(div0, t6);
    			append_dev(div0, hr0);
    			append_dev(div0, t7);
    			append_dev(div0, h20);
    			append_dev(h20, t8);
    			append_dev(h20, t9);
    			html_tag.m(/*armoriaGitHub*/ ctx[4], h20);
    			append_dev(div0, t10);
    			append_dev(div0, p0);
    			append_dev(p0, t11);
    			append_dev(div0, t12);
    			append_dev(div0, p1);
    			append_dev(p1, t13);
    			append_dev(div0, t14);
    			append_dev(div0, hr1);
    			append_dev(div0, t15);
    			append_dev(div0, h21);
    			append_dev(h21, t16);
    			append_dev(h21, t17);
    			html_tag_1.m(/*ccBy*/ ctx[5], h21);
    			append_dev(h21, t18);
    			html_tag_2.m(/*fontAwesome*/ ctx[6], h21);
    			append_dev(div0, t19);
    			append_dev(div0, br);
    			current = true;

    			if (!mounted) {
    				dispose = listen_dev(span, "click", /*click_handler*/ ctx[10], false, false, false);
    				mounted = true;
    			}
    		},
    		p: function update(ctx, [dirty]) {
    			if ((!current || dirty & /*$t*/ 1) && t2_value !== (t2_value = /*$t*/ ctx[0]("license.armoriaLicense") + "")) set_data_dev(t2, t2_value);
    			if (/*chargeData*/ ctx[7].length) if_block0.p(ctx, dirty);
    			if_block1.p(ctx, dirty);
    			if (dirty & /*$shield*/ 4) show_if = /*wetaShield*/ ctx[3](/*$shield*/ ctx[2]);

    			if (show_if) {
    				if (if_block2) {
    					if_block2.p(ctx, dirty);
    				} else {
    					if_block2 = create_if_block$e(ctx);
    					if_block2.c();
    					if_block2.m(div0, t6);
    				}
    			} else if (if_block2) {
    				if_block2.d(1);
    				if_block2 = null;
    			}

    			if ((!current || dirty & /*$t*/ 1) && t8_value !== (t8_value = /*$t*/ ctx[0]("license.code") + "")) set_data_dev(t8, t8_value);
    			if ((!current || dirty & /*$t*/ 1) && t11_value !== (t11_value = /*$t*/ ctx[0]("license.textMain") + "")) set_data_dev(t11, t11_value);
    			if ((!current || dirty & /*$t*/ 1) && t13_value !== (t13_value = /*$t*/ ctx[0]("license.textRest") + "")) set_data_dev(t13, t13_value);
    			if ((!current || dirty & /*$t*/ 1) && t16_value !== (t16_value = /*$t*/ ctx[0]("license.icons") + "")) set_data_dev(t16, t16_value);
    		},
    		i: function intro(local) {
    			if (current) return;

    			add_render_callback(() => {
    				if (!div1_transition) div1_transition = create_bidirectional_transition(div1, fade, {}, true);
    				div1_transition.run(1);
    			});

    			current = true;
    		},
    		o: function outro(local) {
    			if (!div1_transition) div1_transition = create_bidirectional_transition(div1, fade, {}, false);
    			div1_transition.run(0);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div1);
    			if (if_block0) if_block0.d();
    			if_block1.d();
    			if (if_block2) if_block2.d();
    			if (detaching && div1_transition) div1_transition.end();
    			mounted = false;
    			dispose();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$v.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$v($$self, $$props, $$invalidate) {
    	let $t;
    	let $locale;
    	let $dictionary;
    	let $state;
    	let $shield;
    	validate_store(X, 't');
    	component_subscribe($$self, X, $$value => $$invalidate(0, $t = $$value));
    	validate_store(M, 'locale');
    	component_subscribe($$self, M, $$value => $$invalidate(11, $locale = $$value));
    	validate_store(s, 'dictionary');
    	component_subscribe($$self, s, $$value => $$invalidate(12, $dictionary = $$value));
    	validate_store(state, 'state');
    	component_subscribe($$self, state, $$value => $$invalidate(1, $state = $$value));
    	validate_store(shield, 'shield');
    	component_subscribe($$self, shield, $$value => $$invalidate(2, $shield = $$value));
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('License', slots, []);
    	const wetaShield = shield => ["noldor", "gondor", "easterling", "ironHills", "urukHai", "moriaOrc"].includes(shield);
    	const coas = Array.from(document.querySelectorAll("svg.coa"));
    	const charges = coas.map(coa => Array.from(coa.querySelectorAll(".charge[charge]")).map(el => el.getAttribute("charge"))).flat();

    	// translation-related constants
    	const noLicenseData = $t("license.noLicenseData");

    	const noSourceData = $t("license.noSourceData");
    	const publicDomain = $t("license.publicDomain");
    	const fairUse = $t("license.fairUse");

    	// links
    	const armoriaGitHub = link("https://github.com/Azgaar/Armoria", "Azgaar");

    	const ccBy = link("https://creativecommons.org/licenses/by/4.0/", "CC BY 4.0");
    	const fontAwesome = link("https://fontawesome.com/license/free", "Font Awesome");

    	const translateSafely = (group, key) => {
    		const isInDictionary = $dictionary?.[$locale]?.[group]?.[key];
    		return isInDictionary ? $t(`${group}.${key}`) : key;
    	};

    	const chargeData = [...new Set(charges)].map(charge => {
    		const el = document.getElementById(charge);
    		const licenseURL = el.getAttribute("license");
    		const licenseName = getLicenseName(licenseURL);
    		const sourceURL = el.getAttribute("source");
    		const author = el.getAttribute("author") || (sourceURL ? new URL(sourceURL).host : null);

    		const license = licenseURL && licenseName
    		? link(licenseURL, licenseName)
    		: noLicenseData;

    		const source = sourceURL
    		? link(sourceURL, author)
    		: author || noSourceData;

    		return {
    			charge: translateSafely("charges", charge),
    			license,
    			source
    		};
    	}).sort((a, b) => a.license < b.license ? -1 : 1);

    	const isLicenseSame = [...new Set(chargeData.map(d => [d.license, d.source].join(",")))].length === 1;
    	const charge = isLicenseSame ? chargeData[0] : null;

    	// get mainly Creative Commons short names from license link
    	function getLicenseName(license) {
    		if (!license) return null;
    		if (license.includes("publicdomain")) return publicDomain;
    		if (license.includes("by-nc-sa")) return "CC BY-NC-SA";
    		if (license.includes("by-nc-nd")) return "CC BY-NC-ND";
    		if (license.includes("by-nc")) return "CC BY-NC";
    		if (license.includes("by-nd")) return "CC BY-ND";
    		if (license.includes("by-sa")) return "CC BY-SA";
    		if (license.includes("by")) return "CC BY";
    		if (license.includes("Fair")) return fairUse;
    		return license;
    	}

    	const writable_props = [];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<License> was created with unknown prop '${key}'`);
    	});

    	const click_handler = () => set_store_value(state, $state.license = 0, $state);

    	$$self.$capture_state = () => ({
    		t: X,
    		dictionary: s,
    		locale: M,
    		fade,
    		shield,
    		state,
    		link,
    		wetaShield,
    		coas,
    		charges,
    		noLicenseData,
    		noSourceData,
    		publicDomain,
    		fairUse,
    		armoriaGitHub,
    		ccBy,
    		fontAwesome,
    		translateSafely,
    		chargeData,
    		isLicenseSame,
    		charge,
    		getLicenseName,
    		$t,
    		$locale,
    		$dictionary,
    		$state,
    		$shield
    	});

    	return [
    		$t,
    		$state,
    		$shield,
    		wetaShield,
    		armoriaGitHub,
    		ccBy,
    		fontAwesome,
    		chargeData,
    		isLicenseSame,
    		charge,
    		click_handler
    	];
    }

    class License extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$v, create_fragment$v, safe_not_equal, {});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "License",
    			options,
    			id: create_fragment$v.name
    		});
    	}
    }

    /* src/components/editor/Grid.svelte generated by Svelte v3.44.2 */
    const file$u = "src/components/editor/Grid.svelte";

    // (8:0) {#if $showGrid}
    function create_if_block$d(ctx) {
    	let pattern;
    	let path;
    	let t;
    	let g;
    	let rect;
    	let g_transition;
    	let current;

    	const block = {
    		c: function create() {
    			pattern = svg_element("pattern");
    			path = svg_element("path");
    			t = space();
    			g = svg_element("g");
    			rect = svg_element("rect");
    			attr_dev(path, "d", "M 100 0 L 0 0 0 100");
    			attr_dev(path, "fill", "none");
    			attr_dev(path, "stroke", "#000");
    			attr_dev(path, "opacity", ".2");
    			attr_dev(path, "stroke-width", ".5");
    			add_location(path, file$u, 9, 4, 267);
    			attr_dev(pattern, "id", "gridPattern");
    			attr_dev(pattern, "width", /*$grid*/ ctx[2]);
    			attr_dev(pattern, "height", /*$grid*/ ctx[2]);
    			attr_dev(pattern, "patternUnits", "userSpaceOnUse");
    			add_location(pattern, file$u, 8, 2, 177);
    			attr_dev(rect, "x", "-200");
    			attr_dev(rect, "y", "-200");
    			attr_dev(rect, "width", "400");
    			attr_dev(rect, "height", "400");
    			attr_dev(rect, "fill", "url(#gridPattern)");
    			add_location(rect, file$u, 12, 4, 479);
    			attr_dev(g, "id", "grid");
    			set_style(g, "pointer-events", "none");
    			attr_dev(g, "transform", /*transform*/ ctx[0]);
    			attr_dev(g, "transform-origin", "center");
    			add_location(g, file$u, 11, 2, 372);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, pattern, anchor);
    			append_dev(pattern, path);
    			insert_dev(target, t, anchor);
    			insert_dev(target, g, anchor);
    			append_dev(g, rect);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			if (!current || dirty & /*$grid*/ 4) {
    				attr_dev(pattern, "width", /*$grid*/ ctx[2]);
    			}

    			if (!current || dirty & /*$grid*/ 4) {
    				attr_dev(pattern, "height", /*$grid*/ ctx[2]);
    			}

    			if (!current || dirty & /*transform*/ 1) {
    				attr_dev(g, "transform", /*transform*/ ctx[0]);
    			}
    		},
    		i: function intro(local) {
    			if (current) return;

    			if (local) {
    				add_render_callback(() => {
    					if (!g_transition) g_transition = create_bidirectional_transition(g, fade, {}, true);
    					g_transition.run(1);
    				});
    			}

    			current = true;
    		},
    		o: function outro(local) {
    			if (local) {
    				if (!g_transition) g_transition = create_bidirectional_transition(g, fade, {}, false);
    				g_transition.run(0);
    			}

    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(pattern);
    			if (detaching) detach_dev(t);
    			if (detaching) detach_dev(g);
    			if (detaching && g_transition) g_transition.end();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block$d.name,
    		type: "if",
    		source: "(8:0) {#if $showGrid}",
    		ctx
    	});

    	return block;
    }

    function create_fragment$u(ctx) {
    	let if_block_anchor;
    	let if_block = /*$showGrid*/ ctx[1] && create_if_block$d(ctx);

    	const block = {
    		c: function create() {
    			if (if_block) if_block.c();
    			if_block_anchor = empty();
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			if (if_block) if_block.m(target, anchor);
    			insert_dev(target, if_block_anchor, anchor);
    		},
    		p: function update(ctx, [dirty]) {
    			if (/*$showGrid*/ ctx[1]) {
    				if (if_block) {
    					if_block.p(ctx, dirty);

    					if (dirty & /*$showGrid*/ 2) {
    						transition_in(if_block, 1);
    					}
    				} else {
    					if_block = create_if_block$d(ctx);
    					if_block.c();
    					transition_in(if_block, 1);
    					if_block.m(if_block_anchor.parentNode, if_block_anchor);
    				}
    			} else if (if_block) {
    				group_outros();

    				transition_out(if_block, 1, 1, () => {
    					if_block = null;
    				});

    				check_outros();
    			}
    		},
    		i: function intro(local) {
    			transition_in(if_block);
    		},
    		o: function outro(local) {
    			transition_out(if_block);
    		},
    		d: function destroy(detaching) {
    			if (if_block) if_block.d(detaching);
    			if (detaching) detach_dev(if_block_anchor);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$u.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$u($$self, $$props, $$invalidate) {
    	let transform;
    	let $state;
    	let $showGrid;
    	let $grid;
    	validate_store(state, 'state');
    	component_subscribe($$self, state, $$value => $$invalidate(3, $state = $$value));
    	validate_store(showGrid, 'showGrid');
    	component_subscribe($$self, showGrid, $$value => $$invalidate(1, $showGrid = $$value));
    	validate_store(grid, 'grid');
    	component_subscribe($$self, grid, $$value => $$invalidate(2, $grid = $$value));
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('Grid', slots, []);
    	const writable_props = [];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<Grid> was created with unknown prop '${key}'`);
    	});

    	$$self.$capture_state = () => ({
    		state,
    		grid,
    		showGrid,
    		fade,
    		transform,
    		$state,
    		$showGrid,
    		$grid
    	});

    	$$self.$inject_state = $$props => {
    		if ('transform' in $$props) $$invalidate(0, transform = $$props.transform);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	$$self.$$.update = () => {
    		if ($$self.$$.dirty & /*$state*/ 8) {
    			$$invalidate(0, transform = $state.transform || null);
    		}
    	};

    	return [transform, $showGrid, $grid, $state];
    }

    class Grid extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$u, create_fragment$u, safe_not_equal, {});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Grid",
    			options,
    			id: create_fragment$u.name
    		});
    	}
    }

    /* src/components/editor/Positions.svelte generated by Svelte v3.44.2 */

    const { Object: Object_1$a } = globals;
    const file$t = "src/components/editor/Positions.svelte";

    function get_each_context$e(ctx, list, i) {
    	const child_ctx = ctx.slice();
    	child_ctx[3] = list[i];
    	return child_ctx;
    }

    // (17:0) {#if $state.positions}
    function create_if_block$c(ctx) {
    	let g1;
    	let g0;
    	let g0_transition;
    	let g1_transform_value;
    	let current;
    	let each_value = /*points*/ ctx[0];
    	validate_each_argument(each_value);
    	let each_blocks = [];

    	for (let i = 0; i < each_value.length; i += 1) {
    		each_blocks[i] = create_each_block$e(get_each_context$e(ctx, each_value, i));
    	}

    	const block = {
    		c: function create() {
    			g1 = svg_element("g");
    			g0 = svg_element("g");

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].c();
    			}

    			attr_dev(g0, "id", "positions");
    			attr_dev(g0, "transform", "translate(100, 100)");
    			add_location(g0, file$t, 18, 4, 590);
    			attr_dev(g1, "transform", g1_transform_value = /*$state*/ ctx[1].transform || null);
    			attr_dev(g1, "transform-origin", "center");
    			add_location(g1, file$t, 17, 2, 519);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, g1, anchor);
    			append_dev(g1, g0);

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].m(g0, null);
    			}

    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*points, getClass, $state*/ 3) {
    				each_value = /*points*/ ctx[0];
    				validate_each_argument(each_value);
    				let i;

    				for (i = 0; i < each_value.length; i += 1) {
    					const child_ctx = get_each_context$e(ctx, each_value, i);

    					if (each_blocks[i]) {
    						each_blocks[i].p(child_ctx, dirty);
    					} else {
    						each_blocks[i] = create_each_block$e(child_ctx);
    						each_blocks[i].c();
    						each_blocks[i].m(g0, null);
    					}
    				}

    				for (; i < each_blocks.length; i += 1) {
    					each_blocks[i].d(1);
    				}

    				each_blocks.length = each_value.length;
    			}

    			if (!current || dirty & /*$state*/ 2 && g1_transform_value !== (g1_transform_value = /*$state*/ ctx[1].transform || null)) {
    				attr_dev(g1, "transform", g1_transform_value);
    			}
    		},
    		i: function intro(local) {
    			if (current) return;

    			if (local) {
    				add_render_callback(() => {
    					if (!g0_transition) g0_transition = create_bidirectional_transition(g0, fade, {}, true);
    					g0_transition.run(1);
    				});
    			}

    			current = true;
    		},
    		o: function outro(local) {
    			if (local) {
    				if (!g0_transition) g0_transition = create_bidirectional_transition(g0, fade, {}, false);
    				g0_transition.run(0);
    			}

    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(g1);
    			destroy_each(each_blocks, detaching);
    			if (detaching && g0_transition) g0_transition.end();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block$c.name,
    		type: "if",
    		source: "(17:0) {#if $state.positions}",
    		ctx
    	});

    	return block;
    }

    // (20:6) {#each points as p}
    function create_each_block$e(ctx) {
    	let g;
    	let circle;
    	let circle_cx_value;
    	let circle_cy_value;
    	let text_1;
    	let t_value = /*p*/ ctx[3][0] + "";
    	let t;
    	let text_1_x_value;
    	let text_1_y_value;
    	let g_id_value;
    	let g_class_value;

    	const block = {
    		c: function create() {
    			g = svg_element("g");
    			circle = svg_element("circle");
    			text_1 = svg_element("text");
    			t = text(t_value);
    			attr_dev(circle, "cx", circle_cx_value = /*p*/ ctx[3][1][0]);
    			attr_dev(circle, "cy", circle_cy_value = /*p*/ ctx[3][1][1]);
    			attr_dev(circle, "r", "3");
    			attr_dev(circle, "class", "svelte-lt1npm");
    			toggle_class(circle, "active", /*$state*/ ctx[1].positions.includes(/*p*/ ctx[3][0]));
    			add_location(circle, file$t, 21, 10, 744);
    			set_style(text_1, "dominant-baseline", "central");
    			attr_dev(text_1, "x", text_1_x_value = /*p*/ ctx[3][1][0]);
    			attr_dev(text_1, "y", text_1_y_value = /*p*/ ctx[3][1][1]);
    			attr_dev(text_1, "class", "svelte-lt1npm");
    			toggle_class(text_1, "active", /*$state*/ ctx[1].positions.includes(/*p*/ ctx[3][0]));
    			add_location(text_1, file$t, 22, 10, 844);
    			attr_dev(g, "id", g_id_value = /*p*/ ctx[3][0]);
    			attr_dev(g, "class", g_class_value = "" + (null_to_empty(getClass(/*p*/ ctx[3][0])) + " svelte-lt1npm"));
    			add_location(g, file$t, 20, 8, 697);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, g, anchor);
    			append_dev(g, circle);
    			append_dev(g, text_1);
    			append_dev(text_1, t);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*points*/ 1 && circle_cx_value !== (circle_cx_value = /*p*/ ctx[3][1][0])) {
    				attr_dev(circle, "cx", circle_cx_value);
    			}

    			if (dirty & /*points*/ 1 && circle_cy_value !== (circle_cy_value = /*p*/ ctx[3][1][1])) {
    				attr_dev(circle, "cy", circle_cy_value);
    			}

    			if (dirty & /*$state, points*/ 3) {
    				toggle_class(circle, "active", /*$state*/ ctx[1].positions.includes(/*p*/ ctx[3][0]));
    			}

    			if (dirty & /*points*/ 1 && t_value !== (t_value = /*p*/ ctx[3][0] + "")) set_data_dev(t, t_value);

    			if (dirty & /*points*/ 1 && text_1_x_value !== (text_1_x_value = /*p*/ ctx[3][1][0])) {
    				attr_dev(text_1, "x", text_1_x_value);
    			}

    			if (dirty & /*points*/ 1 && text_1_y_value !== (text_1_y_value = /*p*/ ctx[3][1][1])) {
    				attr_dev(text_1, "y", text_1_y_value);
    			}

    			if (dirty & /*$state, points*/ 3) {
    				toggle_class(text_1, "active", /*$state*/ ctx[1].positions.includes(/*p*/ ctx[3][0]));
    			}

    			if (dirty & /*points*/ 1 && g_id_value !== (g_id_value = /*p*/ ctx[3][0])) {
    				attr_dev(g, "id", g_id_value);
    			}

    			if (dirty & /*points*/ 1 && g_class_value !== (g_class_value = "" + (null_to_empty(getClass(/*p*/ ctx[3][0])) + " svelte-lt1npm"))) {
    				attr_dev(g, "class", g_class_value);
    			}
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(g);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_each_block$e.name,
    		type: "each",
    		source: "(20:6) {#each points as p}",
    		ctx
    	});

    	return block;
    }

    function create_fragment$t(ctx) {
    	let if_block_anchor;
    	let if_block = /*$state*/ ctx[1].positions && create_if_block$c(ctx);

    	const block = {
    		c: function create() {
    			if (if_block) if_block.c();
    			if_block_anchor = empty();
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			if (if_block) if_block.m(target, anchor);
    			insert_dev(target, if_block_anchor, anchor);
    		},
    		p: function update(ctx, [dirty]) {
    			if (/*$state*/ ctx[1].positions) {
    				if (if_block) {
    					if_block.p(ctx, dirty);

    					if (dirty & /*$state*/ 2) {
    						transition_in(if_block, 1);
    					}
    				} else {
    					if_block = create_if_block$c(ctx);
    					if_block.c();
    					transition_in(if_block, 1);
    					if_block.m(if_block_anchor.parentNode, if_block_anchor);
    				}
    			} else if (if_block) {
    				group_outros();

    				transition_out(if_block, 1, 1, () => {
    					if_block = null;
    				});

    				check_outros();
    			}
    		},
    		i: function intro(local) {
    			transition_in(if_block);
    		},
    		o: function outro(local) {
    			transition_out(if_block);
    		},
    		d: function destroy(detaching) {
    			if (if_block) if_block.d(detaching);
    			if (detaching) detach_dev(if_block_anchor);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$t.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function getClass(p) {
    	if (("abcdefghi").includes(p)) return "green";
    	if (("ABCDEFGHIJKL").includes(p)) return "red";
    	if (("zy").includes(p)) return "yellow";
    	return "blue";
    }

    function instance$t($$self, $$props, $$invalidate) {
    	let points;
    	let $shield;
    	let $state;
    	validate_store(shield, 'shield');
    	component_subscribe($$self, shield, $$value => $$invalidate(2, $shield = $$value));
    	validate_store(state, 'state');
    	component_subscribe($$self, state, $$value => $$invalidate(1, $state = $$value));
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('Positions', slots, []);
    	const writable_props = [];

    	Object_1$a.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<Positions> was created with unknown prop '${key}'`);
    	});

    	$$self.$capture_state = () => ({
    		state,
    		shield,
    		shieldPositions,
    		fade,
    		getClass,
    		points,
    		$shield,
    		$state
    	});

    	$$self.$inject_state = $$props => {
    		if ('points' in $$props) $$invalidate(0, points = $$props.points);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	$$self.$$.update = () => {
    		if ($$self.$$.dirty & /*$shield*/ 4) {
    			// on shield change
    			$$invalidate(0, points = shieldPositions[$shield]
    			? Object.entries(shieldPositions[$shield])
    			: Object.entries(shieldPositions.spanish));
    		}
    	};

    	return [points, $state, $shield];
    }

    class Positions extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$t, create_fragment$t, safe_not_equal, {});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Positions",
    			options,
    			id: create_fragment$t.name
    		});
    	}
    }

    function drag(event, charge, coa) {
      const el = event.currentTarget;
      const x0 = event.x;
      const y0 = event.y;

      const sizeAdj = el.closest("svg").clientWidth / 200;
      document.addEventListener("mouseup", stopDragging, {once: true});

      const {x = 0, y = 0, size = 1} = charge;
      const gridSize = get_store_value(grid);
      const positionElements = el.querySelectorAll("use");
      const positions = shieldPositions[get_store_value(shield)] || shieldPositions.spanish;

      if (event.shiftKey) {
        document.addEventListener("mousemove", resize);
        document.body.style.cursor = "ns-resize";
      } else if (event.ctrlKey || event.metaKey) {
        document.addEventListener("mousemove", rotate);
        document.body.style.cursor = "ew-resize";
      } else {
        document.addEventListener("mousemove", move);
        document.body.style.cursor = "move";
      }

      function move(event) {
        const dx = x + (event.x - x0) / sizeAdj;
        const dy = y + (event.y - y0) / sizeAdj;

        charge.x = Math.round(dx / gridSize) * gridSize;
        charge.y = Math.round(dy / gridSize) * gridSize;
        setGroupTransform(el, charge);
      }

      function resize(event) {
        const dy = y + (event.y - y0) / sizeAdj;
        charge.size = round(size + dy / -100);

        if (charge.p) {
          setElementTransform(charge);
        } else {
          setGroupTransform(el, charge);
        }
      }

      function rotate(event) {
        const cx = x + 100;
        const cy = y + 100;

        const x1 = event.x / sizeAdj;
        const y1 = event.y / sizeAdj;

        let a = 90 + (Math.atan2(y1 - cy, x1 - cx) * 180) / Math.PI;
        if (a > 180) a = (a % 180) - 180;
        if (a < -179) a = (a % 180) + 180;

        charge.angle = Math.round(a / gridSize) * gridSize;
        setGroupTransform(el, charge);
      }

      function setGroupTransform(el, charge) {
        const tr = transform(charge);

        if (tr) el.setAttribute("transform", tr);
        else el.removeAttribute("transform");
      }

      function setElementTransform(charge) {
        const validPositions = [...new Set(charge.p)].filter(p => positions[p]);
        validPositions.forEach((p, i) => {
          const element = positionElements[i];
          if (element) {
            const transform = getElTransform(charge, p, get_store_value(shield));
            if (transform) element.setAttribute("transform", transform);
            else element.removeAttribute("transform");
          }
        });
      }

      function stopDragging() {
        document.removeEventListener("mousemove", move);
        document.removeEventListener("mousemove", resize);
        document.removeEventListener("mousemove", rotate);
        document.body.style.cursor = "auto";
        changes.add(JSON.stringify(coa));
      }
    }

    function round(n) {
      return Math.round(n * 100) / 100;
    }

    function transform(charge) {
      let {x = 0, y = 0, angle = 0, size = 1, p} = charge;
      if (p) size = 1; // size is defined on use element level

      if (size !== 1) {
        x = round(x + 100 - size * 100);
        y = round(y + 100 - size * 100);
      }

      let transform = "";
      if (x || y) transform += `translate(${x} ${y})`;
      if (angle) transform += ` rotate(${angle} ${size * 100} ${size * 100})`;
      if (size !== 1) transform += ` scale(${size})`;

      return transform ? transform.trim() : null;
    }

    function getElTransform(charge, p, shield) {
      const positions = shieldPositions[shield] || shieldPositions.spanish;
      const sizeModifier = shieldSize[shield] || 1;

      const size = round((charge.size || 1) * sizeModifier);
      const sx = charge.sinister ? -size : size;
      const sy = charge.reversed ? -size : size;
      let [x, y] = positions[p];
      x = round(x - 100 * (sx - 1));
      y = round(y - 100 * (sy - 1));

      const translate = x || y ? `translate(${x} ${y})` : null;
      const scale = sx !== 1 || sy !== 1 ? (sx === sy ? `scale(${sx})` : `scale(${sx} ${sy})`) : null;
      return translate && scale ? `${translate} ${scale}` : translate ? translate : scale ? scale : null;
    }

    const lines$1 = {
      straight: "m 0,100 v15 h 200 v -15 z",
      engrailed: "m 0,95 a 6.25,6.25 0 0 0 12.5,0 6.25,6.25 0 0 0 12.5,0 6.25,6.25 0 0 0 12.5,0 6.25,6.25 0 0 0 12.5,0 6.25,6.25 0 0 0 12.5,0 6.25,6.25 0 0 0 12.5,0 6.25,6.25 0 0 0 12.5,0 6.25,6.25 0 0 0 12.5,0 6.25,6.25 0 0 0 12.5,0 6.25,6.25 0 0 0 12.5,0 6.25,6.25 0 0 0 12.5,0 6.25,6.25 0 0 0 12.5,0 6.25,6.25 0 0 0 12.5,0 6.25,6.25 0 0 0 12.5,0 6.25,6.25 0 0 0 12.5,0 6.25,6.25 0 0 0 12.5,0 v 20 H 0 Z",
      invecked: "M0,102.5 a6.25,6.25,0,0,1,12.5,0 a6.25,6.25,0,0,1,12.5,0 a6.25,6.25,0,0,1,12.5,0 a6.25,6.25,0,0,1,12.5,0 a6.25,6.25,0,0,1,12.5,0 a6.25,6.25,0,0,1,12.5,0 a6.25,6.25,0,0,1,12.5,0 a6.25,6.25,0,0,1,12.5,0 a6.25,6.25,0,0,1,12.5,0 a6.25,6.25,0,0,1,12.5,0 a6.25,6.25,0,0,1,12.5,0 a6.25,6.25,0,0,1,12.5,0 a6.25,6.25,0,0,1,12.5,0 a6.25,6.25,0,0,1,12.5,0 a6.25,6.25,0,0,1,12.5,0 a6.25,6.25,0,0,1,12.5,0 v12.5 H0 z",
      embattled: "M 0,105 H 2.5 V 95 h 15 v 10 h 15 V 95 h 15 v 10 h 15 V 95 h 15 v 10 h 15 V 95 h 15 v 10 h 15 V 95 h 15 v 10 h 15 V 95 h 15 v 10 h 15 V 95 h 15 v 10 h 2.5 v 10 H 0 Z",
      wavy: "m 200,115 v -15 c -8.9,3.5 -16,3.1 -25,0 -8.9,-3.5 -16,-3.1 -25,0 -8.9,3.5 -16,3.2 -25,0 -8.9,-3.5 -16,-3.2 -25,0 -8.9,3.5 -16,3.1 -25,0 -8.9,-3.5 -16,-3.1 -25,0 -8.9,3.5 -16,3.2 -25,0 -8.9,-3.5 -16,-3.2 -25,0 v 15 z",
      raguly: "m 200,95 h -3 l -5,10 h -10 l 5,-10 h -10 l -5,10 h -10 l 5,-10 h -10 l -5,10 h -10 l 5,-10 h -10 l -5,10 h -10 l 5,-10 h -10 l -5,10 h -10 l 5,-10 H 97 l -5,10 H 82 L 87,95 H 77 l -5,10 H 62 L 67,95 H 57 l -5,10 H 42 L 47,95 H 37 l -5,10 H 22 L 27,95 H 17 l -5,10 H 2 L 7,95 H 0 v 20 h 200 z",
      dancetty: "m 0,105 10,-15 15,20 15,-20 15,20 15,-20 15,20 15,-20 15,20 15,-20 15,20 15,-20 15,20 15,-20 10,15 v 10 H 0 Z",
      dentilly: "M 180,105 170,95 v 10 L 160,95 v 10 L 150,95 v 10 L 140,95 v 10 L 130,95 v 10 L 120,95 v 10 L 110,95 v 10 L 100,95 v 10 L 90,95 v 10 L 80,95 v 10 L 70,95 v 10 L 60,95 v 10 L 50,95 v 10 L 40,95 v 10 L 30,95 v 10 L 20,95 v 10 L 10,95 v 10 L 0,95 v 20 H 200 V 105 L 190,95 v 10 L 180,95 Z",
      angled: "m 0,95 h 100 v 10 h 100 v 10 H 0 Z",
      urdy: "m 200,90 -5,5 v 10 l -5,5 -5,-5 V 95 l -5,-5 -5,5 v 10 l -5,5 -5,-5 V 95 l -5,-5 -5,5 v 10 l -5,5 -5,-5 V 95 l -5,-5 -5,5 v 10 l -5,6 -5,-6 V 95 l -5,-5 -5,5 v 10 l -5,5 -5,-5 V 95 l -5,-5 -5,5 v 10 l -5,5 -5,-5 V 95 l -5,-5 -5,5 v 10 l -5,6 -5,-6 V 95 l -5,-5 -5,5 v 10 l -5,5 -5,-5 V 95 l -5,-5 -5,5 v 10 l -5,5 -5,-5 V 95 l -5,-5 -5,5 v 10 l -5,5 -5,-5 V 95 L 0,90 v 25 h 200",
      indented: "m 100,95 5,10 5,-10 5,10 5,-10 5,10 5,-10 5,10 5,-10 5,10 5,-10 5,10 5,-10 5,10 5,-10 5,10 5,-10 5,10 5,-10 5,10 5,-10 v 20 H 0 V 95 l 5,10 5,-10 5,10 5,-10 5,10 5,-10 5,10 5,-10 5,10 5,-10 5,10 5,-10 5,10 5,-10 5,10 5,-10 5,10 5,-10 5,10 z",
      bevilled: "m 0,92.5 h 110 l -20,15 H 200 V 115 H 0 Z",
      nowy: "m 0,95 h 80 c 0,0 0.1,20.1 20,20 19.9,-0.1 20,-20 20,-20 h 80 v 20 H 0 Z",
      nowyReversed: "m 200,105 h -80 c 0,0 -0.1,-20.1 -20,-20 -19.9,0.1 -20,20 -20,20 H 0 v 10 h 200 z",
      potenty: "m 3,95 v 5 h 5 v 5 H 0 v 10 h 200 l 0.5,-10 H 193 v -5 h 5 v -5 h -15 v 5 h 5 v 5 h -15 v -5 h 5 v -5 h -15 v 5 h 5 v 5 h -15 v -5 h 5 v -5 h -15 v 5 h 5 v 5 h -15 v -5 h 5 v -5 h -15 v 5 h 5 v 5 h -15 v -5 h 5 v -5 h -15 v 5 h 5 v 5 H 100.5 93 v -5 h 5 V 95 H 83 v 5 h 5 v 5 H 73 v -5 h 5 V 95 H 63 v 5 h 5 v 5 H 53 v -5 h 5 V 95 H 43 v 5 h 5 v 5 H 33 v -5 h 5 V 95 H 23 v 5 h 5 v 5 H 13 v -5 h 5 v -5 z",
      potentyDexter: "m 200,105 h -2 v -10 0 0 h -10 v 5 h 5 v 5 H 183 V 95 h -10 v 5 h 5 v 5 H 168 V 95 h -10 v 5 h 5 v 5 H 153 V 95 h -10 v 5 h 5 v 5 H 138 V 95 h -10 v 5 h 5 v 5 H 123 V 95 h -10 v 5 h 5 v 5 h -10 v 0 0 -10 H 98 v 5 h 5 v 5 H 93 V 95 H 83 v 5 h 5 v 5 H 78 V 95 H 68 v 5 h 5 v 5 H 63 V 95 H 53 v 5 h 5 v 5 H 48 V 95 H 38 v 5 h 5 v 5 H 33 V 95 H 23 v 5 h 5 v 5 H 18 V 95 H 8 v 5 h 5 v 5 H 3 V 95 H 0 v 20 h 200 z",
      potentySinister: "m 2.5,95 v 10 H 0 v 10 h 202.5 v -15 h 5 v -5 h -10 v 10 h -10 v -5 h 5 v -5 h -10 v 10 h -10 v -5 h 5 v -5 h -10 v 10 h -10 v -5 h 5 v -5 h -10 v 10 h -10 v -5 h 5 v -5 h -10 v 10 h -10 v -5 h 5 v -5 h -10 v 10 h -10 v -5 h 5 v -5 h -10 v 10 h -10 v -5 h 5 v -5 h -10 v 10 h -10 v -5 h 5 v -5 h -10 v 10 h -10 v -5 h 5 v -5 h -10 v 10 h -10 v -5 h 5 v -5 h -10 v 10 h -10 v -5 h 5 v -5 h -10 v 10 h -10 v -5 h 5 v -5 h -10 v 10 h -10 v -5 h 5 v -5 z",
      embattledGhibellin: "M 200,200 V 100 l -5,-5 v 10 l -5,-5 -5,5 V 95 l -5,5 -5,-5 v 10 l -5,-5 -5,5 V 95 l -5,5 -5,-5 v 10 l -5,-5 -5,5 V 95 l -5,5 -5,-5 v 10 l -5,-5 -5,5 V 95 l -5,5 -5,-5 v 10 l -5,-5 -5,5 V 95 l -5,5 -5,-5 v 10 l -5,-5 -5,5 V 95 l -5,5 -5,-5 v 10 l -5,-5 -5,5 V 95 l -5,5 -5,-5 v 10 l -5,-5 -5,5 V 95 l -5,5 -5,-5 v 10 l -5,-5 -5,5 V 95 l -5,5 -5,-5 v 10 l -5,-5 -5,5 V 95 l -5,5 v 15 h 200",
      embattledNotched: "m 200,105 h -5 V 95 l -5,5 -5,-5 v 10 h -5 V 95 l -5,5 -5,-5 v 10 h -5 V 95 l -5,5 -5,-5 v 10 h -5 V 95 l -5,5 -5,-5 v 10 h -5 V 95 l -5,5 -5,-5 v 10 h -5 V 95 l -5,5 -5,-5 v 10 h -5 V 95 l -5,5 -5,-5 v 10 H 90 V 95 l -5,5 -5,-5 v 10 H 75 V 95 l -5,5 -5,-5 v 10 H 60 V 95 l -5,5 -5,-5 v 10 H 45 V 95 l -5,5 -5,-5 v 10 H 30 V 95 l -5,5 -5,-5 v 10 H 15 V 95 l -5,5 -5,-5 v 10 H 0 v 10 h 200",
      embattledGrady: "m 0,95 v 20 H 200 V 95 h -2.5 v 5 h -5 v 5 h -5 v -5 h -5 v -5 h -5 v 5 h -5 v 5 h -5 v -5 h -5 v -5 h -5 v 5 h -5 v 5 h -5 v -5 h -5 v -5 h -5 v 5 h -5 v 5 h -5 v -5 h -5 v -5 h -5 v 5 h -5 v 5 h -5 v -5 h -5 v -5 h -5 v 5 h -5 v 5 h -5 v -5 h -5 v -5 h -5 v 5 h -5 v 5 h -5 v -5 h -5 v -5 h -5 v 5 h -5 v 5 h -5 v -5 h -5 v -5 h -5 v 5 h -5 v 5 h -5 v -5 h -5 v -5 h -5 v 5 h -5 v 5 h -5 v -5 h -5 v -5 z",
      dovetailed: "m 200,95 h -7 l 4,10 h -14 l 4,-10 h -14 l 4,10 h -14 l 4,-10 h -14 l 4,10 h -14 l 4,-10 h -14 l 4,10 h -14 l 4,-10 h -14 l 4,10 h -14 l 4,-10 H 93 l 4,10 H 83 L 87,95 H 73 l 4,10 H 63 L 67,95 H 53 l 4,10 H 43 L 47,95 H 33 l 4,10 H 23 L 27,95 H 13 l 4,10 H 3 L 7,95 H 0 v 20 h 200",
      dovetailedIndented: "m 200,100 -7,-5 4,10 -7,-5 -7,5 4,-10 -7,5 -7,-5 4,10 -7,-5 -7,5 4,-10 -7,5 -7,-5 4,10 -7,-5 -7,5 4,-10 -7,5 -7,-5 4,10 -7,-5 -7,5 4,-10 -7,5 -7,-5 4,10 -7,-5 -7,5 4,-10 -7,5 -7,-5 4,10 -7,-5 -7,5 4,-10 -7,5 -7,-5 4,10 -7,-5 -7,5 4,-10 -7,5 -7,-5 4,10 -7,-5 -7,5 4,-10 -7,5 -7,-5 4,10 -7,-5 -7,5 4,-10 -7,5 -7,-5 4,10 -7,-5 -7,5 4,-10 -7,5 v 15 h 200",
      nebuly: "m 13.1,89.8 c -4.1,0 -7.3,2 -7.3,4.5 0,1.2 0.7,2.3 1.8,3.1 1.2,0.7 1.9,1.8 1.9,3 0,2.5 -3.2,4.5 -7.3,4.5 -0.5,0 -2.2,-0.2 -2.2,-0.2 V 115 h 200 v -10.1 c -3.7,-0.2 -6.7,-2.2 -6.7,-4.5 0,-1.2 0.7,-2.3 1.9,-3 1.2,-0.8 1.8,-1.9 1.8,-3.1 0,-2.5 -3.2,-4.5 -7.2,-4.5 -4.1,0 -7.3,2 -7.3,4.5 0,1.2 0.7,2.3 1.8,3.1 1.2,0.7 1.9,1.8 1.9,3 0,2.5 -3.3,4.5 -7.3,4.5 -4,0 -7.3,-2 -7.3,-4.5 0,-1.2 0.7,-2.3 1.9,-3 1.2,-0.8 1.8,-1.9 1.8,-3.1 0,-2.5 -3.2,-4.5 -7.2,-4.5 -4.1,0 -7.3,2 -7.3,4.5 0,1.2 0.7,2.3 1.8,3.1 1.2,0.7 1.9,1.8 1.9,3 -1.5,4.1 -4.2,4.4 -8.8,4.5 -4.7,-0.1 -8.7,-1.5 -8.9,-4.5 0,-1.2 0.7,-2.3 1.9,-3 1.2,-0.8 1.9,-1.9 1.9,-3.1 0,-2.5 -3.3,-4.5 -7.3,-4.5 -4.1,0 -7.3,2 -7.3,4.5 0,1.2 0.7,2.3 1.8,3.1 1.2,0.7 1.9,1.8 1.9,3 0,2.5 -3.3,4.5 -7.3,4.5 -4,0 -7.3,-2 -7.3,-4.5 0,-1.2 0.7,-2.3 1.9,-3 1.2,-0.8 1.9,-1.9 1.9,-3.1 0,-2.5 -3.3,-4.5 -7.3,-4.5 -4.1,0 -7.3,2 -7.3,4.5 0,1.2 0.7,2.3 1.8,3.1 1.2,0.7 1.9,1.8 1.9,3 0,2.5 -3.3,4.5 -7.3,4.5 -4,0 -7.3,-2 -7.3,-4.5 0,-1.2 0.7,-2.3 1.9,-3 1.2,-0.8 1.9,-1.9 1.9,-3.1 0,-2.5 -3.3,-4.5 -7.3,-4.5 -4.1,0 -7.3,2 -7.3,4.5 0,1.2 0.7,2.3 1.8,3.1 1.2,0.7 1.9,1.8 1.9,3 0,2.5 -3.3,4.5 -7.3,4.5 -4,0 -7.3,-2 -7.3,-4.5 0,-1.2 0.7,-2.3 1.9,-3 1.2,-0.8 1.9,-1.9 1.9,-3.1 0,-2.5 -3.3,-4.5 -7.3,-4.5 -4.1,0 -7.3,2 -7.3,4.5 0,1.2 0.7,2.3 1.8,3.1 1.2,0.7 1.9,1.8 1.9,3 0,2.5 -3.3,4.5 -7.3,4.5 -4,0 -7.3,-2 -7.3,-4.5 0,-1.2 0.7,-2.3 1.9,-3 1.2,-0.8 1.9,-1.9 1.9,-3.1 0,-2.5 -3.3,-4.5 -7.3,-4.5 -4.1,0 -7.3,2 -7.3,4.5 0,1.2 0.7,2.3 1.8,3.1 1.2,0.7 1.9,1.8 1.9,3 0,2.5 -3.3,4.5 -7.3,4.5 -4,0 -7.3,-2 -7.3,-4.5 0,-1.2 0.7,-2.3 1.9,-3 1.2,-0.8 1.9,-1.9 1.9,-3.1 0,-2.5 -3.3,-4.5 -7.3,-4.5 -4.1,0 -7.3,2 -7.3,4.5 0,1.2 0.7,2.3 1.8,3.1 1.2,0.7 1.9,1.8 1.9,3 0,2.5 -3.3,4.5 -7.3,4.5 -4,0 -7.3,-2 -7.3,-4.5 0,-1.2 0.7,-2.3 1.9,-3 1.2,-0.8 1.9,-1.9 1.9,-3.1 0,-2.5 -3.3,-4.5 -7.3,-4.5 z",
      rayonne: "M0 115l-.1-6 .2.8c1.3-1 2.3-2.5 2.9-4.4.5-2 .4-3.9-.3-5.4-.7-1.5-.8-3.4-.3-5.4A9 9 0 015.5 90c-.7 1.5-.8 3.4-.3 5.4.5 2 1.7 3.6 3.1 4.6a9 9 0 013.1 4.6c.5 2 .4 3.9-.3 5.4a9 9 0 003.1-4.6c.5-2 .4-3.9-.3-5.4-.7-1.5-.8-3.4-.3-5.4.5-2 1.7-3.6 3.1-4.6-.7 1.5-.8 3.4-.3 5.4.5 2 1.7 3.6 3.1 4.6a9 9 0 013.1 4.6c.5 2 .4 3.9-.3 5.4a9 9 0 003.1-4.6c.5-2 .4-3.9-.3-5.4-.7-1.5-.8-3.4-.3-5.4.5-2 1.7-3.6 3.1-4.6-.7 1.5-.8 3.4-.3 5.4.5 2 1.7 3.6 3.1 4.6a9 9 0 013.1 4.6c.5 2 .4 3.9-.3 5.4a9 9 0 003.1-4.6c.5-2 .4-3.9-.3-5.4-.7-1.5-.8-3.4-.3-5.4.5-2 1.7-3.6 3.1-4.6-.7 1.5-.8 3.4-.3 5.4.5 2 1.7 3.6 3.1 4.6a9 9 0 013.1 4.6c.5 2 .4 3.9-.3 5.4a9 9 0 003.1-4.6c.5-2 .4-3.9-.3-5.4-.7-1.5-.8-3.4-.3-5.4.5-2 1.7-3.6 3.1-4.6-.7 1.5-.8 3.4-.3 5.4.5 2 1.7 3.6 3.1 4.6a9 9 0 013.1 4.6c.5 2 .4 3.9-.3 5.4a9 9 0 003.1-4.6c.5-2 .4-3.9-.3-5.4-.7-1.5-.8-3.4-.3-5.4.5-2 1.7-3.6 3.1-4.6-.7 1.5-.8 3.4-.3 5.4.5 2 1.7 3.6 3.1 4.6a9 9 0 013.1 4.6c.5 2 .4 3.9-.3 5.4a9 9 0 003.1-4.6c.5-2 .4-3.9-.3-5.4-.7-1.5-.8-3.4-.3-5.4.5-2 1.7-3.6 3.1-4.6-.7 1.5-.8 3.4-.3 5.4.5 2 1.7 3.6 3.1 4.6a9 9 0 013.1 4.6c.5 2 .4 3.9-.3 5.4a9 9 0 003.1-4.6c.5-2 .4-3.9-.3-5.4-.7-1.5-.8-3.4-.3-5.4.5-2 1.7-3.6 3.1-4.6-.7 1.5-.8 3.4-.3 5.4.5 2 1.7 3.6 3.1 4.6a9 9 0 013.1 4.6c.5 2 .4 3.9-.3 5.4a9 9 0 003.1-4.6c.5-2 .4-3.9-.3-5.4-.7-1.5-.8-3.4-.3-5.4.5-2 1.7-3.6 3.1-4.6-.7 1.5-.8 3.4-.3 5.4.5 2 2.1 3.1 3.1 4.6 1 1.6 2.4 3.1 2.7 4.8.3 1.7.3 3.3 0 5.2 1.3-1 2.6-2.7 3.2-4.6.5-2 .4-3.9-.3-5.4-.7-1.5-.8-3.4-.3-5.4.5-2 1.7-3.6 3.1-4.6-.7 1.5-.8 3.4-.3 5.4.5 2 1.7 3.6 3.1 4.6a9 9 0 013.1 4.6c.5 2 .4 3.9-.3 5.4a9 9 0 003.1-4.6c.5-2 .4-3.9-.3-5.4-.7-1.5-.8-3.4-.3-5.4.5-2 1.7-3.6 3.1-4.6-.7 1.5-.8 3.4-.3 5.4.5 2 1.7 3.6 3.1 4.6a9 9 0 013.1 4.6c.5 2 .4 3.9-.3 5.4a9 9 0 003.1-4.6c.5-2 .4-3.9-.3-5.4-.7-1.5-.8-3.4-.3-5.4.5-2 1.7-3.6 3.1-4.6-.7 1.5-.8 3.4-.3 5.4.5 2 1.7 3.6 3.1 4.6a9 9 0 013.1 4.6c.5 2 .4 3.9-.3 5.4a9 9 0 003.1-4.6c.5-2 .4-3.9-.3-5.4-.7-1.5-.8-3.4-.3-5.4.5-2 1.7-3.6 3.1-4.6-.7 1.5-.8 3.4-.3 5.4.5 2 1.7 3.6 3.1 4.6a9 9 0 013.1 4.6c.5 2 .4 3.9-.3 5.4a9 9 0 003.1-4.6c.5-2 .4-3.9-.3-5.4-.7-1.5-.8-3.4-.3-5.4.5-2 1.7-3.6 3.1-4.6-.7 1.5-.8 3.4-.3 5.4.5 2 1.7 3.6 3.1 4.6a9 9 0 013.1 4.6c.5 2 .4 3.9-.3 5.4a9 9 0 003.1-4.6c.5-2 .4-3.9-.3-5.4-.7-1.5-.8-3.4-.3-5.4.5-2 1.7-3.6 3.1-4.6-.7 1.5-.8 3.4-.3 5.4.5 2 1.7 3.6 3.1 4.6a9 9 0 013.1 4.6c.5 2 .4 3.9-.3 5.4a9 9 0 003.1-4.6c.5-2 .4-3.9-.3-5.4-.7-1.5-.8-3.4-.3-5.4.5-2 1.7-3.6 3.1-4.6-.7 1.5-.8 3.4-.3 5.4.5 2 1.7 3.6 3.1 4.6a9 9 0 013.1 4.6c.5 2 .4 3.9-.3 5.4a9 9 0 003.1-4.6c.5-2 .4-3.9-.3-5.4-.7-1.5-.8-3.4-.3-5.4.5-2 1.7-3.6 3.1-4.6-.7 1.5-.8 3.4-.3 5.4.5 2 1.7 3.6 3.1 4.6a9 9 0 013.1 4.6c.5 2 .4 3.9-.3 5.4a9 9 0 003.1-4.6c.5-2 .4-3.9-.3-5.4-.7-1.5-.8-3.4-.3-5.4.5-2 1.7-3.6 3.1-4.6-.7 1.5-.8 3.4-.3 5.4.75 2.79 2.72 4.08 4.45 5.82L200 115z",
      seaWaves: "m 28.83,94.9 c -4.25,0 -7.16,3.17 -8.75,5.18 -1.59,2.01 -4.5,5.18 -8.75,5.18 -2.16,0 -3.91,-1.63 -3.91,-3.64 0,-2.01 1.44,-3.6 3.6,-3.6 0.7,0 1.36,0.17 1.93,0.48 -0.33,-2.03 -2.19,-3.56 -4.45,-3.56 -4.24,0 -6.91,3.13 -8.5,5.13 V 115 h 200 v -14.89 c -1.59,2.01 -4.5,5.18 -8.75,5.18 -2.16,0 -3.91,-1.63 -3.91,-3.64 0,-2.01 1.75,-3.64 3.91,-3.64 0.7,0 1.36,0.17 1.93,0.48 -0.34,-2.01 -2.2,-3.55 -4.46,-3.55 -4.25,0 -7.16,3.17 -8.75,5.18 -1.59,2.01 -4.5,5.18 -8.75,5.18 -2.16,0 -3.91,-1.63 -3.91,-3.64 0,-2.01 1.75,-3.64 3.91,-3.64 0.7,0 1.36,0.17 1.93,0.48 -0.34,-2.01 -2.21,-3.55 -4.46,-3.55 -4.25,0 -7.16,3.17 -8.75,5.18 -1.59,2.01 -4.5,5.18 -8.75,5.18 -2.16,0 -3.91,-1.63 -3.91,-3.64 0,-2.01 1.75,-3.64 3.91,-3.64 0.7,0 1.36,0.17 1.93,0.48 -0.34,-2.01 -2.21,-3.55 -4.46,-3.55 -4.25,0 -7.16,3.17 -8.75,5.18 -1.59,2.01 -4.5,5.18 -8.75,5.18 -2.16,0 -3.91,-1.63 -3.91,-3.64 0,-2.01 1.75,-3.64 3.91,-3.64 0.7,0 1.36,0.17 1.93,0.48 -0.34,-2.01 -2.2,-3.55 -4.46,-3.55 -4.25,0 -7.16,3.17 -8.75,5.18 -1.59,2.01 -4.5,5.18 -8.75,5.18 -2.16,0 -3.91,-1.63 -3.91,-3.64 0,-2.01 1.44,-3.6 3.6,-3.6 0.7,0 1.36,0.17 1.93,0.48 -0.34,-2.01 -2.21,-3.55 -4.46,-3.55 -4.25,0 -6.6,3.09 -8.19,5.09 -1.59,2.01 -4.5,5.18 -8.75,5.18 -2.16,0 -3.91,-1.63 -3.91,-3.64 0,-2.01 1.75,-3.64 3.91,-3.64 0.7,0 1.36,0.17 1.93,0.48 -0.34,-2.01 -2.21,-3.55 -4.46,-3.55 -4.25,0 -7.16,3.17 -8.75,5.18 -1.59,2.01 -4.5,5.18 -8.75,5.18 -2.16,0 -3.91,-1.63 -3.91,-3.64 0,-2.01 1.75,-3.64 3.91,-3.64 0.7,0 1.36,0.17 1.93,0.48 -0.34,-2.01 -2.2,-3.55 -4.46,-3.55 -4.25,0 -7.16,3.17 -8.75,5.18 -1.59,2.01 -4.5,5.18 -8.75,5.18 -2.16,0 -3.91,-1.63 -3.91,-3.64 0,-2.01 1.75,-3.64 3.91,-3.64 0.7,0 1.36,0.17 1.93,0.48 -0.34,-2.01 -2.2,-3.55 -4.46,-3.55 -4.25,0 -7.16,3.17 -8.75,5.18 -1.59,2.01 -4.5,5.18 -8.75,5.18 -2.16,0 -3.91,-1.63 -3.91,-3.64 0,-2.01 1.75,-3.64 3.91,-3.64 0.7,0 1.36,0.17 1.93,0.48 -0.34,-2.01 -2.21,-3.55 -4.46,-3.55 z",
      dragonTeeth: "M 9.4,85 C 6.5,88.1 4.1,92.9 3,98.8 1.9,104.6 2.3,110.4 3.8,115 2.4,113.5 0,106.6 0,109.3 v 5.7 h 200 v -5.7 c -1.1,-2.4 -2,-5.1 -2.6,-8 -1.1,-5.9 -0.7,-11.6 0.8,-16.2 -2.9,3.1 -5.3,7.9 -6.4,13.8 -1.1,5.9 -0.7,11.6 0.8,16.2 -2.9,-3.1 -5.3,-7.9 -6.4,-13.8 -1.1,-5.9 -0.7,-11.6 0.8,-16.2 -2.9,3.1 -5.3,7.9 -6.4,13.8 -1.1,5.9 -0.7,11.6 0.8,16.2 -2.9,-3.1 -5.3,-7.9 -6.4,-13.8 -1.1,-5.9 -0.7,-11.6 0.8,-16.2 -2.9,3.1 -5.3,7.9 -6.4,13.8 -1.1,5.9 -0.7,11.6 0.8,16.2 -2.9,-3.1 -5.3,-7.9 -6.4,-13.8 -1.1,-5.9 -0.7,-11.6 0.8,-16.2 -2.9,3.1 -5.3,7.9 -6.4,13.8 -1.1,5.9 -0.7,11.6 0.8,16.2 -2.9,-3.1 -5.3,-7.9 -6.4,-13.8 -1.1,-5.9 -0.7,-11.6 0.8,-16.2 -2.9,3.1 -5.3,7.9 -6.4,13.8 -1.1,5.9 -0.7,11.6 0.8,16.2 -2.9,-3.1 -5.3,-7.9 -6.4,-13.8 -1.1,-5.9 -0.7,-11.6 0.8,-16.2 -2.9,3.1 -5.3,7.9 -6.4,13.8 -1.1,5.9 -0.7,11.6 0.8,16.2 -2.9,-3.1 -5.3,-7.9 -6.4,-13.8 -1.1,-5.9 -0.7,-11.6 0.8,-16.2 -2.9,3.1 -5.3,7.9 -6.4,13.8 -1.1,5.9 -0.7,11.6 0.8,16.2 -2.9,-3.1 -5.3,-7.9 -6.4,-13.8 -1.1,-5.9 -0.7,-11.6 0.8,-16.2 -2.9,3.1 -5.3,7.9 -6.4,13.8 -1.1,5.9 -0.7,11.6 0.8,16.2 -2.9,-3.1 -5.3,-7.9 -6.4,-13.8 -1.1,-5.9 -0.7,-11.6 0.8,-16.2 -2.9,3.1 -5.3,7.9 -6.4,13.8 -1.1,5.9 -0.7,11.6 0.8,16.2 -1.4,-1.5 -2.8,-3.9 -3.8,-6.1 -1.1,-2.4 -2.3,-6.1 -2.6,-7.7 -0.2,-5.9 0.2,-11.7 1.7,-16.3 -3,3.1 -5.3,7.9 -6.4,13.8 -1.1,5.8 -0.7,11.6 0.8,16.2 -2.9,-3.1 -5.3,-7.9 -6.4,-13.8 -1,-5.8 -0.7,-11.6 0.9,-16.2 -3,3.1 -5.3,7.9 -6.4,13.8 -1.1,5.8 -0.7,11.6 0.8,16.2 -2.9,-3.1 -5.3,-7.9 -6.4,-13.8 -1.1,-5.8 -0.7,-11.6 0.9,-16.2 -3,3.1 -5.3,7.9 -6.4,13.8 -1.1,5.8 -0.7,11.6 0.8,16.2 -2.9,-3.1 -5.3,-7.9 -6.4,-13.8 C 63,95.4 63.4,89.6 64.9,85 c -2.9,3.1 -5.3,7.9 -6.3,13.8 -1.1,5.8 -0.7,11.6 0.8,16.2 -3,-3.1 -5.3,-7.9 -6.4,-13.8 -1.1,-5.8 -0.7,-11.6 0.8,-16.2 -2.9,3.1 -5.3,7.9 -6.4,13.8 -1,5.8 -0.6,11.6 0.9,16.2 -3,-3.1 -5.3,-7.9 -6.4,-13.8 -1.1,-5.8 -0.7,-11.6 0.8,-16.2 -2.9,3.1 -5.3,7.9 -6.4,13.8 -1,5.8 -0.7,11.6 0.9,16.2 -3,-3.1 -5.3,-7.9 -6.4,-13.8 -1.1,-5.8 -0.7,-11.6 0.8,-16.2 -2.9,3.1 -5.3,7.9 -6.4,13.8 -1.1,5.8 -0.7,11.6 0.9,16.2 -3,-3.1 -5.3,-7.9 -6.4,-13.8 C 18.6,95.4 19,89.6 20.5,85 17.6,88.1 15.2,92.9 14.1,98.8 13,104.6 13.4,110.4 14.9,115 12,111.9 9.6,107.1 8.6,101.2 7.5,95.4 7.9,89.6 9.4,85 Z",
      firTrees: "m 3.9,90 -4,7 2,-0.5 L 0,100 v 15 h 200 v -15 l -1.9,-3.5 2,0.5 -4,-7 -4,7 2,-0.5 -4,7 2,-0.5 -4,7 -4,-7 2,0.5 -4,-7 2,0.5 -4,-7 -4,7 2,-0.5 -4,7 2,-0.5 -4,7 -4,-7 2,0.5 -4,-7 2,0.5 -4,-7 -4,7 2,-0.5 -4,7 2,-0.5 -4,7 -4,-7 2,0.5 -4,-7 2,0.5 -4.1,-7 -4,7 2,-0.5 -4,7 2,-0.5 -4,7 -4,-7 2,0.5 -4,-7 2,0.5 -4,-7 -4,7 2,-0.5 -4,7 2,-0.5 -4,7 -4,-7 2,0.5 -4,-7 2,0.5 -4,-7 -4,7 2,-0.5 -4,7 2,-0.5 -4,7 -4,-7 2,0.5 -4,-7 2,0.5 -4,-7 -4,7 2,-0.5 -4,7 2,-0.5 -4,7 -4,-7 2,0.5 -4,-7 2,0.5 -4,-7 -4,7 2,-0.5 -4,7 2,-0.5 -4,7 -4,-7 2,0.5 -4,-7 2,0.5 -4,-7 -4,7 2,-0.5 -4,7 2,-0.5 -4,7 -4,-7 2,0.5 -4,-7 2,0.5 -4.1,-7 -4,7 2,-0.5 -4,7 2,-0.5 -4,7 -4,-7 2,0.5 -4,-7 2,0.5 -4,-7 -4,7 2,-0.5 -4,7 2,-0.5 -4,7 -4,-7 2,0.5 -4,-7 2,0.5 -4,-7 -4,7 2,-0.5 -4,7 2,-0.5 -4,7 -4,-7 2,0.5 -4,-7 2,0.5 z",
      flechy: "m 0,100 h 85 l 15,-15 15,15 h 85 v 15 H 0 Z",
      barby: "m 0,100 h 85 l 15,15 15,-15 h 85 v 15 H 0 Z",
      enclavy: "M 0,100 H 85 V 85 h 30 v 15 h 85 v 15 H 0 Z",
      escartely: "m 0,100 h 85 v 15 h 30 v -15 h 85 v 15 H 0 Z",
      arched: "m 100,95 c 40,-0.2 100,20 100,20 H 0 c 0,0 60,-19.8 100,-20 z",
      archedReversed: "m 0,85 c 0,0 60,20.2 100,20 40,-0.2 100,-20 100,-20 v 30 H 0 Z"
    };

    const templates = {
      // straight divisions
      perFess: `<rect x="0" y="100" width="200" height="100"/>`,
      perPale: `<rect x="100" y="0" width="100" height="200"/>`,
      perBend: `<polygon points="0,0 200,200 0,200"/>`,
      perBendSinister: `<polygon points="200,0 0,200 200,200"/>`,
      perChevron: `<polygon points="0,200 100,100 200,200"/>`,
      perChevronReversed: `<polygon points="0,0 100,100 200,0"/>`,
      perCross: `<rect x="100" y="0" width="100" height="100"/><rect x="0" y="100" width="100" height="100"/>`,
      perPile: `<polygon points="0,0 15,0 100,200 185,0 200,0 200,200 0,200"/>`,
      perSaltire: `<polygon points="0,0 0,200 200,0 200,200"/>`,
      gyronny: `<polygon points="0,0 200,200 200,100 0,100"/><polygon points="200,0 0,200 100,200 100,0"/>`,
      chevronny: `<path d="M0,80 100,-15 200,80 200,120 100,25 0,120z M0,160 100,65 200,160 200,200 100,105 0,200z M0,240 100,145 200,240 0,240z"/>`,
      // lined divisions
      perFessLined: line => `<path d="${line}"/><rect x="0" y="115" width="200" height="85" shape-rendering="crispedges"/>`,
      perPaleLined: line => `<path d="${line}" transform="rotate(-90 100 100)"/><rect x="115" y="0" width="85" height="200" shape-rendering="crispedges"/>`,
      perBendLined: line => `<path d="${line}" transform="translate(-10 -10) rotate(45 110 110) scale(1.1)"/><rect x="0" y="115" width="200" height="85" transform="translate(-10 -10) rotate(45 110 110) scale(1.1)" shape-rendering="crispedges"/>`,
      perBendSinisterLined: line => `<path d="${line}" transform="translate(-10 -10) rotate(-45 110 110) scale(1.1)"/><rect x="0" y="115" width="200" height="85" transform="translate(-10 -10) rotate(-45 110 110) scale(1.1)" shape-rendering="crispedges"/>`,
      perChevronLined: line => `<rect x="15" y="115" width="200" height="200" transform="translate(70 70) rotate(45 100 100)"/><path d="${line}" transform="translate(129 71) rotate(-45 -100 100) scale(-1 1)"/><path d="${line}" transform="translate(71 71) rotate(45 100 100)"/>`,
      perChevronReversedLined: line => `<rect x="15" y="115" width="200" height="200" transform="translate(-70 -70) rotate(225.001 100 100)"/><path d="${line}" transform="translate(-70.7 -70.7) rotate(225 100 100) scale(1 1)"/><path d="${line}" transform="translate(270.7 -70.7) rotate(-225 -100 100) scale(-1 1)"/>`,
      perCrossLined: line => `<rect x="100" y="0" width="100" height="92.5"/><rect x="0" y="107.5" width="100" height="92.5"/><path d="${line}" transform="translate(0 50) scale(.5001)"/><path d="${line}" transform="translate(200 150) scale(-.5)"/>`,
      perPileLined: line => `<path d="${line}" transform="translate(161.66 10) rotate(66.66 -100 100) scale(-1 1)"/><path d="${line}" transform="translate(38.33 10) rotate(-66.66 100 100)"/><polygon points="-2.15,0 84.15,200 115.85,200 202.15,0 200,200 0,200"/>`,
      // straight ordinaries
      fess: `<rect x="0" y="75" width="200" height="50"/>`,
      pale: `<rect x="75" y="0" width="50" height="200"/>`,
      bend: `<polygon points="35,0 200,165 200,200 165,200 0,35 0,0"/>`,
      bendSinister: `<polygon points="0,165 165,0 200,0 200,35 35,200 0,200"/>`,
      chief: `<rect width="200" height="75"/>`,
      bar: `<rect x="0" y="87.5" width="200" height="25"/>`,
      gemelle: `<rect x="0" y="76" width="200" height="16"/><rect x="0" y="108" width="200" height="16"/>`,
      fessCotissed: `<rect x="0" y="67" width="200" height="8"/><rect x="0" y="83" width="200" height="34"/><rect x="0" y="125" width="200" height="8"/>`,
      fessDoubleCotissed: `<rect x="0" y="60" width="200" height="7.5"/><rect x="0" y="72.5" width="200" height="7.5"/><rect x="0" y="85" width="200" height="30"/><rect x="0" y="120" width="200" height="7.5"/><rect x="0" y="132.5" width="200" height="7.5"/>`,
      bendlet: `<polygon points="22,0 200,178 200,200 178,200 0,22 0,0"/>`,
      bendletSinister: `<polygon points="0,178 178,0 200,0 200,22 22,200 0,200"/>`,
      terrace: `<rect x="0" y="145" width="200" height="55"/>`,
      cross: `<polygon points="85,0 85,85 0,85 0,115 85,115 85,200 115,200 115,115 200,115 200,85 115,85 115,0"/>`,
      crossParted: `<path d="M 80 0 L 80 80 L 0 80 L 0 95 L 80 95 L 80 105 L 0 105 L 0 120 L 80 120 L 80 200 L 95 200 L 95 120 L 105 120 L 105 200 L 120 200 L 120 120 L 200 120 L 200 105 L 120 105 L 120 95 L 200 95 L 200 80 L 120 80 L 120 0 L 105 0 L 105 80 L 95 80 L 95 0 L 80 0 z M 95 95 L 105 95 L 105 105 L 95 105 L 95 95 z"/>`,
      saltire: `<path d="M 0,21 79,100 0,179 0,200 21,200 100,121 179,200 200,200 200,179 121,100 200,21 200,0 179,0 100,79 21,0 0,0 Z"/>`,
      saltireParted: `<path d="M 7 0 L 89 82 L 82 89 L 0 7 L 0 28 L 72 100 L 0 172 L 0 193 L 82 111 L 89 118 L 7 200 L 28 200 L 100 128 L 172 200 L 193 200 L 111 118 L 118 111 L 200 193 L 200 172 L 128 100 L 200 28 L 200 7 L 118 89 L 111 82 L 193 0 L 172 0 L 100 72 L 28 0 L 7 0 z M 100 93 L 107 100 L 100 107 L 93 100 L 100 93 z"/>`,
      mount: `<path d="m0,250 a100,100,0,0,1,200,0"/>`,
      point: `<path d="M0,200 Q80,180 100,135 Q120,180 200,200"/>`,
      flaunches: `<path d="M0,0 q120,100 0,200 M200,0 q-120,100 0,200"/>`,
      gore: `<path d="M20,0 Q30,75 100,100 Q80,150 100,200 L0,200 L0,0 Z"/>`,
      pall: `<polygon points="0,0 30,0 100,70 170,0 200,0 200,30 122,109 122,200 78,200 78,109 0,30"/>`,
      pallReversed: `<polygon points="0,200 0,170 78,91 78,0 122,0 122,91 200,170 200,200 170,200 100,130 30,200"/>`,
      chevron: `<polygon points="0,125 100,60 200,125 200,165 100,100 0,165"/>`,
      chevronReversed: `<polygon points="0,75 100,140 200,75 200,35 100,100 0,35"/>`,
      gyron: `<polygon points="0,0 100,100 0,100"/>`,
      quarter: `<rect width="50%" height="50%"/>`,
      canton: `<rect width="37.5%" height="37.5%"/>`,
      pile: `<polygon points="70,0 100,175 130,0"/>`,
      pileInBend: `<polygon points="200,200 200,144 25,25 145,200"/>`,
      pileInBendSinister: `<polygon points="0,200 0,144 175,25 55,200"/>`,
      piles: `<polygon points="46,0 75,175 103,0"/><polygon points="95,0 125,175 154,0"/>`,
      pilesInPoint: `<path d="M15,0 100,200 60,0Z M80,0 100,200 120,0Z M140,0 100,200 185,0Z"/>`,
      label: `<path d="m 46,54.8 6.6,-15.6 95.1,0 5.9,15.5 -16.8,0.1 4.5,-11.8 L 104,43 l 4.3,11.9 -16.8,0 4.3,-11.8 -37.2,0 4.5,11.8 -16.9,0 z"/>`,
      // lined ordinaries
      fessLined: line => `<path d="${line}" transform="translate(0 -25)"/><path d="${line}" transform="translate(0 25) rotate(180 100 100)"/><rect x="0" y="88" width="200" height="24" stroke="none"/>`,
      paleLined: line => `<path d="${line}" transform="rotate(-90 100 100) translate(0 -25)"/><path d="${line}" transform="rotate(90 100 100) translate(0 -25)"/><rect x="88" y="0" width="24" height="200" stroke="none"/>`,
      bendLined: line => `<path d="${line}" transform="translate(8 -18) rotate(45 110 100) scale(1.1 1)"/><path d="${line}" transform="translate(-28 18) rotate(225 110 100) scale(1.1 1)"/><rect x="0" y="88" width="200" height="24" transform="translate(-10 0) rotate(45 110 100) scale(1.1 1)" stroke="none"/>`,
      bendSinisterLined: line => `<path d="${line}" transform="translate(-28 -18) rotate(-45 110 100) scale(1.1 1)"/><path d="${line}" transform="translate(8 18) rotate(-225 110 100) scale(1.1 1)"/><rect x="0" y="88" width="200" height="24" transform="translate(-10 0) rotate(-45 110 100) scale(1.1 1)" stroke="none"/>`,
      chiefLined: line => `<path d="${line}" transform="translate(0,-25) rotate(180.00001 100 100)"/><rect width="200" height="62" stroke="none"/>`,
      barLined: line => `<path d="${line}" transform="translate(0,-12.5)"/><path d="${line}" transform="translate(0,12.5) rotate(180.00001 100 100)"/><rect x="0" y="94" width="200" height="12" stroke="none"/>`,
      gemelleLined: line => `<path d="${line}" transform="translate(0,-22.5)"/><path d="${line}" transform="translate(0,22.5) rotate(180.00001 100 100)"/>`,
      fessCotissedLined: line => `<path d="${line}" transform="translate(0 15) scale(1 .5)"/><path d="${line}" transform="translate(0 85) rotate(180 100 50) scale(1 .5)"/><rect x="0" y="80" width="200" height="40"/>`,
      fessDoubleCotissedLined: line => `<rect x="0" y="85" width="200" height="30"/><rect x="0" y="72.5" width="200" height="7.5"/><rect x="0" y="120" width="200" height="7.5"/><path d="${line}" transform="translate(0 10) scale(1 .5)"/><path d="${line}" transform="translate(0 90) rotate(180 100 50) scale(1 .5)"/>`,
      bendletLined: line => `<path d="${line}" transform="translate(2 -12) rotate(45 110 100) scale(1.1 1)"/><path d="${line}" transform="translate(-22 12) rotate(225 110 100) scale(1.1 1)"/><rect x="0" y="94" width="200" height="12" transform="translate(-10 0) rotate(45 110 100) scale(1.1 1)" stroke="none"/>`,
      bendletSinisterLined: line => `<path d="${line}" transform="translate(-22 -12) rotate(-45 110 100) scale(1.1 1)"/><path d="${line}" transform="translate(2 12) rotate(-225 110 100) scale(1.1 1)"/><rect x="0" y="94" width="200" height="12" transform="translate(-10 0) rotate(-45 110 100) scale(1.1 1)" stroke="none"/>`,
      terraceLined: line => `<path d="${line}" transform="translate(0,50)"/><rect x="0" y="164" width="200" height="36" stroke="none"/>`,
      crossLined: line => `<path d="${line}" transform="translate(0 -14.5)"/><path d="${line}" transform="rotate(180 100 100) translate(0 -14.5)"/><path d="${line}" transform="rotate(-90 100 100) translate(0 -14.5)"/><path d="${line}" transform="rotate(-270 100 100) translate(0 -14.5)"/>`,
      crossPartedLined: line => `<path d="${line}" transform="translate(0 -20)"/><path d="${line}" transform="rotate(180 100 100) translate(0 -20)"/><path d="${line}" transform="rotate(-90 100 100) translate(0 -20)"/><path d="${line}" transform="rotate(-270 100 100) translate(0 -20)"/>`,
      saltireLined: line => `<path d="${line}" transform="translate(0 -10) rotate(45 110 100) scale(1.1 1)"/><path d="${line}" transform="translate(-20 10) rotate(225 110 100) scale(1.1 1)"/><path d="${line}" transform="translate(-20 -10) rotate(-45 110 100) scale(1.1 1)"/><path d="${line}" transform="translate(0 10) rotate(-225 110 100) scale(1.1 1)"/>`,
      saltirePartedLined: line => `<path d="${line}" transform="translate(3 -13) rotate(45 110 100) scale(1.1 1)"/><path d="${line}" transform="translate(-23 13) rotate(225 110 100) scale(1.1 1)"/><path d="${line}" transform="translate(-23 -13) rotate(-45 110 100) scale(1.1 1)"/><path d="${line}" transform="translate(3 13) rotate(-225 110 100) scale(1.1 1)"/>`
    };

    const patterns = {
      semy: (p, c1, c2, size, chargeId) => `<pattern id="${p}" width="${size * .125}" height="${size * .125}" viewBox="0 0 200 200" stroke="#000"><rect width="200" height="200" fill="${c1}" stroke="none"/><g fill="${c2}"><use transform="translate(-100 -50)" href="#${chargeId}"/><use transform="translate(100 -50)" href="#${chargeId}"/><use transform="translate(0 50)" href="#${chargeId}"/></g></pattern>`,
      vair: (p, c1, c2, size) => `<pattern id="${p}" width="${size * .125}" height="${size * .25}" viewBox="0 0 25 50" stroke="#000" stroke-width=".2"><rect width="25" height="25" fill="${c1}" stroke="none"/><path d="m12.5,0 l6.25,6.25 v12.5 l6.25,6.25 h-25 l6.25,-6.25 v-12.5 z" fill="${c2}"/><rect x="0" y="25" width="25" height="25" fill="${c2}" stroke="none"/><path d="m25,25 l-6.25,6.25 v12.5 l-6.25,6.25 l-6.25,-6.25 v-12.5 l-6.25,-6.25 z" fill="${c1}"/><path d="M0 50 h25" fill="none"/></pattern>`,
      counterVair: (p, c1, c2, size) => `<pattern id="${p}" width="${size * .125}" height="${size * .25}" viewBox="0 0 25 50" stroke="#000" stroke-width=".2"><rect width="25" height="50" fill="${c2}" stroke="none"/><path d="m 12.5,0 6.25,6.25 v 12.5 L 25,25 18.75,31.25 v 12.5 L 12.5,50 6.25,43.75 V 31.25 L 0,25 6.25,18.75 V 6.25 Z" fill="${c1}"/></pattern>`,
      vairInPale: (p, c1, c2, size) => `<pattern id="${p}" width="${size * .125}" height="${size * .125}" viewBox="0 0 25 25"><rect width="25" height="25" fill="${c1}"/><path d="m12.5,0 l6.25,6.25 v12.5 l6.25,6.25 h-25 l6.25,-6.25 v-12.5 z" fill="${c2}" stroke="#000" stroke-width=".2"/></pattern>`,
      vairEnPointe: (p, c1, c2, size) => `<pattern id="${p}" width="${size * .125}" height="${size * .25}" viewBox="0 0 25 50"><rect width="25" height="25" fill="${c2}"/><path d="m12.5,0 l6.25,6.25 v12.5 l6.25,6.25 h-25 l6.25,-6.25 v-12.5 z" fill="${c1}"/><rect x="0" y="25" width="25" height="25" fill="${c1}" stroke-width="1" stroke="${c1}"/><path d="m12.5,25 l6.25,6.25 v12.5 l6.25,6.25 h-25 l6.25,-6.25 v-12.5 z" fill="${c2}"/></pattern>`,
      vairAncien: (p, c1, c2, size) => `<pattern id="${p}" width="${size * .125}" height="${size * .125}" viewBox="0 0 100 100"><rect width="100" height="100" fill="${c1}"/><path fill="${c2}" stroke="none" d="m 0,90 c 10,0 25,-5 25,-40 0,-25 10,-40 25,-40 15,0 25,15 25,40 0,35 15,40 25,40 v 10 H 0 Z"/><path fill="none" stroke="#000" d="M 0,90 c 10,0 25,-5 25,-40 0,-35 15,-40 25,-40 10,0 25,5 25,40 0,35 15,40 25,40 M0,100 h100"/></pattern>`,
      potent: (p, c1, c2, size) => `<pattern id="${p}" width="${size * .125}" height="${size * .125}" viewBox="0 0 200 200" stroke="#000"><rect width="200" height="100" fill="${c1}" stroke="none"/><rect y="100" width="200" height="100" fill="${c2}" stroke="none"/><path d="m25 50h50v-50h50v50h50v50h-150z" fill="${c2}"/><path d="m25 100v50h50v50h50v-50h50v-50z" fill="${c1}"/><path d="m0 0h200 M0 100h200" fill="none"/></pattern>`,
      counterPotent: (p, c1, c2, size) => `<pattern id="${p}" width="${size * .125}" height="${size * .125}" viewBox="0 0 200 200" stroke="none"><rect width="200" height="200" fill="${c1}"/><path d="m25 50h50v-50h50v50h50v100h-50v50h-50v-50h-50v-50z" fill="${c2}"/><path d="m0 0h200 M0 100h200 M0 200h200"/></pattern>`,
      potentInPale: (p, c1, c2, size) => `<pattern id="${p}" width="${size * .125}" height="${size * .0625}" viewBox="0 0 200 100" stroke-width="1"><rect width="200" height="100" fill="${c1}" stroke="none"/><path d="m25 50h50v-50h50v50h50v50h-150z" fill="${c2}" stroke="#000"/><path d="m0 0h200 M0 100h200" fill="none" stroke="#000"/></pattern>`,
      potentEnPointe: (p, c1, c2, size) => `<pattern id="${p}" width="${size * .125}" height="${size * .125}" viewBox="0 0 200 200" stroke="none"><rect width="200" height="200" fill="${c1}"/><path d="m0 0h25v50h50v50h50v-50h50v-50h25v100h-25v50h-50v50h-50v-50h-50v-50h-25v-100" fill="${c2}"/></pattern>`,
      ermine: (p, c1, c2, size) => `<pattern id="${p}" width="${size * .125}" height="${size * .125}" viewBox="0 0 200 200" fill="${c2}"><rect width="200" height="200" fill="${c1}"/><g stroke="none" fill="${c2}"><g transform="translate(-100 -50)"><path d="m100 81.1c-4.25 17.6-12.7 29.8-21.2 38.9 3.65-0.607 7.9-3.04 11.5-5.47-2.42 4.86-4.86 8.51-7.3 12.7 1.82-0.607 6.07-4.86 12.7-10.9 1.21 8.51 2.42 17.6 4.25 23.6 1.82-5.47 3.04-15.2 4.25-23.6 3.65 3.65 7.3 7.9 12.7 10.9l-7.9-13.3c3.65 1.82 7.9 4.86 11.5 6.07-9.11-9.11-17-21.2-20.6-38.9z"/><path d="m82.4 81.7c-0.607-0.607-6.07 2.42-9.72-4.25 7.9 6.68 15.2-7.3 21.8 1.82 1.82 4.25-6.68 10.9-12.1 2.42z"/><path d="m117 81.7c0.607-1.21 6.07 2.42 9.11-4.86-7.3 7.3-15.2-7.3-21.2 2.42-1.82 4.25 6.68 10.9 12.1 2.42z"/><path d="m101 66.5c-1.02-0.607 3.58-4.25-3.07-8.51 5.63 7.9-10.2 10.9-1.54 17.6 3.58 2.42 12.2-2.42 4.6-9.11z"/></g><g transform="translate(100 -50)"><path d="m100 81.1c-4.25 17.6-12.7 29.8-21.2 38.9 3.65-0.607 7.9-3.04 11.5-5.47-2.42 4.86-4.86 8.51-7.3 12.7 1.82-0.607 6.07-4.86 12.7-10.9 1.21 8.51 2.42 17.6 4.25 23.6 1.82-5.47 3.04-15.2 4.25-23.6 3.65 3.65 7.3 7.9 12.7 10.9l-7.9-13.3c3.65 1.82 7.9 4.86 11.5 6.07-9.11-9.11-17-21.2-20.6-38.9z"/><path d="m82.4 81.7c-0.607-0.607-6.07 2.42-9.72-4.25 7.9 6.68 15.2-7.3 21.8 1.82 1.82 4.25-6.68 10.9-12.1 2.42z"/><path d="m117 81.7c0.607-1.21 6.07 2.42 9.11-4.86-7.3 7.3-15.2-7.3-21.2 2.42-1.82 4.25 6.68 10.9 12.1 2.42z"/><path d="m101 66.5c-1.02-0.607 3.58-4.25-3.07-8.51 5.63 7.9-10.2 10.9-1.54 17.6 3.58 2.42 12.2-2.42 4.6-9.11z"/></g><g transform="translate(0 50)"><path d="m100 81.1c-4.25 17.6-12.7 29.8-21.2 38.9 3.65-0.607 7.9-3.04 11.5-5.47-2.42 4.86-4.86 8.51-7.3 12.7 1.82-0.607 6.07-4.86 12.7-10.9 1.21 8.51 2.42 17.6 4.25 23.6 1.82-5.47 3.04-15.2 4.25-23.6 3.65 3.65 7.3 7.9 12.7 10.9l-7.9-13.3c3.65 1.82 7.9 4.86 11.5 6.07-9.11-9.11-17-21.2-20.6-38.9z"/><path d="m82.4 81.7c-0.607-0.607-6.07 2.42-9.72-4.25 7.9 6.68 15.2-7.3 21.8 1.82 1.82 4.25-6.68 10.9-12.1 2.42z"/><path d="m117 81.7c0.607-1.21 6.07 2.42 9.11-4.86-7.3 7.3-15.2-7.3-21.2 2.42-1.82 4.25 6.68 10.9 12.1 2.42z"/><path d="m101 66.5c-1.02-0.607 3.58-4.25-3.07-8.51 5.63 7.9-10.2 10.9-1.54 17.6 3.58 2.42 12.2-2.42 4.6-9.11z"/></g></g></pattern>`,
      chequy: (p, c1, c2, size) => `<pattern id="${p}" width="${size * .25}" height="${size * .25}" viewBox="0 0 50 50" fill="${c2}"><rect width="50" height="50"/><rect width="25" height="25" fill="${c1}"/><rect x="25" y="25" width="25" height="25" fill="${c1}"/></pattern>`,
      lozengy: (p, c1, c2, size) => `<pattern id="${p}" width="${size * .125}" height="${size * .125}" viewBox="0 0 50 50"><rect width="50" height="50" fill="${c1}"/><polygon points="25,0 50,25 25,50 0,25" fill="${c2}"/></pattern>`,
      fusily: (p, c1, c2, size) => `<pattern id="${p}" width="${size * .125}" height="${size * .25}" viewBox="0 0 50 100"><rect width="50" height="100" fill="${c2}"/><polygon points="25,0 50,50 25,100 0,50" fill="${c1}"/></pattern>`,
      pally: (p, c1, c2, size) => `<pattern id="${p}" width="${size * .5}" height="${size * .125}" viewBox="0 0 100 25"><rect width="100" height="25" fill="${c2}"/><rect x="25" y="0" width="25" height="25" fill="${c1}"/><rect x="75" y="0" width="25" height="25" fill="${c1}"/></pattern>`,
      barry: (p, c1, c2, size) => `<pattern id="${p}" width="${size * .125}" height="${size * .5}" viewBox="0 0 25 100"><rect width="25" height="100" fill="${c2}"/><rect x="0" y="25" width="25" height="25" fill="${c1}"/><rect x="0" y="75" width="25" height="25" fill="${c1}"/></pattern>`,
      gemelles: (p, c1, c2, size) => `<pattern id="${p}" width="${size * .125}" height="${size * .125}" viewBox="0 0 50 50"><rect width="50" height="50" fill="${c1}"/><rect y="5" width="50" height="10" fill="${c2}"/><rect y="40" width="50" height="10" fill="${c2}"/></pattern>`,
      bendy: (p, c1, c2, size) => `<pattern id="${p}" width="${size * .5}" height="${size * .5}" viewBox="0 0 100 100"><rect width="100" height="100" fill="${c1}"/><polygon points="0,25 75,100 25,100 0,75" fill="${c2}"/><polygon points="25,0 75,0 100,25 100,75" fill="${c2}"/></pattern>`,
      bendySinister: (p, c1, c2, size) => `<pattern id="${p}" width="${size * .5}" height="${size * .5}" viewBox="0 0 100 100"><rect width="100" height="100" fill="${c2}"/><polygon points="0,25 25,0 75,0 0,75" fill="${c1}"/><polygon points="25,100 100,25 100,75 75,100" fill="${c1}"/></pattern>`,
      palyBendy: (p, c1, c2, size) => `<pattern id="${p}" width="${size * .6258}" height="${size * .3576}" viewBox="0 0 175 100"><rect y="0" x="0" width="175" height="100" fill="${c2}"/><g fill="${c1}"><path d="m0 20 35 30v50l-35-30z"/><path d="m35 0 35 30v50l-35-30z"/><path d="m70 0h23l12 10v50l-35-30z"/><path d="m70 80 23 20h-23z"/><path d="m105 60 35 30v10h-35z"/><path d="m105 0h35v40l-35-30z"/><path d="m 140,40 35,30 v 30 h -23 l -12,-10z"/><path d="M 175,0 V 20 L 152,0 Z"/></g></pattern>`,
      barryBendy: (p, c1, c2, size) => `<pattern id="${p}" width="${size * .3572}" height="${size * .6251}" viewBox="0 0 100 175"><rect width="100" height="175" fill="${c2}"/><g fill="${c1}"><path d="m20 0 30 35h50l-30-35z"/><path d="m0 35 30 35h50l-30-35z"/><path d="m0 70v23l10 12h50l-30-35z"/><path d="m80 70 20 23v-23z"/><path d="m60 105 30 35h10v-35z"/><path d="m0 105v35h40l-30-35z"/><path d="m 40,140 30,35 h 30 v -23 l -10,-12 z"/><path d="m0 175h20l-20-23z"/></g></pattern>`,
      pappellony: (p, c1, c2, size) => `<pattern id="${p}" width="${size * .125}" height="${size * .125}" viewBox="0 0 100 100"><rect width="100" height="100" fill="${c1}"/><circle cx="0" cy="51" r="45" stroke="${c2}" fill="${c1}" stroke-width="10"/><circle cx="100" cy="51" r="45" stroke="${c2}" fill="${c1}" stroke-width="10"/><circle cx="50" cy="1" r="45" stroke="${c2}" fill="${c1}" stroke-width="10"/></pattern>`,
      pappellony2: (p, c1, c2, size) => `<pattern id="${p}" width="${size * .125}" height="${size * .125}" viewBox="0 0 100 100" stroke="#000" stroke-width="2"><rect width="100" height="100" fill="${c1}" stroke="none"/><circle cy="50" r="49" fill="${c2}"/><circle cx="100" cy="50" r="49" fill="${c2}"/><circle cx="50" cy="0" r="49" fill="${c1}"/></pattern>`,
      scaly: (p, c1, c2, size) => `<pattern id="${p}" width="${size * .125}" height="${size * .125}" viewBox="0 0 100 100" stroke="#000"><rect width="100" height="100" fill="${c1}" stroke="none"/><path d="M 0,84 C -40,84 -50,49 -50,49 -50,79 -27,99 0,99 27,99 50,79 50,49 50,49 40,84 0,84 Z" fill="${c2}"/><path d="M 100,84 C 60,84 50,49 50,49 c 0,30 23,50 50,50 27,0 50,-20 50,-50 0,0 -10,35 -50,35 z" fill="${c2}"/><path d="M 50,35 C 10,35 0,0 0,0 0,30 23,50 50,50 77,50 100,30 100,0 100,0 90,35 50,35 Z" fill="${c2}"/></pattern>`,
      plumetty: (p, c1, c2, size) => `<pattern id="${p}" width="${size * .125}" height="${size * .25}" viewBox="0 0 50 100" stroke-width=".8"><rect width="50" height="100" fill="${c2}" stroke="none"/><path fill="${c1}" stroke="none" d="M 25,100 C 44,88 49.5,74 50,50 33.5,40 25,25 25,4e-7 25,25 16.5,40 0,50 0.5,74 6,88 25,100 Z"/><path fill="none" stroke="${c2}" d="m17 40c5.363 2.692 10.7 2.641 16 0m-19 7c7.448 4.105 14.78 3.894 22 0m-27 7c6-2 10.75 3.003 16 3 5.412-0.0031 10-5 16-3m-35 9c4-7 12 3 19 2 7 1 15-9 19-2m-35 6c6-2 11 3 16 3s10-5 16-3m-30 7c8 0 8 3 14 3s7-3 14-3m-25 8c7.385 4.048 14.72 3.951 22 0m-19 8c5.455 2.766 10.78 2.566 16 0m-8 6v-78"/><g fill="none" stroke="${c1}"><path d="m42 90c2.678 1.344 5.337 2.004 8 2m-11 5c3.686 2.032 7.344 3.006 10.97 3m0.0261-1.2e-4v-30"/><path d="m0 92c2.689 0.0045 5.328-0.6687 8-2m-8 10c3.709-0.0033 7.348-1.031 11-3m-11 3v-30"/><path d="m0 7c5.412-0.0031 10-5 16-3m-16 11c7 1 15-9 19-2m-19 9c5 0 10-5 16-3m-16 10c6 0 7-3 14-3m-14.02 11c3.685-0.002185 7.357-1.014 11.02-3m-11 10c2.694-0.01117 5.358-0.7036 7.996-2m-8 6v-48"/><path d="m34 4c6-2 10.75 3.003 16 3m-19 6c4-7 12 3 19 2m-16 4c6-2 11 3 16 3m-14 4c8 0 8 3 14 3m-11 5c3.641 1.996 7.383 2.985 11 3m-8 5c2.762 1.401 5.303 2.154 8.002 2.112m-0.00154 3.888v-48"/></g></pattern>`,
      masoned: (p, c1, c2, size) => `<pattern id="${p}" width="${size * .125}" height="${size * .125}" viewBox="0 0 100 100" fill="none"><rect width="100" height="100" fill="${c1}"/><rect width="100" height="50" stroke="${c2}" stroke-width="4"/><line x1="50" y1="50" x2="50" y2="100" stroke="${c2}" stroke-width="5"/></pattern>`,
      fretty: (p, c1, c2, size) => `<pattern id="${p}" width="${size * .2}" height="${size * .2}" viewBox="0 0 140 140" stroke="#000" stroke-width="2"><rect width="140" height="140" fill="${c1}" stroke="none"/><path d="m-15 5 150 150 20-20-150-150z" fill="${c2}"/><path d="m10 150 140-140-20-20-140 140z" fill="${c2}" stroke="none"/><path d="m0 120 20 20 120-120-20-20z" fill="none"/></pattern>`,
      grillage: (p, c1, c2, size) => `<pattern id="${p}" width="${size * .25}" height="${size * .25}" viewBox="0 0 200 200" stroke="#000" stroke-width="2"><rect width="200" height="200" fill="${c1}" stroke="none"/><path d="m205 65v-30h-210v30z" fill="${c2}"/><path d="m65-5h-30v210h30z" fill="${c2}"/><path d="m205 165v-30h-210v30z" fill="${c2}"/><path d="m165,65h-30v140h30z" fill="${c2}"/><path d="m 165,-5h-30v40h30z" fill="${c2}"/></pattern>`,
      chainy: (p, c1, c2, size) => `<pattern id="${p}" width="${size * .167}" height="${size * .167}" viewBox="0 0 200 200" stroke="#000" stroke-width="2"><rect x="-6.691e-6" width="200" height="200" fill="${c1}" stroke="none"/><path d="m155-5-20-20-160 160 20 20z" fill="${c2}"/><path d="m45 205 160-160 20 20-160 160z" fill="${c2}"/><path d="m45-5 20-20 160 160-20 20-160-160" fill="${c2}"/><path d="m-5 45-20 20 160 160 20-20-160-160" fill="${c2}"/></pattern>`,
      maily: (p, c1, c2, size) => `<pattern id="${p}" width="${size * .167}" height="${size * .167}" viewBox="0 0 200 200" stroke="#000" stroke-width="1.2"><path fill="${c1}" stroke="none" d="M0 0h200v200H0z"/><g fill="${c2}"><path d="m80-2c-5.27e-4 2.403-0.1094 6.806-0.3262 9.199 5.014-1.109 10.1-1.768 15.19-2.059 0.09325-1.712 0.1401-5.426 0.1406-7.141z"/><path d="m100 5a95 95 0 0 0-95 95 95 95 0 0 0 95 95 95 95 0 0 0 95-95 95 95 0 0 0-95-95zm0 15a80 80 0 0 1 80 80 80 80 0 0 1-80 80 80 80 0 0 1-80-80 80 80 0 0 1 80-80z"/><path d="m92.8 20.33c-5.562 0.4859-11.04 1.603-16.34 3.217-7.793 25.31-27.61 45.12-52.91 52.91-5.321 1.638-10.8 2.716-16.34 3.217-2.394 0.2168-6.796 0.3256-9.199 0.3262v15c1.714-4.79e-4 5.429-0.04737 7.141-0.1406 5.109-0.2761 10.19-0.9646 15.19-2.059 36.24-7.937 64.54-36.24 72.47-72.47z"/><path d="m202 80c-2.403-5.31e-4 -6.806-0.1094-9.199-0.3262 1.109 5.014 1.768 10.1 2.059 15.19 1.712 0.09326 5.426 0.1401 7.141 0.1406z"/><path d="m179.7 92.8c-0.4859-5.562-1.603-11.04-3.217-16.34-25.31-7.793-45.12-27.61-52.91-52.91-1.638-5.321-2.716-10.8-3.217-16.34-0.2168-2.394-0.3256-6.796-0.3262-9.199h-15c4.8e-4 1.714 0.0474 5.429 0.1406 7.141 0.2761 5.109 0.9646 10.19 2.059 15.19 7.937 36.24 36.24 64.54 72.47 72.47z"/><path d="m120 202c5.3e-4 -2.403 0.1094-6.806 0.3262-9.199-5.014 1.109-10.1 1.768-15.19 2.059-0.0933 1.712-0.1402 5.426-0.1406 7.141z"/><path d="m107.2 179.7c5.562-0.4859 11.04-1.603 16.34-3.217 7.793-25.31 27.61-45.12 52.91-52.91 5.321-1.638 10.8-2.716 16.34-3.217 2.394-0.2168 6.796-0.3256 9.199-0.3262v-15c-1.714 4.7e-4 -5.429 0.0474-7.141 0.1406-5.109 0.2761-10.19 0.9646-15.19 2.059-36.24 7.937-64.54 36.24-72.47 72.47z"/><path d="m -2,120 c 2.403,5.4e-4 6.806,0.1094 9.199,0.3262 -1.109,-5.014 -1.768,-10.1 -2.059,-15.19 -1.712,-0.0933 -5.426,-0.1402 -7.141,-0.1406 z"/><path d="m 20.33,107.2 c 0.4859,5.562 1.603,11.04 3.217,16.34 25.31,7.793 45.12,27.61 52.91,52.91 1.638,5.321 2.716,10.8 3.217,16.34 0.2168,2.394 0.3256,6.796 0.3262,9.199 L 95,202 c -4.8e-4,-1.714 -0.0472,-5.44 -0.1404,-7.152 -0.2761,-5.109 -0.9646,-10.19 -2.059,-15.19 -7.937,-36.24 -36.24,-64.54 -72.47,-72.47 z"/></g></pattern>`,
      honeycombed: (p, c1, c2, size) => `<pattern id="${p}" width="${size * .143}" height="${size * .24514}" viewBox="0 0 70 120"><rect width="70" height="120" fill="${c1}"/><path d="M 70,0 V 20 L 35,40 m 35,80 V 100 L 35,80 M 0,120 V 100 L 35,80 V 40 L 0,20 V 0" stroke="${c2}" fill="none" stroke-width="3"/></pattern>`
    };

    const chargesGroup = document.getElementById("charges");
    const colorsData = get_store_value(colors);
    const loadedCharges = {};

    const getTemplate = (id, line) => {
      const linedId = id + "Lined";
      if (!line || line === "straight" || !templates[linedId]) return templates[id];
      const linePath = lines$1[line];
      return templates[linedId](linePath);
    };

    const addPattern = patternId => {
      if (!patternId) return console.error("No patternId");
      if (document.getElementById(patternId)) return; // already added;

      const [pattern, t1, t2, size] = patternId.split("-");
      const charge = semy(patternId);
      if (charge) addCharge(charge);

      const html = patterns[charge ? "semy" : pattern](patternId, clr(t1), clr(t2), getSizeMod(size), charge);
      document.getElementById("patterns").insertAdjacentHTML("beforeend", html);
    };

    function semy(string) {
      const isSemy = /^semy/.test(string);
      if (!isSemy) return false;
      return string.match(/semy_of_(.*?)-/)[1];
    }

    function addCharge(charge) {
      charge.slice(0, 12) === "inescutcheon" ? addInescutcheon(charge) : fetchCharge(charge);
    }

    function addInescutcheon(charge) {
      const shieldName = charge.length > 12 ? charge.slice(12, 13).toLowerCase() + charge.slice(13) : get_store_value(shield);
      const id = charge.length > 12 ? charge : "inescutcheon" + shieldName.charAt(0).toUpperCase() + shieldName.slice(1);

      if (loadedCharges[id]) return; // already added
      loadedCharges[id] = true;

      const licenseAttrs = ["noldor", "gondor", "easterling", "ironHills", "urukHai", "moriaOrc"].includes(shieldName)
        ? `author="Weta Workshop" source="www.wetanz.com" license="https://en.wikipedia.org/wiki/Fair_use"`
        : `author=Azgaar license="https://creativecommons.org/publicdomain/zero/1.0"`;
      const g = `<g id=${id} ${licenseAttrs}><path transform="translate(67 67) scale(.33)" d="${shieldPaths[shieldName]}"/></g>`;
      chargesGroup.insertAdjacentHTML("beforeend", g);
    }

    function fetchCharge(charge) {
      if (loadedCharges[charge]) return; // already added
      loadedCharges[charge] = true;

      fetch("charges/" + charge + ".svg")
        .then(res => {
          if (res.ok) return res.text();
          else throw new Error("Cannot fetch charge");
        })
        .then(text => {
          const el = document.createElement("html");
          el.innerHTML = text;
          const g = el.querySelector("g");
          const metadata = el.getElementsByTagName("metadata")[0];

          if (metadata) {
            const author = metadata.getAttribute("author");
            const source = metadata.getAttribute("source");
            const license = metadata.getAttribute("license");
            if (author) g.setAttribute("author", author);
            if (source) g.setAttribute("source", source);
            if (license) g.setAttribute("license", license);
          }

          chargesGroup.insertAdjacentHTML("beforeend", g.outerHTML);
        })
        .catch(err => console.error(err));
    }

    function clr(tincture) {
      if (!colorsData[tincture]) throw new Error(`Tincture ${tincture} is not found`);
      return colorsData[tincture];
    }

    function getSizeMod(size) {
      if (size === "small") return 0.8;
      if (size === "smaller") return 0.5;
      if (size === "smallest") return 0.25;
      if (size === "big") return 1.6;
      if (size === "bigger") return 2;
      return 1;
    }

    /* src/components/object/Ordinary.svelte generated by Svelte v3.44.2 */
    const file$s = "src/components/object/Ordinary.svelte";

    // (26:0) {:else}
    function create_else_block$4(ctx) {
    	let g;
    	let raw_value = getTemplate(/*ordinary*/ ctx[0].ordinary, /*ordinary*/ ctx[0].line) + "";
    	let g_transform_value;
    	let mounted;
    	let dispose;

    	const block = {
    		c: function create() {
    			g = svg_element("g");
    			attr_dev(g, "class", "ordinary");
    			attr_dev(g, "i", /*i*/ ctx[1]);
    			attr_dev(g, "transform", g_transform_value = transform(/*ordinary*/ ctx[0]));
    			attr_dev(g, "fill", /*t*/ ctx[3]);
    			attr_dev(g, "stroke", /*stroke*/ ctx[4]);
    			attr_dev(g, "stroke-width", /*width*/ ctx[5]);
    			add_location(g, file$s, 26, 2, 824);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, g, anchor);
    			g.innerHTML = raw_value;

    			if (!mounted) {
    				dispose = listen_dev(g, "mousedown", /*addDrag*/ ctx[6], false, false, false);
    				mounted = true;
    			}
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*ordinary*/ 1 && raw_value !== (raw_value = getTemplate(/*ordinary*/ ctx[0].ordinary, /*ordinary*/ ctx[0].line) + "")) g.innerHTML = raw_value;
    			if (dirty & /*i*/ 2) {
    				attr_dev(g, "i", /*i*/ ctx[1]);
    			}

    			if (dirty & /*ordinary*/ 1 && g_transform_value !== (g_transform_value = transform(/*ordinary*/ ctx[0]))) {
    				attr_dev(g, "transform", g_transform_value);
    			}

    			if (dirty & /*t*/ 8) {
    				attr_dev(g, "fill", /*t*/ ctx[3]);
    			}

    			if (dirty & /*stroke*/ 16) {
    				attr_dev(g, "stroke", /*stroke*/ ctx[4]);
    			}

    			if (dirty & /*width*/ 32) {
    				attr_dev(g, "stroke-width", /*width*/ ctx[5]);
    			}
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(g);
    			mounted = false;
    			dispose();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_else_block$4.name,
    		type: "else",
    		source: "(26:0) {:else}",
    		ctx
    	});

    	return block;
    }

    // (22:39) 
    function create_if_block_1$6(ctx) {
    	let g;
    	let path;
    	let g_transform_value;
    	let mounted;
    	let dispose;

    	const block = {
    		c: function create() {
    			g = svg_element("g");
    			path = svg_element("path");
    			attr_dev(path, "d", /*shieldPath*/ ctx[2]);
    			attr_dev(path, "fill", "none");
    			attr_dev(path, "stroke", /*t*/ ctx[3]);
    			attr_dev(path, "stroke-width", "5%");
    			attr_dev(path, "transform", "translate(15 15) scale(.85)");
    			add_location(path, file$s, 23, 4, 702);
    			attr_dev(g, "class", "ordinary");
    			attr_dev(g, "i", /*i*/ ctx[1]);
    			attr_dev(g, "transform", g_transform_value = transform(/*ordinary*/ ctx[0]));
    			add_location(g, file$s, 22, 2, 618);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, g, anchor);
    			append_dev(g, path);

    			if (!mounted) {
    				dispose = listen_dev(g, "mousedown", /*addDrag*/ ctx[6], false, false, false);
    				mounted = true;
    			}
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*shieldPath*/ 4) {
    				attr_dev(path, "d", /*shieldPath*/ ctx[2]);
    			}

    			if (dirty & /*t*/ 8) {
    				attr_dev(path, "stroke", /*t*/ ctx[3]);
    			}

    			if (dirty & /*i*/ 2) {
    				attr_dev(g, "i", /*i*/ ctx[1]);
    			}

    			if (dirty & /*ordinary*/ 1 && g_transform_value !== (g_transform_value = transform(/*ordinary*/ ctx[0]))) {
    				attr_dev(g, "transform", g_transform_value);
    			}
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(g);
    			mounted = false;
    			dispose();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_1$6.name,
    		type: "if",
    		source: "(22:39) ",
    		ctx
    	});

    	return block;
    }

    // (18:0) {#if ordinary.ordinary === "bordure"}
    function create_if_block$b(ctx) {
    	let g;
    	let path;
    	let g_transform_value;
    	let mounted;
    	let dispose;

    	const block = {
    		c: function create() {
    			g = svg_element("g");
    			path = svg_element("path");
    			attr_dev(path, "d", /*shieldPath*/ ctx[2]);
    			attr_dev(path, "fill", "none");
    			attr_dev(path, "stroke", /*t*/ ctx[3]);
    			attr_dev(path, "stroke-width", "16.7%");
    			add_location(path, file$s, 19, 4, 501);
    			attr_dev(g, "class", "ordinary");
    			attr_dev(g, "i", /*i*/ ctx[1]);
    			attr_dev(g, "transform", g_transform_value = transform(/*ordinary*/ ctx[0]));
    			add_location(g, file$s, 18, 2, 417);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, g, anchor);
    			append_dev(g, path);

    			if (!mounted) {
    				dispose = listen_dev(g, "mousedown", /*addDrag*/ ctx[6], false, false, false);
    				mounted = true;
    			}
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*shieldPath*/ 4) {
    				attr_dev(path, "d", /*shieldPath*/ ctx[2]);
    			}

    			if (dirty & /*t*/ 8) {
    				attr_dev(path, "stroke", /*t*/ ctx[3]);
    			}

    			if (dirty & /*i*/ 2) {
    				attr_dev(g, "i", /*i*/ ctx[1]);
    			}

    			if (dirty & /*ordinary*/ 1 && g_transform_value !== (g_transform_value = transform(/*ordinary*/ ctx[0]))) {
    				attr_dev(g, "transform", g_transform_value);
    			}
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(g);
    			mounted = false;
    			dispose();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block$b.name,
    		type: "if",
    		source: "(18:0) {#if ordinary.ordinary === \\\"bordure\\\"}",
    		ctx
    	});

    	return block;
    }

    function create_fragment$s(ctx) {
    	let if_block_anchor;

    	function select_block_type(ctx, dirty) {
    		if (/*ordinary*/ ctx[0].ordinary === "bordure") return create_if_block$b;
    		if (/*ordinary*/ ctx[0].ordinary === "orle") return create_if_block_1$6;
    		return create_else_block$4;
    	}

    	let current_block_type = select_block_type(ctx);
    	let if_block = current_block_type(ctx);

    	const block = {
    		c: function create() {
    			if_block.c();
    			if_block_anchor = empty();
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			if_block.m(target, anchor);
    			insert_dev(target, if_block_anchor, anchor);
    		},
    		p: function update(ctx, [dirty]) {
    			if (current_block_type === (current_block_type = select_block_type(ctx)) && if_block) {
    				if_block.p(ctx, dirty);
    			} else {
    				if_block.d(1);
    				if_block = current_block_type(ctx);

    				if (if_block) {
    					if_block.c();
    					if_block.m(if_block_anchor.parentNode, if_block_anchor);
    				}
    			}
    		},
    		i: noop,
    		o: noop,
    		d: function destroy(detaching) {
    			if_block.d(detaching);
    			if (detaching) detach_dev(if_block_anchor);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$s.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$s($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('Ordinary', slots, []);
    	let { coa, ordinary, i, shieldPath, t, type } = $$props;
    	let stroke, width;

    	function addDrag(event) {
    		if (type !== "Edit") return;
    		drag(event, ordinary, coa);
    	}

    	const writable_props = ['coa', 'ordinary', 'i', 'shieldPath', 't', 'type'];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<Ordinary> was created with unknown prop '${key}'`);
    	});

    	$$self.$$set = $$props => {
    		if ('coa' in $$props) $$invalidate(7, coa = $$props.coa);
    		if ('ordinary' in $$props) $$invalidate(0, ordinary = $$props.ordinary);
    		if ('i' in $$props) $$invalidate(1, i = $$props.i);
    		if ('shieldPath' in $$props) $$invalidate(2, shieldPath = $$props.shieldPath);
    		if ('t' in $$props) $$invalidate(3, t = $$props.t);
    		if ('type' in $$props) $$invalidate(8, type = $$props.type);
    	};

    	$$self.$capture_state = () => ({
    		drag,
    		transform,
    		getTemplate,
    		coa,
    		ordinary,
    		i,
    		shieldPath,
    		t,
    		type,
    		stroke,
    		width,
    		addDrag
    	});

    	$$self.$inject_state = $$props => {
    		if ('coa' in $$props) $$invalidate(7, coa = $$props.coa);
    		if ('ordinary' in $$props) $$invalidate(0, ordinary = $$props.ordinary);
    		if ('i' in $$props) $$invalidate(1, i = $$props.i);
    		if ('shieldPath' in $$props) $$invalidate(2, shieldPath = $$props.shieldPath);
    		if ('t' in $$props) $$invalidate(3, t = $$props.t);
    		if ('type' in $$props) $$invalidate(8, type = $$props.type);
    		if ('stroke' in $$props) $$invalidate(4, stroke = $$props.stroke);
    		if ('width' in $$props) $$invalidate(5, width = $$props.width);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	$$self.$$.update = () => {
    		if ($$self.$$.dirty & /*ordinary*/ 1) {
    			{
    				$$invalidate(4, stroke = ordinary.stroke || "none");
    				$$invalidate(5, width = ordinary.strokeWidth || 1);
    			}
    		}
    	};

    	return [ordinary, i, shieldPath, t, stroke, width, addDrag, coa, type];
    }

    class Ordinary extends SvelteComponentDev {
    	constructor(options) {
    		super(options);

    		init(this, options, instance$s, create_fragment$s, safe_not_equal, {
    			coa: 7,
    			ordinary: 0,
    			i: 1,
    			shieldPath: 2,
    			t: 3,
    			type: 8
    		});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Ordinary",
    			options,
    			id: create_fragment$s.name
    		});

    		const { ctx } = this.$$;
    		const props = options.props || {};

    		if (/*coa*/ ctx[7] === undefined && !('coa' in props)) {
    			console.warn("<Ordinary> was created without expected prop 'coa'");
    		}

    		if (/*ordinary*/ ctx[0] === undefined && !('ordinary' in props)) {
    			console.warn("<Ordinary> was created without expected prop 'ordinary'");
    		}

    		if (/*i*/ ctx[1] === undefined && !('i' in props)) {
    			console.warn("<Ordinary> was created without expected prop 'i'");
    		}

    		if (/*shieldPath*/ ctx[2] === undefined && !('shieldPath' in props)) {
    			console.warn("<Ordinary> was created without expected prop 'shieldPath'");
    		}

    		if (/*t*/ ctx[3] === undefined && !('t' in props)) {
    			console.warn("<Ordinary> was created without expected prop 't'");
    		}

    		if (/*type*/ ctx[8] === undefined && !('type' in props)) {
    			console.warn("<Ordinary> was created without expected prop 'type'");
    		}
    	}

    	get coa() {
    		throw new Error("<Ordinary>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set coa(value) {
    		throw new Error("<Ordinary>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get ordinary() {
    		throw new Error("<Ordinary>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set ordinary(value) {
    		throw new Error("<Ordinary>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get i() {
    		throw new Error("<Ordinary>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set i(value) {
    		throw new Error("<Ordinary>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get shieldPath() {
    		throw new Error("<Ordinary>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set shieldPath(value) {
    		throw new Error("<Ordinary>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get t() {
    		throw new Error("<Ordinary>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set t(value) {
    		throw new Error("<Ordinary>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get type() {
    		throw new Error("<Ordinary>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set type(value) {
    		throw new Error("<Ordinary>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /* src/components/object/Charge.svelte generated by Svelte v3.44.2 */
    const file$r = "src/components/object/Charge.svelte";

    function get_each_context$d(ctx, list, i) {
    	const child_ctx = ctx.slice();
    	child_ctx[9] = list[i];
    	return child_ctx;
    }

    // (30:2) {#each validPositions as position}
    function create_each_block$d(ctx) {
    	let use;
    	let use_xlink_href_value;
    	let use_transform_value;

    	const block = {
    		c: function create() {
    			use = svg_element("use");
    			xlink_attr(use, "xlink:href", use_xlink_href_value = "#" + /*chargeId*/ ctx[4]);
    			attr_dev(use, "transform", use_transform_value = getElTransform(/*charge*/ ctx[0], /*position*/ ctx[9], /*shield*/ ctx[2]));
    			add_location(use, file$r, 30, 4, 935);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, use, anchor);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*chargeId*/ 16 && use_xlink_href_value !== (use_xlink_href_value = "#" + /*chargeId*/ ctx[4])) {
    				xlink_attr(use, "xlink:href", use_xlink_href_value);
    			}

    			if (dirty & /*charge, validPositions, shield*/ 37 && use_transform_value !== (use_transform_value = getElTransform(/*charge*/ ctx[0], /*position*/ ctx[9], /*shield*/ ctx[2]))) {
    				attr_dev(use, "transform", use_transform_value);
    			}
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(use);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_each_block$d.name,
    		type: "each",
    		source: "(30:2) {#each validPositions as position}",
    		ctx
    	});

    	return block;
    }

    function create_fragment$r(ctx) {
    	let g;
    	let g_transform_value;
    	let g_stroke_value;
    	let mounted;
    	let dispose;
    	let each_value = /*validPositions*/ ctx[5];
    	validate_each_argument(each_value);
    	let each_blocks = [];

    	for (let i = 0; i < each_value.length; i += 1) {
    		each_blocks[i] = create_each_block$d(get_each_context$d(ctx, each_value, i));
    	}

    	const block = {
    		c: function create() {
    			g = svg_element("g");

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].c();
    			}

    			attr_dev(g, "class", "charge");
    			attr_dev(g, "i", /*i*/ ctx[1]);
    			attr_dev(g, "charge", /*chargeId*/ ctx[4]);
    			attr_dev(g, "fill", /*t*/ ctx[3]);
    			attr_dev(g, "transform", g_transform_value = transform(/*charge*/ ctx[0]));
    			attr_dev(g, "stroke", g_stroke_value = /*charge*/ ctx[0].stroke || "#000");
    			add_location(g, file$r, 28, 0, 758);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, g, anchor);

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].m(g, null);
    			}

    			if (!mounted) {
    				dispose = listen_dev(g, "mousedown", /*addDrag*/ ctx[6], false, false, false);
    				mounted = true;
    			}
    		},
    		p: function update(ctx, [dirty]) {
    			if (dirty & /*chargeId, getElTransform, charge, validPositions, shield*/ 53) {
    				each_value = /*validPositions*/ ctx[5];
    				validate_each_argument(each_value);
    				let i;

    				for (i = 0; i < each_value.length; i += 1) {
    					const child_ctx = get_each_context$d(ctx, each_value, i);

    					if (each_blocks[i]) {
    						each_blocks[i].p(child_ctx, dirty);
    					} else {
    						each_blocks[i] = create_each_block$d(child_ctx);
    						each_blocks[i].c();
    						each_blocks[i].m(g, null);
    					}
    				}

    				for (; i < each_blocks.length; i += 1) {
    					each_blocks[i].d(1);
    				}

    				each_blocks.length = each_value.length;
    			}

    			if (dirty & /*i*/ 2) {
    				attr_dev(g, "i", /*i*/ ctx[1]);
    			}

    			if (dirty & /*chargeId*/ 16) {
    				attr_dev(g, "charge", /*chargeId*/ ctx[4]);
    			}

    			if (dirty & /*t*/ 8) {
    				attr_dev(g, "fill", /*t*/ ctx[3]);
    			}

    			if (dirty & /*charge*/ 1 && g_transform_value !== (g_transform_value = transform(/*charge*/ ctx[0]))) {
    				attr_dev(g, "transform", g_transform_value);
    			}

    			if (dirty & /*charge*/ 1 && g_stroke_value !== (g_stroke_value = /*charge*/ ctx[0].stroke || "#000")) {
    				attr_dev(g, "stroke", g_stroke_value);
    			}
    		},
    		i: noop,
    		o: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(g);
    			destroy_each(each_blocks, detaching);
    			mounted = false;
    			dispose();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$r.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$r($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('Charge', slots, []);
    	let { coa } = $$props;
    	let { charge } = $$props;
    	let { i } = $$props;
    	let { shield } = $$props;
    	let { t } = $$props;
    	let { type } = $$props;
    	let chargeId;
    	let validPositions;

    	function addDrag(event) {
    		if (type !== "Edit") return;
    		drag(event, charge, coa);
    	}

    	const writable_props = ['coa', 'charge', 'i', 'shield', 't', 'type'];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<Charge> was created with unknown prop '${key}'`);
    	});

    	$$self.$$set = $$props => {
    		if ('coa' in $$props) $$invalidate(7, coa = $$props.coa);
    		if ('charge' in $$props) $$invalidate(0, charge = $$props.charge);
    		if ('i' in $$props) $$invalidate(1, i = $$props.i);
    		if ('shield' in $$props) $$invalidate(2, shield = $$props.shield);
    		if ('t' in $$props) $$invalidate(3, t = $$props.t);
    		if ('type' in $$props) $$invalidate(8, type = $$props.type);
    	};

    	$$self.$capture_state = () => ({
    		shieldPositions,
    		drag,
    		transform,
    		getElTransform,
    		coa,
    		charge,
    		i,
    		shield,
    		t,
    		type,
    		chargeId,
    		validPositions,
    		addDrag
    	});

    	$$self.$inject_state = $$props => {
    		if ('coa' in $$props) $$invalidate(7, coa = $$props.coa);
    		if ('charge' in $$props) $$invalidate(0, charge = $$props.charge);
    		if ('i' in $$props) $$invalidate(1, i = $$props.i);
    		if ('shield' in $$props) $$invalidate(2, shield = $$props.shield);
    		if ('t' in $$props) $$invalidate(3, t = $$props.t);
    		if ('type' in $$props) $$invalidate(8, type = $$props.type);
    		if ('chargeId' in $$props) $$invalidate(4, chargeId = $$props.chargeId);
    		if ('validPositions' in $$props) $$invalidate(5, validPositions = $$props.validPositions);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	$$self.$$.update = () => {
    		if ($$self.$$.dirty & /*shield, charge*/ 5) {
    			{
    				const positions = shieldPositions[shield] || shieldPositions.spanish;
    				$$invalidate(5, validPositions = [...new Set(charge.p)].filter(p => positions[p]));
    			}
    		}

    		if ($$self.$$.dirty & /*charge, chargeId, shield*/ 21) {
    			{
    				$$invalidate(4, chargeId = charge.charge);

    				// select shield shape if charge is just 'inescutcheon'
    				if (chargeId === "inescutcheon") $$invalidate(4, chargeId = "inescutcheon" + shield.charAt(0).toUpperCase() + shield.slice(1));
    			}
    		}
    	};

    	return [charge, i, shield, t, chargeId, validPositions, addDrag, coa, type];
    }

    class Charge extends SvelteComponentDev {
    	constructor(options) {
    		super(options);

    		init(this, options, instance$r, create_fragment$r, safe_not_equal, {
    			coa: 7,
    			charge: 0,
    			i: 1,
    			shield: 2,
    			t: 3,
    			type: 8
    		});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Charge",
    			options,
    			id: create_fragment$r.name
    		});

    		const { ctx } = this.$$;
    		const props = options.props || {};

    		if (/*coa*/ ctx[7] === undefined && !('coa' in props)) {
    			console.warn("<Charge> was created without expected prop 'coa'");
    		}

    		if (/*charge*/ ctx[0] === undefined && !('charge' in props)) {
    			console.warn("<Charge> was created without expected prop 'charge'");
    		}

    		if (/*i*/ ctx[1] === undefined && !('i' in props)) {
    			console.warn("<Charge> was created without expected prop 'i'");
    		}

    		if (/*shield*/ ctx[2] === undefined && !('shield' in props)) {
    			console.warn("<Charge> was created without expected prop 'shield'");
    		}

    		if (/*t*/ ctx[3] === undefined && !('t' in props)) {
    			console.warn("<Charge> was created without expected prop 't'");
    		}

    		if (/*type*/ ctx[8] === undefined && !('type' in props)) {
    			console.warn("<Charge> was created without expected prop 'type'");
    		}
    	}

    	get coa() {
    		throw new Error("<Charge>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set coa(value) {
    		throw new Error("<Charge>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get charge() {
    		throw new Error("<Charge>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set charge(value) {
    		throw new Error("<Charge>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get i() {
    		throw new Error("<Charge>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set i(value) {
    		throw new Error("<Charge>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get shield() {
    		throw new Error("<Charge>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set shield(value) {
    		throw new Error("<Charge>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get t() {
    		throw new Error("<Charge>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set t(value) {
    		throw new Error("<Charge>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get type() {
    		throw new Error("<Charge>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set type(value) {
    		throw new Error("<Charge>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    const positionsSelect = [
      "a",
      "b",
      "c",
      "d",
      "e",
      "f",
      "g",
      "h",
      "i",
      "y",
      "z",
      "kn",
      "bh",
      "df",
      "pq",
      "jo",
      "lm",
      "abc",
      "def",
      "ghi",
      "adg",
      "beh",
      "cfi",
      "jeo",
      "jln",
      "kmo",
      "peq",
      "lem",
      "bhdf",
      "jleh",
      "behdf",
      "acegi",
      "bdefh",
      "kenpq",
      "abcpqh",
      "abcdefgzi",
      "ABCDEFGHIJKL"
    ];

    const positions = {
      conventional: {
        e: 20,
        abcdefgzi: 3,
        beh: 3,
        behdf: 2,
        acegi: 1,
        kn: 3,
        bhdf: 1,
        jeo: 1,
        abc: 3,
        jln: 6,
        jlh: 3,
        kmo: 2,
        jleh: 1,
        def: 3,
        abcpqh: 4,
        ABCDEFGHIJKL: 1
      },
      complex: {e: 40, beh: 1, kn: 1, jeo: 1, abc: 2, jln: 7, jlh: 2, def: 1, abcpqh: 1},
      divisions: {
        perPale: {e: 15, pq: 5, jo: 2, jl: 2, ABCDEFGHIJKL: 1},
        perFess: {e: 12, kn: 4, jkl: 2, gizgiz: 1, jlh: 3, kmo: 1, ABCDEFGHIJKL: 1},
        perBend: {e: 5, lm: 5, bcfdgh: 1},
        perBendSinister: {e: 1, jo: 1},
        perCross: {e: 4, jlmo: 1, j: 1, jo: 2, jl: 1},
        perChevron: {e: 1, jlh: 1, dfk: 1, dfbh: 2, bdefh: 1},
        perChevronReversed: {e: 1, mok: 2, dfh: 2, dfbh: 1, bdefh: 1},
        perSaltire: {bhdf: 8, e: 3, abcdefgzi: 1, bh: 1, df: 1, ABCDEFGHIJKL: 1},
        perPile: {ee: 3, be: 2, abceh: 1, abcabc: 1, jleh: 1}
      },
      ordinariesOn: {
        pale: {ee: 12, beh: 10, kn: 3, bb: 1},
        fess: {ee: 1, def: 3},
        bar: {defdefdef: 1},
        fessCotissed: {ee: 1, def: 3},
        fessDoubleCotissed: {ee: 1, defdef: 3},
        bend: {ee: 2, jo: 1, joe: 1},
        bendSinister: {ee: 1, lm: 1, lem: 4},
        bendlet: {joejoejoe: 1},
        bendletSinister: {lemlemlem: 1},
        bordure: {ABCDEFGHIJKL: 1},
        chief: {abc: 5, bbb: 1},
        quarter: {jjj: 1},
        canton: {yyyy: 1},
        cross: {eeee: 1, behdfbehdf: 3, behbehbeh: 2},
        crossParted: {e: 5, ee: 1},
        saltire: {ee: 5, jlemo: 1},
        saltireParted: {e: 5, ee: 1},
        pall: {ee: 1, jleh: 5, jlhh: 3},
        pallReversed: {ee: 1, bemo: 5},
        pile: {bbb: 1},
        pileInBend: {eeee: 1, eeoo: 1},
        pileInBendSinister: {eeee: 1, eemm: 1}
      },
      ordinariesOff: {
        pale: {yyy: 1},
        fess: {abc: 3, abcz: 1},
        bar: {abc: 2, abcgzi: 1, jlh: 5, bgi: 2, ach: 1},
        gemelle: {abc: 1},
        bend: {ccg: 2, ccc: 1},
        bendSinister: {aai: 2, aaa: 1},
        bendlet: {ccg: 2, ccc: 1},
        bendletSinister: {aai: 2, aaa: 1},
        bordure: {e: 4, jleh: 2, kenken: 1, peqpeq: 1},
        orle: {e: 4, jleh: 1, kenken: 1, peqpeq: 1},
        chief: {emo: 2, emoz: 1, ez: 2},
        terrace: {e: 5, def: 1, bdf: 3},
        mount: {e: 5, def: 1, bdf: 3},
        point: {e: 2, def: 1, bdf: 3, acbdef: 1},
        flaunches: {e: 3, kn: 1, beh: 3},
        gyron: {bh: 1},
        quarter: {e: 1},
        canton: {e: 5, beh: 1, def: 1, bdefh: 1, kn: 1},
        cross: {acgi: 1},
        pall: {BCKFEILGJbdmfo: 1},
        pallReversed: {aczac: 1},
        chevron: {ach: 3, hhh: 1},
        chevronReversed: {bbb: 1},
        pile: {acdfgi: 1, acac: 1},
        pileInBend: {cg: 1},
        pileInBendSinister: {ai: 1},
        label: {defgzi: 2, eh: 3, defdefhmo: 1, egiegi: 1, pqn: 5}
      },
      // charges
      inescutcheon: {e: 4, jln: 1},
      mascle: {e: 15, abcdefgzi: 3, beh: 3, bdefh: 4, acegi: 1, kn: 3, joe: 2, abc: 3, jlh: 8, jleh: 1, df: 3, abcpqh: 4, pqe: 3, eknpq: 3},
      lionRampant: {e: 10, def: 2, abc: 2, bdefh: 1, kn: 1, jlh: 2, abcpqh: 1},
      lionPassant: {e: 10, def: 1, abc: 1, bdefh: 1, jlh: 1, abcpqh: 1},
      wolfPassant: {e: 10, def: 1, abc: 1, bdefh: 1, jlh: 1, abcpqh: 1},
      greyhoundСourant: {e: 10, def: 1, abc: 1, bdefh: 1, jlh: 1, abcpqh: 1},
      greyhoundSejant: {e: 10, def: 1, abc: 1, bdefh: 1, jlh: 1, abcpqh: 1},
      griffinRampant: {e: 10, def: 2, abc: 2, bdefh: 1, kn: 1, jlh: 2, abcpqh: 1},
      griffinPassant: {e: 10, def: 1, abc: 1, bdefh: 1, jlh: 1, abcpqh: 1},
      boarRampant: {e: 12, beh: 1, kn: 1, jln: 2},
      eagle: {e: 15, beh: 1, kn: 1, abc: 1, jlh: 2, def: 2, pq: 1},
      raven: {e: 15, beh: 1, kn: 1, jeo: 1, abc: 3, jln: 3, def: 1},
      wyvern: {e: 10, jln: 1},
      garb: {e: 1, def: 3, abc: 2, beh: 1, kn: 1, jln: 3, jleh: 1, abcpqh: 1, joe: 1, lme: 1},
      crown: {e: 10, abcdefgzi: 1, beh: 3, behdf: 2, acegi: 1, kn: 1, pq: 2, abc: 1, jln: 4, jleh: 1, def: 2, abcpqh: 3},
      crown2: {e: 10, abcdefgzi: 1, beh: 3, behdf: 2, acegi: 1, kn: 1, pq: 2, abc: 1, jln: 4, jleh: 1, def: 2, abcpqh: 3},
      hand: {e: 10, jln: 2, kn: 1, jeo: 1, abc: 2, pqe: 1},
      armillarySphere: {e: 1},
      tree: {e: 1},
      lymphad: {e: 1},
      head: {e: 1},
      headWreathed: {e: 1},
      cavalier: {e: 1},
      angel: {e: 1}
    };

    const lines = {
      straight: 50,
      wavy: 8,
      engrailed: 4,
      invecked: 3,
      rayonne: 3,
      embattled: 1,
      raguly: 1,
      urdy: 1,
      dancetty: 1,
      indented: 2,
      dentilly: 1,
      bevilled: 1,
      angled: 1,
      flechy: 1,
      barby: 1,
      enclavy: 1,
      escartely: 1,
      arched: 2,
      archedReversed: 1,
      nowy: 1,
      nowyReversed: 1,
      embattledGhibellin: 1,
      embattledNotched: 1,
      embattledGrady: 1,
      dovetailedIndented: 1,
      dovetailed: 1,
      potenty: 1,
      potentyDexter: 1,
      potentySinister: 1,
      nebuly: 2,
      seaWaves: 1,
      dragonTeeth: 1,
      firTrees: 1
    };

    const divisions = {
      variants: {
        perPale: 5,
        perFess: 5,
        perBend: 2,
        perBendSinister: 1,
        perChevron: 1,
        perChevronReversed: 1,
        perCross: 5,
        perPile: 1,
        perSaltire: 1,
        gyronny: 1,
        chevronny: 1
      },
      perPale: lines,
      perFess: lines,
      perBend: lines,
      perBendSinister: lines,
      perChevron: lines,
      perChevronReversed: lines,
      perCross: {
        straight: 20,
        wavy: 5,
        engrailed: 4,
        invecked: 3,
        rayonne: 1,
        embattled: 1,
        raguly: 1,
        urdy: 1,
        indented: 2,
        dentilly: 1,
        bevilled: 1,
        angled: 1,
        embattledGhibellin: 1,
        embattledGrady: 1,
        dovetailedIndented: 1,
        dovetailed: 1,
        potenty: 1,
        potentyDexter: 1,
        potentySinister: 1,
        nebuly: 1
      },
      perPile: lines
    };

    const ordinaries = {
      lined: {
        pale: 7,
        fess: 5,
        bend: 3,
        bendSinister: 2,
        chief: 5,
        bar: 2,
        gemelle: 1,
        fessCotissed: 1,
        fessDoubleCotissed: 1,
        bendlet: 2,
        bendletSinister: 1,
        terrace: 3,
        cross: 6,
        crossParted: 1,
        saltire: 2,
        saltireParted: 1
      },
      straight: {
        bordure: 8,
        orle: 4,
        mount: 1,
        point: 2,
        flaunches: 1,
        gore: 1,
        gyron: 1,
        quarter: 1,
        canton: 2,
        pall: 3,
        pallReversed: 2,
        chevron: 4,
        chevronReversed: 3,
        pile: 2,
        pileInBend: 2,
        pileInBendSinister: 1,
        piles: 1,
        pilesInPoint: 2,
        label: 1
      },
      patternable: ["flaunches", "gyron", "quarter", "canton", "pall", "pallReversed", "pileInBend", "pileInBendSinister"]
    };

    const charges = {
      types: {
        conventional: 30,
        crosses: 10,
        animals: 2,
        animalHeads: 1,
        birds: 2,
        aquatic: 1,
        seafaring: 1,
        fantastic: 3,
        plants: 1,
        agriculture: 1,
        arms: 3,
        bodyparts: 1,
        people: 1,
        architecture: 1,
        miscellaneous: 3,
        inescutcheon: 3,
        uploaded: 0
      },
      single: {
        conventional: 12,
        crosses: 8,
        plants: 2,
        animals: 10,
        animalHeads: 2,
        birds: 4,
        aquatic: 2,
        seafaring: 2,
        fantastic: 7,
        agriculture: 1,
        arms: 6,
        bodyparts: 1,
        people: 2,
        architecture: 1,
        miscellaneous: 10,
        inescutcheon: 5,
        uploaded: 0
      },
      semy: {conventional: 4, crosses: 1},
      conventional: {
        lozenge: 2,
        fusil: 4,
        mascle: 4,
        rustre: 2,
        lozengeFaceted: 3,
        lozengePloye: 1,
        roundel: 4,
        roundel2: 3,
        annulet: 4,
        mullet: 5,
        mulletPierced: 1,
        mulletFaceted: 1,
        mullet4: 3,
        mullet6: 4,
        mullet6Pierced: 1,
        mullet6Faceted: 1,
        mullet7: 1,
        mullet8: 1,
        mullet10: 1,
        estoile: 1,
        compassRose: 1,
        billet: 5,
        delf: 0,
        triangle: 3,
        trianglePierced: 1,
        goutte: 4,
        heart: 4,
        pique: 2,
        carreau: 1,
        trefle: 2,
        fleurDeLis: 6,
        sun: 3,
        sunInSplendour: 1,
        crescent: 5,
        fountain: 1
      },
      inescutcheon: {
        inescutcheonHeater: 1,
        inescutcheonSpanish: 1,
        inescutcheonFrench: 1,
        inescutcheonHorsehead: 1,
        inescutcheonHorsehead2: 1,
        inescutcheonPolish: 1,
        inescutcheonHessen: 1,
        inescutcheonSwiss: 1,
        inescutcheonBoeotian: 1,
        inescutcheonRoman: 1,
        inescutcheonKite: 1,
        inescutcheonOldFrench: 1,
        inescutcheonRenaissance: 1,
        inescutcheonBaroque: 1,
        inescutcheonTarge: 1,
        inescutcheonTarge2: 1,
        inescutcheonPavise: 1,
        inescutcheonWedged: 1,
        inescutcheonFlag: 1,
        inescutcheonPennon: 1,
        inescutcheonGuidon: 1,
        inescutcheonBanner: 1,
        inescutcheonDovetail: 1,
        inescutcheonGonfalon: 1,
        inescutcheonPennant: 1,
        inescutcheonRound: 1,
        inescutcheonOval: 1,
        inescutcheonVesicaPiscis: 1,
        inescutcheonSquare: 1,
        inescutcheonDiamond: 1,
        inescutcheonNo: 1,
        inescutcheonFantasy1: 1,
        inescutcheonFantasy2: 1,
        inescutcheonFantasy3: 1,
        inescutcheonFantasy4: 1,
        inescutcheonFantasy5: 1,
        inescutcheonNoldor: 1,
        inescutcheonGondor: 1,
        inescutcheonEasterling: 1,
        inescutcheonErebor: 1,
        inescutcheonIronHills: 1,
        inescutcheonUrukHai: 1,
        inescutcheonMoriaOrc: 1
      },
      crosses: {
        crossHummetty: 15,
        crossVoided: 1,
        crossPattee: 2,
        crossPatteeAlisee: 1,
        crossFormee: 1,
        crossFormee2: 2,
        crossPotent: 2,
        crossJerusalem: 1,
        crosslet: 1,
        crossClechy: 3,
        crossBottony: 1,
        crossFleury: 3,
        crossPatonce: 1,
        crossPommy: 1,
        crossGamma: 1,
        crossArrowed: 1,
        crossFitchy: 1,
        crossCercelee: 1,
        crossMoline: 2,
        crossFourchy: 1,
        crossAvellane: 1,
        crossErminee: 1,
        crossBiparted: 1,
        crossMaltese: 3,
        crossTemplar: 2,
        crossCeltic: 1,
        crossCeltic2: 1,
        crossTriquetra: 1,
        crossCarolingian: 1,
        crossOccitan: 1,
        crossSaltire: 3,
        crossBurgundy: 1,
        crossLatin: 3,
        crossPatriarchal: 1,
        crossOrthodox: 1,
        crossCalvary: 1,
        crossDouble: 1,
        crossTau: 1,
        crossSantiago: 1,
        crossAnkh: 1
      },
      animals: {
        lionRampant: 6,
        lionPassant: 2,
        lionPassantGuardant: 1,
        wolfRampant: 1,
        wolfPassant: 1,
        wolfStatant: 1,
        greyhoundCourant: 1,
        greyhoundSejant: 1,
        mastiffStatant: 1,
        boarRampant: 1,
        horseRampant: 2,
        horseSalient: 1,
        horsePassant: 1,
        bearRampant: 2,
        bearPassant: 1,
        bullPassant: 1,
        goat: 1,
        lamb: 1,
        lambPassantReguardant: 1,
        agnusDei: 1,
        elephant: 1,
        camel: 1,
        porcupine: 1,
        snake: 1
      },
      animalHeads: {wolfHeadErased: 2, bullHeadCaboshed: 1, deerHeadCaboshed: 1, lionHeadCaboshed: 2},
      fantastic: {
        dragonPassant: 2,
        dragonRampant: 2,
        wyvern: 1,
        wyvernWithWingsDisplayed: 1,
        griffinPassant: 1,
        griffinRampant: 1,
        eagleTwoHeads: 2,
        unicornRampant: 1,
        pegasus: 1,
        serpent: 1,
        basilisk: 1
      },
      birds: {eagle: 9, raven: 2, cock: 3, parrot: 1, swan: 2, swanErased: 1, heron: 1, owl: 1},
      plants: {tree: 1, oak: 1, cinquefoil: 1, rose: 1, apple: 1},
      aquatic: {escallop: 5, pike: 1, cancer: 1, dolphin: 1},
      seafaring: {anchor: 6, boat: 2, boat2: 1, lymphad: 2, armillarySphere: 1},
      agriculture: {garb: 2, rake: 1, plough: 2},
      arms: {
        sword: 4,
        falchion: 1,
        sabre: 1,
        sabresCrossed: 1,
        sabre2: 1,
        hatchet: 3,
        axe: 3,
        lochaberAxe: 1,
        mallet: 1,
        bowWithArrow: 3,
        bow: 1,
        arrow: 1,
        arrowsSheaf: 1,
        helmet: 2,
        cannon: 1
      },
      bodyparts: {hand: 4, head: 1, headWreathed: 1, foot: 1},
      people: {cavalier: 3, monk: 1, angel: 2},
      architecture: {tower: 1, castle: 1},
      miscellaneous: {
        crown: 2,
        crown2: 1,
        orb: 1,
        chalice: 1,
        key: 1,
        buckle: 1,
        bugleHorn: 1,
        bugleHorn2: 1,
        bell: 2,
        pot: 1,
        bucket: 1,
        horseshoe: 3,
        attire: 1,
        stagsAttires: 1,
        ramsHorn: 1,
        cowHorns: 2,
        wing: 1,
        wingSword: 1,
        lute: 1,
        harp: 1,
        wheel: 2,
        crosier: 1,
        fasces: 1,
        log: 1,
        chain: 1,
        anvil: 1
      },
      uploaded: {},
      natural: {fountain: "azure", garb: "or", raven: "sable"}, // charges to mainly use predefined colours
      sinister: [
        // charges that can be sinister
        "crossGamma",
        "lionRampant",
        "lionPassant",
        "wolfRampant",
        "wolfPassant",
        "wolfStatant",
        "wolfHeadErased",
        "greyhoundСourant",
        "greyhoundSejant",
        "mastiffStatant",
        "boarRampant",
        "horseRampant",
        "horseSalient",
        "horsePassant",
        "bullPassant",
        "bearRampant",
        "bearPassant",
        "goat",
        "lamb",
        "lambPassantReguardant",
        "agnusDei",
        "elephant",
        "eagle",
        "raven",
        "cock",
        "parrot",
        "swan",
        "swanErased",
        "heron",
        "pike",
        "dragonPassant",
        "dragonRampant",
        "wyvern",
        "wyvernWithWingsDisplayed",
        "griffinPassant",
        "griffinRampant",
        "unicornRampant",
        "pegasus",
        "serpent",
        "hatchet",
        "lochaberAxe",
        "hand",
        "wing",
        "wingSword",
        "lute",
        "harp",
        "bow",
        "head",
        "headWreathed",
        "knight",
        "lymphad",
        "log",
        "crosier",
        "dolphin",
        "sabre",
        "monk",
        "owl",
        "axe",
        "camel",
        "fasces",
        "lionPassantGuardant",
        "helmet",
        "foot",
        "plough",
        "sabre2",
        "cannon",
        "porcupine",
        "basilisk",
        "snake",
        "anvil"
      ],
      reversed: [
        // charges that can be reversed
        "goutte",
        "mullet",
        "mullet7",
        "crescent",
        "crossTau",
        "cancer",
        "sword",
        "falchion",
        "sabresCrossed",
        "hand",
        "horseshoe",
        "bowWithArrow",
        "arrow",
        "arrowsSheaf",
        "rake",
        "crossTriquetra",
        "crossLatin",
        "crossTau",
        "sabre2"
      ],
      patternable: [
        // charges that can have pattern tincture when counterchanged
        "lozengePloye",
        "roundel",
        "annulet",
        "mullet4",
        "mullet8",
        "delf",
        "triangle",
        "trianglePierced",
        "sun",
        "fountain",
        "inescutcheonRound",
        "inescutcheonSquare",
        "inescutcheonNo",
        "crossHummetty",
        "crossVoided",
        "crossPattee",
        "crossPatteeAlisee",
        "crossFormee",
        "crossFormee2",
        "crossPotent",
        "crossJerusalem",
        "crosslet",
        "crossClechy",
        "crossBottony",
        "crossFleury",
        "crossPatonce",
        "crossPommy",
        "crossGamma",
        "crossArrowed",
        "crossFitchy",
        "crossCercelee",
        "crossMoline",
        "crossAvellane",
        "crossErminee",
        "crossBiparted",
        "crossMaltese",
        "crossTemplar",
        "crossCeltic",
        "crossCeltic2",
        "crossTau"
      ]
    };

    const patternSize = {standard: 154, small: 20, smaller: 20, big: 5, smallest: 1};

    /* src/components/object/Shield.svelte generated by Svelte v3.44.2 */
    const file$q = "src/components/object/Shield.svelte";

    function get_each_context$c(ctx, list, i) {
    	const child_ctx = ctx.slice();
    	child_ctx[21] = list[i];
    	child_ctx[23] = i;
    	return child_ctx;
    }

    function get_each_context_1$4(ctx, list, i) {
    	const child_ctx = ctx.slice();
    	child_ctx[24] = list[i];
    	child_ctx[23] = i;
    	return child_ctx;
    }

    function get_each_context_2$1(ctx, list, i) {
    	const child_ctx = ctx.slice();
    	child_ctx[21] = list[i];
    	child_ctx[23] = i;
    	return child_ctx;
    }

    function get_each_context_3$1(ctx, list, i) {
    	const child_ctx = ctx.slice();
    	child_ctx[21] = list[i];
    	child_ctx[23] = i;
    	return child_ctx;
    }

    function get_each_context_4$1(ctx, list, i) {
    	const child_ctx = ctx.slice();
    	child_ctx[24] = list[i];
    	child_ctx[23] = i;
    	return child_ctx;
    }

    function get_each_context_5(ctx, list, i) {
    	const child_ctx = ctx.slice();
    	child_ctx[21] = list[i];
    	child_ctx[23] = i;
    	return child_ctx;
    }

    function get_each_context_6(ctx, list, i) {
    	const child_ctx = ctx.slice();
    	child_ctx[21] = list[i];
    	child_ctx[23] = i;
    	return child_ctx;
    }

    function get_each_context_7(ctx, list, i) {
    	const child_ctx = ctx.slice();
    	child_ctx[24] = list[i];
    	child_ctx[23] = i;
    	return child_ctx;
    }

    function get_each_context_8(ctx, list, i) {
    	const child_ctx = ctx.slice();
    	child_ctx[21] = list[i];
    	child_ctx[23] = i;
    	return child_ctx;
    }

    // (57:2) {#if division && division.division !== "no"}
    function create_if_block_19$1(ctx) {
    	let clipPath;
    	let raw_value = getTemplate(/*division*/ ctx[11].division, /*division*/ ctx[11].line) + "";

    	const block = {
    		c: function create() {
    			clipPath = svg_element("clipPath");
    			attr_dev(clipPath, "id", "division_" + /*id*/ ctx[10]);
    			add_location(clipPath, file$q, 57, 4, 2000);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, clipPath, anchor);
    			clipPath.innerHTML = raw_value;
    		},
    		p: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(clipPath);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_19$1.name,
    		type: "if",
    		source: "(57:2) {#if division && division.division !== \\\"no\\\"}",
    		ctx
    	});

    	return block;
    }

    // (68:2) {#if division && division.division !== "no"}
    function create_if_block_4$2(ctx) {
    	let each0_anchor;
    	let if_block0_anchor;
    	let each1_anchor;
    	let g;
    	let rect;
    	let rect_fill_value;
    	let each3_anchor;
    	let if_block1_anchor;
    	let each4_anchor;
    	let current;
    	let each_value_8 = /*ordinariesRegular*/ ctx[13];
    	validate_each_argument(each_value_8);
    	let each_blocks_5 = [];

    	for (let i = 0; i < each_value_8.length; i += 1) {
    		each_blocks_5[i] = create_each_block_8(get_each_context_8(ctx, each_value_8, i));
    	}

    	const out = i => transition_out(each_blocks_5[i], 1, 1, () => {
    		each_blocks_5[i] = null;
    	});

    	let if_block0 = /*diaperType*/ ctx[8] === "field" && create_if_block_16$1(ctx);
    	let each_value_7 = /*charges*/ ctx[12];
    	validate_each_argument(each_value_7);
    	let each_blocks_4 = [];

    	for (let i = 0; i < each_value_7.length; i += 1) {
    		each_blocks_4[i] = create_each_block_7(get_each_context_7(ctx, each_value_7, i));
    	}

    	const out_1 = i => transition_out(each_blocks_4[i], 1, 1, () => {
    		each_blocks_4[i] = null;
    	});

    	let each_value_6 = /*ordinariesAboveCharges*/ ctx[14];
    	validate_each_argument(each_value_6);
    	let each_blocks_3 = [];

    	for (let i = 0; i < each_value_6.length; i += 1) {
    		each_blocks_3[i] = create_each_block_6(get_each_context_6(ctx, each_value_6, i));
    	}

    	const out_2 = i => transition_out(each_blocks_3[i], 1, 1, () => {
    		each_blocks_3[i] = null;
    	});

    	let each_value_5 = /*ordinariesRegular*/ ctx[13];
    	validate_each_argument(each_value_5);
    	let each_blocks_2 = [];

    	for (let i = 0; i < each_value_5.length; i += 1) {
    		each_blocks_2[i] = create_each_block_5(get_each_context_5(ctx, each_value_5, i));
    	}

    	const out_3 = i => transition_out(each_blocks_2[i], 1, 1, () => {
    		each_blocks_2[i] = null;
    	});

    	let if_block1 = /*diaperType*/ ctx[8] === "division" && create_if_block_9$1(ctx);
    	let each_value_4 = /*charges*/ ctx[12];
    	validate_each_argument(each_value_4);
    	let each_blocks_1 = [];

    	for (let i = 0; i < each_value_4.length; i += 1) {
    		each_blocks_1[i] = create_each_block_4$1(get_each_context_4$1(ctx, each_value_4, i));
    	}

    	const out_4 = i => transition_out(each_blocks_1[i], 1, 1, () => {
    		each_blocks_1[i] = null;
    	});

    	let each_value_3 = /*ordinariesAboveCharges*/ ctx[14];
    	validate_each_argument(each_value_3);
    	let each_blocks = [];

    	for (let i = 0; i < each_value_3.length; i += 1) {
    		each_blocks[i] = create_each_block_3$1(get_each_context_3$1(ctx, each_value_3, i));
    	}

    	const out_5 = i => transition_out(each_blocks[i], 1, 1, () => {
    		each_blocks[i] = null;
    	});

    	const block = {
    		c: function create() {
    			for (let i = 0; i < each_blocks_5.length; i += 1) {
    				each_blocks_5[i].c();
    			}

    			each0_anchor = empty();
    			if (if_block0) if_block0.c();
    			if_block0_anchor = empty();

    			for (let i = 0; i < each_blocks_4.length; i += 1) {
    				each_blocks_4[i].c();
    			}

    			each1_anchor = empty();

    			for (let i = 0; i < each_blocks_3.length; i += 1) {
    				each_blocks_3[i].c();
    			}

    			g = svg_element("g");
    			rect = svg_element("rect");

    			for (let i = 0; i < each_blocks_2.length; i += 1) {
    				each_blocks_2[i].c();
    			}

    			each3_anchor = empty();
    			if (if_block1) if_block1.c();
    			if_block1_anchor = empty();

    			for (let i = 0; i < each_blocks_1.length; i += 1) {
    				each_blocks_1[i].c();
    			}

    			each4_anchor = empty();

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].c();
    			}

    			attr_dev(rect, "x", "0");
    			attr_dev(rect, "y", "0");
    			attr_dev(rect, "width", "200");
    			attr_dev(rect, "height", "200");
    			attr_dev(rect, "fill", rect_fill_value = /*clr*/ ctx[6](/*division*/ ctx[11].t));
    			add_location(rect, file$q, 99, 6, 3627);
    			attr_dev(g, "class", "division");
    			attr_dev(g, "clip-path", "url(#division_" + /*id*/ ctx[10] + ")");
    			add_location(g, file$q, 98, 4, 3568);
    		},
    		m: function mount(target, anchor) {
    			for (let i = 0; i < each_blocks_5.length; i += 1) {
    				each_blocks_5[i].m(target, anchor);
    			}

    			insert_dev(target, each0_anchor, anchor);
    			if (if_block0) if_block0.m(target, anchor);
    			insert_dev(target, if_block0_anchor, anchor);

    			for (let i = 0; i < each_blocks_4.length; i += 1) {
    				each_blocks_4[i].m(target, anchor);
    			}

    			insert_dev(target, each1_anchor, anchor);

    			for (let i = 0; i < each_blocks_3.length; i += 1) {
    				each_blocks_3[i].m(target, anchor);
    			}

    			insert_dev(target, g, anchor);
    			append_dev(g, rect);

    			for (let i = 0; i < each_blocks_2.length; i += 1) {
    				each_blocks_2[i].m(g, null);
    			}

    			append_dev(g, each3_anchor);
    			if (if_block1) if_block1.m(g, null);
    			append_dev(g, if_block1_anchor);

    			for (let i = 0; i < each_blocks_1.length; i += 1) {
    				each_blocks_1[i].m(g, null);
    			}

    			append_dev(g, each4_anchor);

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].m(g, null);
    			}

    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			if (dirty[0] & /*coa, ordinariesRegular, shieldPath, clr, type, counterChange, division*/ 43593) {
    				each_value_8 = /*ordinariesRegular*/ ctx[13];
    				validate_each_argument(each_value_8);
    				let i;

    				for (i = 0; i < each_value_8.length; i += 1) {
    					const child_ctx = get_each_context_8(ctx, each_value_8, i);

    					if (each_blocks_5[i]) {
    						each_blocks_5[i].p(child_ctx, dirty);
    						transition_in(each_blocks_5[i], 1);
    					} else {
    						each_blocks_5[i] = create_each_block_8(child_ctx);
    						each_blocks_5[i].c();
    						transition_in(each_blocks_5[i], 1);
    						each_blocks_5[i].m(each0_anchor.parentNode, each0_anchor);
    					}
    				}

    				group_outros();

    				for (i = each_value_8.length; i < each_blocks_5.length; i += 1) {
    					out(i);
    				}

    				check_outros();
    			}

    			if (/*diaperType*/ ctx[8] === "field") {
    				if (if_block0) {
    					if_block0.p(ctx, dirty);
    				} else {
    					if_block0 = create_if_block_16$1(ctx);
    					if_block0.c();
    					if_block0.m(if_block0_anchor.parentNode, if_block0_anchor);
    				}
    			} else if (if_block0) {
    				if_block0.d(1);
    				if_block0 = null;
    			}

    			if (dirty[0] & /*coa, charges, $shield, clr, type, counterChange, division*/ 39017) {
    				each_value_7 = /*charges*/ ctx[12];
    				validate_each_argument(each_value_7);
    				let i;

    				for (i = 0; i < each_value_7.length; i += 1) {
    					const child_ctx = get_each_context_7(ctx, each_value_7, i);

    					if (each_blocks_4[i]) {
    						each_blocks_4[i].p(child_ctx, dirty);
    						transition_in(each_blocks_4[i], 1);
    					} else {
    						each_blocks_4[i] = create_each_block_7(child_ctx);
    						each_blocks_4[i].c();
    						transition_in(each_blocks_4[i], 1);
    						each_blocks_4[i].m(each1_anchor.parentNode, each1_anchor);
    					}
    				}

    				group_outros();

    				for (i = each_value_7.length; i < each_blocks_4.length; i += 1) {
    					out_1(i);
    				}

    				check_outros();
    			}

    			if (dirty[0] & /*coa, ordinariesAboveCharges, shieldPath, clr, type, counterChange, division*/ 51785) {
    				each_value_6 = /*ordinariesAboveCharges*/ ctx[14];
    				validate_each_argument(each_value_6);
    				let i;

    				for (i = 0; i < each_value_6.length; i += 1) {
    					const child_ctx = get_each_context_6(ctx, each_value_6, i);

    					if (each_blocks_3[i]) {
    						each_blocks_3[i].p(child_ctx, dirty);
    						transition_in(each_blocks_3[i], 1);
    					} else {
    						each_blocks_3[i] = create_each_block_6(child_ctx);
    						each_blocks_3[i].c();
    						transition_in(each_blocks_3[i], 1);
    						each_blocks_3[i].m(g.parentNode, g);
    					}
    				}

    				group_outros();

    				for (i = each_value_6.length; i < each_blocks_3.length; i += 1) {
    					out_2(i);
    				}

    				check_outros();
    			}

    			if (!current || dirty[0] & /*clr*/ 64 && rect_fill_value !== (rect_fill_value = /*clr*/ ctx[6](/*division*/ ctx[11].t))) {
    				attr_dev(rect, "fill", rect_fill_value);
    			}

    			if (dirty[0] & /*coa, ordinariesRegular, shieldPath, clr, type, counterChange*/ 41545) {
    				each_value_5 = /*ordinariesRegular*/ ctx[13];
    				validate_each_argument(each_value_5);
    				let i;

    				for (i = 0; i < each_value_5.length; i += 1) {
    					const child_ctx = get_each_context_5(ctx, each_value_5, i);

    					if (each_blocks_2[i]) {
    						each_blocks_2[i].p(child_ctx, dirty);
    						transition_in(each_blocks_2[i], 1);
    					} else {
    						each_blocks_2[i] = create_each_block_5(child_ctx);
    						each_blocks_2[i].c();
    						transition_in(each_blocks_2[i], 1);
    						each_blocks_2[i].m(g, each3_anchor);
    					}
    				}

    				group_outros();

    				for (i = each_value_5.length; i < each_blocks_2.length; i += 1) {
    					out_3(i);
    				}

    				check_outros();
    			}

    			if (/*diaperType*/ ctx[8] === "division") {
    				if (if_block1) {
    					if_block1.p(ctx, dirty);
    				} else {
    					if_block1 = create_if_block_9$1(ctx);
    					if_block1.c();
    					if_block1.m(g, if_block1_anchor);
    				}
    			} else if (if_block1) {
    				if_block1.d(1);
    				if_block1 = null;
    			}

    			if (dirty[0] & /*coa, charges, $shield, clr, type, counterChange*/ 36969) {
    				each_value_4 = /*charges*/ ctx[12];
    				validate_each_argument(each_value_4);
    				let i;

    				for (i = 0; i < each_value_4.length; i += 1) {
    					const child_ctx = get_each_context_4$1(ctx, each_value_4, i);

    					if (each_blocks_1[i]) {
    						each_blocks_1[i].p(child_ctx, dirty);
    						transition_in(each_blocks_1[i], 1);
    					} else {
    						each_blocks_1[i] = create_each_block_4$1(child_ctx);
    						each_blocks_1[i].c();
    						transition_in(each_blocks_1[i], 1);
    						each_blocks_1[i].m(g, each4_anchor);
    					}
    				}

    				group_outros();

    				for (i = each_value_4.length; i < each_blocks_1.length; i += 1) {
    					out_4(i);
    				}

    				check_outros();
    			}

    			if (dirty[0] & /*coa, ordinariesAboveCharges, shieldPath, clr, type, counterChange*/ 49737) {
    				each_value_3 = /*ordinariesAboveCharges*/ ctx[14];
    				validate_each_argument(each_value_3);
    				let i;

    				for (i = 0; i < each_value_3.length; i += 1) {
    					const child_ctx = get_each_context_3$1(ctx, each_value_3, i);

    					if (each_blocks[i]) {
    						each_blocks[i].p(child_ctx, dirty);
    						transition_in(each_blocks[i], 1);
    					} else {
    						each_blocks[i] = create_each_block_3$1(child_ctx);
    						each_blocks[i].c();
    						transition_in(each_blocks[i], 1);
    						each_blocks[i].m(g, null);
    					}
    				}

    				group_outros();

    				for (i = each_value_3.length; i < each_blocks.length; i += 1) {
    					out_5(i);
    				}

    				check_outros();
    			}
    		},
    		i: function intro(local) {
    			if (current) return;

    			for (let i = 0; i < each_value_8.length; i += 1) {
    				transition_in(each_blocks_5[i]);
    			}

    			for (let i = 0; i < each_value_7.length; i += 1) {
    				transition_in(each_blocks_4[i]);
    			}

    			for (let i = 0; i < each_value_6.length; i += 1) {
    				transition_in(each_blocks_3[i]);
    			}

    			for (let i = 0; i < each_value_5.length; i += 1) {
    				transition_in(each_blocks_2[i]);
    			}

    			for (let i = 0; i < each_value_4.length; i += 1) {
    				transition_in(each_blocks_1[i]);
    			}

    			for (let i = 0; i < each_value_3.length; i += 1) {
    				transition_in(each_blocks[i]);
    			}

    			current = true;
    		},
    		o: function outro(local) {
    			each_blocks_5 = each_blocks_5.filter(Boolean);

    			for (let i = 0; i < each_blocks_5.length; i += 1) {
    				transition_out(each_blocks_5[i]);
    			}

    			each_blocks_4 = each_blocks_4.filter(Boolean);

    			for (let i = 0; i < each_blocks_4.length; i += 1) {
    				transition_out(each_blocks_4[i]);
    			}

    			each_blocks_3 = each_blocks_3.filter(Boolean);

    			for (let i = 0; i < each_blocks_3.length; i += 1) {
    				transition_out(each_blocks_3[i]);
    			}

    			each_blocks_2 = each_blocks_2.filter(Boolean);

    			for (let i = 0; i < each_blocks_2.length; i += 1) {
    				transition_out(each_blocks_2[i]);
    			}

    			each_blocks_1 = each_blocks_1.filter(Boolean);

    			for (let i = 0; i < each_blocks_1.length; i += 1) {
    				transition_out(each_blocks_1[i]);
    			}

    			each_blocks = each_blocks.filter(Boolean);

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				transition_out(each_blocks[i]);
    			}

    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_each(each_blocks_5, detaching);
    			if (detaching) detach_dev(each0_anchor);
    			if (if_block0) if_block0.d(detaching);
    			if (detaching) detach_dev(if_block0_anchor);
    			destroy_each(each_blocks_4, detaching);
    			if (detaching) detach_dev(each1_anchor);
    			destroy_each(each_blocks_3, detaching);
    			if (detaching) detach_dev(g);
    			destroy_each(each_blocks_2, detaching);
    			if (if_block1) if_block1.d();
    			destroy_each(each_blocks_1, detaching);
    			destroy_each(each_blocks, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_4$2.name,
    		type: "if",
    		source: "(68:2) {#if division && division.division !== \\\"no\\\"}",
    		ctx
    	});

    	return block;
    }

    // (73:47) 
    function create_if_block_18$1(ctx) {
    	let ordinary;
    	let current;

    	ordinary = new Ordinary({
    			props: {
    				coa: /*coa*/ ctx[0],
    				ordinary: /*ordinary*/ ctx[21],
    				i: /*i*/ ctx[23],
    				shieldPath: /*shieldPath*/ ctx[9],
    				t: /*counterChange*/ ctx[15](/*division*/ ctx[11].t, /*ordinary*/ ctx[21].ordinary),
    				type: /*type*/ ctx[3]
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(ordinary.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(ordinary, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const ordinary_changes = {};
    			if (dirty[0] & /*coa*/ 1) ordinary_changes.coa = /*coa*/ ctx[0];
    			if (dirty[0] & /*shieldPath*/ 512) ordinary_changes.shieldPath = /*shieldPath*/ ctx[9];
    			if (dirty[0] & /*type*/ 8) ordinary_changes.type = /*type*/ ctx[3];
    			ordinary.$set(ordinary_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(ordinary.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(ordinary.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(ordinary, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_18$1.name,
    		type: "if",
    		source: "(73:47) ",
    		ctx
    	});

    	return block;
    }

    // (71:6) {#if ordinary.divided === "field"}
    function create_if_block_17$1(ctx) {
    	let ordinary;
    	let current;

    	ordinary = new Ordinary({
    			props: {
    				coa: /*coa*/ ctx[0],
    				ordinary: /*ordinary*/ ctx[21],
    				i: /*i*/ ctx[23],
    				shieldPath: /*shieldPath*/ ctx[9],
    				t: /*clr*/ ctx[6](/*ordinary*/ ctx[21].t),
    				type: /*type*/ ctx[3]
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(ordinary.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(ordinary, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const ordinary_changes = {};
    			if (dirty[0] & /*coa*/ 1) ordinary_changes.coa = /*coa*/ ctx[0];
    			if (dirty[0] & /*shieldPath*/ 512) ordinary_changes.shieldPath = /*shieldPath*/ ctx[9];
    			if (dirty[0] & /*clr*/ 64) ordinary_changes.t = /*clr*/ ctx[6](/*ordinary*/ ctx[21].t);
    			if (dirty[0] & /*type*/ 8) ordinary_changes.type = /*type*/ ctx[3];
    			ordinary.$set(ordinary_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(ordinary.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(ordinary.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(ordinary, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_17$1.name,
    		type: "if",
    		source: "(71:6) {#if ordinary.divided === \\\"field\\\"}",
    		ctx
    	});

    	return block;
    }

    // (70:4) {#each ordinariesRegular as ordinary, i}
    function create_each_block_8(ctx) {
    	let current_block_type_index;
    	let if_block;
    	let if_block_anchor;
    	let current;
    	const if_block_creators = [create_if_block_17$1, create_if_block_18$1];
    	const if_blocks = [];

    	function select_block_type(ctx, dirty) {
    		if (/*ordinary*/ ctx[21].divided === "field") return 0;
    		if (/*ordinary*/ ctx[21].divided === "counter") return 1;
    		return -1;
    	}

    	if (~(current_block_type_index = select_block_type(ctx))) {
    		if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
    	}

    	const block = {
    		c: function create() {
    			if (if_block) if_block.c();
    			if_block_anchor = empty();
    		},
    		m: function mount(target, anchor) {
    			if (~current_block_type_index) {
    				if_blocks[current_block_type_index].m(target, anchor);
    			}

    			insert_dev(target, if_block_anchor, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			if (if_block) if_block.p(ctx, dirty);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(if_block);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(if_block);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (~current_block_type_index) {
    				if_blocks[current_block_type_index].d(detaching);
    			}

    			if (detaching) detach_dev(if_block_anchor);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_each_block_8.name,
    		type: "each",
    		source: "(70:4) {#each ordinariesRegular as ordinary, i}",
    		ctx
    	});

    	return block;
    }

    // (78:4) {#if diaperType === "field"}
    function create_if_block_16$1(ctx) {
    	let rect;
    	let rect_fill_value;

    	const block = {
    		c: function create() {
    			rect = svg_element("rect");
    			attr_dev(rect, "class", "diaper");
    			attr_dev(rect, "x", "0");
    			attr_dev(rect, "y", "0");
    			attr_dev(rect, "width", "200");
    			attr_dev(rect, "height", "200");
    			attr_dev(rect, "fill", rect_fill_value = "url(#" + /*coaDiaper*/ ctx[4] + ")");
    			set_style(rect, "pointer-events", "none");
    			add_location(rect, file$q, 78, 6, 2721);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, rect, anchor);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty[0] & /*coaDiaper*/ 16 && rect_fill_value !== (rect_fill_value = "url(#" + /*coaDiaper*/ ctx[4] + ")")) {
    				attr_dev(rect, "fill", rect_fill_value);
    			}
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(rect);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_16$1.name,
    		type: "if",
    		source: "(78:4) {#if diaperType === \\\"field\\\"}",
    		ctx
    	});

    	return block;
    }

    // (85:45) 
    function create_if_block_15$1(ctx) {
    	let charge;
    	let current;

    	charge = new Charge({
    			props: {
    				coa: /*coa*/ ctx[0],
    				charge: /*charge*/ ctx[24],
    				i: /*i*/ ctx[23],
    				shield: /*$shield*/ ctx[5],
    				t: /*counterChange*/ ctx[15](/*division*/ ctx[11].t, /*charge*/ ctx[24].charge),
    				type: /*type*/ ctx[3]
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(charge.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(charge, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const charge_changes = {};
    			if (dirty[0] & /*coa*/ 1) charge_changes.coa = /*coa*/ ctx[0];
    			if (dirty[0] & /*$shield*/ 32) charge_changes.shield = /*$shield*/ ctx[5];
    			if (dirty[0] & /*type*/ 8) charge_changes.type = /*type*/ ctx[3];
    			charge.$set(charge_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(charge.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(charge.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(charge, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_15$1.name,
    		type: "if",
    		source: "(85:45) ",
    		ctx
    	});

    	return block;
    }

    // (83:6) {#if charge.divided === "field"}
    function create_if_block_14$1(ctx) {
    	let charge;
    	let current;

    	charge = new Charge({
    			props: {
    				coa: /*coa*/ ctx[0],
    				charge: /*charge*/ ctx[24],
    				i: /*i*/ ctx[23],
    				shield: /*$shield*/ ctx[5],
    				t: /*clr*/ ctx[6](/*charge*/ ctx[24].t),
    				type: /*type*/ ctx[3]
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(charge.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(charge, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const charge_changes = {};
    			if (dirty[0] & /*coa*/ 1) charge_changes.coa = /*coa*/ ctx[0];
    			if (dirty[0] & /*$shield*/ 32) charge_changes.shield = /*$shield*/ ctx[5];
    			if (dirty[0] & /*clr*/ 64) charge_changes.t = /*clr*/ ctx[6](/*charge*/ ctx[24].t);
    			if (dirty[0] & /*type*/ 8) charge_changes.type = /*type*/ ctx[3];
    			charge.$set(charge_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(charge.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(charge.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(charge, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_14$1.name,
    		type: "if",
    		source: "(83:6) {#if charge.divided === \\\"field\\\"}",
    		ctx
    	});

    	return block;
    }

    // (82:4) {#each charges as charge, i}
    function create_each_block_7(ctx) {
    	let current_block_type_index;
    	let if_block;
    	let if_block_anchor;
    	let current;
    	const if_block_creators = [create_if_block_14$1, create_if_block_15$1];
    	const if_blocks = [];

    	function select_block_type_1(ctx, dirty) {
    		if (/*charge*/ ctx[24].divided === "field") return 0;
    		if (/*charge*/ ctx[24].divided === "counter") return 1;
    		return -1;
    	}

    	if (~(current_block_type_index = select_block_type_1(ctx))) {
    		if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
    	}

    	const block = {
    		c: function create() {
    			if (if_block) if_block.c();
    			if_block_anchor = empty();
    		},
    		m: function mount(target, anchor) {
    			if (~current_block_type_index) {
    				if_blocks[current_block_type_index].m(target, anchor);
    			}

    			insert_dev(target, if_block_anchor, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			if (if_block) if_block.p(ctx, dirty);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(if_block);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(if_block);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (~current_block_type_index) {
    				if_blocks[current_block_type_index].d(detaching);
    			}

    			if (detaching) detach_dev(if_block_anchor);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_each_block_7.name,
    		type: "each",
    		source: "(82:4) {#each charges as charge, i}",
    		ctx
    	});

    	return block;
    }

    // (93:47) 
    function create_if_block_13$1(ctx) {
    	let ordinary;
    	let current;

    	ordinary = new Ordinary({
    			props: {
    				coa: /*coa*/ ctx[0],
    				ordinary: /*ordinary*/ ctx[21],
    				i: /*i*/ ctx[23],
    				shieldPath: /*shieldPath*/ ctx[9],
    				t: /*counterChange*/ ctx[15](/*division*/ ctx[11].t, /*ordinary*/ ctx[21].ordinary),
    				type: /*type*/ ctx[3]
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(ordinary.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(ordinary, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const ordinary_changes = {};
    			if (dirty[0] & /*coa*/ 1) ordinary_changes.coa = /*coa*/ ctx[0];
    			if (dirty[0] & /*shieldPath*/ 512) ordinary_changes.shieldPath = /*shieldPath*/ ctx[9];
    			if (dirty[0] & /*type*/ 8) ordinary_changes.type = /*type*/ ctx[3];
    			ordinary.$set(ordinary_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(ordinary.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(ordinary.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(ordinary, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_13$1.name,
    		type: "if",
    		source: "(93:47) ",
    		ctx
    	});

    	return block;
    }

    // (91:6) {#if ordinary.divided === "field"}
    function create_if_block_12$1(ctx) {
    	let ordinary;
    	let current;

    	ordinary = new Ordinary({
    			props: {
    				coa: /*coa*/ ctx[0],
    				ordinary: /*ordinary*/ ctx[21],
    				i: /*i*/ ctx[23],
    				shieldPath: /*shieldPath*/ ctx[9],
    				t: /*clr*/ ctx[6](/*ordinary*/ ctx[21].t),
    				type: /*type*/ ctx[3]
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(ordinary.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(ordinary, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const ordinary_changes = {};
    			if (dirty[0] & /*coa*/ 1) ordinary_changes.coa = /*coa*/ ctx[0];
    			if (dirty[0] & /*shieldPath*/ 512) ordinary_changes.shieldPath = /*shieldPath*/ ctx[9];
    			if (dirty[0] & /*clr*/ 64) ordinary_changes.t = /*clr*/ ctx[6](/*ordinary*/ ctx[21].t);
    			if (dirty[0] & /*type*/ 8) ordinary_changes.type = /*type*/ ctx[3];
    			ordinary.$set(ordinary_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(ordinary.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(ordinary.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(ordinary, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_12$1.name,
    		type: "if",
    		source: "(91:6) {#if ordinary.divided === \\\"field\\\"}",
    		ctx
    	});

    	return block;
    }

    // (90:4) {#each ordinariesAboveCharges as ordinary, i}
    function create_each_block_6(ctx) {
    	let current_block_type_index;
    	let if_block;
    	let if_block_anchor;
    	let current;
    	const if_block_creators = [create_if_block_12$1, create_if_block_13$1];
    	const if_blocks = [];

    	function select_block_type_2(ctx, dirty) {
    		if (/*ordinary*/ ctx[21].divided === "field") return 0;
    		if (/*ordinary*/ ctx[21].divided === "counter") return 1;
    		return -1;
    	}

    	if (~(current_block_type_index = select_block_type_2(ctx))) {
    		if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
    	}

    	const block = {
    		c: function create() {
    			if (if_block) if_block.c();
    			if_block_anchor = empty();
    		},
    		m: function mount(target, anchor) {
    			if (~current_block_type_index) {
    				if_blocks[current_block_type_index].m(target, anchor);
    			}

    			insert_dev(target, if_block_anchor, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			if (if_block) if_block.p(ctx, dirty);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(if_block);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(if_block);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (~current_block_type_index) {
    				if_blocks[current_block_type_index].d(detaching);
    			}

    			if (detaching) detach_dev(if_block_anchor);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_each_block_6.name,
    		type: "each",
    		source: "(90:4) {#each ordinariesAboveCharges as ordinary, i}",
    		ctx
    	});

    	return block;
    }

    // (105:49) 
    function create_if_block_11$1(ctx) {
    	let ordinary;
    	let current;

    	ordinary = new Ordinary({
    			props: {
    				coa: /*coa*/ ctx[0],
    				ordinary: /*ordinary*/ ctx[21],
    				i: /*i*/ ctx[23],
    				shieldPath: /*shieldPath*/ ctx[9],
    				t: /*counterChange*/ ctx[15](/*coa*/ ctx[0].t1, /*ordinary*/ ctx[21].ordinary),
    				type: /*type*/ ctx[3]
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(ordinary.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(ordinary, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const ordinary_changes = {};
    			if (dirty[0] & /*coa*/ 1) ordinary_changes.coa = /*coa*/ ctx[0];
    			if (dirty[0] & /*shieldPath*/ 512) ordinary_changes.shieldPath = /*shieldPath*/ ctx[9];
    			if (dirty[0] & /*coa*/ 1) ordinary_changes.t = /*counterChange*/ ctx[15](/*coa*/ ctx[0].t1, /*ordinary*/ ctx[21].ordinary);
    			if (dirty[0] & /*type*/ 8) ordinary_changes.type = /*type*/ ctx[3];
    			ordinary.$set(ordinary_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(ordinary.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(ordinary.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(ordinary, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_11$1.name,
    		type: "if",
    		source: "(105:49) ",
    		ctx
    	});

    	return block;
    }

    // (103:8) {#if ordinary.divided === "division"}
    function create_if_block_10$1(ctx) {
    	let ordinary;
    	let current;

    	ordinary = new Ordinary({
    			props: {
    				coa: /*coa*/ ctx[0],
    				ordinary: /*ordinary*/ ctx[21],
    				i: /*i*/ ctx[23],
    				shieldPath: /*shieldPath*/ ctx[9],
    				t: /*clr*/ ctx[6](/*ordinary*/ ctx[21].t),
    				type: /*type*/ ctx[3]
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(ordinary.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(ordinary, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const ordinary_changes = {};
    			if (dirty[0] & /*coa*/ 1) ordinary_changes.coa = /*coa*/ ctx[0];
    			if (dirty[0] & /*shieldPath*/ 512) ordinary_changes.shieldPath = /*shieldPath*/ ctx[9];
    			if (dirty[0] & /*clr*/ 64) ordinary_changes.t = /*clr*/ ctx[6](/*ordinary*/ ctx[21].t);
    			if (dirty[0] & /*type*/ 8) ordinary_changes.type = /*type*/ ctx[3];
    			ordinary.$set(ordinary_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(ordinary.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(ordinary.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(ordinary, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_10$1.name,
    		type: "if",
    		source: "(103:8) {#if ordinary.divided === \\\"division\\\"}",
    		ctx
    	});

    	return block;
    }

    // (102:6) {#each ordinariesRegular as ordinary, i}
    function create_each_block_5(ctx) {
    	let current_block_type_index;
    	let if_block;
    	let if_block_anchor;
    	let current;
    	const if_block_creators = [create_if_block_10$1, create_if_block_11$1];
    	const if_blocks = [];

    	function select_block_type_3(ctx, dirty) {
    		if (/*ordinary*/ ctx[21].divided === "division") return 0;
    		if (/*ordinary*/ ctx[21].divided === "counter") return 1;
    		return -1;
    	}

    	if (~(current_block_type_index = select_block_type_3(ctx))) {
    		if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
    	}

    	const block = {
    		c: function create() {
    			if (if_block) if_block.c();
    			if_block_anchor = empty();
    		},
    		m: function mount(target, anchor) {
    			if (~current_block_type_index) {
    				if_blocks[current_block_type_index].m(target, anchor);
    			}

    			insert_dev(target, if_block_anchor, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			if (if_block) if_block.p(ctx, dirty);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(if_block);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(if_block);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (~current_block_type_index) {
    				if_blocks[current_block_type_index].d(detaching);
    			}

    			if (detaching) detach_dev(if_block_anchor);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_each_block_5.name,
    		type: "each",
    		source: "(102:6) {#each ordinariesRegular as ordinary, i}",
    		ctx
    	});

    	return block;
    }

    // (110:6) {#if diaperType === "division"}
    function create_if_block_9$1(ctx) {
    	let rect;
    	let rect_fill_value;

    	const block = {
    		c: function create() {
    			rect = svg_element("rect");
    			attr_dev(rect, "class", "diaper");
    			attr_dev(rect, "x", "0");
    			attr_dev(rect, "y", "0");
    			attr_dev(rect, "width", "200");
    			attr_dev(rect, "height", "200");
    			attr_dev(rect, "fill", rect_fill_value = "url(#" + /*coaDiaper*/ ctx[4] + ")");
    			set_style(rect, "pointer-events", "none");
    			add_location(rect, file$q, 110, 8, 4108);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, rect, anchor);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty[0] & /*coaDiaper*/ 16 && rect_fill_value !== (rect_fill_value = "url(#" + /*coaDiaper*/ ctx[4] + ")")) {
    				attr_dev(rect, "fill", rect_fill_value);
    			}
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(rect);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_9$1.name,
    		type: "if",
    		source: "(110:6) {#if diaperType === \\\"division\\\"}",
    		ctx
    	});

    	return block;
    }

    // (117:47) 
    function create_if_block_8$1(ctx) {
    	let charge;
    	let current;

    	charge = new Charge({
    			props: {
    				coa: /*coa*/ ctx[0],
    				charge: /*charge*/ ctx[24],
    				i: /*i*/ ctx[23],
    				shield: /*$shield*/ ctx[5],
    				t: /*counterChange*/ ctx[15](/*coa*/ ctx[0].t1, /*charge*/ ctx[24].charge),
    				type: /*type*/ ctx[3]
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(charge.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(charge, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const charge_changes = {};
    			if (dirty[0] & /*coa*/ 1) charge_changes.coa = /*coa*/ ctx[0];
    			if (dirty[0] & /*$shield*/ 32) charge_changes.shield = /*$shield*/ ctx[5];
    			if (dirty[0] & /*coa*/ 1) charge_changes.t = /*counterChange*/ ctx[15](/*coa*/ ctx[0].t1, /*charge*/ ctx[24].charge);
    			if (dirty[0] & /*type*/ 8) charge_changes.type = /*type*/ ctx[3];
    			charge.$set(charge_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(charge.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(charge.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(charge, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_8$1.name,
    		type: "if",
    		source: "(117:47) ",
    		ctx
    	});

    	return block;
    }

    // (115:8) {#if charge.divided === "division"}
    function create_if_block_7$2(ctx) {
    	let charge;
    	let current;

    	charge = new Charge({
    			props: {
    				coa: /*coa*/ ctx[0],
    				charge: /*charge*/ ctx[24],
    				i: /*i*/ ctx[23],
    				shield: /*$shield*/ ctx[5],
    				t: /*clr*/ ctx[6](/*charge*/ ctx[24].t),
    				type: /*type*/ ctx[3]
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(charge.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(charge, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const charge_changes = {};
    			if (dirty[0] & /*coa*/ 1) charge_changes.coa = /*coa*/ ctx[0];
    			if (dirty[0] & /*$shield*/ 32) charge_changes.shield = /*$shield*/ ctx[5];
    			if (dirty[0] & /*clr*/ 64) charge_changes.t = /*clr*/ ctx[6](/*charge*/ ctx[24].t);
    			if (dirty[0] & /*type*/ 8) charge_changes.type = /*type*/ ctx[3];
    			charge.$set(charge_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(charge.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(charge.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(charge, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_7$2.name,
    		type: "if",
    		source: "(115:8) {#if charge.divided === \\\"division\\\"}",
    		ctx
    	});

    	return block;
    }

    // (114:6) {#each charges as charge, i}
    function create_each_block_4$1(ctx) {
    	let current_block_type_index;
    	let if_block;
    	let if_block_anchor;
    	let current;
    	const if_block_creators = [create_if_block_7$2, create_if_block_8$1];
    	const if_blocks = [];

    	function select_block_type_4(ctx, dirty) {
    		if (/*charge*/ ctx[24].divided === "division") return 0;
    		if (/*charge*/ ctx[24].divided === "counter") return 1;
    		return -1;
    	}

    	if (~(current_block_type_index = select_block_type_4(ctx))) {
    		if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
    	}

    	const block = {
    		c: function create() {
    			if (if_block) if_block.c();
    			if_block_anchor = empty();
    		},
    		m: function mount(target, anchor) {
    			if (~current_block_type_index) {
    				if_blocks[current_block_type_index].m(target, anchor);
    			}

    			insert_dev(target, if_block_anchor, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			if (if_block) if_block.p(ctx, dirty);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(if_block);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(if_block);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (~current_block_type_index) {
    				if_blocks[current_block_type_index].d(detaching);
    			}

    			if (detaching) detach_dev(if_block_anchor);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_each_block_4$1.name,
    		type: "each",
    		source: "(114:6) {#each charges as charge, i}",
    		ctx
    	});

    	return block;
    }

    // (125:49) 
    function create_if_block_6$2(ctx) {
    	let ordinary;
    	let current;

    	ordinary = new Ordinary({
    			props: {
    				coa: /*coa*/ ctx[0],
    				ordinary: /*ordinary*/ ctx[21],
    				i: /*i*/ ctx[23],
    				shieldPath: /*shieldPath*/ ctx[9],
    				t: /*counterChange*/ ctx[15](/*coa*/ ctx[0].t1, /*ordinary*/ ctx[21].ordinary),
    				type: /*type*/ ctx[3]
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(ordinary.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(ordinary, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const ordinary_changes = {};
    			if (dirty[0] & /*coa*/ 1) ordinary_changes.coa = /*coa*/ ctx[0];
    			if (dirty[0] & /*shieldPath*/ 512) ordinary_changes.shieldPath = /*shieldPath*/ ctx[9];
    			if (dirty[0] & /*coa*/ 1) ordinary_changes.t = /*counterChange*/ ctx[15](/*coa*/ ctx[0].t1, /*ordinary*/ ctx[21].ordinary);
    			if (dirty[0] & /*type*/ 8) ordinary_changes.type = /*type*/ ctx[3];
    			ordinary.$set(ordinary_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(ordinary.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(ordinary.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(ordinary, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_6$2.name,
    		type: "if",
    		source: "(125:49) ",
    		ctx
    	});

    	return block;
    }

    // (123:8) {#if ordinary.divided === "division"}
    function create_if_block_5$2(ctx) {
    	let ordinary;
    	let current;

    	ordinary = new Ordinary({
    			props: {
    				coa: /*coa*/ ctx[0],
    				ordinary: /*ordinary*/ ctx[21],
    				i: /*i*/ ctx[23],
    				shieldPath: /*shieldPath*/ ctx[9],
    				t: /*clr*/ ctx[6](/*ordinary*/ ctx[21].t),
    				type: /*type*/ ctx[3]
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(ordinary.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(ordinary, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const ordinary_changes = {};
    			if (dirty[0] & /*coa*/ 1) ordinary_changes.coa = /*coa*/ ctx[0];
    			if (dirty[0] & /*shieldPath*/ 512) ordinary_changes.shieldPath = /*shieldPath*/ ctx[9];
    			if (dirty[0] & /*clr*/ 64) ordinary_changes.t = /*clr*/ ctx[6](/*ordinary*/ ctx[21].t);
    			if (dirty[0] & /*type*/ 8) ordinary_changes.type = /*type*/ ctx[3];
    			ordinary.$set(ordinary_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(ordinary.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(ordinary.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(ordinary, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_5$2.name,
    		type: "if",
    		source: "(123:8) {#if ordinary.divided === \\\"division\\\"}",
    		ctx
    	});

    	return block;
    }

    // (122:6) {#each ordinariesAboveCharges as ordinary, i}
    function create_each_block_3$1(ctx) {
    	let current_block_type_index;
    	let if_block;
    	let if_block_anchor;
    	let current;
    	const if_block_creators = [create_if_block_5$2, create_if_block_6$2];
    	const if_blocks = [];

    	function select_block_type_5(ctx, dirty) {
    		if (/*ordinary*/ ctx[21].divided === "division") return 0;
    		if (/*ordinary*/ ctx[21].divided === "counter") return 1;
    		return -1;
    	}

    	if (~(current_block_type_index = select_block_type_5(ctx))) {
    		if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
    	}

    	const block = {
    		c: function create() {
    			if (if_block) if_block.c();
    			if_block_anchor = empty();
    		},
    		m: function mount(target, anchor) {
    			if (~current_block_type_index) {
    				if_blocks[current_block_type_index].m(target, anchor);
    			}

    			insert_dev(target, if_block_anchor, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			if (if_block) if_block.p(ctx, dirty);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(if_block);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(if_block);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (~current_block_type_index) {
    				if_blocks[current_block_type_index].d(detaching);
    			}

    			if (detaching) detach_dev(if_block_anchor);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_each_block_3$1.name,
    		type: "each",
    		source: "(122:6) {#each ordinariesAboveCharges as ordinary, i}",
    		ctx
    	});

    	return block;
    }

    // (134:4) {#if !ordinary.divided}
    function create_if_block_3$2(ctx) {
    	let ordinary;
    	let current;

    	ordinary = new Ordinary({
    			props: {
    				coa: /*coa*/ ctx[0],
    				ordinary: /*ordinary*/ ctx[21],
    				i: /*i*/ ctx[23],
    				shieldPath: /*shieldPath*/ ctx[9],
    				t: /*clr*/ ctx[6](/*ordinary*/ ctx[21].t),
    				type: /*type*/ ctx[3]
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(ordinary.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(ordinary, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const ordinary_changes = {};
    			if (dirty[0] & /*coa*/ 1) ordinary_changes.coa = /*coa*/ ctx[0];
    			if (dirty[0] & /*shieldPath*/ 512) ordinary_changes.shieldPath = /*shieldPath*/ ctx[9];
    			if (dirty[0] & /*clr*/ 64) ordinary_changes.t = /*clr*/ ctx[6](/*ordinary*/ ctx[21].t);
    			if (dirty[0] & /*type*/ 8) ordinary_changes.type = /*type*/ ctx[3];
    			ordinary.$set(ordinary_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(ordinary.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(ordinary.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(ordinary, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_3$2.name,
    		type: "if",
    		source: "(134:4) {#if !ordinary.divided}",
    		ctx
    	});

    	return block;
    }

    // (133:2) {#each ordinariesRegular as ordinary, i}
    function create_each_block_2$1(ctx) {
    	let if_block_anchor;
    	let current;
    	let if_block = !/*ordinary*/ ctx[21].divided && create_if_block_3$2(ctx);

    	const block = {
    		c: function create() {
    			if (if_block) if_block.c();
    			if_block_anchor = empty();
    		},
    		m: function mount(target, anchor) {
    			if (if_block) if_block.m(target, anchor);
    			insert_dev(target, if_block_anchor, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			if (!/*ordinary*/ ctx[21].divided) if_block.p(ctx, dirty);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(if_block);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(if_block);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (if_block) if_block.d(detaching);
    			if (detaching) detach_dev(if_block_anchor);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_each_block_2$1.name,
    		type: "each",
    		source: "(133:2) {#each ordinariesRegular as ordinary, i}",
    		ctx
    	});

    	return block;
    }

    // (139:2) {#if diaperType === "overall"}
    function create_if_block_2$4(ctx) {
    	let rect;
    	let rect_fill_value;

    	const block = {
    		c: function create() {
    			rect = svg_element("rect");
    			attr_dev(rect, "class", "diaper");
    			attr_dev(rect, "x", "0");
    			attr_dev(rect, "y", "0");
    			attr_dev(rect, "width", "200");
    			attr_dev(rect, "height", "200");
    			attr_dev(rect, "fill", rect_fill_value = "url(#" + /*coaDiaper*/ ctx[4] + ")");
    			set_style(rect, "pointer-events", "none");
    			add_location(rect, file$q, 139, 4, 5194);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, rect, anchor);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty[0] & /*coaDiaper*/ 16 && rect_fill_value !== (rect_fill_value = "url(#" + /*coaDiaper*/ ctx[4] + ")")) {
    				attr_dev(rect, "fill", rect_fill_value);
    			}
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(rect);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_2$4.name,
    		type: "if",
    		source: "(139:2) {#if diaperType === \\\"overall\\\"}",
    		ctx
    	});

    	return block;
    }

    // (144:4) {#if !charge.divided || !division}
    function create_if_block_1$5(ctx) {
    	let charge;
    	let current;

    	charge = new Charge({
    			props: {
    				coa: /*coa*/ ctx[0],
    				charge: /*charge*/ ctx[24],
    				i: /*i*/ ctx[23],
    				shield: /*$shield*/ ctx[5],
    				t: /*clr*/ ctx[6](/*charge*/ ctx[24].t),
    				type: /*type*/ ctx[3]
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(charge.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(charge, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const charge_changes = {};
    			if (dirty[0] & /*coa*/ 1) charge_changes.coa = /*coa*/ ctx[0];
    			if (dirty[0] & /*$shield*/ 32) charge_changes.shield = /*$shield*/ ctx[5];
    			if (dirty[0] & /*clr*/ 64) charge_changes.t = /*clr*/ ctx[6](/*charge*/ ctx[24].t);
    			if (dirty[0] & /*type*/ 8) charge_changes.type = /*type*/ ctx[3];
    			charge.$set(charge_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(charge.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(charge.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(charge, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_1$5.name,
    		type: "if",
    		source: "(144:4) {#if !charge.divided || !division}",
    		ctx
    	});

    	return block;
    }

    // (143:2) {#each charges as charge, i}
    function create_each_block_1$4(ctx) {
    	let if_block_anchor;
    	let current;
    	let if_block = (!/*charge*/ ctx[24].divided || !/*division*/ ctx[11]) && create_if_block_1$5(ctx);

    	const block = {
    		c: function create() {
    			if (if_block) if_block.c();
    			if_block_anchor = empty();
    		},
    		m: function mount(target, anchor) {
    			if (if_block) if_block.m(target, anchor);
    			insert_dev(target, if_block_anchor, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			if (!/*charge*/ ctx[24].divided || !/*division*/ ctx[11]) if_block.p(ctx, dirty);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(if_block);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(if_block);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (if_block) if_block.d(detaching);
    			if (detaching) detach_dev(if_block_anchor);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_each_block_1$4.name,
    		type: "each",
    		source: "(143:2) {#each charges as charge, i}",
    		ctx
    	});

    	return block;
    }

    // (150:4) {#if !ordinary.divided}
    function create_if_block$a(ctx) {
    	let ordinary;
    	let current;

    	ordinary = new Ordinary({
    			props: {
    				coa: /*coa*/ ctx[0],
    				ordinary: /*ordinary*/ ctx[21],
    				i: /*i*/ ctx[23],
    				shieldPath: /*shieldPath*/ ctx[9],
    				t: /*clr*/ ctx[6](/*ordinary*/ ctx[21].t),
    				type: /*type*/ ctx[3]
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(ordinary.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(ordinary, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const ordinary_changes = {};
    			if (dirty[0] & /*coa*/ 1) ordinary_changes.coa = /*coa*/ ctx[0];
    			if (dirty[0] & /*shieldPath*/ 512) ordinary_changes.shieldPath = /*shieldPath*/ ctx[9];
    			if (dirty[0] & /*clr*/ 64) ordinary_changes.t = /*clr*/ ctx[6](/*ordinary*/ ctx[21].t);
    			if (dirty[0] & /*type*/ 8) ordinary_changes.type = /*type*/ ctx[3];
    			ordinary.$set(ordinary_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(ordinary.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(ordinary.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(ordinary, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block$a.name,
    		type: "if",
    		source: "(150:4) {#if !ordinary.divided}",
    		ctx
    	});

    	return block;
    }

    // (149:2) {#each ordinariesAboveCharges as ordinary, i}
    function create_each_block$c(ctx) {
    	let if_block_anchor;
    	let current;
    	let if_block = !/*ordinary*/ ctx[21].divided && create_if_block$a(ctx);

    	const block = {
    		c: function create() {
    			if (if_block) if_block.c();
    			if_block_anchor = empty();
    		},
    		m: function mount(target, anchor) {
    			if (if_block) if_block.m(target, anchor);
    			insert_dev(target, if_block_anchor, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			if (!/*ordinary*/ ctx[21].divided) if_block.p(ctx, dirty);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(if_block);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(if_block);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (if_block) if_block.d(detaching);
    			if (detaching) detach_dev(if_block_anchor);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_each_block$c.name,
    		type: "each",
    		source: "(149:2) {#each ordinariesAboveCharges as ordinary, i}",
    		ctx
    	});

    	return block;
    }

    function create_fragment$q(ctx) {
    	let defs;
    	let clipPath;
    	let path0;
    	let t0;
    	let g;
    	let rect;
    	let rect_fill_value;
    	let if_block1_anchor;
    	let each0_anchor;
    	let if_block2_anchor;
    	let each1_anchor;
    	let t1;
    	let path1;
    	let current;
    	let if_block0 = /*division*/ ctx[11] && /*division*/ ctx[11].division !== "no" && create_if_block_19$1(ctx);
    	let if_block1 = /*division*/ ctx[11] && /*division*/ ctx[11].division !== "no" && create_if_block_4$2(ctx);
    	let each_value_2 = /*ordinariesRegular*/ ctx[13];
    	validate_each_argument(each_value_2);
    	let each_blocks_2 = [];

    	for (let i = 0; i < each_value_2.length; i += 1) {
    		each_blocks_2[i] = create_each_block_2$1(get_each_context_2$1(ctx, each_value_2, i));
    	}

    	const out = i => transition_out(each_blocks_2[i], 1, 1, () => {
    		each_blocks_2[i] = null;
    	});

    	let if_block2 = /*diaperType*/ ctx[8] === "overall" && create_if_block_2$4(ctx);
    	let each_value_1 = /*charges*/ ctx[12];
    	validate_each_argument(each_value_1);
    	let each_blocks_1 = [];

    	for (let i = 0; i < each_value_1.length; i += 1) {
    		each_blocks_1[i] = create_each_block_1$4(get_each_context_1$4(ctx, each_value_1, i));
    	}

    	const out_1 = i => transition_out(each_blocks_1[i], 1, 1, () => {
    		each_blocks_1[i] = null;
    	});

    	let each_value = /*ordinariesAboveCharges*/ ctx[14];
    	validate_each_argument(each_value);
    	let each_blocks = [];

    	for (let i = 0; i < each_value.length; i += 1) {
    		each_blocks[i] = create_each_block$c(get_each_context$c(ctx, each_value, i));
    	}

    	const out_2 = i => transition_out(each_blocks[i], 1, 1, () => {
    		each_blocks[i] = null;
    	});

    	const block = {
    		c: function create() {
    			defs = svg_element("defs");
    			clipPath = svg_element("clipPath");
    			path0 = svg_element("path");
    			if (if_block0) if_block0.c();
    			t0 = space();
    			g = svg_element("g");
    			rect = svg_element("rect");
    			if (if_block1) if_block1.c();
    			if_block1_anchor = empty();

    			for (let i = 0; i < each_blocks_2.length; i += 1) {
    				each_blocks_2[i].c();
    			}

    			each0_anchor = empty();
    			if (if_block2) if_block2.c();
    			if_block2_anchor = empty();

    			for (let i = 0; i < each_blocks_1.length; i += 1) {
    				each_blocks_1[i].c();
    			}

    			each1_anchor = empty();

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].c();
    			}

    			t1 = space();
    			path1 = svg_element("path");
    			attr_dev(path0, "d", /*shieldPath*/ ctx[9]);
    			add_location(path0, file$q, 54, 4, 1911);
    			attr_dev(clipPath, "id", "shield_" + /*id*/ ctx[10]);
    			add_location(clipPath, file$q, 53, 2, 1879);
    			add_location(defs, file$q, 52, 0, 1870);
    			attr_dev(rect, "class", "field");
    			attr_dev(rect, "x", "0");
    			attr_dev(rect, "y", "0");
    			attr_dev(rect, "width", "200");
    			attr_dev(rect, "height", "200");
    			attr_dev(rect, "fill", rect_fill_value = /*clr*/ ctx[6](/*coa*/ ctx[0].t1));
    			add_location(rect, file$q, 65, 2, 2176);
    			attr_dev(g, "clip-path", "url(#shield_" + /*id*/ ctx[10] + ")");
    			add_location(g, file$q, 63, 0, 2123);
    			attr_dev(path1, "class", "grad");
    			attr_dev(path1, "d", /*shieldPath*/ ctx[9]);
    			attr_dev(path1, "fill", /*overFill*/ ctx[7]);
    			attr_dev(path1, "stroke", /*border*/ ctx[1]);
    			attr_dev(path1, "stroke-width", /*borderWidth*/ ctx[2]);
    			set_style(path1, "pointer-events", "none");
    			add_location(path1, file$q, 155, 0, 5669);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, defs, anchor);
    			append_dev(defs, clipPath);
    			append_dev(clipPath, path0);
    			if (if_block0) if_block0.m(defs, null);
    			insert_dev(target, t0, anchor);
    			insert_dev(target, g, anchor);
    			append_dev(g, rect);
    			if (if_block1) if_block1.m(g, null);
    			append_dev(g, if_block1_anchor);

    			for (let i = 0; i < each_blocks_2.length; i += 1) {
    				each_blocks_2[i].m(g, null);
    			}

    			append_dev(g, each0_anchor);
    			if (if_block2) if_block2.m(g, null);
    			append_dev(g, if_block2_anchor);

    			for (let i = 0; i < each_blocks_1.length; i += 1) {
    				each_blocks_1[i].m(g, null);
    			}

    			append_dev(g, each1_anchor);

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].m(g, null);
    			}

    			insert_dev(target, t1, anchor);
    			insert_dev(target, path1, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			if (!current || dirty[0] & /*shieldPath*/ 512) {
    				attr_dev(path0, "d", /*shieldPath*/ ctx[9]);
    			}

    			if (/*division*/ ctx[11] && /*division*/ ctx[11].division !== "no") if_block0.p(ctx, dirty);

    			if (!current || dirty[0] & /*clr, coa*/ 65 && rect_fill_value !== (rect_fill_value = /*clr*/ ctx[6](/*coa*/ ctx[0].t1))) {
    				attr_dev(rect, "fill", rect_fill_value);
    			}

    			if (/*division*/ ctx[11] && /*division*/ ctx[11].division !== "no") if_block1.p(ctx, dirty);

    			if (dirty[0] & /*coa, ordinariesRegular, shieldPath, clr, type*/ 8777) {
    				each_value_2 = /*ordinariesRegular*/ ctx[13];
    				validate_each_argument(each_value_2);
    				let i;

    				for (i = 0; i < each_value_2.length; i += 1) {
    					const child_ctx = get_each_context_2$1(ctx, each_value_2, i);

    					if (each_blocks_2[i]) {
    						each_blocks_2[i].p(child_ctx, dirty);
    						transition_in(each_blocks_2[i], 1);
    					} else {
    						each_blocks_2[i] = create_each_block_2$1(child_ctx);
    						each_blocks_2[i].c();
    						transition_in(each_blocks_2[i], 1);
    						each_blocks_2[i].m(g, each0_anchor);
    					}
    				}

    				group_outros();

    				for (i = each_value_2.length; i < each_blocks_2.length; i += 1) {
    					out(i);
    				}

    				check_outros();
    			}

    			if (/*diaperType*/ ctx[8] === "overall") {
    				if (if_block2) {
    					if_block2.p(ctx, dirty);
    				} else {
    					if_block2 = create_if_block_2$4(ctx);
    					if_block2.c();
    					if_block2.m(g, if_block2_anchor);
    				}
    			} else if (if_block2) {
    				if_block2.d(1);
    				if_block2 = null;
    			}

    			if (dirty[0] & /*coa, charges, $shield, clr, type, division*/ 6249) {
    				each_value_1 = /*charges*/ ctx[12];
    				validate_each_argument(each_value_1);
    				let i;

    				for (i = 0; i < each_value_1.length; i += 1) {
    					const child_ctx = get_each_context_1$4(ctx, each_value_1, i);

    					if (each_blocks_1[i]) {
    						each_blocks_1[i].p(child_ctx, dirty);
    						transition_in(each_blocks_1[i], 1);
    					} else {
    						each_blocks_1[i] = create_each_block_1$4(child_ctx);
    						each_blocks_1[i].c();
    						transition_in(each_blocks_1[i], 1);
    						each_blocks_1[i].m(g, each1_anchor);
    					}
    				}

    				group_outros();

    				for (i = each_value_1.length; i < each_blocks_1.length; i += 1) {
    					out_1(i);
    				}

    				check_outros();
    			}

    			if (dirty[0] & /*coa, ordinariesAboveCharges, shieldPath, clr, type*/ 16969) {
    				each_value = /*ordinariesAboveCharges*/ ctx[14];
    				validate_each_argument(each_value);
    				let i;

    				for (i = 0; i < each_value.length; i += 1) {
    					const child_ctx = get_each_context$c(ctx, each_value, i);

    					if (each_blocks[i]) {
    						each_blocks[i].p(child_ctx, dirty);
    						transition_in(each_blocks[i], 1);
    					} else {
    						each_blocks[i] = create_each_block$c(child_ctx);
    						each_blocks[i].c();
    						transition_in(each_blocks[i], 1);
    						each_blocks[i].m(g, null);
    					}
    				}

    				group_outros();

    				for (i = each_value.length; i < each_blocks.length; i += 1) {
    					out_2(i);
    				}

    				check_outros();
    			}

    			if (!current || dirty[0] & /*shieldPath*/ 512) {
    				attr_dev(path1, "d", /*shieldPath*/ ctx[9]);
    			}

    			if (!current || dirty[0] & /*overFill*/ 128) {
    				attr_dev(path1, "fill", /*overFill*/ ctx[7]);
    			}

    			if (!current || dirty[0] & /*border*/ 2) {
    				attr_dev(path1, "stroke", /*border*/ ctx[1]);
    			}

    			if (!current || dirty[0] & /*borderWidth*/ 4) {
    				attr_dev(path1, "stroke-width", /*borderWidth*/ ctx[2]);
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(if_block1);

    			for (let i = 0; i < each_value_2.length; i += 1) {
    				transition_in(each_blocks_2[i]);
    			}

    			for (let i = 0; i < each_value_1.length; i += 1) {
    				transition_in(each_blocks_1[i]);
    			}

    			for (let i = 0; i < each_value.length; i += 1) {
    				transition_in(each_blocks[i]);
    			}

    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(if_block1);
    			each_blocks_2 = each_blocks_2.filter(Boolean);

    			for (let i = 0; i < each_blocks_2.length; i += 1) {
    				transition_out(each_blocks_2[i]);
    			}

    			each_blocks_1 = each_blocks_1.filter(Boolean);

    			for (let i = 0; i < each_blocks_1.length; i += 1) {
    				transition_out(each_blocks_1[i]);
    			}

    			each_blocks = each_blocks.filter(Boolean);

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				transition_out(each_blocks[i]);
    			}

    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(defs);
    			if (if_block0) if_block0.d();
    			if (detaching) detach_dev(t0);
    			if (detaching) detach_dev(g);
    			if (if_block1) if_block1.d();
    			destroy_each(each_blocks_2, detaching);
    			if (if_block2) if_block2.d();
    			destroy_each(each_blocks_1, detaching);
    			destroy_each(each_blocks, detaching);
    			if (detaching) detach_dev(t1);
    			if (detaching) detach_dev(path1);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$q.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$q($$self, $$props, $$invalidate) {
    	let shieldPath;
    	let coaDiaper;
    	let diaperType;
    	let overFill;
    	let clr;
    	let $colors;
    	let $grad;
    	let $diaper;
    	let $shield;
    	validate_store(colors, 'colors');
    	component_subscribe($$self, colors, $$value => $$invalidate(16, $colors = $$value));
    	validate_store(grad, 'grad');
    	component_subscribe($$self, grad, $$value => $$invalidate(17, $grad = $$value));
    	validate_store(diaper, 'diaper');
    	component_subscribe($$self, diaper, $$value => $$invalidate(18, $diaper = $$value));
    	validate_store(shield, 'shield');
    	component_subscribe($$self, shield, $$value => $$invalidate(5, $shield = $$value));
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('Shield', slots, []);
    	let { coa } = $$props;
    	let { border } = $$props;
    	let { borderWidth } = $$props;
    	let { type } = $$props;
    	const id = coa.seed || Math.floor(Math.random() * 1e9);
    	const { division, ordinaries: ordinaries$1 = [], charges: charges$1 = [] } = coa;
    	const ordinariesRegular = ordinaries$1.filter(o => !o.above);
    	const ordinariesAboveCharges = ordinaries$1.filter(o => o.above);
    	charges$1.forEach(({ charge }) => addCharge(charge));

    	function getDieperType(coaDiaper) {
    		if (!coaDiaper || coaDiaper === "no") return null;
    		const f = !coa.t1.includes("-");
    		const d = !division?.t.includes("-");
    		if (f && d) return "overall";
    		if (f) return "field";
    		if (d) return "division";
    		return null;
    	}

    	// if charge doesn't support pattern, return basic tincture
    	function counterChange(t, charge) {
    		if (!(/-/).test(t)) return clr(t); // not a pattern
    		if (charges.patternable.includes(charge)) return clr(t); // patternable
    		if (ordinaries.patternable.includes(charge)) return clr(t); // patternable
    		return clr(t.split("-")[1]); // not patternable, return basic color
    	}

    	const writable_props = ['coa', 'border', 'borderWidth', 'type'];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<Shield> was created with unknown prop '${key}'`);
    	});

    	$$self.$$set = $$props => {
    		if ('coa' in $$props) $$invalidate(0, coa = $$props.coa);
    		if ('border' in $$props) $$invalidate(1, border = $$props.border);
    		if ('borderWidth' in $$props) $$invalidate(2, borderWidth = $$props.borderWidth);
    		if ('type' in $$props) $$invalidate(3, type = $$props.type);
    	};

    	$$self.$capture_state = () => ({
    		Ordinary,
    		Charge,
    		chargesData: charges,
    		ordinariesData: ordinaries,
    		shield,
    		colors,
    		grad,
    		diaper,
    		shieldPaths,
    		getTemplate,
    		addPattern,
    		addCharge,
    		coa,
    		border,
    		borderWidth,
    		type,
    		id,
    		division,
    		ordinaries: ordinaries$1,
    		charges: charges$1,
    		ordinariesRegular,
    		ordinariesAboveCharges,
    		getDieperType,
    		counterChange,
    		clr,
    		overFill,
    		coaDiaper,
    		diaperType,
    		shieldPath,
    		$colors,
    		$grad,
    		$diaper,
    		$shield
    	});

    	$$self.$inject_state = $$props => {
    		if ('coa' in $$props) $$invalidate(0, coa = $$props.coa);
    		if ('border' in $$props) $$invalidate(1, border = $$props.border);
    		if ('borderWidth' in $$props) $$invalidate(2, borderWidth = $$props.borderWidth);
    		if ('type' in $$props) $$invalidate(3, type = $$props.type);
    		if ('clr' in $$props) $$invalidate(6, clr = $$props.clr);
    		if ('overFill' in $$props) $$invalidate(7, overFill = $$props.overFill);
    		if ('coaDiaper' in $$props) $$invalidate(4, coaDiaper = $$props.coaDiaper);
    		if ('diaperType' in $$props) $$invalidate(8, diaperType = $$props.diaperType);
    		if ('shieldPath' in $$props) $$invalidate(9, shieldPath = $$props.shieldPath);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	$$self.$$.update = () => {
    		if ($$self.$$.dirty[0] & /*$shield*/ 32) {
    			$$invalidate(9, shieldPath = shieldPaths[$shield]);
    		}

    		if ($$self.$$.dirty[0] & /*type, coa, $diaper*/ 262153) {
    			$$invalidate(4, coaDiaper = type === "menuItem" ? null : coa.diaper || $diaper);
    		}

    		if ($$self.$$.dirty[0] & /*coaDiaper*/ 16) {
    			$$invalidate(8, diaperType = getDieperType(coaDiaper));
    		}

    		if ($$self.$$.dirty[0] & /*$grad*/ 131072) {
    			$$invalidate(7, overFill = !$grad || $grad === "no" ? "none" : `url(#${$grad})`);
    		}

    		if ($$self.$$.dirty[0] & /*$colors*/ 65536) {
    			// get color or link to pattern
    			$$invalidate(6, clr = tincture => {
    				if ($colors[tincture]) return $colors[tincture];
    				addPattern(tincture);
    				return "url(#" + tincture + ")";
    			});
    		}
    	};

    	return [
    		coa,
    		border,
    		borderWidth,
    		type,
    		coaDiaper,
    		$shield,
    		clr,
    		overFill,
    		diaperType,
    		shieldPath,
    		id,
    		division,
    		charges$1,
    		ordinariesRegular,
    		ordinariesAboveCharges,
    		counterChange,
    		$colors,
    		$grad,
    		$diaper
    	];
    }

    class Shield extends SvelteComponentDev {
    	constructor(options) {
    		super(options);

    		init(
    			this,
    			options,
    			instance$q,
    			create_fragment$q,
    			safe_not_equal,
    			{
    				coa: 0,
    				border: 1,
    				borderWidth: 2,
    				type: 3
    			},
    			null,
    			[-1, -1]
    		);

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Shield",
    			options,
    			id: create_fragment$q.name
    		});

    		const { ctx } = this.$$;
    		const props = options.props || {};

    		if (/*coa*/ ctx[0] === undefined && !('coa' in props)) {
    			console.warn("<Shield> was created without expected prop 'coa'");
    		}

    		if (/*border*/ ctx[1] === undefined && !('border' in props)) {
    			console.warn("<Shield> was created without expected prop 'border'");
    		}

    		if (/*borderWidth*/ ctx[2] === undefined && !('borderWidth' in props)) {
    			console.warn("<Shield> was created without expected prop 'borderWidth'");
    		}

    		if (/*type*/ ctx[3] === undefined && !('type' in props)) {
    			console.warn("<Shield> was created without expected prop 'type'");
    		}
    	}

    	get coa() {
    		throw new Error("<Shield>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set coa(value) {
    		throw new Error("<Shield>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get border() {
    		throw new Error("<Shield>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set border(value) {
    		throw new Error("<Shield>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get borderWidth() {
    		throw new Error("<Shield>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set borderWidth(value) {
    		throw new Error("<Shield>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get type() {
    		throw new Error("<Shield>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set type(value) {
    		throw new Error("<Shield>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /* src/components/object/COA.svelte generated by Svelte v3.44.2 */
    const file$p = "src/components/object/COA.svelte";

    // (27:2) {#if isEdit}
    function create_if_block$9(ctx) {
    	let grid;
    	let positions;
    	let current;
    	grid = new Grid({ $$inline: true });
    	positions = new Positions({ $$inline: true });

    	const block = {
    		c: function create() {
    			create_component(grid.$$.fragment);
    			create_component(positions.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(grid, target, anchor);
    			mount_component(positions, target, anchor);
    			current = true;
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(grid.$$.fragment, local);
    			transition_in(positions.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(grid.$$.fragment, local);
    			transition_out(positions.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(grid, detaching);
    			destroy_component(positions, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block$9.name,
    		type: "if",
    		source: "(27:2) {#if isEdit}",
    		ctx
    	});

    	return block;
    }

    function create_fragment$p(ctx) {
    	let svg;
    	let shield_1;
    	let svg_id_value;
    	let current;

    	shield_1 = new Shield({
    			props: {
    				coa: /*coa*/ ctx[0],
    				border: /*$border*/ ctx[5],
    				borderWidth: /*$borderWidth*/ ctx[6],
    				type: /*i*/ ctx[1]
    			},
    			$$inline: true
    		});

    	let if_block = /*isEdit*/ ctx[7] && create_if_block$9(ctx);

    	const block = {
    		c: function create() {
    			svg = svg_element("svg");
    			create_component(shield_1.$$.fragment);
    			if (if_block) if_block.c();
    			attr_dev(svg, "id", svg_id_value = "coa" + /*i*/ ctx[1]);
    			attr_dev(svg, "class", "coa");
    			attr_dev(svg, "width", /*width*/ ctx[2]);
    			attr_dev(svg, "height", /*height*/ ctx[3]);
    			attr_dev(svg, "viewBox", /*viewBox*/ ctx[4]);
    			attr_dev(svg, "xmlns", "http://www.w3.org/2000/svg");
    			attr_dev(svg, "xmlns:xlink", "http://www.w3.org/1999/xlink");
    			attr_dev(svg, "xmlns:dc", "http://purl.org/dc/elements/1.1/");
    			attr_dev(svg, "xmlns:rdf", "http://www.w3.org/1999/02/22-rdf-syntax-ns#");
    			add_location(svg, file$p, 14, 0, 443);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, svg, anchor);
    			mount_component(shield_1, svg, null);
    			if (if_block) if_block.m(svg, null);
    			current = true;
    		},
    		p: function update(ctx, [dirty]) {
    			const shield_1_changes = {};
    			if (dirty & /*coa*/ 1) shield_1_changes.coa = /*coa*/ ctx[0];
    			if (dirty & /*$border*/ 32) shield_1_changes.border = /*$border*/ ctx[5];
    			if (dirty & /*$borderWidth*/ 64) shield_1_changes.borderWidth = /*$borderWidth*/ ctx[6];
    			if (dirty & /*i*/ 2) shield_1_changes.type = /*i*/ ctx[1];
    			shield_1.$set(shield_1_changes);

    			if (!current || dirty & /*i*/ 2 && svg_id_value !== (svg_id_value = "coa" + /*i*/ ctx[1])) {
    				attr_dev(svg, "id", svg_id_value);
    			}

    			if (!current || dirty & /*width*/ 4) {
    				attr_dev(svg, "width", /*width*/ ctx[2]);
    			}

    			if (!current || dirty & /*height*/ 8) {
    				attr_dev(svg, "height", /*height*/ ctx[3]);
    			}

    			if (!current || dirty & /*viewBox*/ 16) {
    				attr_dev(svg, "viewBox", /*viewBox*/ ctx[4]);
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(shield_1.$$.fragment, local);
    			transition_in(if_block);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(shield_1.$$.fragment, local);
    			transition_out(if_block);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(svg);
    			destroy_component(shield_1);
    			if (if_block) if_block.d();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$p.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$p($$self, $$props, $$invalidate) {
    	let viewBox;
    	let $shield;
    	let $border;
    	let $borderWidth;
    	validate_store(shield, 'shield');
    	component_subscribe($$self, shield, $$value => $$invalidate(8, $shield = $$value));
    	validate_store(border, 'border');
    	component_subscribe($$self, border, $$value => $$invalidate(5, $border = $$value));
    	validate_store(borderWidth, 'borderWidth');
    	component_subscribe($$self, borderWidth, $$value => $$invalidate(6, $borderWidth = $$value));
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('COA', slots, []);
    	let { coa } = $$props;
    	let { i } = $$props;
    	let { width = "100%" } = $$props;
    	let { height = "100%" } = $$props;
    	const isEdit = i === "Edit";
    	const writable_props = ['coa', 'i', 'width', 'height'];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<COA> was created with unknown prop '${key}'`);
    	});

    	$$self.$$set = $$props => {
    		if ('coa' in $$props) $$invalidate(0, coa = $$props.coa);
    		if ('i' in $$props) $$invalidate(1, i = $$props.i);
    		if ('width' in $$props) $$invalidate(2, width = $$props.width);
    		if ('height' in $$props) $$invalidate(3, height = $$props.height);
    	};

    	$$self.$capture_state = () => ({
    		shieldBox,
    		border,
    		borderWidth,
    		shield,
    		Grid,
    		Positions,
    		Shield,
    		coa,
    		i,
    		width,
    		height,
    		isEdit,
    		viewBox,
    		$shield,
    		$border,
    		$borderWidth
    	});

    	$$self.$inject_state = $$props => {
    		if ('coa' in $$props) $$invalidate(0, coa = $$props.coa);
    		if ('i' in $$props) $$invalidate(1, i = $$props.i);
    		if ('width' in $$props) $$invalidate(2, width = $$props.width);
    		if ('height' in $$props) $$invalidate(3, height = $$props.height);
    		if ('viewBox' in $$props) $$invalidate(4, viewBox = $$props.viewBox);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	$$self.$$.update = () => {
    		if ($$self.$$.dirty & /*$shield*/ 256) {
    			$$invalidate(4, viewBox = shieldBox[$shield] || "0 0 200 200");
    		}
    	};

    	return [coa, i, width, height, viewBox, $border, $borderWidth, isEdit, $shield];
    }

    class COA extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$p, create_fragment$p, safe_not_equal, { coa: 0, i: 1, width: 2, height: 3 });

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "COA",
    			options,
    			id: create_fragment$p.name
    		});

    		const { ctx } = this.$$;
    		const props = options.props || {};

    		if (/*coa*/ ctx[0] === undefined && !('coa' in props)) {
    			console.warn("<COA> was created without expected prop 'coa'");
    		}

    		if (/*i*/ ctx[1] === undefined && !('i' in props)) {
    			console.warn("<COA> was created without expected prop 'i'");
    		}
    	}

    	get coa() {
    		throw new Error("<COA>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set coa(value) {
    		throw new Error("<COA>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get i() {
    		throw new Error("<COA>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set i(value) {
    		throw new Error("<COA>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get width() {
    		throw new Error("<COA>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set width(value) {
    		throw new Error("<COA>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get height() {
    		throw new Error("<COA>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set height(value) {
    		throw new Error("<COA>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /*///////////////////////////////////////////////////////////////////////////////////////////////////
    aleaPRNG 1.1
    /////////////////////////////////////////////////////////////////////////////////////////////////////
    https://github.com/macmcmeans/aleaPRNG/blob/master/aleaPRNG-1.1.js
    /////////////////////////////////////////////////////////////////////////////////////////////////////
    Original work copyright © 2010 Johannes Baagøe, under MIT license
    This is a derivative work copyright (c) 2017-2020, W. Mac" McMeans, under BSD license.
    Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:
    1. Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.
    2. Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.
    3. Neither the name of the copyright holder nor the names of its contributors may be used to endorse or promote products derived from this software without specific prior written permission.
    THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    ///////////////////////////////////////////////////////////////////////////////////////////////////*/
    function aleaPRNG() {
      return (function (args) {

        const version = "aleaPRNG 1.1.0";

        var s0,
          s1,
          s2,
          c,
          uinta = new Uint32Array(3),
          initialArgs,
          mashver = "";
        /* private: initializes generator with specified seed */
        function _initState(_internalSeed) {
          var mash = Mash();

          // internal state of generator
          s0 = mash(" ");
          s1 = mash(" ");
          s2 = mash(" ");

          c = 1;

          for (var i = 0; i < _internalSeed.length; i++) {
            s0 -= mash(_internalSeed[i]);
            if (s0 < 0) {
              s0 += 1;
            }

            s1 -= mash(_internalSeed[i]);
            if (s1 < 0) {
              s1 += 1;
            }

            s2 -= mash(_internalSeed[i]);
            if (s2 < 0) {
              s2 += 1;
            }
          }

          mashver = mash.version;

          mash = null;
        }

        /* private: dependent string hash function */
        function Mash() {
          var n = 4022871197; // 0xefc8249d

          var mash = function (data) {
            data = data.toString();

            // cache the length
            for (var i = 0, l = data.length; i < l; i++) {
              n += data.charCodeAt(i);

              var h = 0.02519603282416938 * n;

              n = h >>> 0;
              h -= n;
              h *= n;
              n = h >>> 0;
              h -= n;
              n += h * 4294967296; // 0x100000000      2^32
            }
            return (n >>> 0) * 2.3283064365386963e-10; // 2^-32
          };

          mash.version = "Mash 0.9";
          return mash;
        }

        /* private: check if number is integer */
        function _isInteger(_int) {
          return parseInt(_int, 10) === _int;
        }

        /* public: return a 32-bit fraction in the range [0, 1]
          This is the main function returned when aleaPRNG is instantiated
          */
        var random = function () {
          var t = 2091639 * s0 + c * 2.3283064365386963e-10; // 2^-32

          s0 = s1;
          s1 = s2;

          return (s2 = t - (c = t | 0));
        };

        /* public: return a 53-bit fraction in the range [0, 1] */
        random.fract53 = function () {
          return random() + ((random() * 0x200000) | 0) * 1.1102230246251565e-16; // 2^-53
        };

        /* public: return an unsigned integer in the range [0, 2^32] */
        random.int32 = function () {
          return random() * 0x100000000; // 2^32
        };

        /* public: advance the generator the specified amount of cycles */
        random.cycle = function (_run) {
          _run = typeof _run === "undefined" ? 1 : +_run;
          if (_run < 1) {
            _run = 1;
          }
          for (var i = 0; i < _run; i++) {
            random();
          }
        };

        /* public: return inclusive range */
        random.range = function () {
          var loBound, hiBound;

          if (arguments.length === 1) {
            loBound = 0;
            hiBound = arguments[0];
          } else {
            loBound = arguments[0];
            hiBound = arguments[1];
          }

          if (arguments[0] > arguments[1]) {
            loBound = arguments[1];
            hiBound = arguments[0];
          }

          // return integer
          if (_isInteger(loBound) && _isInteger(hiBound)) {
            return Math.floor(random() * (hiBound - loBound + 1)) + loBound;

            // return float
          } else {
            return random() * (hiBound - loBound) + loBound;
          }
        };

        /* public: initialize generator with the seed values used upon instantiation */
        random.restart = function () {
          _initState(initialArgs);
        };

        /* public: seeding function */
        random.seed = function () {
          _initState(Array.prototype.slice.call(arguments));
        };

        /* public: show the version of the RNG */
        random.version = function () {
          return version;
        };

        /* public: show the version of the RNG and the Mash string hasher */
        random.versions = function () {
          return version + ", " + mashver;
        };

        // when no seed is specified, create a random one from Windows Crypto (Monte Carlo application)
        if (args.length === 0) {
          window.crypto.getRandomValues(uinta);
          args = [uinta[0], uinta[1], uinta[2]];
        }

        // store the seed used when the RNG was instantiated, if any
        initialArgs = args;

        // initialize the RNG
        _initState(args);

        return random;
      })(Array.prototype.slice.call(arguments));
    }

    const createConfig = () => ({
      usedPattern: null,
      usedTinctures: [],
      tData: get_store_value(tinctures),
      divisioned: null,
      ordinary: null
    });

    // main generation routine
    const generate = function (providedSeed) {
      const seed = providedSeed || Math.floor(Math.random() * 1e9);
      Math.random = aleaPRNG(seed);

      const config = createConfig();
      const coa = {seed, t1: getTincture(config, "field")};

      let charge = P(config.usedPattern ? 0.5 : 0.93) ? true : false; // 80% for charge
      const linedOrdinary = (charge && P(0.3)) || P(0.5) ? rw(ordinaries.lined) : null;
      config.ordinary = (!charge && P(0.65)) || P(0.3) ? (linedOrdinary ? linedOrdinary : rw(ordinaries.straight)) : null; // 36% for ordinary

      const rareDivided = ["chief", "terrace", "chevron", "quarter", "flaunches"].includes(config.ordinary);
      config.divisioned = rareDivided ? P(0.03) : charge && config.ordinary ? P(0.03) : charge ? P(0.3) : config.ordinary ? P(0.7) : P(0.995); // 33% for division
      const division = config.divisioned ? rw(divisions.variants) : null;

      if (division) {
        const t = getTincture(config, "division", config.usedTinctures, P(0.98) ? coa.t1 : null);
        coa.division = {division, t};
        if (divisions[division]) coa.division.line = config.usedPattern || (config.ordinary && P(0.7)) ? "straight" : rw(divisions[division]);
      }

      if (config.ordinary) {
        const t = getTincture(config, "charge", config.usedTinctures, coa.t1);
        coa.ordinaries = [{ordinary: config.ordinary, t}];
        if (linedOrdinary) coa.ordinaries[0].line = config.usedPattern || (division && P(0.7)) ? "straight" : rw(lines);
        if (division && !charge && !config.usedPattern && P(0.5) && config.ordinary !== "bordure" && config.ordinary !== "orle") {
          if (P(0.8)) coa.ordinaries[0].divided = "counter";
          // 40%
          else if (P(0.6)) coa.ordinaries[0].divided = "field";
          // 6%
          else coa.ordinaries[0].divided = "division"; // 4%
        }
      }

      if (charge) {
        charge = selectCharge(config);

        let p = "e";
        let t = "gules";

        const ordinaryT = coa.ordinaries ? coa.ordinaries[0].t : null;
        if (positions.ordinariesOn[config.ordinary] && P(0.8)) {
          // place charge over config.ordinary (use tincture of field type)
          p = rw(positions.ordinariesOn[config.ordinary]);
          while (charges.natural[charge] === ordinaryT) charge = selectCharge(config);
          t = !config.usedPattern && P(0.3) ? coa.t1 : getTincture(config, "charge", [], ordinaryT);
        } else if (positions.ordinariesOff[config.ordinary] && P(0.95)) {
          // place charge out of config.ordinary (use tincture of ordinary type)
          p = rw(positions.ordinariesOff[config.ordinary]);
          while (charges.natural[charge] === coa.t1) charge = selectCharge(config);
          t = !config.usedPattern && P(0.3) ? ordinaryT : getTincture(config, "charge", config.usedTinctures, coa.t1);
        } else if (positions.divisions[division]) {
          // place charge in fields made by division
          p = rw(positions.divisions[division]);
          while (charges.natural[charge] === coa.t1) charge = selectCharge(config);
          t = getTincture(config, "charge", ordinaryT ? config.usedTinctures.concat(ordinaryT) : config.usedTinctures, coa.t1);
        } else if (positions[charge]) {
          // place charge-suitable position
          p = rw(positions[charge]);
          while (charges.natural[charge] === coa.t1) charge = selectCharge(config);
          t = getTincture(config, "charge", config.usedTinctures, coa.t1);
        } else {
          // place in standard position (use new tincture)
          p = config.usedPattern ? "e" : charges.conventional[charge] ? rw(positions.conventional) : rw(positions.complex);
          while (charges.natural[charge] === coa.t1) charge = selectCharge(config);
          t = getTincture(config, "charge", config.usedTinctures.concat(ordinaryT), coa.t1);
        }

        if (charges.natural[charge]) t = charges.natural[charge]; // natural tincture
        coa.charges = [{charge, t, p}];

        if (p === "ABCDEFGHIKL" && P(0.95)) {
          // add central charge if charge is in bordure
          coa.charges[0].charge = rw(charges.conventional);
          const charge = selectCharge(charges.single);
          const t = getTincture(config, "charge", config.usedTinctures, coa.t1);
          coa.charges.push({charge, t, p: "e"});
        } else if (P(0.8) && charge === "inescutcheon") {
          // add charge to inescutcheon
          const charge = selectCharge(charges.types);
          const t2 = getTincture(config, "charge", [], t);
          coa.charges.push({charge, t: t2, p, size: 0.5});
        } else if (division && !config.ordinary) {
          const allowCounter = !config.usedPattern && (!coa.line || coa.line === "straight");

          // dimidiation: second charge at division basic positons
          if (P(0.3) && ["perPale", "perFess"].includes(division) && coa.line === "straight") {
            coa.charges[0].divided = "field";
            if (P(0.95)) {
              const p2 = p === "e" || P(0.5) ? "e" : rw(positions.divisions[division]);
              const charge = selectCharge(charges.single);
              const t = getTincture(config, "charge", config.usedTinctures, coa.division.t);
              coa.charges.push({charge, t, p: p2, divided: "division"});
            }
          } else if (allowCounter && P(0.4)) coa.charges[0].divided = "counter";
          // counterchanged, 40%
          else if (["perPale", "perFess", "perBend", "perBendSinister"].includes(division) && P(0.8)) {
            // place 2 charges in division standard positions
            const [p1, p2] = division === "perPale" ? ["p", "q"] : division === "perFess" ? ["k", "n"] : division === "perBend" ? ["l", "m"] : ["j", "o"]; // perBendSinister
            coa.charges[0].p = p1;

            const charge = selectCharge(charges.single);
            const t = getTincture(config, "charge", config.usedTinctures, coa.division.t);
            coa.charges.push({charge, t, p: p2});
          } else if (["perCross", "perSaltire"].includes(division) && P(0.5)) {
            // place 4 charges in division standard positions
            const [p1, p2, p3, p4] = division === "perCross" ? ["j", "l", "m", "o"] : ["b", "d", "f", "h"];
            coa.charges[0].p = p1;

            const c2 = selectCharge(charges.single);
            const t2 = getTincture(config, "charge", [], coa.division.t);

            const c3 = selectCharge(charges.single);
            const t3 = getTincture(config, "charge", [], coa.division.t);

            const c4 = selectCharge(charges.single);
            const t4 = getTincture(config, "charge", [], coa.t1);
            coa.charges.push({charge: c2, t: t2, p: p2}, {charge: c3, t: t3, p: p3}, {charge: c4, t: t4, p: p4});
          } else if (allowCounter && p.length > 1) coa.charges[0].divided = "counter"; // counterchanged, 40%
        }

        coa.charges.forEach(c => defineChargeAttributes(config, division, c));
      }

      return coa;
    };

    const getSize = (p, o = null, d = null) => {
      if (p === "e" && (o === "bordure" || o === "orle")) return 1.1;
      if (p === "e") return 1.5;
      if (p === "jln" || p === "jlh") return 0.7;
      if (p === "abcpqh" || p === "ez" || p === "be") return 0.5;
      if (["a", "b", "c", "d", "f", "g", "h", "i", "bh", "df"].includes(p)) return 0.5;
      if (["j", "l", "m", "o", "jlmo"].includes(p) && d === "perCross") return 0.6;
      if (p.length > 10) return 0.18; // >10 (bordure)
      if (p.length > 7) return 0.3; // 8, 9, 10
      if (p.length > 4) return 0.4; // 5, 6, 7
      if (p.length > 2) return 0.5; // 3, 4
      return 0.7; // 1, 2
    };

    function defineChargeAttributes(config, division, c) {
      // define size
      c.size = (c.size || 1) * getSize(c.p, config.ordinary, division);

      // clean-up position
      c.p = [...new Set(c.p)].join("");

      // define orientation
      if (P(0.02) && charges.sinister.includes(c.charge)) c.sinister = 1;
      if (P(0.02) && charges.reversed.includes(c.charge)) c.reversed = 1;
    }

    function selectCharge(config, set) {
      const type = set ? rw(set) : config.ordinary || config.divisioned ? rw(charges.types) : rw(charges.single);
      return type === "inescutcheon" ? "inescutcheon" : rw(charges[type]);
    }

    function replaceTincture(config, tincture) {
      const type = getType(config, tincture);
      const typeTinctures = config.tData[type];

      const candidateTinctures = {...typeTinctures};
      delete candidateTinctures[tincture];

      const newTincture = rw(candidateTinctures, false);
      if (!newTincture) {
        console.warn(`Type ${type} has only one valid tincture. Cannot follow the Rule of Tincture`);
        return tincture;
      }

      return rw(candidateTinctures, false);
    }

    function getType(config, t) {
      const tincture = getBaseTincture(t);
      if (Object.keys(config.tData.metals).includes(tincture)) return "metals";
      if (Object.keys(config.tData.colours).includes(tincture)) return "colours";
      if (Object.keys(config.tData.stains).includes(tincture)) return "stains";
      throw new Error("Unknown tincture type", t);
    }

    function definePattern(config, patternName, element) {
      let t1 = null;
      let t2 = null;

      // apply standard tinctures
      if (P(0.5) && (patternName.includes("air") || patternName.includes("otent"))) {
        t1 = "argent";
        t2 = "azure";
      } else if (patternName === "ermine") {
        if (P(0.7)) {
          t1 = "argent";
          t2 = "sable";
        } else if (P(0.3)) {
          t1 = "sable";
          t2 = "argent";
        } else if (P(0.1)) {
          t1 = "or";
          t2 = "sable";
        } else if (P(0.1)) {
          t1 = "sable";
          t2 = "or";
        } else if (P(0.1)) {
          t1 = "gules";
          t2 = "argent";
        }
      } else if (patternName.includes("pappellony") || patternName === "scaly") {
        if (P(0.2)) {
          t1 = "gules";
          t2 = "or";
        } else if (P(0.2)) {
          t1 = "sable";
          t2 = "argent";
        } else if (P(0.2)) {
          t1 = "argent";
          t2 = "sable";
        } else if (P(0.2)) {
          t1 = "azure";
          t2 = "argent";
        }
      } else if (P(0.2) && patternName === "plumetty") {
        t1 = "gules";
        t2 = "or";
      } else if (patternName === "masoned") {
        if (P(0.3)) {
          t1 = "gules";
          t2 = "argent";
        } else if (P(0.3)) {
          t1 = "argent";
          t2 = "sable";
        } else if (P(0.1)) {
          t1 = "or";
          t2 = "sable";
        }
      } else if (patternName === "fretty" || patternName === "grillage" || patternName === "chainy") {
        if (P(0.35)) {
          t1 = "argent";
          t2 = "gules";
        } else if (P(0.1)) {
          t1 = "sable";
          t2 = "or";
        } else if (P(0.2)) {
          t1 = "gules";
          t2 = "argent";
        }
      } else if (patternName === "honeycombed") {
        if (P(0.4)) {
          t1 = "sable";
          t2 = "or";
        } else if (P(0.3)) {
          t1 = "or";
          t2 = "sable";
        }
      } else if (patternName === "semy") patternName += "_of_" + selectCharge(charges.semy);

      if (!t1 || !t2) {
        const startWithMetal = P(0.7);
        t1 = startWithMetal ? rw(config.tData.metals) : rw(config.tData.colours);
        t2 = startWithMetal ? rw(config.tData.colours) : rw(config.tData.metals);
      }

      // division should not be the same tincture as base field
      if (element === "division") {
        if (config.usedTinctures.includes(t1)) t1 = replaceTincture(config, t1);
        if (config.usedTinctures.includes(t2)) t2 = replaceTincture(config, t2);
      }

      config.usedTinctures.push(t1, t2);
      const size = rw(patternSize);
      const sizeString = size === "standard" ? "" : "-" + size;

      return `${patternName}-${t1}-${t2}${sizeString}`;
    }

    function getBaseTincture(tincture) {
      return tincture.includes("-") ? tincture.split("-")[1] : tincture;
    }

    function excludeTinctures(typeTinctures, usedTinctures) {
      const unusedTinctures = {...typeTinctures};
      usedTinctures.forEach(usedTincture => {
        delete unusedTinctures[usedTincture];
      });

      const isAnyUnused = Object.keys(unusedTinctures).length && Object.values(unusedTinctures).reduce((a, b) => a + b, 0);
      return isAnyUnused ? unusedTinctures : typeTinctures;
    }

    // select tincture: element type (field, division, charge), used field tinctures, field type to follow RoT
    function getTincture(config, element, fields = [], RoT) {
      let type = rw(config.tData[element]); // random type

      if (type === "patterns") {
        const patternName = rw(config.tData[type]);
        config.usedPattern = patternName;
        const tincture = definePattern(config, patternName, element);
        return tincture;
      }

      // follow Rule of Tinctures: metal should not be put on metal, nor colour on colour
      if (RoT) {
        const underlyingTincture = getBaseTincture(RoT);
        const underlyingType = getType(config, underlyingTincture);
        type = underlyingType === "metals" ? "colours" : "metals";
      }

      const typeTinctures = config.tData[type];
      const candidateTinctures = fields.length ? excludeTinctures(typeTinctures, fields) : typeTinctures;
      let tincture = rw(candidateTinctures, false);

      if (element !== "charge") config.usedTinctures.push(tincture); // add field tincture

      return tincture;
    }

    /* src/components/navigation/Viewer.svelte generated by Svelte v3.44.2 */
    const file$o = "src/components/navigation/Viewer.svelte";

    function create_fragment$o(ctx) {
    	let div;
    	let coa_1;
    	let current;
    	let mounted;
    	let dispose;

    	coa_1 = new COA({
    			props: {
    				coa: /*coa*/ ctx[1],
    				i: "View",
    				width: /*coaSize*/ ctx[0],
    				height: /*coaSize*/ ctx[0]
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			div = element("div");
    			create_component(coa_1.$$.fragment);
    			attr_dev(div, "id", "viewer");
    			add_location(div, file$o, 16, 0, 457);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    			mount_component(coa_1, div, null);
    			current = true;

    			if (!mounted) {
    				dispose = listen_dev(div, "click", edit, false, false, false);
    				mounted = true;
    			}
    		},
    		p: function update(ctx, [dirty]) {
    			const coa_1_changes = {};
    			if (dirty & /*coaSize*/ 1) coa_1_changes.width = /*coaSize*/ ctx[0];
    			if (dirty & /*coaSize*/ 1) coa_1_changes.height = /*coaSize*/ ctx[0];
    			coa_1.$set(coa_1_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(coa_1.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(coa_1.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    			destroy_component(coa_1);
    			mounted = false;
    			dispose();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$o.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function edit() {
    	if ((/noedit/i).test(window.location.search)) return;
    	const URL = window.location.href.replace("view=1", "view=0");
    	const win = window.open(URL, "_blank");
    	win.focus();
    }

    function instance$o($$self, $$props, $$invalidate) {
    	let $history;
    	validate_store(history, 'history');
    	component_subscribe($$self, history, $$value => $$invalidate(4, $history = $$value));
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('Viewer', slots, []);
    	let { c, seed, coaSize } = $$props;
    	let coa = $history[c] || generate(seed || undefined); // on load
    	const writable_props = ['c', 'seed', 'coaSize'];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<Viewer> was created with unknown prop '${key}'`);
    	});

    	$$self.$$set = $$props => {
    		if ('c' in $$props) $$invalidate(2, c = $$props.c);
    		if ('seed' in $$props) $$invalidate(3, seed = $$props.seed);
    		if ('coaSize' in $$props) $$invalidate(0, coaSize = $$props.coaSize);
    	};

    	$$self.$capture_state = () => ({
    		COA,
    		history,
    		generate,
    		c,
    		seed,
    		coaSize,
    		coa,
    		edit,
    		$history
    	});

    	$$self.$inject_state = $$props => {
    		if ('c' in $$props) $$invalidate(2, c = $$props.c);
    		if ('seed' in $$props) $$invalidate(3, seed = $$props.seed);
    		if ('coaSize' in $$props) $$invalidate(0, coaSize = $$props.coaSize);
    		if ('coa' in $$props) $$invalidate(1, coa = $$props.coa);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [coaSize, coa, c, seed];
    }

    class Viewer extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$o, create_fragment$o, safe_not_equal, { c: 2, seed: 3, coaSize: 0 });

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Viewer",
    			options,
    			id: create_fragment$o.name
    		});

    		const { ctx } = this.$$;
    		const props = options.props || {};

    		if (/*c*/ ctx[2] === undefined && !('c' in props)) {
    			console.warn("<Viewer> was created without expected prop 'c'");
    		}

    		if (/*seed*/ ctx[3] === undefined && !('seed' in props)) {
    			console.warn("<Viewer> was created without expected prop 'seed'");
    		}

    		if (/*coaSize*/ ctx[0] === undefined && !('coaSize' in props)) {
    			console.warn("<Viewer> was created without expected prop 'coaSize'");
    		}
    	}

    	get c() {
    		throw new Error("<Viewer>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set c(value) {
    		throw new Error("<Viewer>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get seed() {
    		throw new Error("<Viewer>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set seed(value) {
    		throw new Error("<Viewer>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get coaSize() {
    		throw new Error("<Viewer>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set coaSize(value) {
    		throw new Error("<Viewer>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /* src/components/editor/Switch.svelte generated by Svelte v3.44.2 */

    const file$n = "src/components/editor/Switch.svelte";

    function create_fragment$n(ctx) {
    	let div;
    	let input;
    	let t0;
    	let label;
    	let t1;
    	let mounted;
    	let dispose;

    	const block = {
    		c: function create() {
    			div = element("div");
    			input = element("input");
    			t0 = space();
    			label = element("label");
    			t1 = text("Switch");
    			attr_dev(input, "id", /*id*/ ctx[1]);
    			attr_dev(input, "class", "switch-input svelte-1cmzv6a");
    			attr_dev(input, "type", "checkbox");
    			add_location(input, file$n, 6, 2, 130);
    			attr_dev(label, "for", /*id*/ ctx[1]);
    			attr_dev(label, "class", "switch-label svelte-1cmzv6a");
    			add_location(label, file$n, 7, 2, 197);
    			attr_dev(div, "class", "switch svelte-1cmzv6a");
    			add_location(div, file$n, 5, 0, 107);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    			append_dev(div, input);
    			input.checked = /*checked*/ ctx[0];
    			append_dev(div, t0);
    			append_dev(div, label);
    			append_dev(label, t1);

    			if (!mounted) {
    				dispose = listen_dev(input, "change", /*input_change_handler*/ ctx[2]);
    				mounted = true;
    			}
    		},
    		p: function update(ctx, [dirty]) {
    			if (dirty & /*checked*/ 1) {
    				input.checked = /*checked*/ ctx[0];
    			}
    		},
    		i: noop,
    		o: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    			mounted = false;
    			dispose();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$n.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$n($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('Switch', slots, []);
    	let { checked = false } = $$props;
    	const id = "switch" + Math.floor(1e6 * Math.random());
    	const writable_props = ['checked'];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<Switch> was created with unknown prop '${key}'`);
    	});

    	function input_change_handler() {
    		checked = this.checked;
    		$$invalidate(0, checked);
    	}

    	$$self.$$set = $$props => {
    		if ('checked' in $$props) $$invalidate(0, checked = $$props.checked);
    	};

    	$$self.$capture_state = () => ({ checked, id });

    	$$self.$inject_state = $$props => {
    		if ('checked' in $$props) $$invalidate(0, checked = $$props.checked);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [checked, id, input_change_handler];
    }

    class Switch extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$n, create_fragment$n, safe_not_equal, { checked: 0 });

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Switch",
    			options,
    			id: create_fragment$n.name
    		});
    	}

    	get checked() {
    		throw new Error("<Switch>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set checked(value) {
    		throw new Error("<Switch>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /* src/components/editor/EditorAbove.svelte generated by Svelte v3.44.2 */
    const file$m = "src/components/editor/EditorAbove.svelte";

    function create_fragment$m(ctx) {
    	let span1;
    	let span0;
    	let t0_value = /*$t*/ ctx[1]("editor.aboveCharges") + "";
    	let t0;
    	let t1;
    	let t2;
    	let switch_1;
    	let updating_checked;
    	let span1_data_tooltip_value;
    	let current;
    	let mounted;
    	let dispose;

    	function switch_1_checked_binding(value) {
    		/*switch_1_checked_binding*/ ctx[2](value);
    	}

    	let switch_1_props = {};

    	if (/*above*/ ctx[0] !== void 0) {
    		switch_1_props.checked = /*above*/ ctx[0];
    	}

    	switch_1 = new Switch({ props: switch_1_props, $$inline: true });
    	binding_callbacks.push(() => bind(switch_1, 'checked', switch_1_checked_binding));

    	const block = {
    		c: function create() {
    			span1 = element("span");
    			span0 = element("span");
    			t0 = text(t0_value);
    			t1 = text(":");
    			t2 = space();
    			create_component(switch_1.$$.fragment);
    			set_style(span0, "margin-left", "1em");
    			add_location(span0, file$m, 8, 2, 237);
    			attr_dev(span1, "data-tooltip", span1_data_tooltip_value = /*$t*/ ctx[1]("tooltip.aboveCharges"));
    			add_location(span1, file$m, 7, 0, 174);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, span1, anchor);
    			append_dev(span1, span0);
    			append_dev(span0, t0);
    			append_dev(span0, t1);
    			append_dev(span1, t2);
    			mount_component(switch_1, span1, null);
    			current = true;

    			if (!mounted) {
    				dispose = action_destroyer(tooltip.call(null, span1));
    				mounted = true;
    			}
    		},
    		p: function update(ctx, [dirty]) {
    			if ((!current || dirty & /*$t*/ 2) && t0_value !== (t0_value = /*$t*/ ctx[1]("editor.aboveCharges") + "")) set_data_dev(t0, t0_value);
    			const switch_1_changes = {};

    			if (!updating_checked && dirty & /*above*/ 1) {
    				updating_checked = true;
    				switch_1_changes.checked = /*above*/ ctx[0];
    				add_flush_callback(() => updating_checked = false);
    			}

    			switch_1.$set(switch_1_changes);

    			if (!current || dirty & /*$t*/ 2 && span1_data_tooltip_value !== (span1_data_tooltip_value = /*$t*/ ctx[1]("tooltip.aboveCharges"))) {
    				attr_dev(span1, "data-tooltip", span1_data_tooltip_value);
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(switch_1.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(switch_1.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(span1);
    			destroy_component(switch_1);
    			mounted = false;
    			dispose();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$m.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$m($$self, $$props, $$invalidate) {
    	let $t;
    	validate_store(X, 't');
    	component_subscribe($$self, X, $$value => $$invalidate(1, $t = $$value));
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('EditorAbove', slots, []);
    	let { above } = $$props;
    	const writable_props = ['above'];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<EditorAbove> was created with unknown prop '${key}'`);
    	});

    	function switch_1_checked_binding(value) {
    		above = value;
    		$$invalidate(0, above);
    	}

    	$$self.$$set = $$props => {
    		if ('above' in $$props) $$invalidate(0, above = $$props.above);
    	};

    	$$self.$capture_state = () => ({ t: X, Switch, tooltip, above, $t });

    	$$self.$inject_state = $$props => {
    		if ('above' in $$props) $$invalidate(0, above = $$props.above);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [above, $t, switch_1_checked_binding];
    }

    class EditorAbove extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$m, create_fragment$m, safe_not_equal, { above: 0 });

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "EditorAbove",
    			options,
    			id: create_fragment$m.name
    		});

    		const { ctx } = this.$$;
    		const props = options.props || {};

    		if (/*above*/ ctx[0] === undefined && !('above' in props)) {
    			console.warn("<EditorAbove> was created without expected prop 'above'");
    		}
    	}

    	get above() {
    		throw new Error("<EditorAbove>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set above(value) {
    		throw new Error("<EditorAbove>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /* src/components/editor/EditorItem.svelte generated by Svelte v3.44.2 */
    const file$l = "src/components/editor/EditorItem.svelte";

    function create_fragment$l(ctx) {
    	let svg;
    	let shield;
    	let current;
    	let mounted;
    	let dispose;

    	shield = new Shield({
    			props: {
    				coa: /*coa*/ ctx[0],
    				border: "#333",
    				borderWidth: "2",
    				type: "menuItem"
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			svg = svg_element("svg");
    			create_component(shield.$$.fragment);
    			attr_dev(svg, "class", "menuItem");
    			attr_dev(svg, "width", "100%");
    			attr_dev(svg, "height", "100%");
    			attr_dev(svg, "viewBox", "0 0 200 200");
    			attr_dev(svg, "data-tooltip", /*tip*/ ctx[1]);
    			add_location(svg, file$l, 7, 0, 165);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, svg, anchor);
    			mount_component(shield, svg, null);
    			current = true;

    			if (!mounted) {
    				dispose = action_destroyer(tooltip.call(null, svg));
    				mounted = true;
    			}
    		},
    		p: function update(ctx, [dirty]) {
    			const shield_changes = {};
    			if (dirty & /*coa*/ 1) shield_changes.coa = /*coa*/ ctx[0];
    			shield.$set(shield_changes);

    			if (!current || dirty & /*tip*/ 2) {
    				attr_dev(svg, "data-tooltip", /*tip*/ ctx[1]);
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(shield.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(shield.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(svg);
    			destroy_component(shield);
    			mounted = false;
    			dispose();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$l.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$l($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('EditorItem', slots, []);
    	let { coa } = $$props;
    	let { tip } = $$props;
    	const writable_props = ['coa', 'tip'];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<EditorItem> was created with unknown prop '${key}'`);
    	});

    	$$self.$$set = $$props => {
    		if ('coa' in $$props) $$invalidate(0, coa = $$props.coa);
    		if ('tip' in $$props) $$invalidate(1, tip = $$props.tip);
    	};

    	$$self.$capture_state = () => ({ Shield, tooltip, coa, tip });

    	$$self.$inject_state = $$props => {
    		if ('coa' in $$props) $$invalidate(0, coa = $$props.coa);
    		if ('tip' in $$props) $$invalidate(1, tip = $$props.tip);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [coa, tip];
    }

    class EditorItem extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$l, create_fragment$l, safe_not_equal, { coa: 0, tip: 1 });

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "EditorItem",
    			options,
    			id: create_fragment$l.name
    		});

    		const { ctx } = this.$$;
    		const props = options.props || {};

    		if (/*coa*/ ctx[0] === undefined && !('coa' in props)) {
    			console.warn("<EditorItem> was created without expected prop 'coa'");
    		}

    		if (/*tip*/ ctx[1] === undefined && !('tip' in props)) {
    			console.warn("<EditorItem> was created without expected prop 'tip'");
    		}
    	}

    	get coa() {
    		throw new Error("<EditorItem>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set coa(value) {
    		throw new Error("<EditorItem>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get tip() {
    		throw new Error("<EditorItem>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set tip(value) {
    		throw new Error("<EditorItem>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /* src/components/editor/EditorCharge.svelte generated by Svelte v3.44.2 */

    const { Object: Object_1$9 } = globals;
    const file$k = "src/components/editor/EditorCharge.svelte";

    function get_each_context$b(ctx, list, i) {
    	const child_ctx = ctx.slice();
    	child_ctx[28] = list[i];
    	return child_ctx;
    }

    function get_each_context_1$3(ctx, list, i) {
    	const child_ctx = ctx.slice();
    	child_ctx[0] = list[i];
    	return child_ctx;
    }

    // (66:2) {#each categories as category}
    function create_each_block_1$3(ctx) {
    	let option;
    	let t_1_value = /*$t*/ ctx[5](`categories.${/*category*/ ctx[0]}`) + "";
    	let t_1;

    	const block = {
    		c: function create() {
    			option = element("option");
    			t_1 = text(t_1_value);
    			option.__value = /*category*/ ctx[0];
    			option.value = option.__value;
    			add_location(option, file$k, 66, 4, 2296);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, option, anchor);
    			append_dev(option, t_1);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty[0] & /*$t*/ 32 && t_1_value !== (t_1_value = /*$t*/ ctx[5](`categories.${/*category*/ ctx[0]}`) + "")) set_data_dev(t_1, t_1_value);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(option);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_each_block_1$3.name,
    		type: "each",
    		source: "(66:2) {#each categories as category}",
    		ctx
    	});

    	return block;
    }

    // (75:2) {#each chargesData as coa (coa)}
    function create_each_block$b(key_1, ctx) {
    	let div;
    	let editoritem;
    	let t_1;
    	let current;
    	let mounted;
    	let dispose;

    	editoritem = new EditorItem({
    			props: {
    				coa: /*coa*/ ctx[28],
    				tip: /*getTip*/ ctx[8](/*coa*/ ctx[28].charge)
    			},
    			$$inline: true
    		});

    	const block = {
    		key: key_1,
    		first: null,
    		c: function create() {
    			div = element("div");
    			create_component(editoritem.$$.fragment);
    			t_1 = space();
    			attr_dev(div, "class", "item");
    			toggle_class(div, "selected", /*charge*/ ctx[1] === /*coa*/ ctx[28].charge);
    			add_location(div, file$k, 75, 4, 2553);
    			this.first = div;
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    			mount_component(editoritem, div, null);
    			append_dev(div, t_1);
    			current = true;

    			if (!mounted) {
    				dispose = listen_dev(
    					div,
    					"click",
    					function () {
    						if (is_function(/*handleChange*/ ctx[9](/*coa*/ ctx[28].charge))) /*handleChange*/ ctx[9](/*coa*/ ctx[28].charge).apply(this, arguments);
    					},
    					false,
    					false,
    					false
    				);

    				mounted = true;
    			}
    		},
    		p: function update(new_ctx, dirty) {
    			ctx = new_ctx;
    			const editoritem_changes = {};
    			if (dirty[0] & /*chargesData*/ 16) editoritem_changes.coa = /*coa*/ ctx[28];
    			if (dirty[0] & /*chargesData*/ 16) editoritem_changes.tip = /*getTip*/ ctx[8](/*coa*/ ctx[28].charge);
    			editoritem.$set(editoritem_changes);

    			if (dirty[0] & /*charge, chargesData*/ 18) {
    				toggle_class(div, "selected", /*charge*/ ctx[1] === /*coa*/ ctx[28].charge);
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(editoritem.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(editoritem.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    			destroy_component(editoritem);
    			mounted = false;
    			dispose();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_each_block$b.name,
    		type: "each",
    		source: "(75:2) {#each chargesData as coa (coa)}",
    		ctx
    	});

    	return block;
    }

    function create_fragment$k(ctx) {
    	let span0;
    	let t0_value = /*$t*/ ctx[5]("editor.category") + "";
    	let t0;
    	let t1_1;
    	let t2_1;
    	let select;
    	let t3;
    	let span1;
    	let t4_value = /*$t*/ ctx[5]("editor.search") + "";
    	let t4;
    	let t5;
    	let t6;
    	let input;
    	let t7;
    	let div;
    	let each_blocks = [];
    	let each1_lookup = new Map();
    	let current;
    	let mounted;
    	let dispose;
    	let each_value_1 = /*categories*/ ctx[6];
    	validate_each_argument(each_value_1);
    	let each_blocks_1 = [];

    	for (let i = 0; i < each_value_1.length; i += 1) {
    		each_blocks_1[i] = create_each_block_1$3(get_each_context_1$3(ctx, each_value_1, i));
    	}

    	let each_value = /*chargesData*/ ctx[4];
    	validate_each_argument(each_value);
    	const get_key = ctx => /*coa*/ ctx[28];
    	validate_each_keys(ctx, each_value, get_each_context$b, get_key);

    	for (let i = 0; i < each_value.length; i += 1) {
    		let child_ctx = get_each_context$b(ctx, each_value, i);
    		let key = get_key(child_ctx);
    		each1_lookup.set(key, each_blocks[i] = create_each_block$b(key, child_ctx));
    	}

    	const block = {
    		c: function create() {
    			span0 = element("span");
    			t0 = text(t0_value);
    			t1_1 = text(":");
    			t2_1 = space();
    			select = element("select");

    			for (let i = 0; i < each_blocks_1.length; i += 1) {
    				each_blocks_1[i].c();
    			}

    			t3 = space();
    			span1 = element("span");
    			t4 = text(t4_value);
    			t5 = text(":");
    			t6 = space();
    			input = element("input");
    			t7 = space();
    			div = element("div");

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].c();
    			}

    			attr_dev(span0, "class", "svelte-mg0vr7");
    			toggle_class(span0, "indented", /*division*/ ctx[2]);
    			add_location(span0, file$k, 63, 0, 2119);
    			attr_dev(select, "class", "svelte-mg0vr7");
    			if (/*category*/ ctx[0] === void 0) add_render_callback(() => /*select_change_handler*/ ctx[16].call(select));
    			toggle_class(select, "inactive", /*query*/ ctx[3]);
    			add_location(select, file$k, 64, 0, 2183);
    			attr_dev(span1, "class", "svelte-mg0vr7");
    			toggle_class(span1, "indented", true);
    			add_location(span1, file$k, 70, 0, 2382);
    			attr_dev(input, "class", "svelte-mg0vr7");
    			toggle_class(input, "inactive", !/*query*/ ctx[3]);
    			add_location(input, file$k, 71, 0, 2440);
    			attr_dev(div, "class", "items");
    			add_location(div, file$k, 73, 0, 2494);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, span0, anchor);
    			append_dev(span0, t0);
    			append_dev(span0, t1_1);
    			insert_dev(target, t2_1, anchor);
    			insert_dev(target, select, anchor);

    			for (let i = 0; i < each_blocks_1.length; i += 1) {
    				each_blocks_1[i].m(select, null);
    			}

    			select_option(select, /*category*/ ctx[0]);
    			insert_dev(target, t3, anchor);
    			insert_dev(target, span1, anchor);
    			append_dev(span1, t4);
    			append_dev(span1, t5);
    			insert_dev(target, t6, anchor);
    			insert_dev(target, input, anchor);
    			set_input_value(input, /*query*/ ctx[3]);
    			insert_dev(target, t7, anchor);
    			insert_dev(target, div, anchor);

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].m(div, null);
    			}

    			current = true;

    			if (!mounted) {
    				dispose = [
    					listen_dev(select, "change", /*select_change_handler*/ ctx[16]),
    					listen_dev(select, "input", /*resetQuery*/ ctx[7], false, false, false),
    					listen_dev(input, "input", /*input_input_handler*/ ctx[17])
    				];

    				mounted = true;
    			}
    		},
    		p: function update(ctx, dirty) {
    			if ((!current || dirty[0] & /*$t*/ 32) && t0_value !== (t0_value = /*$t*/ ctx[5]("editor.category") + "")) set_data_dev(t0, t0_value);

    			if (dirty[0] & /*division*/ 4) {
    				toggle_class(span0, "indented", /*division*/ ctx[2]);
    			}

    			if (dirty[0] & /*categories, $t*/ 96) {
    				each_value_1 = /*categories*/ ctx[6];
    				validate_each_argument(each_value_1);
    				let i;

    				for (i = 0; i < each_value_1.length; i += 1) {
    					const child_ctx = get_each_context_1$3(ctx, each_value_1, i);

    					if (each_blocks_1[i]) {
    						each_blocks_1[i].p(child_ctx, dirty);
    					} else {
    						each_blocks_1[i] = create_each_block_1$3(child_ctx);
    						each_blocks_1[i].c();
    						each_blocks_1[i].m(select, null);
    					}
    				}

    				for (; i < each_blocks_1.length; i += 1) {
    					each_blocks_1[i].d(1);
    				}

    				each_blocks_1.length = each_value_1.length;
    			}

    			if (dirty[0] & /*category, categories*/ 65) {
    				select_option(select, /*category*/ ctx[0]);
    			}

    			if (dirty[0] & /*query*/ 8) {
    				toggle_class(select, "inactive", /*query*/ ctx[3]);
    			}

    			if ((!current || dirty[0] & /*$t*/ 32) && t4_value !== (t4_value = /*$t*/ ctx[5]("editor.search") + "")) set_data_dev(t4, t4_value);

    			if (dirty[0] & /*query*/ 8 && input.value !== /*query*/ ctx[3]) {
    				set_input_value(input, /*query*/ ctx[3]);
    			}

    			if (dirty[0] & /*query*/ 8) {
    				toggle_class(input, "inactive", !/*query*/ ctx[3]);
    			}

    			if (dirty[0] & /*charge, chargesData, handleChange, getTip*/ 786) {
    				each_value = /*chargesData*/ ctx[4];
    				validate_each_argument(each_value);
    				group_outros();
    				validate_each_keys(ctx, each_value, get_each_context$b, get_key);
    				each_blocks = update_keyed_each(each_blocks, dirty, get_key, 1, ctx, each_value, each1_lookup, div, outro_and_destroy_block, create_each_block$b, null, get_each_context$b);
    				check_outros();
    			}
    		},
    		i: function intro(local) {
    			if (current) return;

    			for (let i = 0; i < each_value.length; i += 1) {
    				transition_in(each_blocks[i]);
    			}

    			current = true;
    		},
    		o: function outro(local) {
    			for (let i = 0; i < each_blocks.length; i += 1) {
    				transition_out(each_blocks[i]);
    			}

    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(span0);
    			if (detaching) detach_dev(t2_1);
    			if (detaching) detach_dev(select);
    			destroy_each(each_blocks_1, detaching);
    			if (detaching) detach_dev(t3);
    			if (detaching) detach_dev(span1);
    			if (detaching) detach_dev(t6);
    			if (detaching) detach_dev(input);
    			if (detaching) detach_dev(t7);
    			if (detaching) detach_dev(div);

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].d();
    			}

    			mounted = false;
    			run_all(dispose);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$k.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$k($$self, $$props, $$invalidate) {
    	let $t;
    	let $locale;
    	let $dictionary;
    	validate_store(X, 't');
    	component_subscribe($$self, X, $$value => $$invalidate(5, $t = $$value));
    	validate_store(M, 'locale');
    	component_subscribe($$self, M, $$value => $$invalidate(19, $locale = $$value));
    	validate_store(s, 'dictionary');
    	component_subscribe($$self, s, $$value => $$invalidate(20, $dictionary = $$value));
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('EditorCharge', slots, []);
    	let { charge } = $$props;
    	let { type } = $$props;
    	let { category } = $$props;
    	let { t1 } = $$props;
    	let { t2 } = $$props;
    	let { size = null } = $$props;
    	let { sinister = null } = $$props;
    	let { reversed = null } = $$props;
    	let { division = false } = $$props;
    	let chargesData = [];
    	let query;
    	let queryOld;
    	const categories = Object.keys(charges.types);
    	const allCharges = categories.map(category => Object.keys(charges[category])).flat();
    	const allChargesTranslated = allCharges.map(charge => $t(`charges.${charge}`));

    	function update() {
    		const chargeList = Object.keys(charges[category]);

    		$$invalidate(4, chargesData = chargeList.map(charge => new Object({
    				charge,
    				t1: getTincture(charge),
    				charges: getCharge(charge)
    			})));
    	}

    	function filterCharges(query) {
    		if (!query && query !== queryOld) update();
    		queryOld = query;
    		if (!query) return;
    		const regEx = new RegExp(query.replaceAll(" ", ""), "i");
    		const results = allCharges.filter((charge, index) => regEx.test(allChargesTranslated[index]));

    		$$invalidate(4, chargesData = results.map(charge => new Object({
    				charge,
    				t1: getTincture(charge),
    				charges: getCharge(charge)
    			})));
    	}

    	function resetQuery() {
    		$$invalidate(3, query = "");
    	}

    	function getTincture(charge) {
    		if (type === "semy") return `semy_of_${charge}-${t1}-${t2}-${size}`;
    		return t1;
    	}

    	function getCharge(charge) {
    		if (type === "semy") return [];

    		return [
    			{
    				charge,
    				t: t2,
    				p: "e",
    				size: 1.5,
    				sinister,
    				reversed
    			}
    		];
    	}

    	const translateSafely = (group, key) => {
    		const isInDictionary = $dictionary?.[$locale]?.[group]?.[key];
    		return isInDictionary ? $t(`${group}.${key}`) : key;
    	};

    	function getTip(charge) {
    		const chargeName = translateSafely("charges", charge);
    		if (type === "semy") return `${$t("editor.semyOf")} ${chargeName}`;
    		return `${$t("tinctures.charge")}: ${chargeName}`;
    	}

    	const handleChange = newCharge => () => {
    		$$invalidate(1, charge = newCharge);
    	};

    	const writable_props = [
    		'charge',
    		'type',
    		'category',
    		't1',
    		't2',
    		'size',
    		'sinister',
    		'reversed',
    		'division'
    	];

    	Object_1$9.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<EditorCharge> was created with unknown prop '${key}'`);
    	});

    	function select_change_handler() {
    		category = select_value(this);
    		$$invalidate(0, category);
    		$$invalidate(6, categories);
    	}

    	function input_input_handler() {
    		query = this.value;
    		$$invalidate(3, query);
    	}

    	$$self.$$set = $$props => {
    		if ('charge' in $$props) $$invalidate(1, charge = $$props.charge);
    		if ('type' in $$props) $$invalidate(10, type = $$props.type);
    		if ('category' in $$props) $$invalidate(0, category = $$props.category);
    		if ('t1' in $$props) $$invalidate(11, t1 = $$props.t1);
    		if ('t2' in $$props) $$invalidate(12, t2 = $$props.t2);
    		if ('size' in $$props) $$invalidate(13, size = $$props.size);
    		if ('sinister' in $$props) $$invalidate(14, sinister = $$props.sinister);
    		if ('reversed' in $$props) $$invalidate(15, reversed = $$props.reversed);
    		if ('division' in $$props) $$invalidate(2, division = $$props.division);
    	};

    	$$self.$capture_state = () => ({
    		t: X,
    		dictionary: s,
    		locale: M,
    		EditorItem,
    		charges,
    		charge,
    		type,
    		category,
    		t1,
    		t2,
    		size,
    		sinister,
    		reversed,
    		division,
    		chargesData,
    		query,
    		queryOld,
    		categories,
    		allCharges,
    		allChargesTranslated,
    		update,
    		filterCharges,
    		resetQuery,
    		getTincture,
    		getCharge,
    		translateSafely,
    		getTip,
    		handleChange,
    		$t,
    		$locale,
    		$dictionary
    	});

    	$$self.$inject_state = $$props => {
    		if ('charge' in $$props) $$invalidate(1, charge = $$props.charge);
    		if ('type' in $$props) $$invalidate(10, type = $$props.type);
    		if ('category' in $$props) $$invalidate(0, category = $$props.category);
    		if ('t1' in $$props) $$invalidate(11, t1 = $$props.t1);
    		if ('t2' in $$props) $$invalidate(12, t2 = $$props.t2);
    		if ('size' in $$props) $$invalidate(13, size = $$props.size);
    		if ('sinister' in $$props) $$invalidate(14, sinister = $$props.sinister);
    		if ('reversed' in $$props) $$invalidate(15, reversed = $$props.reversed);
    		if ('division' in $$props) $$invalidate(2, division = $$props.division);
    		if ('chargesData' in $$props) $$invalidate(4, chargesData = $$props.chargesData);
    		if ('query' in $$props) $$invalidate(3, query = $$props.query);
    		if ('queryOld' in $$props) queryOld = $$props.queryOld;
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	$$self.$$.update = () => {
    		if ($$self.$$.dirty[0] & /*category, t1, t2, size, sinister, reversed*/ 63489) {
    			update();
    		}

    		if ($$self.$$.dirty[0] & /*query*/ 8) {
    			filterCharges(query);
    		}
    	};

    	return [
    		category,
    		charge,
    		division,
    		query,
    		chargesData,
    		$t,
    		categories,
    		resetQuery,
    		getTip,
    		handleChange,
    		type,
    		t1,
    		t2,
    		size,
    		sinister,
    		reversed,
    		select_change_handler,
    		input_input_handler
    	];
    }

    class EditorCharge extends SvelteComponentDev {
    	constructor(options) {
    		super(options);

    		init(
    			this,
    			options,
    			instance$k,
    			create_fragment$k,
    			safe_not_equal,
    			{
    				charge: 1,
    				type: 10,
    				category: 0,
    				t1: 11,
    				t2: 12,
    				size: 13,
    				sinister: 14,
    				reversed: 15,
    				division: 2
    			},
    			null,
    			[-1, -1]
    		);

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "EditorCharge",
    			options,
    			id: create_fragment$k.name
    		});

    		const { ctx } = this.$$;
    		const props = options.props || {};

    		if (/*charge*/ ctx[1] === undefined && !('charge' in props)) {
    			console.warn("<EditorCharge> was created without expected prop 'charge'");
    		}

    		if (/*type*/ ctx[10] === undefined && !('type' in props)) {
    			console.warn("<EditorCharge> was created without expected prop 'type'");
    		}

    		if (/*category*/ ctx[0] === undefined && !('category' in props)) {
    			console.warn("<EditorCharge> was created without expected prop 'category'");
    		}

    		if (/*t1*/ ctx[11] === undefined && !('t1' in props)) {
    			console.warn("<EditorCharge> was created without expected prop 't1'");
    		}

    		if (/*t2*/ ctx[12] === undefined && !('t2' in props)) {
    			console.warn("<EditorCharge> was created without expected prop 't2'");
    		}
    	}

    	get charge() {
    		throw new Error("<EditorCharge>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set charge(value) {
    		throw new Error("<EditorCharge>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get type() {
    		throw new Error("<EditorCharge>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set type(value) {
    		throw new Error("<EditorCharge>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get category() {
    		throw new Error("<EditorCharge>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set category(value) {
    		throw new Error("<EditorCharge>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get t1() {
    		throw new Error("<EditorCharge>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set t1(value) {
    		throw new Error("<EditorCharge>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get t2() {
    		throw new Error("<EditorCharge>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set t2(value) {
    		throw new Error("<EditorCharge>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get size() {
    		throw new Error("<EditorCharge>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set size(value) {
    		throw new Error("<EditorCharge>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get sinister() {
    		throw new Error("<EditorCharge>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set sinister(value) {
    		throw new Error("<EditorCharge>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get reversed() {
    		throw new Error("<EditorCharge>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set reversed(value) {
    		throw new Error("<EditorCharge>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get division() {
    		throw new Error("<EditorCharge>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set division(value) {
    		throw new Error("<EditorCharge>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /* src/components/editor/EditorControls.svelte generated by Svelte v3.44.2 */
    const file$j = "src/components/editor/EditorControls.svelte";

    // (33:2) {#if els.length > 1}
    function create_if_block$8(ctx) {
    	let show_if_1 = /*i*/ ctx[2] && /*areDifferent*/ ctx[8](/*el*/ ctx[1], /*els*/ ctx[0][/*i*/ ctx[2] - 1]);
    	let t_1;
    	let show_if = /*i*/ ctx[2] + 1 < /*els*/ ctx[0].length && /*areDifferent*/ ctx[8](/*el*/ ctx[1], /*els*/ ctx[0][/*i*/ ctx[2] + 1]);
    	let if_block1_anchor;
    	let if_block0 = show_if_1 && create_if_block_2$3(ctx);
    	let if_block1 = show_if && create_if_block_1$4(ctx);

    	const block = {
    		c: function create() {
    			if (if_block0) if_block0.c();
    			t_1 = space();
    			if (if_block1) if_block1.c();
    			if_block1_anchor = empty();
    		},
    		m: function mount(target, anchor) {
    			if (if_block0) if_block0.m(target, anchor);
    			insert_dev(target, t_1, anchor);
    			if (if_block1) if_block1.m(target, anchor);
    			insert_dev(target, if_block1_anchor, anchor);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*i, el, els*/ 7) show_if_1 = /*i*/ ctx[2] && /*areDifferent*/ ctx[8](/*el*/ ctx[1], /*els*/ ctx[0][/*i*/ ctx[2] - 1]);

    			if (show_if_1) {
    				if (if_block0) {
    					if_block0.p(ctx, dirty);
    				} else {
    					if_block0 = create_if_block_2$3(ctx);
    					if_block0.c();
    					if_block0.m(t_1.parentNode, t_1);
    				}
    			} else if (if_block0) {
    				if_block0.d(1);
    				if_block0 = null;
    			}

    			if (dirty & /*i, els, el*/ 7) show_if = /*i*/ ctx[2] + 1 < /*els*/ ctx[0].length && /*areDifferent*/ ctx[8](/*el*/ ctx[1], /*els*/ ctx[0][/*i*/ ctx[2] + 1]);

    			if (show_if) {
    				if (if_block1) {
    					if_block1.p(ctx, dirty);
    				} else {
    					if_block1 = create_if_block_1$4(ctx);
    					if_block1.c();
    					if_block1.m(if_block1_anchor.parentNode, if_block1_anchor);
    				}
    			} else if (if_block1) {
    				if_block1.d(1);
    				if_block1 = null;
    			}
    		},
    		d: function destroy(detaching) {
    			if (if_block0) if_block0.d(detaching);
    			if (detaching) detach_dev(t_1);
    			if (if_block1) if_block1.d(detaching);
    			if (detaching) detach_dev(if_block1_anchor);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block$8.name,
    		type: "if",
    		source: "(33:2) {#if els.length > 1}",
    		ctx
    	});

    	return block;
    }

    // (34:4) {#if i && areDifferent(el, els[i - 1])}
    function create_if_block_2$3(ctx) {
    	let svg;
    	let use;
    	let svg_data_tooltip_value;
    	let mounted;
    	let dispose;

    	const block = {
    		c: function create() {
    			svg = svg_element("svg");
    			use = svg_element("use");
    			attr_dev(use, "href", "#up-icon");
    			add_location(use, file$j, 35, 8, 995);
    			attr_dev(svg, "data-tooltip", svg_data_tooltip_value = /*$t*/ ctx[3]("editor.backward"));
    			attr_dev(svg, "class", "svelte-1rbk6h");
    			add_location(svg, file$j, 34, 6, 912);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, svg, anchor);
    			append_dev(svg, use);

    			if (!mounted) {
    				dispose = [
    					listen_dev(svg, "click", /*backward*/ ctx[7], false, false, false),
    					action_destroyer(tooltip.call(null, svg))
    				];

    				mounted = true;
    			}
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*$t*/ 8 && svg_data_tooltip_value !== (svg_data_tooltip_value = /*$t*/ ctx[3]("editor.backward"))) {
    				attr_dev(svg, "data-tooltip", svg_data_tooltip_value);
    			}
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(svg);
    			mounted = false;
    			run_all(dispose);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_2$3.name,
    		type: "if",
    		source: "(34:4) {#if i && areDifferent(el, els[i - 1])}",
    		ctx
    	});

    	return block;
    }

    // (39:4) {#if i + 1 < els.length && areDifferent(el, els[i + 1])}
    function create_if_block_1$4(ctx) {
    	let svg;
    	let use;
    	let svg_data_tooltip_value;
    	let mounted;
    	let dispose;

    	const block = {
    		c: function create() {
    			svg = svg_element("svg");
    			use = svg_element("use");
    			attr_dev(use, "href", "#down-icon");
    			add_location(use, file$j, 40, 8, 1190);
    			attr_dev(svg, "data-tooltip", svg_data_tooltip_value = /*$t*/ ctx[3]("editor.forward"));
    			attr_dev(svg, "class", "svelte-1rbk6h");
    			add_location(svg, file$j, 39, 6, 1109);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, svg, anchor);
    			append_dev(svg, use);

    			if (!mounted) {
    				dispose = [
    					listen_dev(svg, "click", /*forward*/ ctx[6], false, false, false),
    					action_destroyer(tooltip.call(null, svg))
    				];

    				mounted = true;
    			}
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*$t*/ 8 && svg_data_tooltip_value !== (svg_data_tooltip_value = /*$t*/ ctx[3]("editor.forward"))) {
    				attr_dev(svg, "data-tooltip", svg_data_tooltip_value);
    			}
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(svg);
    			mounted = false;
    			run_all(dispose);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_1$4.name,
    		type: "if",
    		source: "(39:4) {#if i + 1 < els.length && areDifferent(el, els[i + 1])}",
    		ctx
    	});

    	return block;
    }

    function create_fragment$j(ctx) {
    	let span;
    	let svg0;
    	let use0;
    	let svg0_data_tooltip_value;
    	let t0;
    	let t1;
    	let svg1;
    	let use1;
    	let svg1_data_tooltip_value;
    	let mounted;
    	let dispose;
    	let if_block = /*els*/ ctx[0].length > 1 && create_if_block$8(ctx);

    	const block = {
    		c: function create() {
    			span = element("span");
    			svg0 = svg_element("svg");
    			use0 = svg_element("use");
    			t0 = space();
    			if (if_block) if_block.c();
    			t1 = space();
    			svg1 = svg_element("svg");
    			use1 = svg_element("use");
    			attr_dev(use0, "href", "#clone-icon");
    			add_location(use0, file$j, 30, 4, 803);
    			attr_dev(svg0, "data-tooltip", svg0_data_tooltip_value = /*$t*/ ctx[3]("editor.clone"));
    			attr_dev(svg0, "class", "svelte-1rbk6h");
    			add_location(svg0, file$j, 29, 2, 730);
    			attr_dev(use1, "href", "#remove-icon");
    			add_location(use1, file$j, 45, 4, 1324);
    			attr_dev(svg1, "data-tooltip", svg1_data_tooltip_value = /*$t*/ ctx[3]("editor.remove"));
    			attr_dev(svg1, "class", "svelte-1rbk6h");
    			add_location(svg1, file$j, 44, 2, 1249);
    			attr_dev(span, "class", "svelte-1rbk6h");
    			add_location(span, file$j, 28, 0, 721);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, span, anchor);
    			append_dev(span, svg0);
    			append_dev(svg0, use0);
    			append_dev(span, t0);
    			if (if_block) if_block.m(span, null);
    			append_dev(span, t1);
    			append_dev(span, svg1);
    			append_dev(svg1, use1);

    			if (!mounted) {
    				dispose = [
    					listen_dev(svg0, "click", /*clone*/ ctx[5], false, false, false),
    					action_destroyer(tooltip.call(null, svg0)),
    					listen_dev(svg1, "click", /*remove*/ ctx[4], false, false, false),
    					action_destroyer(tooltip.call(null, svg1))
    				];

    				mounted = true;
    			}
    		},
    		p: function update(ctx, [dirty]) {
    			if (dirty & /*$t*/ 8 && svg0_data_tooltip_value !== (svg0_data_tooltip_value = /*$t*/ ctx[3]("editor.clone"))) {
    				attr_dev(svg0, "data-tooltip", svg0_data_tooltip_value);
    			}

    			if (/*els*/ ctx[0].length > 1) {
    				if (if_block) {
    					if_block.p(ctx, dirty);
    				} else {
    					if_block = create_if_block$8(ctx);
    					if_block.c();
    					if_block.m(span, t1);
    				}
    			} else if (if_block) {
    				if_block.d(1);
    				if_block = null;
    			}

    			if (dirty & /*$t*/ 8 && svg1_data_tooltip_value !== (svg1_data_tooltip_value = /*$t*/ ctx[3]("editor.remove"))) {
    				attr_dev(svg1, "data-tooltip", svg1_data_tooltip_value);
    			}
    		},
    		i: noop,
    		o: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(span);
    			if (if_block) if_block.d();
    			mounted = false;
    			run_all(dispose);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$j.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$j($$self, $$props, $$invalidate) {
    	let $t;
    	validate_store(X, 't');
    	component_subscribe($$self, X, $$value => $$invalidate(3, $t = $$value));
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('EditorControls', slots, []);
    	let { els } = $$props;
    	let { el } = $$props;
    	let { i } = $$props;

    	const remove = event => {
    		event.stopPropagation();
    		$$invalidate(0, els = els.filter((e, n) => n !== i));
    	};

    	const clone = event => {
    		event.stopPropagation();
    		const elementCopy = JSON.parse(JSON.stringify(el));
    		$$invalidate(0, els = [...els, elementCopy]);
    	};

    	const forward = event => {
    		event.stopPropagation();
    		$$invalidate(0, [els[i], els[i + 1]] = [els[i + 1], els[i]], els);
    	};

    	const backward = event => {
    		event.stopPropagation();
    		$$invalidate(0, [els[i], els[i - 1]] = [els[i - 1], els[i]], els);
    	};

    	const areDifferent = (a, b) => {
    		return JSON.stringify(a) !== JSON.stringify(b);
    	};

    	const writable_props = ['els', 'el', 'i'];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<EditorControls> was created with unknown prop '${key}'`);
    	});

    	$$self.$$set = $$props => {
    		if ('els' in $$props) $$invalidate(0, els = $$props.els);
    		if ('el' in $$props) $$invalidate(1, el = $$props.el);
    		if ('i' in $$props) $$invalidate(2, i = $$props.i);
    	};

    	$$self.$capture_state = () => ({
    		t: X,
    		tooltip,
    		els,
    		el,
    		i,
    		remove,
    		clone,
    		forward,
    		backward,
    		areDifferent,
    		$t
    	});

    	$$self.$inject_state = $$props => {
    		if ('els' in $$props) $$invalidate(0, els = $$props.els);
    		if ('el' in $$props) $$invalidate(1, el = $$props.el);
    		if ('i' in $$props) $$invalidate(2, i = $$props.i);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [els, el, i, $t, remove, clone, forward, backward, areDifferent];
    }

    class EditorControls extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$j, create_fragment$j, safe_not_equal, { els: 0, el: 1, i: 2 });

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "EditorControls",
    			options,
    			id: create_fragment$j.name
    		});

    		const { ctx } = this.$$;
    		const props = options.props || {};

    		if (/*els*/ ctx[0] === undefined && !('els' in props)) {
    			console.warn("<EditorControls> was created without expected prop 'els'");
    		}

    		if (/*el*/ ctx[1] === undefined && !('el' in props)) {
    			console.warn("<EditorControls> was created without expected prop 'el'");
    		}

    		if (/*i*/ ctx[2] === undefined && !('i' in props)) {
    			console.warn("<EditorControls> was created without expected prop 'i'");
    		}
    	}

    	get els() {
    		throw new Error("<EditorControls>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set els(value) {
    		throw new Error("<EditorControls>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get el() {
    		throw new Error("<EditorControls>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set el(value) {
    		throw new Error("<EditorControls>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get i() {
    		throw new Error("<EditorControls>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set i(value) {
    		throw new Error("<EditorControls>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /* src/components/editor/EditorDivided.svelte generated by Svelte v3.44.2 */
    const file$i = "src/components/editor/EditorDivided.svelte";

    // (12:2) {#if !raster}
    function create_if_block$7(ctx) {
    	let option;
    	let t_1_value = /*$t*/ ctx[2]("editor.counterchanged") + "";
    	let t_1;

    	const block = {
    		c: function create() {
    			option = element("option");
    			t_1 = text(t_1_value);
    			option.__value = "counter";
    			option.value = option.__value;
    			add_location(option, file$i, 12, 4, 389);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, option, anchor);
    			append_dev(option, t_1);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*$t*/ 4 && t_1_value !== (t_1_value = /*$t*/ ctx[2]("editor.counterchanged") + "")) set_data_dev(t_1, t_1_value);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(option);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block$7.name,
    		type: "if",
    		source: "(12:2) {#if !raster}",
    		ctx
    	});

    	return block;
    }

    function create_fragment$i(ctx) {
    	let span;
    	let t0_value = /*$t*/ ctx[2]("editor.divided") + "";
    	let t0;
    	let t1;
    	let t2;
    	let select;
    	let option0;
    	let t3_value = /*$t*/ ctx[2]("editor.notDivided") + "";
    	let t3;
    	let option1;
    	let t4_value = /*$t*/ ctx[2]("editor.cropByField") + "";
    	let t4;
    	let option2;
    	let t5_value = /*$t*/ ctx[2]("editor.cropByDivision") + "";
    	let t5;
    	let mounted;
    	let dispose;
    	let if_block = !/*raster*/ ctx[1] && create_if_block$7(ctx);

    	const block = {
    		c: function create() {
    			span = element("span");
    			t0 = text(t0_value);
    			t1 = text(":");
    			t2 = space();
    			select = element("select");
    			option0 = element("option");
    			t3 = text(t3_value);
    			option1 = element("option");
    			t4 = text(t4_value);
    			option2 = element("option");
    			t5 = text(t5_value);
    			if (if_block) if_block.c();
    			add_location(span, file$i, 6, 0, 122);
    			option0.__value = "";
    			option0.value = option0.__value;
    			add_location(option0, file$i, 8, 2, 191);
    			option1.__value = "field";
    			option1.value = option1.__value;
    			add_location(option1, file$i, 9, 2, 245);
    			option2.__value = "division";
    			option2.value = option2.__value;
    			add_location(option2, file$i, 10, 2, 305);
    			if (/*divided*/ ctx[0] === void 0) add_render_callback(() => /*select_change_handler*/ ctx[3].call(select));
    			add_location(select, file$i, 7, 0, 159);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, span, anchor);
    			append_dev(span, t0);
    			append_dev(span, t1);
    			insert_dev(target, t2, anchor);
    			insert_dev(target, select, anchor);
    			append_dev(select, option0);
    			append_dev(option0, t3);
    			append_dev(select, option1);
    			append_dev(option1, t4);
    			append_dev(select, option2);
    			append_dev(option2, t5);
    			if (if_block) if_block.m(select, null);
    			select_option(select, /*divided*/ ctx[0]);

    			if (!mounted) {
    				dispose = listen_dev(select, "change", /*select_change_handler*/ ctx[3]);
    				mounted = true;
    			}
    		},
    		p: function update(ctx, [dirty]) {
    			if (dirty & /*$t*/ 4 && t0_value !== (t0_value = /*$t*/ ctx[2]("editor.divided") + "")) set_data_dev(t0, t0_value);
    			if (dirty & /*$t*/ 4 && t3_value !== (t3_value = /*$t*/ ctx[2]("editor.notDivided") + "")) set_data_dev(t3, t3_value);
    			if (dirty & /*$t*/ 4 && t4_value !== (t4_value = /*$t*/ ctx[2]("editor.cropByField") + "")) set_data_dev(t4, t4_value);
    			if (dirty & /*$t*/ 4 && t5_value !== (t5_value = /*$t*/ ctx[2]("editor.cropByDivision") + "")) set_data_dev(t5, t5_value);

    			if (!/*raster*/ ctx[1]) {
    				if (if_block) {
    					if_block.p(ctx, dirty);
    				} else {
    					if_block = create_if_block$7(ctx);
    					if_block.c();
    					if_block.m(select, null);
    				}
    			} else if (if_block) {
    				if_block.d(1);
    				if_block = null;
    			}

    			if (dirty & /*divided*/ 1) {
    				select_option(select, /*divided*/ ctx[0]);
    			}
    		},
    		i: noop,
    		o: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(span);
    			if (detaching) detach_dev(t2);
    			if (detaching) detach_dev(select);
    			if (if_block) if_block.d();
    			mounted = false;
    			dispose();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$i.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$i($$self, $$props, $$invalidate) {
    	let $t;
    	validate_store(X, 't');
    	component_subscribe($$self, X, $$value => $$invalidate(2, $t = $$value));
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('EditorDivided', slots, []);
    	let { divided } = $$props;
    	let { raster = false } = $$props;
    	const writable_props = ['divided', 'raster'];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<EditorDivided> was created with unknown prop '${key}'`);
    	});

    	function select_change_handler() {
    		divided = select_value(this);
    		$$invalidate(0, divided);
    	}

    	$$self.$$set = $$props => {
    		if ('divided' in $$props) $$invalidate(0, divided = $$props.divided);
    		if ('raster' in $$props) $$invalidate(1, raster = $$props.raster);
    	};

    	$$self.$capture_state = () => ({ t: X, divided, raster, $t });

    	$$self.$inject_state = $$props => {
    		if ('divided' in $$props) $$invalidate(0, divided = $$props.divided);
    		if ('raster' in $$props) $$invalidate(1, raster = $$props.raster);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [divided, raster, $t, select_change_handler];
    }

    class EditorDivided extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$i, create_fragment$i, safe_not_equal, { divided: 0, raster: 1 });

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "EditorDivided",
    			options,
    			id: create_fragment$i.name
    		});

    		const { ctx } = this.$$;
    		const props = options.props || {};

    		if (/*divided*/ ctx[0] === undefined && !('divided' in props)) {
    			console.warn("<EditorDivided> was created without expected prop 'divided'");
    		}
    	}

    	get divided() {
    		throw new Error("<EditorDivided>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set divided(value) {
    		throw new Error("<EditorDivided>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get raster() {
    		throw new Error("<EditorDivided>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set raster(value) {
    		throw new Error("<EditorDivided>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /* src/components/editor/EditorDivision.svelte generated by Svelte v3.44.2 */

    const { Object: Object_1$8 } = globals;
    const file$h = "src/components/editor/EditorDivision.svelte";

    function get_each_context$a(ctx, list, i) {
    	const child_ctx = ctx.slice();
    	child_ctx[9] = list[i];
    	return child_ctx;
    }

    // (21:2) {#each divisionsData as coa (coa)}
    function create_each_block$a(key_1, ctx) {
    	let div;
    	let editoritem;
    	let t_1;
    	let current;
    	let mounted;
    	let dispose;

    	editoritem = new EditorItem({
    			props: {
    				coa: /*coa*/ ctx[9],
    				tip: /*getTip*/ ctx[2](/*coa*/ ctx[9].division.division)
    			},
    			$$inline: true
    		});

    	const block = {
    		key: key_1,
    		first: null,
    		c: function create() {
    			div = element("div");
    			create_component(editoritem.$$.fragment);
    			t_1 = space();
    			attr_dev(div, "class", "item");
    			toggle_class(div, "selected", /*division*/ ctx[0] === /*coa*/ ctx[9].division.division);
    			add_location(div, file$h, 21, 4, 680);
    			this.first = div;
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    			mount_component(editoritem, div, null);
    			append_dev(div, t_1);
    			current = true;

    			if (!mounted) {
    				dispose = listen_dev(
    					div,
    					"click",
    					function () {
    						if (is_function(/*handleChange*/ ctx[3](/*coa*/ ctx[9].division.division))) /*handleChange*/ ctx[3](/*coa*/ ctx[9].division.division).apply(this, arguments);
    					},
    					false,
    					false,
    					false
    				);

    				mounted = true;
    			}
    		},
    		p: function update(new_ctx, dirty) {
    			ctx = new_ctx;
    			const editoritem_changes = {};
    			if (dirty & /*divisionsData*/ 2) editoritem_changes.coa = /*coa*/ ctx[9];
    			if (dirty & /*divisionsData*/ 2) editoritem_changes.tip = /*getTip*/ ctx[2](/*coa*/ ctx[9].division.division);
    			editoritem.$set(editoritem_changes);

    			if (dirty & /*division, divisionsData*/ 3) {
    				toggle_class(div, "selected", /*division*/ ctx[0] === /*coa*/ ctx[9].division.division);
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(editoritem.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(editoritem.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    			destroy_component(editoritem);
    			mounted = false;
    			dispose();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_each_block$a.name,
    		type: "each",
    		source: "(21:2) {#each divisionsData as coa (coa)}",
    		ctx
    	});

    	return block;
    }

    function create_fragment$h(ctx) {
    	let div;
    	let each_blocks = [];
    	let each_1_lookup = new Map();
    	let current;
    	let each_value = /*divisionsData*/ ctx[1];
    	validate_each_argument(each_value);
    	const get_key = ctx => /*coa*/ ctx[9];
    	validate_each_keys(ctx, each_value, get_each_context$a, get_key);

    	for (let i = 0; i < each_value.length; i += 1) {
    		let child_ctx = get_each_context$a(ctx, each_value, i);
    		let key = get_key(child_ctx);
    		each_1_lookup.set(key, each_blocks[i] = create_each_block$a(key, child_ctx));
    	}

    	const block = {
    		c: function create() {
    			div = element("div");

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].c();
    			}

    			attr_dev(div, "class", "items");
    			add_location(div, file$h, 19, 0, 619);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].m(div, null);
    			}

    			current = true;
    		},
    		p: function update(ctx, [dirty]) {
    			if (dirty & /*division, divisionsData, handleChange, getTip*/ 15) {
    				each_value = /*divisionsData*/ ctx[1];
    				validate_each_argument(each_value);
    				group_outros();
    				validate_each_keys(ctx, each_value, get_each_context$a, get_key);
    				each_blocks = update_keyed_each(each_blocks, dirty, get_key, 1, ctx, each_value, each_1_lookup, div, outro_and_destroy_block, create_each_block$a, null, get_each_context$a);
    				check_outros();
    			}
    		},
    		i: function intro(local) {
    			if (current) return;

    			for (let i = 0; i < each_value.length; i += 1) {
    				transition_in(each_blocks[i]);
    			}

    			current = true;
    		},
    		o: function outro(local) {
    			for (let i = 0; i < each_blocks.length; i += 1) {
    				transition_out(each_blocks[i]);
    			}

    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].d();
    			}
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$h.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$h($$self, $$props, $$invalidate) {
    	let divisionsData;
    	let $t;
    	validate_store(X, 't');
    	component_subscribe($$self, X, $$value => $$invalidate(7, $t = $$value));
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('EditorDivision', slots, []);
    	let { division } = $$props;
    	let { t1 } = $$props;
    	let { t2 } = $$props;
    	let { line } = $$props;
    	const divisionList = ["no"].concat(Object.keys(divisions.variants));

    	const getTip = division => {
    		const divisionName = $t(`divisions.${division}`);
    		return `${$t("editor.division")}: ${divisionName}`;
    	};

    	const handleChange = newDivision => () => {
    		$$invalidate(0, division = newDivision);
    	};

    	const writable_props = ['division', 't1', 't2', 'line'];

    	Object_1$8.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<EditorDivision> was created with unknown prop '${key}'`);
    	});

    	$$self.$$set = $$props => {
    		if ('division' in $$props) $$invalidate(0, division = $$props.division);
    		if ('t1' in $$props) $$invalidate(4, t1 = $$props.t1);
    		if ('t2' in $$props) $$invalidate(5, t2 = $$props.t2);
    		if ('line' in $$props) $$invalidate(6, line = $$props.line);
    	};

    	$$self.$capture_state = () => ({
    		t: X,
    		EditorItem,
    		divisions,
    		division,
    		t1,
    		t2,
    		line,
    		divisionList,
    		getTip,
    		handleChange,
    		divisionsData,
    		$t
    	});

    	$$self.$inject_state = $$props => {
    		if ('division' in $$props) $$invalidate(0, division = $$props.division);
    		if ('t1' in $$props) $$invalidate(4, t1 = $$props.t1);
    		if ('t2' in $$props) $$invalidate(5, t2 = $$props.t2);
    		if ('line' in $$props) $$invalidate(6, line = $$props.line);
    		if ('divisionsData' in $$props) $$invalidate(1, divisionsData = $$props.divisionsData);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	$$self.$$.update = () => {
    		if ($$self.$$.dirty & /*t1, t2, line*/ 112) {
    			$$invalidate(1, divisionsData = divisionList.map(division => ({ t1, division: { division, t: t2, line } })));
    		}
    	};

    	return [division, divisionsData, getTip, handleChange, t1, t2, line];
    }

    class EditorDivision extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$h, create_fragment$h, safe_not_equal, { division: 0, t1: 4, t2: 5, line: 6 });

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "EditorDivision",
    			options,
    			id: create_fragment$h.name
    		});

    		const { ctx } = this.$$;
    		const props = options.props || {};

    		if (/*division*/ ctx[0] === undefined && !('division' in props)) {
    			console.warn("<EditorDivision> was created without expected prop 'division'");
    		}

    		if (/*t1*/ ctx[4] === undefined && !('t1' in props)) {
    			console.warn("<EditorDivision> was created without expected prop 't1'");
    		}

    		if (/*t2*/ ctx[5] === undefined && !('t2' in props)) {
    			console.warn("<EditorDivision> was created without expected prop 't2'");
    		}

    		if (/*line*/ ctx[6] === undefined && !('line' in props)) {
    			console.warn("<EditorDivision> was created without expected prop 'line'");
    		}
    	}

    	get division() {
    		throw new Error("<EditorDivision>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set division(value) {
    		throw new Error("<EditorDivision>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get t1() {
    		throw new Error("<EditorDivision>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set t1(value) {
    		throw new Error("<EditorDivision>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get t2() {
    		throw new Error("<EditorDivision>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set t2(value) {
    		throw new Error("<EditorDivision>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get line() {
    		throw new Error("<EditorDivision>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set line(value) {
    		throw new Error("<EditorDivision>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /* src/components/editor/EditorLine.svelte generated by Svelte v3.44.2 */

    const { Object: Object_1$7 } = globals;
    const file$g = "src/components/editor/EditorLine.svelte";

    function get_each_context$9(ctx, list, i) {
    	const child_ctx = ctx.slice();
    	child_ctx[10] = list[i].coa;
    	child_ctx[11] = list[i].newLine;
    	return child_ctx;
    }

    // (22:2) {#each linesData as { coa, newLine }
    function create_each_block$9(key_1, ctx) {
    	let div;
    	let editoritem;
    	let t_1;
    	let current;
    	let mounted;
    	let dispose;

    	editoritem = new EditorItem({
    			props: {
    				coa: /*coa*/ ctx[10],
    				tip: /*getTip*/ ctx[3](/*newLine*/ ctx[11])
    			},
    			$$inline: true
    		});

    	const block = {
    		key: key_1,
    		first: null,
    		c: function create() {
    			div = element("div");
    			create_component(editoritem.$$.fragment);
    			t_1 = space();
    			attr_dev(div, "class", "item");
    			toggle_class(div, "selected", /*line*/ ctx[0] === /*newLine*/ ctx[11]);
    			add_location(div, file$g, 22, 4, 755);
    			this.first = div;
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    			mount_component(editoritem, div, null);
    			append_dev(div, t_1);
    			current = true;

    			if (!mounted) {
    				dispose = listen_dev(
    					div,
    					"click",
    					function () {
    						if (is_function(/*handleChange*/ ctx[4](/*newLine*/ ctx[11]))) /*handleChange*/ ctx[4](/*newLine*/ ctx[11]).apply(this, arguments);
    					},
    					false,
    					false,
    					false
    				);

    				mounted = true;
    			}
    		},
    		p: function update(new_ctx, dirty) {
    			ctx = new_ctx;
    			const editoritem_changes = {};
    			if (dirty & /*linesData*/ 2) editoritem_changes.coa = /*coa*/ ctx[10];
    			if (dirty & /*linesData*/ 2) editoritem_changes.tip = /*getTip*/ ctx[3](/*newLine*/ ctx[11]);
    			editoritem.$set(editoritem_changes);

    			if (dirty & /*line, linesData*/ 3) {
    				toggle_class(div, "selected", /*line*/ ctx[0] === /*newLine*/ ctx[11]);
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(editoritem.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(editoritem.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    			destroy_component(editoritem);
    			mounted = false;
    			dispose();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_each_block$9.name,
    		type: "each",
    		source: "(22:2) {#each linesData as { coa, newLine }",
    		ctx
    	});

    	return block;
    }

    function create_fragment$g(ctx) {
    	let t0_value = /*$t*/ ctx[2]("editor.line") + "";
    	let t0;
    	let t1_1;
    	let div;
    	let each_blocks = [];
    	let each_1_lookup = new Map();
    	let current;
    	let each_value = /*linesData*/ ctx[1];
    	validate_each_argument(each_value);
    	const get_key = ctx => /*coa*/ ctx[10];
    	validate_each_keys(ctx, each_value, get_each_context$9, get_key);

    	for (let i = 0; i < each_value.length; i += 1) {
    		let child_ctx = get_each_context$9(ctx, each_value, i);
    		let key = get_key(child_ctx);
    		each_1_lookup.set(key, each_blocks[i] = create_each_block$9(key, child_ctx));
    	}

    	const block = {
    		c: function create() {
    			t0 = text(t0_value);
    			t1_1 = text(":\n");
    			div = element("div");

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].c();
    			}

    			attr_dev(div, "class", "items");
    			add_location(div, file$g, 20, 0, 685);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, t0, anchor);
    			insert_dev(target, t1_1, anchor);
    			insert_dev(target, div, anchor);

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].m(div, null);
    			}

    			current = true;
    		},
    		p: function update(ctx, [dirty]) {
    			if ((!current || dirty & /*$t*/ 4) && t0_value !== (t0_value = /*$t*/ ctx[2]("editor.line") + "")) set_data_dev(t0, t0_value);

    			if (dirty & /*line, linesData, handleChange, getTip*/ 27) {
    				each_value = /*linesData*/ ctx[1];
    				validate_each_argument(each_value);
    				group_outros();
    				validate_each_keys(ctx, each_value, get_each_context$9, get_key);
    				each_blocks = update_keyed_each(each_blocks, dirty, get_key, 1, ctx, each_value, each_1_lookup, div, outro_and_destroy_block, create_each_block$9, null, get_each_context$9);
    				check_outros();
    			}
    		},
    		i: function intro(local) {
    			if (current) return;

    			for (let i = 0; i < each_value.length; i += 1) {
    				transition_in(each_blocks[i]);
    			}

    			current = true;
    		},
    		o: function outro(local) {
    			for (let i = 0; i < each_blocks.length; i += 1) {
    				transition_out(each_blocks[i]);
    			}

    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(t0);
    			if (detaching) detach_dev(t1_1);
    			if (detaching) detach_dev(div);

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].d();
    			}
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$g.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$g($$self, $$props, $$invalidate) {
    	let linesData;
    	let $t;
    	validate_store(X, 't');
    	component_subscribe($$self, X, $$value => $$invalidate(2, $t = $$value));
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('EditorLine', slots, []);
    	let { line } = $$props;
    	let { division = null } = $$props;
    	let { ordinary = null } = $$props;
    	let { t1 } = $$props;
    	let { t2 } = $$props;
    	const lineList = Object.keys(lines);
    	const getTip = line => `${$t("editor.line")}: ${$t(`lines.${line}`)}`;

    	const handleChange = newLine => () => {
    		$$invalidate(0, line = newLine);
    	};

    	const writable_props = ['line', 'division', 'ordinary', 't1', 't2'];

    	Object_1$7.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<EditorLine> was created with unknown prop '${key}'`);
    	});

    	$$self.$$set = $$props => {
    		if ('line' in $$props) $$invalidate(0, line = $$props.line);
    		if ('division' in $$props) $$invalidate(5, division = $$props.division);
    		if ('ordinary' in $$props) $$invalidate(6, ordinary = $$props.ordinary);
    		if ('t1' in $$props) $$invalidate(7, t1 = $$props.t1);
    		if ('t2' in $$props) $$invalidate(8, t2 = $$props.t2);
    	};

    	$$self.$capture_state = () => ({
    		t: X,
    		EditorItem,
    		lines,
    		line,
    		division,
    		ordinary,
    		t1,
    		t2,
    		lineList,
    		getTip,
    		handleChange,
    		linesData,
    		$t
    	});

    	$$self.$inject_state = $$props => {
    		if ('line' in $$props) $$invalidate(0, line = $$props.line);
    		if ('division' in $$props) $$invalidate(5, division = $$props.division);
    		if ('ordinary' in $$props) $$invalidate(6, ordinary = $$props.ordinary);
    		if ('t1' in $$props) $$invalidate(7, t1 = $$props.t1);
    		if ('t2' in $$props) $$invalidate(8, t2 = $$props.t2);
    		if ('linesData' in $$props) $$invalidate(1, linesData = $$props.linesData);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	$$self.$$.update = () => {
    		if ($$self.$$.dirty & /*division, t1, t2, ordinary*/ 480) {
    			$$invalidate(1, linesData = division
    			? lineList.map(line => ({
    					coa: { t1, division: { division, t: t2, line } },
    					newLine: line
    				}))
    			: lineList.map(line => ({
    					coa: {
    						t1,
    						ordinaries: [{ ordinary, t: t2, line }]
    					},
    					newLine: line
    				})));
    		}
    	};

    	return [line, linesData, $t, getTip, handleChange, division, ordinary, t1, t2];
    }

    class EditorLine extends SvelteComponentDev {
    	constructor(options) {
    		super(options);

    		init(this, options, instance$g, create_fragment$g, safe_not_equal, {
    			line: 0,
    			division: 5,
    			ordinary: 6,
    			t1: 7,
    			t2: 8
    		});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "EditorLine",
    			options,
    			id: create_fragment$g.name
    		});

    		const { ctx } = this.$$;
    		const props = options.props || {};

    		if (/*line*/ ctx[0] === undefined && !('line' in props)) {
    			console.warn("<EditorLine> was created without expected prop 'line'");
    		}

    		if (/*t1*/ ctx[7] === undefined && !('t1' in props)) {
    			console.warn("<EditorLine> was created without expected prop 't1'");
    		}

    		if (/*t2*/ ctx[8] === undefined && !('t2' in props)) {
    			console.warn("<EditorLine> was created without expected prop 't2'");
    		}
    	}

    	get line() {
    		throw new Error("<EditorLine>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set line(value) {
    		throw new Error("<EditorLine>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get division() {
    		throw new Error("<EditorLine>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set division(value) {
    		throw new Error("<EditorLine>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get ordinary() {
    		throw new Error("<EditorLine>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set ordinary(value) {
    		throw new Error("<EditorLine>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get t1() {
    		throw new Error("<EditorLine>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set t1(value) {
    		throw new Error("<EditorLine>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get t2() {
    		throw new Error("<EditorLine>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set t2(value) {
    		throw new Error("<EditorLine>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /* src/components/editor/EditorOrdinary.svelte generated by Svelte v3.44.2 */

    const { Object: Object_1$6 } = globals;
    const file$f = "src/components/editor/EditorOrdinary.svelte";

    function get_each_context$8(ctx, list, i) {
    	const child_ctx = ctx.slice();
    	child_ctx[9] = list[i].coa;
    	child_ctx[10] = list[i].ordinaryName;
    	return child_ctx;
    }

    // (21:2) {#each coas as { coa, ordinaryName }
    function create_each_block$8(key_1, ctx) {
    	let div;
    	let editoritem;
    	let t_1;
    	let current;
    	let mounted;
    	let dispose;

    	editoritem = new EditorItem({
    			props: {
    				coa: /*coa*/ ctx[9],
    				tip: /*getTip*/ ctx[2](/*ordinaryName*/ ctx[10])
    			},
    			$$inline: true
    		});

    	const block = {
    		key: key_1,
    		first: null,
    		c: function create() {
    			div = element("div");
    			create_component(editoritem.$$.fragment);
    			t_1 = space();
    			attr_dev(div, "class", "item");
    			toggle_class(div, "selected", /*ordinary*/ ctx[0] === /*ordinaryName*/ ctx[10]);
    			add_location(div, file$f, 21, 4, 747);
    			this.first = div;
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    			mount_component(editoritem, div, null);
    			append_dev(div, t_1);
    			current = true;

    			if (!mounted) {
    				dispose = listen_dev(
    					div,
    					"click",
    					function () {
    						if (is_function(/*handleChange*/ ctx[3](/*ordinaryName*/ ctx[10]))) /*handleChange*/ ctx[3](/*ordinaryName*/ ctx[10]).apply(this, arguments);
    					},
    					false,
    					false,
    					false
    				);

    				mounted = true;
    			}
    		},
    		p: function update(new_ctx, dirty) {
    			ctx = new_ctx;
    			const editoritem_changes = {};
    			if (dirty & /*coas*/ 2) editoritem_changes.coa = /*coa*/ ctx[9];
    			if (dirty & /*coas*/ 2) editoritem_changes.tip = /*getTip*/ ctx[2](/*ordinaryName*/ ctx[10]);
    			editoritem.$set(editoritem_changes);

    			if (dirty & /*ordinary, coas*/ 3) {
    				toggle_class(div, "selected", /*ordinary*/ ctx[0] === /*ordinaryName*/ ctx[10]);
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(editoritem.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(editoritem.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    			destroy_component(editoritem);
    			mounted = false;
    			dispose();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_each_block$8.name,
    		type: "each",
    		source: "(21:2) {#each coas as { coa, ordinaryName }",
    		ctx
    	});

    	return block;
    }

    function create_fragment$f(ctx) {
    	let div;
    	let each_blocks = [];
    	let each_1_lookup = new Map();
    	let current;
    	let each_value = /*coas*/ ctx[1];
    	validate_each_argument(each_value);
    	const get_key = ctx => /*coa*/ ctx[9];
    	validate_each_keys(ctx, each_value, get_each_context$8, get_key);

    	for (let i = 0; i < each_value.length; i += 1) {
    		let child_ctx = get_each_context$8(ctx, each_value, i);
    		let key = get_key(child_ctx);
    		each_1_lookup.set(key, each_blocks[i] = create_each_block$8(key, child_ctx));
    	}

    	const block = {
    		c: function create() {
    			div = element("div");

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].c();
    			}

    			attr_dev(div, "class", "items");
    			add_location(div, file$f, 19, 0, 677);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].m(div, null);
    			}

    			current = true;
    		},
    		p: function update(ctx, [dirty]) {
    			if (dirty & /*ordinary, coas, handleChange, getTip*/ 15) {
    				each_value = /*coas*/ ctx[1];
    				validate_each_argument(each_value);
    				group_outros();
    				validate_each_keys(ctx, each_value, get_each_context$8, get_key);
    				each_blocks = update_keyed_each(each_blocks, dirty, get_key, 1, ctx, each_value, each_1_lookup, div, outro_and_destroy_block, create_each_block$8, null, get_each_context$8);
    				check_outros();
    			}
    		},
    		i: function intro(local) {
    			if (current) return;

    			for (let i = 0; i < each_value.length; i += 1) {
    				transition_in(each_blocks[i]);
    			}

    			current = true;
    		},
    		o: function outro(local) {
    			for (let i = 0; i < each_blocks.length; i += 1) {
    				transition_out(each_blocks[i]);
    			}

    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].d();
    			}
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$f.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$f($$self, $$props, $$invalidate) {
    	let coas;
    	let $t;
    	validate_store(X, 't');
    	component_subscribe($$self, X, $$value => $$invalidate(7, $t = $$value));
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('EditorOrdinary', slots, []);
    	let { ordinary } = $$props;
    	let { line } = $$props;
    	let { t1 } = $$props;
    	let { t2 } = $$props;
    	const ordinariesList = Object.keys(ordinaries.lined).concat(Object.keys(ordinaries.straight));

    	const getTip = ordinary => {
    		const ordinaryName = $t(`ordinaries.${ordinary}`);
    		return `${$t("editor.ordinary")}: ${ordinaryName}`;
    	};

    	const handleChange = newOrdinary => () => {
    		$$invalidate(0, ordinary = newOrdinary);
    	};

    	const writable_props = ['ordinary', 'line', 't1', 't2'];

    	Object_1$6.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<EditorOrdinary> was created with unknown prop '${key}'`);
    	});

    	$$self.$$set = $$props => {
    		if ('ordinary' in $$props) $$invalidate(0, ordinary = $$props.ordinary);
    		if ('line' in $$props) $$invalidate(4, line = $$props.line);
    		if ('t1' in $$props) $$invalidate(5, t1 = $$props.t1);
    		if ('t2' in $$props) $$invalidate(6, t2 = $$props.t2);
    	};

    	$$self.$capture_state = () => ({
    		t: X,
    		EditorItem,
    		ordinaries,
    		ordinary,
    		line,
    		t1,
    		t2,
    		ordinariesList,
    		getTip,
    		handleChange,
    		coas,
    		$t
    	});

    	$$self.$inject_state = $$props => {
    		if ('ordinary' in $$props) $$invalidate(0, ordinary = $$props.ordinary);
    		if ('line' in $$props) $$invalidate(4, line = $$props.line);
    		if ('t1' in $$props) $$invalidate(5, t1 = $$props.t1);
    		if ('t2' in $$props) $$invalidate(6, t2 = $$props.t2);
    		if ('coas' in $$props) $$invalidate(1, coas = $$props.coas);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	$$self.$$.update = () => {
    		if ($$self.$$.dirty & /*t1, line, t2*/ 112) {
    			$$invalidate(1, coas = ordinariesList.map(ordinary => ({
    				coa: {
    					t1,
    					ordinaries: [{ ordinary, line, t: t2 }]
    				},
    				ordinaryName: ordinary
    			})));
    		}
    	};

    	return [ordinary, coas, getTip, handleChange, line, t1, t2];
    }

    class EditorOrdinary extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$f, create_fragment$f, safe_not_equal, { ordinary: 0, line: 4, t1: 5, t2: 6 });

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "EditorOrdinary",
    			options,
    			id: create_fragment$f.name
    		});

    		const { ctx } = this.$$;
    		const props = options.props || {};

    		if (/*ordinary*/ ctx[0] === undefined && !('ordinary' in props)) {
    			console.warn("<EditorOrdinary> was created without expected prop 'ordinary'");
    		}

    		if (/*line*/ ctx[4] === undefined && !('line' in props)) {
    			console.warn("<EditorOrdinary> was created without expected prop 'line'");
    		}

    		if (/*t1*/ ctx[5] === undefined && !('t1' in props)) {
    			console.warn("<EditorOrdinary> was created without expected prop 't1'");
    		}

    		if (/*t2*/ ctx[6] === undefined && !('t2' in props)) {
    			console.warn("<EditorOrdinary> was created without expected prop 't2'");
    		}
    	}

    	get ordinary() {
    		throw new Error("<EditorOrdinary>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set ordinary(value) {
    		throw new Error("<EditorOrdinary>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get line() {
    		throw new Error("<EditorOrdinary>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set line(value) {
    		throw new Error("<EditorOrdinary>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get t1() {
    		throw new Error("<EditorOrdinary>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set t1(value) {
    		throw new Error("<EditorOrdinary>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get t2() {
    		throw new Error("<EditorOrdinary>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set t2(value) {
    		throw new Error("<EditorOrdinary>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /* src/components/editor/EditorPattern.svelte generated by Svelte v3.44.2 */

    const { Object: Object_1$5 } = globals;
    const file$e = "src/components/editor/EditorPattern.svelte";

    function get_each_context$7(ctx, list, i) {
    	const child_ctx = ctx.slice();
    	child_ctx[8] = list[i].coa;
    	child_ctx[9] = list[i].tip;
    	return child_ctx;
    }

    // (26:2) {#each patternsData as { coa, tip }}
    function create_each_block$7(ctx) {
    	let div;
    	let editoritem;
    	let t_1;
    	let current;
    	let mounted;
    	let dispose;

    	editoritem = new EditorItem({
    			props: { coa: /*coa*/ ctx[8], tip: /*tip*/ ctx[9] },
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			div = element("div");
    			create_component(editoritem.$$.fragment);
    			t_1 = space();
    			attr_dev(div, "class", "item");
    			toggle_class(div, "selected", /*pattern*/ ctx[0] === /*coa*/ ctx[8].pattern);
    			add_location(div, file$e, 26, 4, 814);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    			mount_component(editoritem, div, null);
    			append_dev(div, t_1);
    			current = true;

    			if (!mounted) {
    				dispose = listen_dev(
    					div,
    					"click",
    					function () {
    						if (is_function(/*handleChange*/ ctx[3](/*coa*/ ctx[8].pattern))) /*handleChange*/ ctx[3](/*coa*/ ctx[8].pattern).apply(this, arguments);
    					},
    					false,
    					false,
    					false
    				);

    				mounted = true;
    			}
    		},
    		p: function update(new_ctx, dirty) {
    			ctx = new_ctx;
    			const editoritem_changes = {};
    			if (dirty & /*patternsData*/ 4) editoritem_changes.coa = /*coa*/ ctx[8];
    			if (dirty & /*patternsData*/ 4) editoritem_changes.tip = /*tip*/ ctx[9];
    			editoritem.$set(editoritem_changes);

    			if (dirty & /*pattern, patternsData*/ 5) {
    				toggle_class(div, "selected", /*pattern*/ ctx[0] === /*coa*/ ctx[8].pattern);
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(editoritem.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(editoritem.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    			destroy_component(editoritem);
    			mounted = false;
    			dispose();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_each_block$7.name,
    		type: "each",
    		source: "(26:2) {#each patternsData as { coa, tip }}",
    		ctx
    	});

    	return block;
    }

    function create_fragment$e(ctx) {
    	let t0_value = /*$t*/ ctx[1]("editor.pattern") + "";
    	let t0;
    	let t1_1;
    	let div;
    	let current;
    	let each_value = /*patternsData*/ ctx[2];
    	validate_each_argument(each_value);
    	let each_blocks = [];

    	for (let i = 0; i < each_value.length; i += 1) {
    		each_blocks[i] = create_each_block$7(get_each_context$7(ctx, each_value, i));
    	}

    	const out = i => transition_out(each_blocks[i], 1, 1, () => {
    		each_blocks[i] = null;
    	});

    	const block = {
    		c: function create() {
    			t0 = text(t0_value);
    			t1_1 = text(":\n");
    			div = element("div");

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].c();
    			}

    			attr_dev(div, "class", "items");
    			add_location(div, file$e, 24, 0, 751);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, t0, anchor);
    			insert_dev(target, t1_1, anchor);
    			insert_dev(target, div, anchor);

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].m(div, null);
    			}

    			current = true;
    		},
    		p: function update(ctx, [dirty]) {
    			if ((!current || dirty & /*$t*/ 2) && t0_value !== (t0_value = /*$t*/ ctx[1]("editor.pattern") + "")) set_data_dev(t0, t0_value);

    			if (dirty & /*pattern, patternsData, handleChange*/ 13) {
    				each_value = /*patternsData*/ ctx[2];
    				validate_each_argument(each_value);
    				let i;

    				for (i = 0; i < each_value.length; i += 1) {
    					const child_ctx = get_each_context$7(ctx, each_value, i);

    					if (each_blocks[i]) {
    						each_blocks[i].p(child_ctx, dirty);
    						transition_in(each_blocks[i], 1);
    					} else {
    						each_blocks[i] = create_each_block$7(child_ctx);
    						each_blocks[i].c();
    						transition_in(each_blocks[i], 1);
    						each_blocks[i].m(div, null);
    					}
    				}

    				group_outros();

    				for (i = each_value.length; i < each_blocks.length; i += 1) {
    					out(i);
    				}

    				check_outros();
    			}
    		},
    		i: function intro(local) {
    			if (current) return;

    			for (let i = 0; i < each_value.length; i += 1) {
    				transition_in(each_blocks[i]);
    			}

    			current = true;
    		},
    		o: function outro(local) {
    			each_blocks = each_blocks.filter(Boolean);

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				transition_out(each_blocks[i]);
    			}

    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(t0);
    			if (detaching) detach_dev(t1_1);
    			if (detaching) detach_dev(div);
    			destroy_each(each_blocks, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$e.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$e($$self, $$props, $$invalidate) {
    	let patternsData;
    	let $t;
    	validate_store(X, 't');
    	component_subscribe($$self, X, $$value => $$invalidate(1, $t = $$value));
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('EditorPattern', slots, []);
    	let { pattern } = $$props;
    	let { t1 } = $$props;
    	let { t2 } = $$props;
    	let { size } = $$props;
    	const patterns = Object.keys(DEFAULT_TINCTURES.patterns).filter(pattern => pattern !== "semy");

    	// clean group
    	document.getElementById("patterns").innerHTML = "";

    	const handleChange = newPattern => () => {
    		$$invalidate(0, pattern = newPattern);
    	};

    	const writable_props = ['pattern', 't1', 't2', 'size'];

    	Object_1$5.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<EditorPattern> was created with unknown prop '${key}'`);
    	});

    	$$self.$$set = $$props => {
    		if ('pattern' in $$props) $$invalidate(0, pattern = $$props.pattern);
    		if ('t1' in $$props) $$invalidate(4, t1 = $$props.t1);
    		if ('t2' in $$props) $$invalidate(5, t2 = $$props.t2);
    		if ('size' in $$props) $$invalidate(6, size = $$props.size);
    	};

    	$$self.$capture_state = () => ({
    		t: X,
    		EditorItem,
    		DEFAULT_TINCTURES,
    		pattern,
    		t1,
    		t2,
    		size,
    		patterns,
    		handleChange,
    		patternsData,
    		$t
    	});

    	$$self.$inject_state = $$props => {
    		if ('pattern' in $$props) $$invalidate(0, pattern = $$props.pattern);
    		if ('t1' in $$props) $$invalidate(4, t1 = $$props.t1);
    		if ('t2' in $$props) $$invalidate(5, t2 = $$props.t2);
    		if ('size' in $$props) $$invalidate(6, size = $$props.size);
    		if ('patternsData' in $$props) $$invalidate(2, patternsData = $$props.patternsData);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	$$self.$$.update = () => {
    		if ($$self.$$.dirty & /*t1, t2, size, $t*/ 114) {
    			$$invalidate(2, patternsData = patterns.map(pattern => {
    				let tincture = `${pattern}-${t1}-${t2}`;
    				if (size !== "standard") tincture += `-${size}`;
    				const tip = $t(`patterns.${pattern}`);
    				return { coa: { pattern, t1: tincture }, tip };
    			}));
    		}
    	};

    	return [pattern, $t, patternsData, handleChange, t1, t2, size];
    }

    class EditorPattern extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$e, create_fragment$e, safe_not_equal, { pattern: 0, t1: 4, t2: 5, size: 6 });

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "EditorPattern",
    			options,
    			id: create_fragment$e.name
    		});

    		const { ctx } = this.$$;
    		const props = options.props || {};

    		if (/*pattern*/ ctx[0] === undefined && !('pattern' in props)) {
    			console.warn("<EditorPattern> was created without expected prop 'pattern'");
    		}

    		if (/*t1*/ ctx[4] === undefined && !('t1' in props)) {
    			console.warn("<EditorPattern> was created without expected prop 't1'");
    		}

    		if (/*t2*/ ctx[5] === undefined && !('t2' in props)) {
    			console.warn("<EditorPattern> was created without expected prop 't2'");
    		}

    		if (/*size*/ ctx[6] === undefined && !('size' in props)) {
    			console.warn("<EditorPattern> was created without expected prop 'size'");
    		}
    	}

    	get pattern() {
    		throw new Error("<EditorPattern>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set pattern(value) {
    		throw new Error("<EditorPattern>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get t1() {
    		throw new Error("<EditorPattern>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set t1(value) {
    		throw new Error("<EditorPattern>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get t2() {
    		throw new Error("<EditorPattern>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set t2(value) {
    		throw new Error("<EditorPattern>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get size() {
    		throw new Error("<EditorPattern>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set size(value) {
    		throw new Error("<EditorPattern>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /* src/components/editor/EditorPosition.svelte generated by Svelte v3.44.2 */
    const file$d = "src/components/editor/EditorPosition.svelte";

    function get_each_context$6(ctx, list, i) {
    	const child_ctx = ctx.slice();
    	child_ctx[10] = list[i];
    	return child_ctx;
    }

    // (26:4) {#each positionsSelect as position}
    function create_each_block$6(ctx) {
    	let option;
    	let t_1_value = /*position*/ ctx[10] + "";
    	let t_1;

    	const block = {
    		c: function create() {
    			option = element("option");
    			t_1 = text(t_1_value);
    			option.__value = /*position*/ ctx[10];
    			option.value = option.__value;
    			add_location(option, file$d, 26, 6, 962);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, option, anchor);
    			append_dev(option, t_1);
    		},
    		p: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(option);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_each_block$6.name,
    		type: "each",
    		source: "(26:4) {#each positionsSelect as position}",
    		ctx
    	});

    	return block;
    }

    function create_fragment$d(ctx) {
    	let span0;
    	let t0_value = /*$t*/ ctx[1]("editor.positions") + "";
    	let t0;
    	let t1;
    	let input;
    	let t2;
    	let select;
    	let span0_data_tooltip_value;
    	let t3;
    	let span2;
    	let span1;
    	let t4_value = /*$t*/ ctx[1]("editor.sinister") + "";
    	let t4;
    	let t5;
    	let t6;
    	let switch0;
    	let updating_checked;
    	let span2_data_tooltip_value;
    	let t7;
    	let span4;
    	let span3;
    	let t8_value = /*$t*/ ctx[1]("editor.reversed") + "";
    	let t8;
    	let t9;
    	let t10;
    	let switch1;
    	let updating_checked_1;
    	let span4_data_tooltip_value;
    	let current;
    	let mounted;
    	let dispose;
    	let each_value = positionsSelect;
    	validate_each_argument(each_value);
    	let each_blocks = [];

    	for (let i = 0; i < each_value.length; i += 1) {
    		each_blocks[i] = create_each_block$6(get_each_context$6(ctx, each_value, i));
    	}

    	function switch0_checked_binding(value) {
    		/*switch0_checked_binding*/ ctx[7](value);
    	}

    	let switch0_props = {};

    	if (/*charge*/ ctx[0].sinister !== void 0) {
    		switch0_props.checked = /*charge*/ ctx[0].sinister;
    	}

    	switch0 = new Switch({ props: switch0_props, $$inline: true });
    	binding_callbacks.push(() => bind(switch0, 'checked', switch0_checked_binding));

    	function switch1_checked_binding(value) {
    		/*switch1_checked_binding*/ ctx[8](value);
    	}

    	let switch1_props = {};

    	if (/*charge*/ ctx[0].reversed !== void 0) {
    		switch1_props.checked = /*charge*/ ctx[0].reversed;
    	}

    	switch1 = new Switch({ props: switch1_props, $$inline: true });
    	binding_callbacks.push(() => bind(switch1, 'checked', switch1_checked_binding));

    	const block = {
    		c: function create() {
    			span0 = element("span");
    			t0 = text(t0_value);
    			t1 = text(":\n  ");
    			input = element("input");
    			t2 = space();
    			select = element("select");

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].c();
    			}

    			t3 = space();
    			span2 = element("span");
    			span1 = element("span");
    			t4 = text(t4_value);
    			t5 = text(":");
    			t6 = space();
    			create_component(switch0.$$.fragment);
    			t7 = space();
    			span4 = element("span");
    			span3 = element("span");
    			t8 = text(t8_value);
    			t9 = text(":");
    			t10 = space();
    			create_component(switch1.$$.fragment);
    			attr_dev(input, "class", "svelte-gqtmdl");
    			add_location(input, file$d, 23, 2, 701);
    			attr_dev(select, "class", "svelte-gqtmdl");
    			if (/*charge*/ ctx[0].p === void 0) add_render_callback(() => /*select_change_handler*/ ctx[6].call(select));
    			add_location(select, file$d, 24, 2, 809);
    			attr_dev(span0, "data-tooltip", span0_data_tooltip_value = /*$t*/ ctx[1]("tooltip.positions"));
    			add_location(span0, file$d, 21, 0, 613);
    			set_style(span1, "margin-left", "1em");
    			attr_dev(span1, "class", "svelte-gqtmdl");
    			add_location(span1, file$d, 32, 2, 1099);
    			attr_dev(span2, "data-tooltip", span2_data_tooltip_value = /*$t*/ ctx[1]("tooltip.sinister"));
    			attr_dev(span2, "class", "svelte-gqtmdl");
    			add_location(span2, file$d, 31, 0, 1040);
    			set_style(span3, "margin-left", "1em");
    			attr_dev(span3, "class", "svelte-gqtmdl");
    			add_location(span3, file$d, 37, 2, 1274);
    			attr_dev(span4, "data-tooltip", span4_data_tooltip_value = /*$t*/ ctx[1]("tooltip.reversed"));
    			attr_dev(span4, "class", "svelte-gqtmdl");
    			add_location(span4, file$d, 36, 0, 1215);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, span0, anchor);
    			append_dev(span0, t0);
    			append_dev(span0, t1);
    			append_dev(span0, input);
    			set_input_value(input, /*charge*/ ctx[0].p);
    			append_dev(span0, t2);
    			append_dev(span0, select);

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].m(select, null);
    			}

    			select_option(select, /*charge*/ ctx[0].p);
    			insert_dev(target, t3, anchor);
    			insert_dev(target, span2, anchor);
    			append_dev(span2, span1);
    			append_dev(span1, t4);
    			append_dev(span1, t5);
    			append_dev(span2, t6);
    			mount_component(switch0, span2, null);
    			insert_dev(target, t7, anchor);
    			insert_dev(target, span4, anchor);
    			append_dev(span4, span3);
    			append_dev(span3, t8);
    			append_dev(span3, t9);
    			append_dev(span4, t10);
    			mount_component(switch1, span4, null);
    			current = true;

    			if (!mounted) {
    				dispose = [
    					listen_dev(input, "input", /*input_input_handler*/ ctx[5]),
    					listen_dev(input, "input", /*showPositions*/ ctx[2], false, false, false),
    					listen_dev(input, "focus", /*showPositions*/ ctx[2], false, false, false),
    					listen_dev(input, "blur", /*hidePositions*/ ctx[3], false, false, false),
    					listen_dev(select, "change", /*select_change_handler*/ ctx[6]),
    					listen_dev(select, "change", /*changePosition*/ ctx[4], false, false, false),
    					listen_dev(select, "focus", /*showPositions*/ ctx[2], false, false, false),
    					listen_dev(select, "blur", /*hidePositions*/ ctx[3], false, false, false),
    					action_destroyer(tooltip.call(null, span0)),
    					action_destroyer(tooltip.call(null, span2)),
    					action_destroyer(tooltip.call(null, span4))
    				];

    				mounted = true;
    			}
    		},
    		p: function update(ctx, [dirty]) {
    			if ((!current || dirty & /*$t*/ 2) && t0_value !== (t0_value = /*$t*/ ctx[1]("editor.positions") + "")) set_data_dev(t0, t0_value);

    			if (dirty & /*charge, positionsSelect*/ 1 && input.value !== /*charge*/ ctx[0].p) {
    				set_input_value(input, /*charge*/ ctx[0].p);
    			}

    			if (dirty & /*positionsSelect*/ 0) {
    				each_value = positionsSelect;
    				validate_each_argument(each_value);
    				let i;

    				for (i = 0; i < each_value.length; i += 1) {
    					const child_ctx = get_each_context$6(ctx, each_value, i);

    					if (each_blocks[i]) {
    						each_blocks[i].p(child_ctx, dirty);
    					} else {
    						each_blocks[i] = create_each_block$6(child_ctx);
    						each_blocks[i].c();
    						each_blocks[i].m(select, null);
    					}
    				}

    				for (; i < each_blocks.length; i += 1) {
    					each_blocks[i].d(1);
    				}

    				each_blocks.length = each_value.length;
    			}

    			if (dirty & /*charge, positionsSelect*/ 1) {
    				select_option(select, /*charge*/ ctx[0].p);
    			}

    			if (!current || dirty & /*$t*/ 2 && span0_data_tooltip_value !== (span0_data_tooltip_value = /*$t*/ ctx[1]("tooltip.positions"))) {
    				attr_dev(span0, "data-tooltip", span0_data_tooltip_value);
    			}

    			if ((!current || dirty & /*$t*/ 2) && t4_value !== (t4_value = /*$t*/ ctx[1]("editor.sinister") + "")) set_data_dev(t4, t4_value);
    			const switch0_changes = {};

    			if (!updating_checked && dirty & /*charge*/ 1) {
    				updating_checked = true;
    				switch0_changes.checked = /*charge*/ ctx[0].sinister;
    				add_flush_callback(() => updating_checked = false);
    			}

    			switch0.$set(switch0_changes);

    			if (!current || dirty & /*$t*/ 2 && span2_data_tooltip_value !== (span2_data_tooltip_value = /*$t*/ ctx[1]("tooltip.sinister"))) {
    				attr_dev(span2, "data-tooltip", span2_data_tooltip_value);
    			}

    			if ((!current || dirty & /*$t*/ 2) && t8_value !== (t8_value = /*$t*/ ctx[1]("editor.reversed") + "")) set_data_dev(t8, t8_value);
    			const switch1_changes = {};

    			if (!updating_checked_1 && dirty & /*charge*/ 1) {
    				updating_checked_1 = true;
    				switch1_changes.checked = /*charge*/ ctx[0].reversed;
    				add_flush_callback(() => updating_checked_1 = false);
    			}

    			switch1.$set(switch1_changes);

    			if (!current || dirty & /*$t*/ 2 && span4_data_tooltip_value !== (span4_data_tooltip_value = /*$t*/ ctx[1]("tooltip.reversed"))) {
    				attr_dev(span4, "data-tooltip", span4_data_tooltip_value);
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(switch0.$$.fragment, local);
    			transition_in(switch1.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(switch0.$$.fragment, local);
    			transition_out(switch1.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(span0);
    			destroy_each(each_blocks, detaching);
    			if (detaching) detach_dev(t3);
    			if (detaching) detach_dev(span2);
    			destroy_component(switch0);
    			if (detaching) detach_dev(t7);
    			if (detaching) detach_dev(span4);
    			destroy_component(switch1);
    			mounted = false;
    			run_all(dispose);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$d.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$d($$self, $$props, $$invalidate) {
    	let $state;
    	let $t;
    	validate_store(state, 'state');
    	component_subscribe($$self, state, $$value => $$invalidate(9, $state = $$value));
    	validate_store(X, 't');
    	component_subscribe($$self, X, $$value => $$invalidate(1, $t = $$value));
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('EditorPosition', slots, []);
    	let { charge } = $$props;

    	function showPositions() {
    		set_store_value(state, $state.transform = `rotate(${charge.angle || 0}) translate(${charge.x || 0}, ${charge.y || 0})`, $state);
    		set_store_value(state, $state.positions = charge.p, $state);
    	}

    	function hidePositions() {
    		set_store_value(state, $state.positions = 0, $state);
    	}

    	function changePosition() {
    		showPositions();
    		$$invalidate(0, charge.size = getSize(charge.p), charge);
    	}

    	const writable_props = ['charge'];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<EditorPosition> was created with unknown prop '${key}'`);
    	});

    	function input_input_handler() {
    		charge.p = this.value;
    		$$invalidate(0, charge);
    	}

    	function select_change_handler() {
    		charge.p = select_value(this);
    		$$invalidate(0, charge);
    	}

    	function switch0_checked_binding(value) {
    		if ($$self.$$.not_equal(charge.sinister, value)) {
    			charge.sinister = value;
    			$$invalidate(0, charge);
    		}
    	}

    	function switch1_checked_binding(value) {
    		if ($$self.$$.not_equal(charge.reversed, value)) {
    			charge.reversed = value;
    			$$invalidate(0, charge);
    		}
    	}

    	$$self.$$set = $$props => {
    		if ('charge' in $$props) $$invalidate(0, charge = $$props.charge);
    	};

    	$$self.$capture_state = () => ({
    		t: X,
    		Switch,
    		state,
    		positionsSelect,
    		getSize,
    		tooltip,
    		charge,
    		showPositions,
    		hidePositions,
    		changePosition,
    		$state,
    		$t
    	});

    	$$self.$inject_state = $$props => {
    		if ('charge' in $$props) $$invalidate(0, charge = $$props.charge);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [
    		charge,
    		$t,
    		showPositions,
    		hidePositions,
    		changePosition,
    		input_input_handler,
    		select_change_handler,
    		switch0_checked_binding,
    		switch1_checked_binding
    	];
    }

    class EditorPosition extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$d, create_fragment$d, safe_not_equal, { charge: 0 });

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "EditorPosition",
    			options,
    			id: create_fragment$d.name
    		});

    		const { ctx } = this.$$;
    		const props = options.props || {};

    		if (/*charge*/ ctx[0] === undefined && !('charge' in props)) {
    			console.warn("<EditorPosition> was created without expected prop 'charge'");
    		}
    	}

    	get charge() {
    		throw new Error("<EditorPosition>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set charge(value) {
    		throw new Error("<EditorPosition>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /* src/components/editor/EditorShift.svelte generated by Svelte v3.44.2 */
    const file$c = "src/components/editor/EditorShift.svelte";

    function create_fragment$c(ctx) {
    	let span0;
    	let t0_value = /*$t*/ ctx[1]("editor.size") + "";
    	let t0;
    	let t1;
    	let input0;
    	let input0_value_value;
    	let span0_data_tooltip_value;
    	let t2;
    	let span2;
    	let span1;
    	let t3_value = /*$t*/ ctx[1]("editor.rotation") + "";
    	let t3;
    	let t4;
    	let t5;
    	let input1;
    	let span2_data_tooltip_value;
    	let t6;
    	let span4;
    	let span3;
    	let t7_value = /*$t*/ ctx[1]("editor.shift") + "";
    	let t7;
    	let t8;
    	let t9;
    	let input2;
    	let t10;
    	let input3;
    	let span4_data_tooltip_value;
    	let t11;
    	let span6;
    	let span5;
    	let t12_value = /*$t*/ ctx[1]("editor.step") + "";
    	let t12;
    	let t13;
    	let t14;
    	let input4;
    	let span6_data_tooltip_value;
    	let t15;
    	let span7;
    	let switch_1;
    	let updating_checked;
    	let span7_data_tooltip_value;
    	let current;
    	let mounted;
    	let dispose;

    	function switch_1_checked_binding(value) {
    		/*switch_1_checked_binding*/ ctx[10](value);
    	}

    	let switch_1_props = {};

    	if (/*$showGrid*/ ctx[3] !== void 0) {
    		switch_1_props.checked = /*$showGrid*/ ctx[3];
    	}

    	switch_1 = new Switch({ props: switch_1_props, $$inline: true });
    	binding_callbacks.push(() => bind(switch_1, 'checked', switch_1_checked_binding));

    	const block = {
    		c: function create() {
    			span0 = element("span");
    			t0 = text(t0_value);
    			t1 = text(":\n  ");
    			input0 = element("input");
    			t2 = space();
    			span2 = element("span");
    			span1 = element("span");
    			t3 = text(t3_value);
    			t4 = text(":");
    			t5 = space();
    			input1 = element("input");
    			t6 = space();
    			span4 = element("span");
    			span3 = element("span");
    			t7 = text(t7_value);
    			t8 = text(":");
    			t9 = space();
    			input2 = element("input");
    			t10 = space();
    			input3 = element("input");
    			t11 = space();
    			span6 = element("span");
    			span5 = element("span");
    			t12 = text(t12_value);
    			t13 = text(":");
    			t14 = space();
    			input4 = element("input");
    			t15 = space();
    			span7 = element("span");
    			create_component(switch_1.$$.fragment);
    			attr_dev(input0, "type", "number");
    			attr_dev(input0, "min", "1");
    			attr_dev(input0, "max", "500");
    			attr_dev(input0, "step", "1");
    			input0.value = input0_value_value = /*element*/ ctx[0].size * 100 | 0;
    			attr_dev(input0, "class", "svelte-wggx8m");
    			add_location(input0, file$c, 17, 2, 515);
    			attr_dev(span0, "data-tooltip", span0_data_tooltip_value = /*$t*/ ctx[1]("tooltip.size"));
    			add_location(span0, file$c, 15, 0, 437);
    			attr_dev(span1, "class", "svelte-wggx8m");
    			add_location(span1, file$c, 21, 2, 694);
    			attr_dev(input1, "type", "number");
    			attr_dev(input1, "min", "-180");
    			attr_dev(input1, "max", "180");
    			attr_dev(input1, "class", "svelte-wggx8m");
    			add_location(input1, file$c, 22, 2, 734);
    			attr_dev(span2, "data-tooltip", span2_data_tooltip_value = /*$t*/ ctx[1]("tooltip.rotation"));
    			attr_dev(span2, "class", "svelte-wggx8m");
    			add_location(span2, file$c, 20, 0, 635);
    			attr_dev(span3, "class", "svelte-wggx8m");
    			add_location(span3, file$c, 26, 2, 894);
    			attr_dev(input2, "type", "number");
    			attr_dev(input2, "min", "-100");
    			attr_dev(input2, "max", "100");
    			attr_dev(input2, "step", /*$grid*/ ctx[2]);
    			attr_dev(input2, "class", "svelte-wggx8m");
    			add_location(input2, file$c, 27, 2, 931);
    			attr_dev(input3, "type", "number");
    			attr_dev(input3, "min", "-100");
    			attr_dev(input3, "max", "100");
    			attr_dev(input3, "step", /*$grid*/ ctx[2]);
    			attr_dev(input3, "class", "svelte-wggx8m");
    			add_location(input3, file$c, 28, 2, 1014);
    			attr_dev(span4, "data-tooltip", span4_data_tooltip_value = /*$t*/ ctx[1]("tooltip.shift"));
    			attr_dev(span4, "class", "svelte-wggx8m");
    			add_location(span4, file$c, 25, 0, 838);
    			attr_dev(span5, "class", "svelte-wggx8m");
    			add_location(span5, file$c, 32, 2, 1159);
    			attr_dev(input4, "type", "number");
    			attr_dev(input4, "min", "1");
    			attr_dev(input4, "max", "50");
    			attr_dev(input4, "class", "svelte-wggx8m");
    			add_location(input4, file$c, 33, 2, 1195);
    			attr_dev(span6, "data-tooltip", span6_data_tooltip_value = /*$t*/ ctx[1]("tooltip.step"));
    			attr_dev(span6, "class", "svelte-wggx8m");
    			add_location(span6, file$c, 31, 0, 1104);
    			attr_dev(span7, "data-tooltip", span7_data_tooltip_value = /*$t*/ ctx[1]("tooltip.showGrid"));
    			add_location(span7, file$c, 36, 0, 1264);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, span0, anchor);
    			append_dev(span0, t0);
    			append_dev(span0, t1);
    			append_dev(span0, input0);
    			insert_dev(target, t2, anchor);
    			insert_dev(target, span2, anchor);
    			append_dev(span2, span1);
    			append_dev(span1, t3);
    			append_dev(span1, t4);
    			append_dev(span2, t5);
    			append_dev(span2, input1);
    			set_input_value(input1, /*element*/ ctx[0].angle);
    			insert_dev(target, t6, anchor);
    			insert_dev(target, span4, anchor);
    			append_dev(span4, span3);
    			append_dev(span3, t7);
    			append_dev(span3, t8);
    			append_dev(span4, t9);
    			append_dev(span4, input2);
    			set_input_value(input2, /*element*/ ctx[0].x);
    			append_dev(span4, t10);
    			append_dev(span4, input3);
    			set_input_value(input3, /*element*/ ctx[0].y);
    			insert_dev(target, t11, anchor);
    			insert_dev(target, span6, anchor);
    			append_dev(span6, span5);
    			append_dev(span5, t12);
    			append_dev(span5, t13);
    			append_dev(span6, t14);
    			append_dev(span6, input4);
    			set_input_value(input4, /*$grid*/ ctx[2]);
    			insert_dev(target, t15, anchor);
    			insert_dev(target, span7, anchor);
    			mount_component(switch_1, span7, null);
    			current = true;

    			if (!mounted) {
    				dispose = [
    					listen_dev(input0, "input", /*hadleSizeChange*/ ctx[4], false, false, false),
    					action_destroyer(tooltip.call(null, span0)),
    					listen_dev(input1, "input", /*input1_input_handler*/ ctx[6]),
    					listen_dev(input1, "change", /*updateGrid*/ ctx[5], false, false, false),
    					action_destroyer(tooltip.call(null, span2)),
    					listen_dev(input2, "input", /*input2_input_handler*/ ctx[7]),
    					listen_dev(input3, "input", /*input3_input_handler*/ ctx[8]),
    					action_destroyer(tooltip.call(null, span4)),
    					listen_dev(input4, "input", /*input4_input_handler*/ ctx[9]),
    					action_destroyer(tooltip.call(null, span6)),
    					action_destroyer(tooltip.call(null, span7))
    				];

    				mounted = true;
    			}
    		},
    		p: function update(ctx, [dirty]) {
    			if ((!current || dirty & /*$t*/ 2) && t0_value !== (t0_value = /*$t*/ ctx[1]("editor.size") + "")) set_data_dev(t0, t0_value);

    			if (!current || dirty & /*element*/ 1 && input0_value_value !== (input0_value_value = /*element*/ ctx[0].size * 100 | 0)) {
    				prop_dev(input0, "value", input0_value_value);
    			}

    			if (!current || dirty & /*$t*/ 2 && span0_data_tooltip_value !== (span0_data_tooltip_value = /*$t*/ ctx[1]("tooltip.size"))) {
    				attr_dev(span0, "data-tooltip", span0_data_tooltip_value);
    			}

    			if ((!current || dirty & /*$t*/ 2) && t3_value !== (t3_value = /*$t*/ ctx[1]("editor.rotation") + "")) set_data_dev(t3, t3_value);

    			if (dirty & /*element*/ 1 && to_number(input1.value) !== /*element*/ ctx[0].angle) {
    				set_input_value(input1, /*element*/ ctx[0].angle);
    			}

    			if (!current || dirty & /*$t*/ 2 && span2_data_tooltip_value !== (span2_data_tooltip_value = /*$t*/ ctx[1]("tooltip.rotation"))) {
    				attr_dev(span2, "data-tooltip", span2_data_tooltip_value);
    			}

    			if ((!current || dirty & /*$t*/ 2) && t7_value !== (t7_value = /*$t*/ ctx[1]("editor.shift") + "")) set_data_dev(t7, t7_value);

    			if (!current || dirty & /*$grid*/ 4) {
    				attr_dev(input2, "step", /*$grid*/ ctx[2]);
    			}

    			if (dirty & /*element*/ 1 && to_number(input2.value) !== /*element*/ ctx[0].x) {
    				set_input_value(input2, /*element*/ ctx[0].x);
    			}

    			if (!current || dirty & /*$grid*/ 4) {
    				attr_dev(input3, "step", /*$grid*/ ctx[2]);
    			}

    			if (dirty & /*element*/ 1 && to_number(input3.value) !== /*element*/ ctx[0].y) {
    				set_input_value(input3, /*element*/ ctx[0].y);
    			}

    			if (!current || dirty & /*$t*/ 2 && span4_data_tooltip_value !== (span4_data_tooltip_value = /*$t*/ ctx[1]("tooltip.shift"))) {
    				attr_dev(span4, "data-tooltip", span4_data_tooltip_value);
    			}

    			if ((!current || dirty & /*$t*/ 2) && t12_value !== (t12_value = /*$t*/ ctx[1]("editor.step") + "")) set_data_dev(t12, t12_value);

    			if (dirty & /*$grid*/ 4 && to_number(input4.value) !== /*$grid*/ ctx[2]) {
    				set_input_value(input4, /*$grid*/ ctx[2]);
    			}

    			if (!current || dirty & /*$t*/ 2 && span6_data_tooltip_value !== (span6_data_tooltip_value = /*$t*/ ctx[1]("tooltip.step"))) {
    				attr_dev(span6, "data-tooltip", span6_data_tooltip_value);
    			}

    			const switch_1_changes = {};

    			if (!updating_checked && dirty & /*$showGrid*/ 8) {
    				updating_checked = true;
    				switch_1_changes.checked = /*$showGrid*/ ctx[3];
    				add_flush_callback(() => updating_checked = false);
    			}

    			switch_1.$set(switch_1_changes);

    			if (!current || dirty & /*$t*/ 2 && span7_data_tooltip_value !== (span7_data_tooltip_value = /*$t*/ ctx[1]("tooltip.showGrid"))) {
    				attr_dev(span7, "data-tooltip", span7_data_tooltip_value);
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(switch_1.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(switch_1.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(span0);
    			if (detaching) detach_dev(t2);
    			if (detaching) detach_dev(span2);
    			if (detaching) detach_dev(t6);
    			if (detaching) detach_dev(span4);
    			if (detaching) detach_dev(t11);
    			if (detaching) detach_dev(span6);
    			if (detaching) detach_dev(t15);
    			if (detaching) detach_dev(span7);
    			destroy_component(switch_1);
    			mounted = false;
    			run_all(dispose);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$c.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$c($$self, $$props, $$invalidate) {
    	let $state;
    	let $t;
    	let $grid;
    	let $showGrid;
    	validate_store(state, 'state');
    	component_subscribe($$self, state, $$value => $$invalidate(11, $state = $$value));
    	validate_store(X, 't');
    	component_subscribe($$self, X, $$value => $$invalidate(1, $t = $$value));
    	validate_store(grid, 'grid');
    	component_subscribe($$self, grid, $$value => $$invalidate(2, $grid = $$value));
    	validate_store(showGrid, 'showGrid');
    	component_subscribe($$self, showGrid, $$value => $$invalidate(3, $showGrid = $$value));
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('EditorShift', slots, []);
    	let { element } = $$props;

    	const hadleSizeChange = event => {
    		const target = event.target;
    		$$invalidate(0, element.size = parseInt(target.value) / 100, element);
    	};

    	const updateGrid = () => {
    		set_store_value(state, $state.transform = `rotate(${element.angle || 0})`, $state);
    	};

    	const writable_props = ['element'];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<EditorShift> was created with unknown prop '${key}'`);
    	});

    	function input1_input_handler() {
    		element.angle = to_number(this.value);
    		$$invalidate(0, element);
    	}

    	function input2_input_handler() {
    		element.x = to_number(this.value);
    		$$invalidate(0, element);
    	}

    	function input3_input_handler() {
    		element.y = to_number(this.value);
    		$$invalidate(0, element);
    	}

    	function input4_input_handler() {
    		$grid = to_number(this.value);
    		grid.set($grid);
    	}

    	function switch_1_checked_binding(value) {
    		$showGrid = value;
    		showGrid.set($showGrid);
    	}

    	$$self.$$set = $$props => {
    		if ('element' in $$props) $$invalidate(0, element = $$props.element);
    	};

    	$$self.$capture_state = () => ({
    		t: X,
    		Switch,
    		grid,
    		showGrid,
    		state,
    		tooltip,
    		element,
    		hadleSizeChange,
    		updateGrid,
    		$state,
    		$t,
    		$grid,
    		$showGrid
    	});

    	$$self.$inject_state = $$props => {
    		if ('element' in $$props) $$invalidate(0, element = $$props.element);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [
    		element,
    		$t,
    		$grid,
    		$showGrid,
    		hadleSizeChange,
    		updateGrid,
    		input1_input_handler,
    		input2_input_handler,
    		input3_input_handler,
    		input4_input_handler,
    		switch_1_checked_binding
    	];
    }

    class EditorShift extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$c, create_fragment$c, safe_not_equal, { element: 0 });

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "EditorShift",
    			options,
    			id: create_fragment$c.name
    		});

    		const { ctx } = this.$$;
    		const props = options.props || {};

    		if (/*element*/ ctx[0] === undefined && !('element' in props)) {
    			console.warn("<EditorShift> was created without expected prop 'element'");
    		}
    	}

    	get element() {
    		throw new Error("<EditorShift>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set element(value) {
    		throw new Error("<EditorShift>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /* src/components/editor/EditorSize.svelte generated by Svelte v3.44.2 */
    const file$b = "src/components/editor/EditorSize.svelte";

    function create_fragment$b(ctx) {
    	let span;
    	let t0_value = /*$t*/ ctx[1]("editor.size") + "";
    	let t0;
    	let t1;
    	let t2;
    	let select;
    	let option0;
    	let t3_value = /*$t*/ ctx[1]("editor.bigger") + "";
    	let t3;
    	let option1;
    	let t4_value = /*$t*/ ctx[1]("editor.big") + "";
    	let t4;
    	let option2;
    	let t5_value = /*$t*/ ctx[1]("editor.standard") + "";
    	let t5;
    	let option3;
    	let t6_value = /*$t*/ ctx[1]("editor.small") + "";
    	let t6;
    	let option4;
    	let t7_value = /*$t*/ ctx[1]("editor.smaller") + "";
    	let t7;
    	let option5;
    	let t8_value = /*$t*/ ctx[1]("editor.smallest") + "";
    	let t8;
    	let mounted;
    	let dispose;

    	const block = {
    		c: function create() {
    			span = element("span");
    			t0 = text(t0_value);
    			t1 = text(":");
    			t2 = space();
    			select = element("select");
    			option0 = element("option");
    			t3 = text(t3_value);
    			option1 = element("option");
    			t4 = text(t4_value);
    			option2 = element("option");
    			t5 = text(t5_value);
    			option3 = element("option");
    			t6 = text(t6_value);
    			option4 = element("option");
    			t7 = text(t7_value);
    			option5 = element("option");
    			t8 = text(t8_value);
    			set_style(span, "margin-left", "1em");
    			add_location(span, file$b, 5, 0, 92);
    			option0.__value = "bigger";
    			option0.value = option0.__value;
    			add_location(option0, file$b, 7, 2, 180);
    			option1.__value = "big";
    			option1.value = option1.__value;
    			add_location(option1, file$b, 8, 2, 236);
    			option2.__value = "standard";
    			option2.value = option2.__value;
    			add_location(option2, file$b, 9, 2, 286);
    			option3.__value = "small";
    			option3.value = option3.__value;
    			add_location(option3, file$b, 10, 2, 346);
    			option4.__value = "smaller";
    			option4.value = option4.__value;
    			add_location(option4, file$b, 11, 2, 400);
    			option5.__value = "smallest";
    			option5.value = option5.__value;
    			add_location(option5, file$b, 12, 2, 458);
    			if (/*size*/ ctx[0] === void 0) add_render_callback(() => /*select_change_handler*/ ctx[2].call(select));
    			add_location(select, file$b, 6, 0, 151);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, span, anchor);
    			append_dev(span, t0);
    			append_dev(span, t1);
    			insert_dev(target, t2, anchor);
    			insert_dev(target, select, anchor);
    			append_dev(select, option0);
    			append_dev(option0, t3);
    			append_dev(select, option1);
    			append_dev(option1, t4);
    			append_dev(select, option2);
    			append_dev(option2, t5);
    			append_dev(select, option3);
    			append_dev(option3, t6);
    			append_dev(select, option4);
    			append_dev(option4, t7);
    			append_dev(select, option5);
    			append_dev(option5, t8);
    			select_option(select, /*size*/ ctx[0]);

    			if (!mounted) {
    				dispose = listen_dev(select, "change", /*select_change_handler*/ ctx[2]);
    				mounted = true;
    			}
    		},
    		p: function update(ctx, [dirty]) {
    			if (dirty & /*$t*/ 2 && t0_value !== (t0_value = /*$t*/ ctx[1]("editor.size") + "")) set_data_dev(t0, t0_value);
    			if (dirty & /*$t*/ 2 && t3_value !== (t3_value = /*$t*/ ctx[1]("editor.bigger") + "")) set_data_dev(t3, t3_value);
    			if (dirty & /*$t*/ 2 && t4_value !== (t4_value = /*$t*/ ctx[1]("editor.big") + "")) set_data_dev(t4, t4_value);
    			if (dirty & /*$t*/ 2 && t5_value !== (t5_value = /*$t*/ ctx[1]("editor.standard") + "")) set_data_dev(t5, t5_value);
    			if (dirty & /*$t*/ 2 && t6_value !== (t6_value = /*$t*/ ctx[1]("editor.small") + "")) set_data_dev(t6, t6_value);
    			if (dirty & /*$t*/ 2 && t7_value !== (t7_value = /*$t*/ ctx[1]("editor.smaller") + "")) set_data_dev(t7, t7_value);
    			if (dirty & /*$t*/ 2 && t8_value !== (t8_value = /*$t*/ ctx[1]("editor.smallest") + "")) set_data_dev(t8, t8_value);

    			if (dirty & /*size*/ 1) {
    				select_option(select, /*size*/ ctx[0]);
    			}
    		},
    		i: noop,
    		o: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(span);
    			if (detaching) detach_dev(t2);
    			if (detaching) detach_dev(select);
    			mounted = false;
    			dispose();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$b.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$b($$self, $$props, $$invalidate) {
    	let $t;
    	validate_store(X, 't');
    	component_subscribe($$self, X, $$value => $$invalidate(1, $t = $$value));
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('EditorSize', slots, []);
    	let { size } = $$props;
    	const writable_props = ['size'];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<EditorSize> was created with unknown prop '${key}'`);
    	});

    	function select_change_handler() {
    		size = select_value(this);
    		$$invalidate(0, size);
    	}

    	$$self.$$set = $$props => {
    		if ('size' in $$props) $$invalidate(0, size = $$props.size);
    	};

    	$$self.$capture_state = () => ({ t: X, size, $t });

    	$$self.$inject_state = $$props => {
    		if ('size' in $$props) $$invalidate(0, size = $$props.size);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [size, $t, select_change_handler];
    }

    class EditorSize extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$b, create_fragment$b, safe_not_equal, { size: 0 });

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "EditorSize",
    			options,
    			id: create_fragment$b.name
    		});

    		const { ctx } = this.$$;
    		const props = options.props || {};

    		if (/*size*/ ctx[0] === undefined && !('size' in props)) {
    			console.warn("<EditorSize> was created without expected prop 'size'");
    		}
    	}

    	get size() {
    		throw new Error("<EditorSize>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set size(value) {
    		throw new Error("<EditorSize>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /* src/components/editor/EditorStroke.svelte generated by Svelte v3.44.2 */
    const file$a = "src/components/editor/EditorStroke.svelte";

    // (11:2) {#if element.showStroke}
    function create_if_block$6(ctx) {
    	let span;
    	let t0_value = /*$t*/ ctx[1]("editor.color") + "";
    	let t0;
    	let t1;
    	let t2;
    	let input;
    	let t3;
    	let if_block_anchor;
    	let mounted;
    	let dispose;
    	let if_block = /*element*/ ctx[0].ordinary && create_if_block_1$3(ctx);

    	const block = {
    		c: function create() {
    			span = element("span");
    			t0 = text(t0_value);
    			t1 = text(":");
    			t2 = space();
    			input = element("input");
    			t3 = space();
    			if (if_block) if_block.c();
    			if_block_anchor = empty();
    			set_style(span, "margin-left", "1em");
    			add_location(span, file$a, 11, 4, 347);
    			attr_dev(input, "type", "color");
    			attr_dev(input, "class", "svelte-ex5ti9");
    			add_location(input, file$a, 12, 4, 411);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, span, anchor);
    			append_dev(span, t0);
    			append_dev(span, t1);
    			insert_dev(target, t2, anchor);
    			insert_dev(target, input, anchor);
    			set_input_value(input, /*element*/ ctx[0].stroke);
    			insert_dev(target, t3, anchor);
    			if (if_block) if_block.m(target, anchor);
    			insert_dev(target, if_block_anchor, anchor);

    			if (!mounted) {
    				dispose = listen_dev(input, "input", /*input_input_handler*/ ctx[3]);
    				mounted = true;
    			}
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*$t*/ 2 && t0_value !== (t0_value = /*$t*/ ctx[1]("editor.color") + "")) set_data_dev(t0, t0_value);

    			if (dirty & /*element*/ 1) {
    				set_input_value(input, /*element*/ ctx[0].stroke);
    			}

    			if (/*element*/ ctx[0].ordinary) {
    				if (if_block) {
    					if_block.p(ctx, dirty);
    				} else {
    					if_block = create_if_block_1$3(ctx);
    					if_block.c();
    					if_block.m(if_block_anchor.parentNode, if_block_anchor);
    				}
    			} else if (if_block) {
    				if_block.d(1);
    				if_block = null;
    			}
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(span);
    			if (detaching) detach_dev(t2);
    			if (detaching) detach_dev(input);
    			if (detaching) detach_dev(t3);
    			if (if_block) if_block.d(detaching);
    			if (detaching) detach_dev(if_block_anchor);
    			mounted = false;
    			dispose();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block$6.name,
    		type: "if",
    		source: "(11:2) {#if element.showStroke}",
    		ctx
    	});

    	return block;
    }

    // (15:4) {#if element.ordinary}
    function create_if_block_1$3(ctx) {
    	let span;
    	let t0_value = /*$t*/ ctx[1]("editor.width") + "";
    	let t0;
    	let t1;
    	let t2;
    	let input;
    	let mounted;
    	let dispose;

    	const block = {
    		c: function create() {
    			span = element("span");
    			t0 = text(t0_value);
    			t1 = text(":");
    			t2 = space();
    			input = element("input");
    			set_style(span, "margin-left", "1em");
    			add_location(span, file$a, 15, 6, 496);
    			attr_dev(input, "type", "number");
    			attr_dev(input, "min", ".1");
    			attr_dev(input, "max", "99");
    			attr_dev(input, "step", ".1");
    			attr_dev(input, "class", "svelte-ex5ti9");
    			add_location(input, file$a, 16, 6, 562);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, span, anchor);
    			append_dev(span, t0);
    			append_dev(span, t1);
    			insert_dev(target, t2, anchor);
    			insert_dev(target, input, anchor);
    			set_input_value(input, /*element*/ ctx[0].strokeWidth);

    			if (!mounted) {
    				dispose = listen_dev(input, "input", /*input_input_handler_1*/ ctx[4]);
    				mounted = true;
    			}
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*$t*/ 2 && t0_value !== (t0_value = /*$t*/ ctx[1]("editor.width") + "")) set_data_dev(t0, t0_value);

    			if (dirty & /*element*/ 1 && to_number(input.value) !== /*element*/ ctx[0].strokeWidth) {
    				set_input_value(input, /*element*/ ctx[0].strokeWidth);
    			}
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(span);
    			if (detaching) detach_dev(t2);
    			if (detaching) detach_dev(input);
    			mounted = false;
    			dispose();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_1$3.name,
    		type: "if",
    		source: "(15:4) {#if element.ordinary}",
    		ctx
    	});

    	return block;
    }

    function create_fragment$a(ctx) {
    	let span1;
    	let span0;
    	let t0_value = /*$t*/ ctx[1]("editor.stroke") + "";
    	let t0;
    	let t1;
    	let t2;
    	let switch_1;
    	let updating_checked;
    	let t3;
    	let span1_data_tooltip_value;
    	let current;
    	let mounted;
    	let dispose;

    	function switch_1_checked_binding(value) {
    		/*switch_1_checked_binding*/ ctx[2](value);
    	}

    	let switch_1_props = {};

    	if (/*element*/ ctx[0].showStroke !== void 0) {
    		switch_1_props.checked = /*element*/ ctx[0].showStroke;
    	}

    	switch_1 = new Switch({ props: switch_1_props, $$inline: true });
    	binding_callbacks.push(() => bind(switch_1, 'checked', switch_1_checked_binding));
    	let if_block = /*element*/ ctx[0].showStroke && create_if_block$6(ctx);

    	const block = {
    		c: function create() {
    			span1 = element("span");
    			span0 = element("span");
    			t0 = text(t0_value);
    			t1 = text(":");
    			t2 = space();
    			create_component(switch_1.$$.fragment);
    			t3 = space();
    			if (if_block) if_block.c();
    			add_location(span0, file$a, 8, 2, 233);
    			attr_dev(span1, "data-tooltip", span1_data_tooltip_value = /*$t*/ ctx[1]("tooltip.stroke"));
    			add_location(span1, file$a, 7, 0, 176);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, span1, anchor);
    			append_dev(span1, span0);
    			append_dev(span0, t0);
    			append_dev(span0, t1);
    			append_dev(span1, t2);
    			mount_component(switch_1, span1, null);
    			append_dev(span1, t3);
    			if (if_block) if_block.m(span1, null);
    			current = true;

    			if (!mounted) {
    				dispose = action_destroyer(tooltip.call(null, span1));
    				mounted = true;
    			}
    		},
    		p: function update(ctx, [dirty]) {
    			if ((!current || dirty & /*$t*/ 2) && t0_value !== (t0_value = /*$t*/ ctx[1]("editor.stroke") + "")) set_data_dev(t0, t0_value);
    			const switch_1_changes = {};

    			if (!updating_checked && dirty & /*element*/ 1) {
    				updating_checked = true;
    				switch_1_changes.checked = /*element*/ ctx[0].showStroke;
    				add_flush_callback(() => updating_checked = false);
    			}

    			switch_1.$set(switch_1_changes);

    			if (/*element*/ ctx[0].showStroke) {
    				if (if_block) {
    					if_block.p(ctx, dirty);
    				} else {
    					if_block = create_if_block$6(ctx);
    					if_block.c();
    					if_block.m(span1, null);
    				}
    			} else if (if_block) {
    				if_block.d(1);
    				if_block = null;
    			}

    			if (!current || dirty & /*$t*/ 2 && span1_data_tooltip_value !== (span1_data_tooltip_value = /*$t*/ ctx[1]("tooltip.stroke"))) {
    				attr_dev(span1, "data-tooltip", span1_data_tooltip_value);
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(switch_1.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(switch_1.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(span1);
    			destroy_component(switch_1);
    			if (if_block) if_block.d();
    			mounted = false;
    			dispose();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$a.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$a($$self, $$props, $$invalidate) {
    	let $t;
    	validate_store(X, 't');
    	component_subscribe($$self, X, $$value => $$invalidate(1, $t = $$value));
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('EditorStroke', slots, []);
    	let { element } = $$props;
    	const writable_props = ['element'];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<EditorStroke> was created with unknown prop '${key}'`);
    	});

    	function switch_1_checked_binding(value) {
    		if ($$self.$$.not_equal(element.showStroke, value)) {
    			element.showStroke = value;
    			$$invalidate(0, element);
    		}
    	}

    	function input_input_handler() {
    		element.stroke = this.value;
    		$$invalidate(0, element);
    	}

    	function input_input_handler_1() {
    		element.strokeWidth = to_number(this.value);
    		$$invalidate(0, element);
    	}

    	$$self.$$set = $$props => {
    		if ('element' in $$props) $$invalidate(0, element = $$props.element);
    	};

    	$$self.$capture_state = () => ({ t: X, Switch, tooltip, element, $t });

    	$$self.$inject_state = $$props => {
    		if ('element' in $$props) $$invalidate(0, element = $$props.element);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [
    		element,
    		$t,
    		switch_1_checked_binding,
    		input_input_handler,
    		input_input_handler_1
    	];
    }

    class EditorStroke extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$a, create_fragment$a, safe_not_equal, { element: 0 });

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "EditorStroke",
    			options,
    			id: create_fragment$a.name
    		});

    		const { ctx } = this.$$;
    		const props = options.props || {};

    		if (/*element*/ ctx[0] === undefined && !('element' in props)) {
    			console.warn("<EditorStroke> was created without expected prop 'element'");
    		}
    	}

    	get element() {
    		throw new Error("<EditorStroke>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set element(value) {
    		throw new Error("<EditorStroke>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /* src/components/editor/EditorTincture.svelte generated by Svelte v3.44.2 */

    const { Object: Object_1$4 } = globals;
    const file$9 = "src/components/editor/EditorTincture.svelte";

    function get_each_context$5(ctx, list, i) {
    	const child_ctx = ctx.slice();
    	child_ctx[13] = list[i].coa;
    	child_ctx[14] = list[i].tip;
    	child_ctx[15] = list;
    	child_ctx[16] = i;
    	return child_ctx;
    }

    // (37:8) {#if colorChanged(coa.t1)}
    function create_if_block$5(ctx) {
    	let svg;
    	let use;
    	let svg_data_tooltip_value;
    	let mounted;
    	let dispose;

    	function click_handler_1() {
    		return /*click_handler_1*/ ctx[8](/*coa*/ ctx[13]);
    	}

    	const block = {
    		c: function create() {
    			svg = svg_element("svg");
    			use = svg_element("use");
    			attr_dev(use, "href", "#undo-icon");
    			add_location(use, file$9, 38, 12, 1509);
    			attr_dev(svg, "class", "undo svelte-1qdtip9");
    			attr_dev(svg, "data-tooltip", svg_data_tooltip_value = /*$t*/ ctx[3]("tooltip.undoColorChange"));
    			add_location(svg, file$9, 37, 10, 1383);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, svg, anchor);
    			append_dev(svg, use);

    			if (!mounted) {
    				dispose = [
    					listen_dev(svg, "click", click_handler_1, false, false, false),
    					action_destroyer(tooltip.call(null, svg))
    				];

    				mounted = true;
    			}
    		},
    		p: function update(new_ctx, dirty) {
    			ctx = new_ctx;

    			if (dirty & /*$t*/ 8 && svg_data_tooltip_value !== (svg_data_tooltip_value = /*$t*/ ctx[3]("tooltip.undoColorChange"))) {
    				attr_dev(svg, "data-tooltip", svg_data_tooltip_value);
    			}
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(svg);
    			mounted = false;
    			run_all(dispose);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block$5.name,
    		type: "if",
    		source: "(37:8) {#if colorChanged(coa.t1)}",
    		ctx
    	});

    	return block;
    }

    // (30:2) {#each tincturesData as { coa, tip }}
    function create_each_block$5(ctx) {
    	let div3;
    	let div0;
    	let editoritem;
    	let t0;
    	let div2;
    	let show_if = /*colorChanged*/ ctx[2](/*coa*/ ctx[13].t1);
    	let t1_1;
    	let div1;
    	let input;
    	let t2;
    	let svg;
    	let use;
    	let svg_data_tooltip_value;
    	let t3;
    	let current;
    	let mounted;
    	let dispose;

    	editoritem = new EditorItem({
    			props: {
    				coa: /*coa*/ ctx[13],
    				tip: /*tip*/ ctx[14]
    			},
    			$$inline: true
    		});

    	function click_handler() {
    		return /*click_handler*/ ctx[7](/*coa*/ ctx[13]);
    	}

    	let if_block = show_if && create_if_block$5(ctx);

    	function input_input_handler() {
    		/*input_input_handler*/ ctx[9].call(input, /*coa*/ ctx[13]);
    	}

    	const block = {
    		c: function create() {
    			div3 = element("div");
    			div0 = element("div");
    			create_component(editoritem.$$.fragment);
    			t0 = space();
    			div2 = element("div");
    			if (if_block) if_block.c();
    			t1_1 = space();
    			div1 = element("div");
    			input = element("input");
    			t2 = space();
    			svg = svg_element("svg");
    			use = svg_element("use");
    			t3 = space();
    			attr_dev(div0, "class", "item");
    			toggle_class(div0, "selected", /*t1*/ ctx[0] === /*coa*/ ctx[13].t1);
    			add_location(div0, file$9, 31, 6, 1172);
    			attr_dev(input, "type", "color");
    			attr_dev(input, "class", "svelte-1qdtip9");
    			add_location(input, file$9, 43, 10, 1591);
    			attr_dev(use, "href", "#pencil-icon");
    			add_location(use, file$9, 45, 12, 1763);
    			attr_dev(svg, "class", "edit svelte-1qdtip9");
    			attr_dev(svg, "data-tooltip", svg_data_tooltip_value = /*$t*/ ctx[3]("tooltip.changeColor"));
    			add_location(svg, file$9, 44, 10, 1653);
    			add_location(div1, file$9, 42, 8, 1575);
    			attr_dev(div2, "class", "controls svelte-1qdtip9");
    			add_location(div2, file$9, 35, 6, 1315);
    			attr_dev(div3, "class", "wrapper svelte-1qdtip9");
    			add_location(div3, file$9, 30, 4, 1144);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div3, anchor);
    			append_dev(div3, div0);
    			mount_component(editoritem, div0, null);
    			append_dev(div3, t0);
    			append_dev(div3, div2);
    			if (if_block) if_block.m(div2, null);
    			append_dev(div2, t1_1);
    			append_dev(div2, div1);
    			append_dev(div1, input);
    			set_input_value(input, /*$colors*/ ctx[1][/*coa*/ ctx[13].t1]);
    			append_dev(div1, t2);
    			append_dev(div1, svg);
    			append_dev(svg, use);
    			append_dev(div3, t3);
    			current = true;

    			if (!mounted) {
    				dispose = [
    					listen_dev(div0, "click", click_handler, false, false, false),
    					listen_dev(input, "input", input_input_handler),
    					listen_dev(svg, "click", openColorInput, false, false, false),
    					action_destroyer(tooltip.call(null, svg))
    				];

    				mounted = true;
    			}
    		},
    		p: function update(new_ctx, dirty) {
    			ctx = new_ctx;

    			if (dirty & /*t1, tincturesData*/ 17) {
    				toggle_class(div0, "selected", /*t1*/ ctx[0] === /*coa*/ ctx[13].t1);
    			}

    			if (dirty & /*colorChanged*/ 4) show_if = /*colorChanged*/ ctx[2](/*coa*/ ctx[13].t1);

    			if (show_if) {
    				if (if_block) {
    					if_block.p(ctx, dirty);
    				} else {
    					if_block = create_if_block$5(ctx);
    					if_block.c();
    					if_block.m(div2, t1_1);
    				}
    			} else if (if_block) {
    				if_block.d(1);
    				if_block = null;
    			}

    			if (dirty & /*$colors, tincturesData*/ 18) {
    				set_input_value(input, /*$colors*/ ctx[1][/*coa*/ ctx[13].t1]);
    			}

    			if (!current || dirty & /*$t*/ 8 && svg_data_tooltip_value !== (svg_data_tooltip_value = /*$t*/ ctx[3]("tooltip.changeColor"))) {
    				attr_dev(svg, "data-tooltip", svg_data_tooltip_value);
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(editoritem.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(editoritem.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div3);
    			destroy_component(editoritem);
    			if (if_block) if_block.d();
    			mounted = false;
    			run_all(dispose);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_each_block$5.name,
    		type: "each",
    		source: "(30:2) {#each tincturesData as { coa, tip }}",
    		ctx
    	});

    	return block;
    }

    function create_fragment$9(ctx) {
    	let t0_value = /*$t*/ ctx[3]("editor.tincture") + "";
    	let t0;
    	let t1_1;
    	let div;
    	let current;
    	let each_value = /*tincturesData*/ ctx[4];
    	validate_each_argument(each_value);
    	let each_blocks = [];

    	for (let i = 0; i < each_value.length; i += 1) {
    		each_blocks[i] = create_each_block$5(get_each_context$5(ctx, each_value, i));
    	}

    	const out = i => transition_out(each_blocks[i], 1, 1, () => {
    		each_blocks[i] = null;
    	});

    	const block = {
    		c: function create() {
    			t0 = text(t0_value);
    			t1_1 = text(":\n");
    			div = element("div");

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].c();
    			}

    			attr_dev(div, "class", "items");
    			add_location(div, file$9, 28, 0, 1080);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, t0, anchor);
    			insert_dev(target, t1_1, anchor);
    			insert_dev(target, div, anchor);

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].m(div, null);
    			}

    			current = true;
    		},
    		p: function update(ctx, [dirty]) {
    			if ((!current || dirty & /*$t*/ 8) && t0_value !== (t0_value = /*$t*/ ctx[3]("editor.tincture") + "")) set_data_dev(t0, t0_value);

    			if (dirty & /*$t, openColorInput, $colors, tincturesData, restoreColor, colorChanged, t1, handleChange*/ 127) {
    				each_value = /*tincturesData*/ ctx[4];
    				validate_each_argument(each_value);
    				let i;

    				for (i = 0; i < each_value.length; i += 1) {
    					const child_ctx = get_each_context$5(ctx, each_value, i);

    					if (each_blocks[i]) {
    						each_blocks[i].p(child_ctx, dirty);
    						transition_in(each_blocks[i], 1);
    					} else {
    						each_blocks[i] = create_each_block$5(child_ctx);
    						each_blocks[i].c();
    						transition_in(each_blocks[i], 1);
    						each_blocks[i].m(div, null);
    					}
    				}

    				group_outros();

    				for (i = each_value.length; i < each_blocks.length; i += 1) {
    					out(i);
    				}

    				check_outros();
    			}
    		},
    		i: function intro(local) {
    			if (current) return;

    			for (let i = 0; i < each_value.length; i += 1) {
    				transition_in(each_blocks[i]);
    			}

    			current = true;
    		},
    		o: function outro(local) {
    			each_blocks = each_blocks.filter(Boolean);

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				transition_out(each_blocks[i]);
    			}

    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(t0);
    			if (detaching) detach_dev(t1_1);
    			if (detaching) detach_dev(div);
    			destroy_each(each_blocks, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$9.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function openColorInput() {
    	this.previousElementSibling?.click();
    }

    function instance$9($$self, $$props, $$invalidate) {
    	let colorChanged;
    	let $colors;
    	let $t;
    	let $locale;
    	let $dictionary;
    	let $tinctures;
    	validate_store(colors, 'colors');
    	component_subscribe($$self, colors, $$value => $$invalidate(1, $colors = $$value));
    	validate_store(X, 't');
    	component_subscribe($$self, X, $$value => $$invalidate(3, $t = $$value));
    	validate_store(M, 'locale');
    	component_subscribe($$self, M, $$value => $$invalidate(10, $locale = $$value));
    	validate_store(s, 'dictionary');
    	component_subscribe($$self, s, $$value => $$invalidate(11, $dictionary = $$value));
    	validate_store(tinctures, 'tinctures');
    	component_subscribe($$self, tinctures, $$value => $$invalidate(12, $tinctures = $$value));
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('EditorTincture', slots, []);
    	let { t1 } = $$props;

    	const tincturesData = ["metals", "colours", "stains"].map(type => Object.keys($tinctures[type]).map(tincture => {
    		const tinctureName = ($dictionary[$locale]?.tinctures?.[tincture])
    		? $t(`tinctures.${tincture}`)
    		: tincture;

    		const typeName = $t(`editor.${type.slice(0, -1)}`);

    		return {
    			coa: { t1: tincture },
    			tip: `${typeName}: ${tinctureName}`
    		};
    	})).flat();

    	const handleChange = tincture => {
    		$$invalidate(0, t1 = tincture);
    	};

    	function restoreColor(tincture) {
    		set_store_value(colors, $colors[tincture] = DEFAULT_COLORS[tincture], $colors);
    	}

    	const writable_props = ['t1'];

    	Object_1$4.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<EditorTincture> was created with unknown prop '${key}'`);
    	});

    	const click_handler = coa => handleChange(coa.t1);
    	const click_handler_1 = coa => restoreColor(coa.t1);

    	function input_input_handler(coa) {
    		$colors[coa.t1] = this.value;
    		colors.set($colors);
    		$$invalidate(4, tincturesData);
    	}

    	$$self.$$set = $$props => {
    		if ('t1' in $$props) $$invalidate(0, t1 = $$props.t1);
    	};

    	$$self.$capture_state = () => ({
    		t: X,
    		dictionary: s,
    		locale: M,
    		EditorItem,
    		colors,
    		tinctures,
    		tooltip,
    		defaults: DEFAULT_COLORS,
    		t1,
    		tincturesData,
    		handleChange,
    		openColorInput,
    		restoreColor,
    		colorChanged,
    		$colors,
    		$t,
    		$locale,
    		$dictionary,
    		$tinctures
    	});

    	$$self.$inject_state = $$props => {
    		if ('t1' in $$props) $$invalidate(0, t1 = $$props.t1);
    		if ('colorChanged' in $$props) $$invalidate(2, colorChanged = $$props.colorChanged);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	$$self.$$.update = () => {
    		if ($$self.$$.dirty & /*$colors*/ 2) {
    			localStorage.setItem("colors", JSON.stringify($colors));
    		}

    		if ($$self.$$.dirty & /*$colors*/ 2) {
    			$$invalidate(2, colorChanged = tincture => DEFAULT_COLORS[tincture] && $colors[tincture] !== DEFAULT_COLORS[tincture]);
    		}
    	};

    	return [
    		t1,
    		$colors,
    		colorChanged,
    		$t,
    		tincturesData,
    		handleChange,
    		restoreColor,
    		click_handler,
    		click_handler_1,
    		input_input_handler
    	];
    }

    class EditorTincture extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$9, create_fragment$9, safe_not_equal, { t1: 0 });

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "EditorTincture",
    			options,
    			id: create_fragment$9.name
    		});

    		const { ctx } = this.$$;
    		const props = options.props || {};

    		if (/*t1*/ ctx[0] === undefined && !('t1' in props)) {
    			console.warn("<EditorTincture> was created without expected prop 't1'");
    		}
    	}

    	get t1() {
    		throw new Error("<EditorTincture>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set t1(value) {
    		throw new Error("<EditorTincture>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /* src/components/editor/EditorType.svelte generated by Svelte v3.44.2 */
    const file$8 = "src/components/editor/EditorType.svelte";

    function create_fragment$8(ctx) {
    	let t0_value = /*$t*/ ctx[1]("editor.type") + "";
    	let t0;
    	let t1;
    	let select;
    	let option0;
    	let t2_value = /*$t*/ ctx[1]("editor.tincture") + "";
    	let t2;
    	let option1;
    	let t3_value = /*$t*/ ctx[1]("editor.pattern") + "";
    	let t3;
    	let option2;
    	let t4_value = /*$t*/ ctx[1]("editor.semy") + "";
    	let t4;
    	let mounted;
    	let dispose;

    	const block = {
    		c: function create() {
    			t0 = text(t0_value);
    			t1 = space();
    			select = element("select");
    			option0 = element("option");
    			t2 = text(t2_value);
    			option1 = element("option");
    			t3 = text(t3_value);
    			option2 = element("option");
    			t4 = text(t4_value);
    			option0.__value = "tincture";
    			option0.value = option0.__value;
    			add_location(option0, file$8, 7, 2, 141);
    			option1.__value = "pattern";
    			option1.value = option1.__value;
    			add_location(option1, file$8, 8, 2, 201);
    			option2.__value = "semy";
    			option2.value = option2.__value;
    			add_location(option2, file$8, 9, 2, 259);
    			if (/*type*/ ctx[0] === void 0) add_render_callback(() => /*select_change_handler*/ ctx[2].call(select));
    			add_location(select, file$8, 6, 0, 112);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, t0, anchor);
    			insert_dev(target, t1, anchor);
    			insert_dev(target, select, anchor);
    			append_dev(select, option0);
    			append_dev(option0, t2);
    			append_dev(select, option1);
    			append_dev(option1, t3);
    			append_dev(select, option2);
    			append_dev(option2, t4);
    			select_option(select, /*type*/ ctx[0]);

    			if (!mounted) {
    				dispose = listen_dev(select, "change", /*select_change_handler*/ ctx[2]);
    				mounted = true;
    			}
    		},
    		p: function update(ctx, [dirty]) {
    			if (dirty & /*$t*/ 2 && t0_value !== (t0_value = /*$t*/ ctx[1]("editor.type") + "")) set_data_dev(t0, t0_value);
    			if (dirty & /*$t*/ 2 && t2_value !== (t2_value = /*$t*/ ctx[1]("editor.tincture") + "")) set_data_dev(t2, t2_value);
    			if (dirty & /*$t*/ 2 && t3_value !== (t3_value = /*$t*/ ctx[1]("editor.pattern") + "")) set_data_dev(t3, t3_value);
    			if (dirty & /*$t*/ 2 && t4_value !== (t4_value = /*$t*/ ctx[1]("editor.semy") + "")) set_data_dev(t4, t4_value);

    			if (dirty & /*type*/ 1) {
    				select_option(select, /*type*/ ctx[0]);
    			}
    		},
    		i: noop,
    		o: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(t0);
    			if (detaching) detach_dev(t1);
    			if (detaching) detach_dev(select);
    			mounted = false;
    			dispose();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$8.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$8($$self, $$props, $$invalidate) {
    	let $t;
    	validate_store(X, 't');
    	component_subscribe($$self, X, $$value => $$invalidate(1, $t = $$value));
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('EditorType', slots, []);
    	let { type } = $$props;
    	const writable_props = ['type'];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<EditorType> was created with unknown prop '${key}'`);
    	});

    	function select_change_handler() {
    		type = select_value(this);
    		$$invalidate(0, type);
    	}

    	$$self.$$set = $$props => {
    		if ('type' in $$props) $$invalidate(0, type = $$props.type);
    	};

    	$$self.$capture_state = () => ({ t: X, type, $t });

    	$$self.$inject_state = $$props => {
    		if ('type' in $$props) $$invalidate(0, type = $$props.type);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [type, $t, select_change_handler];
    }

    class EditorType extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$8, create_fragment$8, safe_not_equal, { type: 0 });

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "EditorType",
    			options,
    			id: create_fragment$8.name
    		});

    		const { ctx } = this.$$;
    		const props = options.props || {};

    		if (/*type*/ ctx[0] === undefined && !('type' in props)) {
    			console.warn("<EditorType> was created without expected prop 'type'");
    		}
    	}

    	get type() {
    		throw new Error("<EditorType>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set type(value) {
    		throw new Error("<EditorType>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /* src/components/editor/Editor.svelte generated by Svelte v3.44.2 */

    const { Boolean: Boolean_1, Object: Object_1$3 } = globals;
    const file$7 = "src/components/editor/Editor.svelte";

    function get_each_context$4(ctx, list, i) {
    	const child_ctx = ctx.slice();
    	child_ctx[58] = list[i];
    	child_ctx[59] = list;
    	child_ctx[60] = i;
    	return child_ctx;
    }

    function get_each_context_1$2(ctx, list, i) {
    	const child_ctx = ctx.slice();
    	child_ctx[61] = list[i];
    	child_ctx[62] = list;
    	child_ctx[60] = i;
    	return child_ctx;
    }

    // (337:4) {#key coa}
    function create_key_block$1(ctx) {
    	let coa_1;
    	let current;

    	coa_1 = new COA({
    			props: { coa: /*coa*/ ctx[1], i: "Edit" },
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(coa_1.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(coa_1, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const coa_1_changes = {};
    			if (dirty[0] & /*coa*/ 2) coa_1_changes.coa = /*coa*/ ctx[1];
    			coa_1.$set(coa_1_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(coa_1.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(coa_1.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(coa_1, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_key_block$1.name,
    		type: "key",
    		source: "(337:4) {#key coa}",
    		ctx
    	});

    	return block;
    }

    // (345:4) {#if section.field}
    function create_if_block_16(ctx) {
    	let div2;
    	let div0;
    	let editortype;
    	let updating_type;
    	let t0;
    	let t1;
    	let div1;
    	let editortincture;
    	let updating_t1;
    	let t2;
    	let t3;
    	let t4;
    	let div2_transition;
    	let current;

    	function editortype_type_binding(value) {
    		/*editortype_type_binding*/ ctx[14](value);
    	}

    	let editortype_props = {};

    	if (/*menu*/ ctx[0].field.type !== void 0) {
    		editortype_props.type = /*menu*/ ctx[0].field.type;
    	}

    	editortype = new EditorType({ props: editortype_props, $$inline: true });
    	binding_callbacks.push(() => bind(editortype, 'type', editortype_type_binding));
    	let if_block0 = /*menu*/ ctx[0].field.type !== "tincture" && create_if_block_20(ctx);

    	function editortincture_t1_binding(value) {
    		/*editortincture_t1_binding*/ ctx[16](value);
    	}

    	let editortincture_props = {};

    	if (/*menu*/ ctx[0].field.t1 !== void 0) {
    		editortincture_props.t1 = /*menu*/ ctx[0].field.t1;
    	}

    	editortincture = new EditorTincture({
    			props: editortincture_props,
    			$$inline: true
    		});

    	binding_callbacks.push(() => bind(editortincture, 't1', editortincture_t1_binding));
    	let if_block1 = /*menu*/ ctx[0].field.type !== "tincture" && create_if_block_19(ctx);
    	let if_block2 = /*menu*/ ctx[0].field.type === "pattern" && create_if_block_18(ctx);
    	let if_block3 = /*menu*/ ctx[0].field.type === "semy" && create_if_block_17(ctx);

    	const block = {
    		c: function create() {
    			div2 = element("div");
    			div0 = element("div");
    			create_component(editortype.$$.fragment);
    			t0 = space();
    			if (if_block0) if_block0.c();
    			t1 = space();
    			div1 = element("div");
    			create_component(editortincture.$$.fragment);
    			t2 = space();
    			if (if_block1) if_block1.c();
    			t3 = space();
    			if (if_block2) if_block2.c();
    			t4 = space();
    			if (if_block3) if_block3.c();
    			attr_dev(div0, "class", "subsection svelte-1k0wz0q");
    			add_location(div0, file$7, 346, 8, 11130);
    			attr_dev(div1, "class", "subsection svelte-1k0wz0q");
    			add_location(div1, file$7, 353, 8, 11350);
    			attr_dev(div2, "class", "panel svelte-1k0wz0q");
    			add_location(div2, file$7, 345, 6, 11085);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div2, anchor);
    			append_dev(div2, div0);
    			mount_component(editortype, div0, null);
    			append_dev(div0, t0);
    			if (if_block0) if_block0.m(div0, null);
    			append_dev(div2, t1);
    			append_dev(div2, div1);
    			mount_component(editortincture, div1, null);
    			append_dev(div2, t2);
    			if (if_block1) if_block1.m(div2, null);
    			append_dev(div2, t3);
    			if (if_block2) if_block2.m(div2, null);
    			append_dev(div2, t4);
    			if (if_block3) if_block3.m(div2, null);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const editortype_changes = {};

    			if (!updating_type && dirty[0] & /*menu*/ 1) {
    				updating_type = true;
    				editortype_changes.type = /*menu*/ ctx[0].field.type;
    				add_flush_callback(() => updating_type = false);
    			}

    			editortype.$set(editortype_changes);

    			if (/*menu*/ ctx[0].field.type !== "tincture") {
    				if (if_block0) {
    					if_block0.p(ctx, dirty);

    					if (dirty[0] & /*menu*/ 1) {
    						transition_in(if_block0, 1);
    					}
    				} else {
    					if_block0 = create_if_block_20(ctx);
    					if_block0.c();
    					transition_in(if_block0, 1);
    					if_block0.m(div0, null);
    				}
    			} else if (if_block0) {
    				group_outros();

    				transition_out(if_block0, 1, 1, () => {
    					if_block0 = null;
    				});

    				check_outros();
    			}

    			const editortincture_changes = {};

    			if (!updating_t1 && dirty[0] & /*menu*/ 1) {
    				updating_t1 = true;
    				editortincture_changes.t1 = /*menu*/ ctx[0].field.t1;
    				add_flush_callback(() => updating_t1 = false);
    			}

    			editortincture.$set(editortincture_changes);

    			if (/*menu*/ ctx[0].field.type !== "tincture") {
    				if (if_block1) {
    					if_block1.p(ctx, dirty);

    					if (dirty[0] & /*menu*/ 1) {
    						transition_in(if_block1, 1);
    					}
    				} else {
    					if_block1 = create_if_block_19(ctx);
    					if_block1.c();
    					transition_in(if_block1, 1);
    					if_block1.m(div2, t3);
    				}
    			} else if (if_block1) {
    				group_outros();

    				transition_out(if_block1, 1, 1, () => {
    					if_block1 = null;
    				});

    				check_outros();
    			}

    			if (/*menu*/ ctx[0].field.type === "pattern") {
    				if (if_block2) {
    					if_block2.p(ctx, dirty);

    					if (dirty[0] & /*menu*/ 1) {
    						transition_in(if_block2, 1);
    					}
    				} else {
    					if_block2 = create_if_block_18(ctx);
    					if_block2.c();
    					transition_in(if_block2, 1);
    					if_block2.m(div2, t4);
    				}
    			} else if (if_block2) {
    				group_outros();

    				transition_out(if_block2, 1, 1, () => {
    					if_block2 = null;
    				});

    				check_outros();
    			}

    			if (/*menu*/ ctx[0].field.type === "semy") {
    				if (if_block3) {
    					if_block3.p(ctx, dirty);

    					if (dirty[0] & /*menu*/ 1) {
    						transition_in(if_block3, 1);
    					}
    				} else {
    					if_block3 = create_if_block_17(ctx);
    					if_block3.c();
    					transition_in(if_block3, 1);
    					if_block3.m(div2, null);
    				}
    			} else if (if_block3) {
    				group_outros();

    				transition_out(if_block3, 1, 1, () => {
    					if_block3 = null;
    				});

    				check_outros();
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(editortype.$$.fragment, local);
    			transition_in(if_block0);
    			transition_in(editortincture.$$.fragment, local);
    			transition_in(if_block1);
    			transition_in(if_block2);
    			transition_in(if_block3);

    			add_render_callback(() => {
    				if (!div2_transition) div2_transition = create_bidirectional_transition(div2, slide, {}, true);
    				div2_transition.run(1);
    			});

    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(editortype.$$.fragment, local);
    			transition_out(if_block0);
    			transition_out(editortincture.$$.fragment, local);
    			transition_out(if_block1);
    			transition_out(if_block2);
    			transition_out(if_block3);
    			if (!div2_transition) div2_transition = create_bidirectional_transition(div2, slide, {}, false);
    			div2_transition.run(0);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div2);
    			destroy_component(editortype);
    			if (if_block0) if_block0.d();
    			destroy_component(editortincture);
    			if (if_block1) if_block1.d();
    			if (if_block2) if_block2.d();
    			if (if_block3) if_block3.d();
    			if (detaching && div2_transition) div2_transition.end();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_16.name,
    		type: "if",
    		source: "(345:4) {#if section.field}",
    		ctx
    	});

    	return block;
    }

    // (349:10) {#if menu.field.type !== "tincture"}
    function create_if_block_20(ctx) {
    	let editorsize;
    	let updating_size;
    	let current;

    	function editorsize_size_binding(value) {
    		/*editorsize_size_binding*/ ctx[15](value);
    	}

    	let editorsize_props = {};

    	if (/*menu*/ ctx[0].field.size !== void 0) {
    		editorsize_props.size = /*menu*/ ctx[0].field.size;
    	}

    	editorsize = new EditorSize({ props: editorsize_props, $$inline: true });
    	binding_callbacks.push(() => bind(editorsize, 'size', editorsize_size_binding));

    	const block = {
    		c: function create() {
    			create_component(editorsize.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(editorsize, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const editorsize_changes = {};

    			if (!updating_size && dirty[0] & /*menu*/ 1) {
    				updating_size = true;
    				editorsize_changes.size = /*menu*/ ctx[0].field.size;
    				add_flush_callback(() => updating_size = false);
    			}

    			editorsize.$set(editorsize_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(editorsize.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(editorsize.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(editorsize, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_20.name,
    		type: "if",
    		source: "(349:10) {#if menu.field.type !== \\\"tincture\\\"}",
    		ctx
    	});

    	return block;
    }

    // (358:8) {#if menu.field.type !== "tincture"}
    function create_if_block_19(ctx) {
    	let div;
    	let editortincture;
    	let updating_t1;
    	let current;

    	function editortincture_t1_binding_1(value) {
    		/*editortincture_t1_binding_1*/ ctx[17](value);
    	}

    	let editortincture_props = {};

    	if (/*menu*/ ctx[0].field.t2 !== void 0) {
    		editortincture_props.t1 = /*menu*/ ctx[0].field.t2;
    	}

    	editortincture = new EditorTincture({
    			props: editortincture_props,
    			$$inline: true
    		});

    	binding_callbacks.push(() => bind(editortincture, 't1', editortincture_t1_binding_1));

    	const block = {
    		c: function create() {
    			div = element("div");
    			create_component(editortincture.$$.fragment);
    			attr_dev(div, "class", "subsection svelte-1k0wz0q");
    			add_location(div, file$7, 358, 10, 11499);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    			mount_component(editortincture, div, null);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const editortincture_changes = {};

    			if (!updating_t1 && dirty[0] & /*menu*/ 1) {
    				updating_t1 = true;
    				editortincture_changes.t1 = /*menu*/ ctx[0].field.t2;
    				add_flush_callback(() => updating_t1 = false);
    			}

    			editortincture.$set(editortincture_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(editortincture.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(editortincture.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    			destroy_component(editortincture);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_19.name,
    		type: "if",
    		source: "(358:8) {#if menu.field.type !== \\\"tincture\\\"}",
    		ctx
    	});

    	return block;
    }

    // (364:8) {#if menu.field.type === "pattern"}
    function create_if_block_18(ctx) {
    	let div;
    	let editorpattern;
    	let updating_pattern;
    	let current;

    	function editorpattern_pattern_binding(value) {
    		/*editorpattern_pattern_binding*/ ctx[18](value);
    	}

    	let editorpattern_props = {
    		t1: /*menu*/ ctx[0].field.t1,
    		t2: /*menu*/ ctx[0].field.t2,
    		size: /*menu*/ ctx[0].field.size
    	};

    	if (/*menu*/ ctx[0].field.pattern !== void 0) {
    		editorpattern_props.pattern = /*menu*/ ctx[0].field.pattern;
    	}

    	editorpattern = new EditorPattern({
    			props: editorpattern_props,
    			$$inline: true
    		});

    	binding_callbacks.push(() => bind(editorpattern, 'pattern', editorpattern_pattern_binding));

    	const block = {
    		c: function create() {
    			div = element("div");
    			create_component(editorpattern.$$.fragment);
    			attr_dev(div, "class", "subsection svelte-1k0wz0q");
    			add_location(div, file$7, 364, 10, 11665);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    			mount_component(editorpattern, div, null);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const editorpattern_changes = {};
    			if (dirty[0] & /*menu*/ 1) editorpattern_changes.t1 = /*menu*/ ctx[0].field.t1;
    			if (dirty[0] & /*menu*/ 1) editorpattern_changes.t2 = /*menu*/ ctx[0].field.t2;
    			if (dirty[0] & /*menu*/ 1) editorpattern_changes.size = /*menu*/ ctx[0].field.size;

    			if (!updating_pattern && dirty[0] & /*menu*/ 1) {
    				updating_pattern = true;
    				editorpattern_changes.pattern = /*menu*/ ctx[0].field.pattern;
    				add_flush_callback(() => updating_pattern = false);
    			}

    			editorpattern.$set(editorpattern_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(editorpattern.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(editorpattern.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    			destroy_component(editorpattern);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_18.name,
    		type: "if",
    		source: "(364:8) {#if menu.field.type === \\\"pattern\\\"}",
    		ctx
    	});

    	return block;
    }

    // (375:8) {#if menu.field.type === "semy"}
    function create_if_block_17(ctx) {
    	let div;
    	let editorcharge;
    	let updating_charge;
    	let updating_category;
    	let current;

    	function editorcharge_charge_binding(value) {
    		/*editorcharge_charge_binding*/ ctx[19](value);
    	}

    	function editorcharge_category_binding(value) {
    		/*editorcharge_category_binding*/ ctx[20](value);
    	}

    	let editorcharge_props = {
    		type: "semy",
    		t1: /*menu*/ ctx[0].field.t1,
    		t2: /*menu*/ ctx[0].field.t2,
    		size: /*menu*/ ctx[0].field.size
    	};

    	if (/*menu*/ ctx[0].field.charge !== void 0) {
    		editorcharge_props.charge = /*menu*/ ctx[0].field.charge;
    	}

    	if (/*menu*/ ctx[0].field.semy !== void 0) {
    		editorcharge_props.category = /*menu*/ ctx[0].field.semy;
    	}

    	editorcharge = new EditorCharge({
    			props: editorcharge_props,
    			$$inline: true
    		});

    	binding_callbacks.push(() => bind(editorcharge, 'charge', editorcharge_charge_binding));
    	binding_callbacks.push(() => bind(editorcharge, 'category', editorcharge_category_binding));

    	const block = {
    		c: function create() {
    			div = element("div");
    			create_component(editorcharge.$$.fragment);
    			attr_dev(div, "class", "subsection svelte-1k0wz0q");
    			add_location(div, file$7, 375, 10, 11966);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    			mount_component(editorcharge, div, null);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const editorcharge_changes = {};
    			if (dirty[0] & /*menu*/ 1) editorcharge_changes.t1 = /*menu*/ ctx[0].field.t1;
    			if (dirty[0] & /*menu*/ 1) editorcharge_changes.t2 = /*menu*/ ctx[0].field.t2;
    			if (dirty[0] & /*menu*/ 1) editorcharge_changes.size = /*menu*/ ctx[0].field.size;

    			if (!updating_charge && dirty[0] & /*menu*/ 1) {
    				updating_charge = true;
    				editorcharge_changes.charge = /*menu*/ ctx[0].field.charge;
    				add_flush_callback(() => updating_charge = false);
    			}

    			if (!updating_category && dirty[0] & /*menu*/ 1) {
    				updating_category = true;
    				editorcharge_changes.category = /*menu*/ ctx[0].field.semy;
    				add_flush_callback(() => updating_category = false);
    			}

    			editorcharge.$set(editorcharge_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(editorcharge.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(editorcharge.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    			destroy_component(editorcharge);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_17.name,
    		type: "if",
    		source: "(375:8) {#if menu.field.type === \\\"semy\\\"}",
    		ctx
    	});

    	return block;
    }

    // (394:4) {#if section.division}
    function create_if_block_9(ctx) {
    	let div1;
    	let div0;
    	let editordivision;
    	let updating_division;
    	let t0;
    	let t1;
    	let div1_transition;
    	let current;

    	function editordivision_division_binding(value) {
    		/*editordivision_division_binding*/ ctx[21](value);
    	}

    	let editordivision_props = {
    		t1: /*coa*/ ctx[1].t1,
    		t2: /*coa*/ ctx[1].division
    		? /*coa*/ ctx[1].division.t
    		: /*menu*/ ctx[0].division.t1,
    		line: /*menu*/ ctx[0].division.line
    	};

    	if (/*menu*/ ctx[0].division.division !== void 0) {
    		editordivision_props.division = /*menu*/ ctx[0].division.division;
    	}

    	editordivision = new EditorDivision({
    			props: editordivision_props,
    			$$inline: true
    		});

    	binding_callbacks.push(() => bind(editordivision, 'division', editordivision_division_binding));
    	let if_block0 = divisions[/*coa*/ ctx[1].division?.division] && create_if_block_15(ctx);
    	let if_block1 = /*coa*/ ctx[1].division && create_if_block_10(ctx);

    	const block = {
    		c: function create() {
    			div1 = element("div");
    			div0 = element("div");
    			create_component(editordivision.$$.fragment);
    			t0 = space();
    			if (if_block0) if_block0.c();
    			t1 = space();
    			if (if_block1) if_block1.c();
    			attr_dev(div0, "class", "subsection svelte-1k0wz0q");
    			add_location(div0, file$7, 395, 8, 12605);
    			attr_dev(div1, "class", "panel svelte-1k0wz0q");
    			add_location(div1, file$7, 394, 6, 12560);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div1, anchor);
    			append_dev(div1, div0);
    			mount_component(editordivision, div0, null);
    			append_dev(div1, t0);
    			if (if_block0) if_block0.m(div1, null);
    			append_dev(div1, t1);
    			if (if_block1) if_block1.m(div1, null);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const editordivision_changes = {};
    			if (dirty[0] & /*coa*/ 2) editordivision_changes.t1 = /*coa*/ ctx[1].t1;

    			if (dirty[0] & /*coa, menu*/ 3) editordivision_changes.t2 = /*coa*/ ctx[1].division
    			? /*coa*/ ctx[1].division.t
    			: /*menu*/ ctx[0].division.t1;

    			if (dirty[0] & /*menu*/ 1) editordivision_changes.line = /*menu*/ ctx[0].division.line;

    			if (!updating_division && dirty[0] & /*menu*/ 1) {
    				updating_division = true;
    				editordivision_changes.division = /*menu*/ ctx[0].division.division;
    				add_flush_callback(() => updating_division = false);
    			}

    			editordivision.$set(editordivision_changes);

    			if (divisions[/*coa*/ ctx[1].division?.division]) {
    				if (if_block0) {
    					if_block0.p(ctx, dirty);

    					if (dirty[0] & /*coa*/ 2) {
    						transition_in(if_block0, 1);
    					}
    				} else {
    					if_block0 = create_if_block_15(ctx);
    					if_block0.c();
    					transition_in(if_block0, 1);
    					if_block0.m(div1, t1);
    				}
    			} else if (if_block0) {
    				group_outros();

    				transition_out(if_block0, 1, 1, () => {
    					if_block0 = null;
    				});

    				check_outros();
    			}

    			if (/*coa*/ ctx[1].division) {
    				if (if_block1) {
    					if_block1.p(ctx, dirty);

    					if (dirty[0] & /*coa*/ 2) {
    						transition_in(if_block1, 1);
    					}
    				} else {
    					if_block1 = create_if_block_10(ctx);
    					if_block1.c();
    					transition_in(if_block1, 1);
    					if_block1.m(div1, null);
    				}
    			} else if (if_block1) {
    				group_outros();

    				transition_out(if_block1, 1, 1, () => {
    					if_block1 = null;
    				});

    				check_outros();
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(editordivision.$$.fragment, local);
    			transition_in(if_block0);
    			transition_in(if_block1);

    			add_render_callback(() => {
    				if (!div1_transition) div1_transition = create_bidirectional_transition(div1, slide, {}, true);
    				div1_transition.run(1);
    			});

    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(editordivision.$$.fragment, local);
    			transition_out(if_block0);
    			transition_out(if_block1);
    			if (!div1_transition) div1_transition = create_bidirectional_transition(div1, slide, {}, false);
    			div1_transition.run(0);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div1);
    			destroy_component(editordivision);
    			if (if_block0) if_block0.d();
    			if (if_block1) if_block1.d();
    			if (detaching && div1_transition) div1_transition.end();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_9.name,
    		type: "if",
    		source: "(394:4) {#if section.division}",
    		ctx
    	});

    	return block;
    }

    // (405:8) {#if divisions[coa.division?.division]}
    function create_if_block_15(ctx) {
    	let div;
    	let editorline;
    	let updating_line;
    	let current;

    	function editorline_line_binding(value) {
    		/*editorline_line_binding*/ ctx[22](value);
    	}

    	let editorline_props = {
    		division: /*menu*/ ctx[0].division.division,
    		t1: /*coa*/ ctx[1].t1,
    		t2: /*coa*/ ctx[1].division
    		? /*coa*/ ctx[1].division.t
    		: /*menu*/ ctx[0].division.t1
    	};

    	if (/*menu*/ ctx[0].division.line !== void 0) {
    		editorline_props.line = /*menu*/ ctx[0].division.line;
    	}

    	editorline = new EditorLine({ props: editorline_props, $$inline: true });
    	binding_callbacks.push(() => bind(editorline, 'line', editorline_line_binding));

    	const block = {
    		c: function create() {
    			div = element("div");
    			create_component(editorline.$$.fragment);
    			attr_dev(div, "class", "subsection svelte-1k0wz0q");
    			add_location(div, file$7, 405, 10, 12922);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    			mount_component(editorline, div, null);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const editorline_changes = {};
    			if (dirty[0] & /*menu*/ 1) editorline_changes.division = /*menu*/ ctx[0].division.division;
    			if (dirty[0] & /*coa*/ 2) editorline_changes.t1 = /*coa*/ ctx[1].t1;

    			if (dirty[0] & /*coa, menu*/ 3) editorline_changes.t2 = /*coa*/ ctx[1].division
    			? /*coa*/ ctx[1].division.t
    			: /*menu*/ ctx[0].division.t1;

    			if (!updating_line && dirty[0] & /*menu*/ 1) {
    				updating_line = true;
    				editorline_changes.line = /*menu*/ ctx[0].division.line;
    				add_flush_callback(() => updating_line = false);
    			}

    			editorline.$set(editorline_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(editorline.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(editorline.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    			destroy_component(editorline);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_15.name,
    		type: "if",
    		source: "(405:8) {#if divisions[coa.division?.division]}",
    		ctx
    	});

    	return block;
    }

    // (416:8) {#if coa.division}
    function create_if_block_10(ctx) {
    	let div0;
    	let editortype;
    	let updating_type;
    	let t0;
    	let t1;
    	let div1;
    	let editortincture;
    	let updating_t1;
    	let t2;
    	let t3;
    	let t4;
    	let if_block3_anchor;
    	let current;

    	function editortype_type_binding_1(value) {
    		/*editortype_type_binding_1*/ ctx[23](value);
    	}

    	let editortype_props = {};

    	if (/*menu*/ ctx[0].division.type !== void 0) {
    		editortype_props.type = /*menu*/ ctx[0].division.type;
    	}

    	editortype = new EditorType({ props: editortype_props, $$inline: true });
    	binding_callbacks.push(() => bind(editortype, 'type', editortype_type_binding_1));
    	let if_block0 = /*menu*/ ctx[0].division.type !== "tincture" && create_if_block_14(ctx);

    	function editortincture_t1_binding_2(value) {
    		/*editortincture_t1_binding_2*/ ctx[25](value);
    	}

    	let editortincture_props = {};

    	if (/*menu*/ ctx[0].division.t1 !== void 0) {
    		editortincture_props.t1 = /*menu*/ ctx[0].division.t1;
    	}

    	editortincture = new EditorTincture({
    			props: editortincture_props,
    			$$inline: true
    		});

    	binding_callbacks.push(() => bind(editortincture, 't1', editortincture_t1_binding_2));
    	let if_block1 = /*menu*/ ctx[0].division.type !== "tincture" && create_if_block_13(ctx);
    	let if_block2 = /*menu*/ ctx[0].division.type === "pattern" && create_if_block_12(ctx);
    	let if_block3 = /*menu*/ ctx[0].division.type === "semy" && create_if_block_11(ctx);

    	const block = {
    		c: function create() {
    			div0 = element("div");
    			create_component(editortype.$$.fragment);
    			t0 = space();
    			if (if_block0) if_block0.c();
    			t1 = space();
    			div1 = element("div");
    			create_component(editortincture.$$.fragment);
    			t2 = space();
    			if (if_block1) if_block1.c();
    			t3 = space();
    			if (if_block2) if_block2.c();
    			t4 = space();
    			if (if_block3) if_block3.c();
    			if_block3_anchor = empty();
    			attr_dev(div0, "class", "subsection svelte-1k0wz0q");
    			add_location(div0, file$7, 416, 10, 13242);
    			attr_dev(div1, "class", "subsection svelte-1k0wz0q");
    			add_location(div1, file$7, 423, 10, 13483);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div0, anchor);
    			mount_component(editortype, div0, null);
    			append_dev(div0, t0);
    			if (if_block0) if_block0.m(div0, null);
    			insert_dev(target, t1, anchor);
    			insert_dev(target, div1, anchor);
    			mount_component(editortincture, div1, null);
    			insert_dev(target, t2, anchor);
    			if (if_block1) if_block1.m(target, anchor);
    			insert_dev(target, t3, anchor);
    			if (if_block2) if_block2.m(target, anchor);
    			insert_dev(target, t4, anchor);
    			if (if_block3) if_block3.m(target, anchor);
    			insert_dev(target, if_block3_anchor, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const editortype_changes = {};

    			if (!updating_type && dirty[0] & /*menu*/ 1) {
    				updating_type = true;
    				editortype_changes.type = /*menu*/ ctx[0].division.type;
    				add_flush_callback(() => updating_type = false);
    			}

    			editortype.$set(editortype_changes);

    			if (/*menu*/ ctx[0].division.type !== "tincture") {
    				if (if_block0) {
    					if_block0.p(ctx, dirty);

    					if (dirty[0] & /*menu*/ 1) {
    						transition_in(if_block0, 1);
    					}
    				} else {
    					if_block0 = create_if_block_14(ctx);
    					if_block0.c();
    					transition_in(if_block0, 1);
    					if_block0.m(div0, null);
    				}
    			} else if (if_block0) {
    				group_outros();

    				transition_out(if_block0, 1, 1, () => {
    					if_block0 = null;
    				});

    				check_outros();
    			}

    			const editortincture_changes = {};

    			if (!updating_t1 && dirty[0] & /*menu*/ 1) {
    				updating_t1 = true;
    				editortincture_changes.t1 = /*menu*/ ctx[0].division.t1;
    				add_flush_callback(() => updating_t1 = false);
    			}

    			editortincture.$set(editortincture_changes);

    			if (/*menu*/ ctx[0].division.type !== "tincture") {
    				if (if_block1) {
    					if_block1.p(ctx, dirty);

    					if (dirty[0] & /*menu*/ 1) {
    						transition_in(if_block1, 1);
    					}
    				} else {
    					if_block1 = create_if_block_13(ctx);
    					if_block1.c();
    					transition_in(if_block1, 1);
    					if_block1.m(t3.parentNode, t3);
    				}
    			} else if (if_block1) {
    				group_outros();

    				transition_out(if_block1, 1, 1, () => {
    					if_block1 = null;
    				});

    				check_outros();
    			}

    			if (/*menu*/ ctx[0].division.type === "pattern") {
    				if (if_block2) {
    					if_block2.p(ctx, dirty);

    					if (dirty[0] & /*menu*/ 1) {
    						transition_in(if_block2, 1);
    					}
    				} else {
    					if_block2 = create_if_block_12(ctx);
    					if_block2.c();
    					transition_in(if_block2, 1);
    					if_block2.m(t4.parentNode, t4);
    				}
    			} else if (if_block2) {
    				group_outros();

    				transition_out(if_block2, 1, 1, () => {
    					if_block2 = null;
    				});

    				check_outros();
    			}

    			if (/*menu*/ ctx[0].division.type === "semy") {
    				if (if_block3) {
    					if_block3.p(ctx, dirty);

    					if (dirty[0] & /*menu*/ 1) {
    						transition_in(if_block3, 1);
    					}
    				} else {
    					if_block3 = create_if_block_11(ctx);
    					if_block3.c();
    					transition_in(if_block3, 1);
    					if_block3.m(if_block3_anchor.parentNode, if_block3_anchor);
    				}
    			} else if (if_block3) {
    				group_outros();

    				transition_out(if_block3, 1, 1, () => {
    					if_block3 = null;
    				});

    				check_outros();
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(editortype.$$.fragment, local);
    			transition_in(if_block0);
    			transition_in(editortincture.$$.fragment, local);
    			transition_in(if_block1);
    			transition_in(if_block2);
    			transition_in(if_block3);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(editortype.$$.fragment, local);
    			transition_out(if_block0);
    			transition_out(editortincture.$$.fragment, local);
    			transition_out(if_block1);
    			transition_out(if_block2);
    			transition_out(if_block3);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div0);
    			destroy_component(editortype);
    			if (if_block0) if_block0.d();
    			if (detaching) detach_dev(t1);
    			if (detaching) detach_dev(div1);
    			destroy_component(editortincture);
    			if (detaching) detach_dev(t2);
    			if (if_block1) if_block1.d(detaching);
    			if (detaching) detach_dev(t3);
    			if (if_block2) if_block2.d(detaching);
    			if (detaching) detach_dev(t4);
    			if (if_block3) if_block3.d(detaching);
    			if (detaching) detach_dev(if_block3_anchor);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_10.name,
    		type: "if",
    		source: "(416:8) {#if coa.division}",
    		ctx
    	});

    	return block;
    }

    // (419:12) {#if menu.division.type !== "tincture"}
    function create_if_block_14(ctx) {
    	let editorsize;
    	let updating_size;
    	let current;

    	function editorsize_size_binding_1(value) {
    		/*editorsize_size_binding_1*/ ctx[24](value);
    	}

    	let editorsize_props = {};

    	if (/*menu*/ ctx[0].division.size !== void 0) {
    		editorsize_props.size = /*menu*/ ctx[0].division.size;
    	}

    	editorsize = new EditorSize({ props: editorsize_props, $$inline: true });
    	binding_callbacks.push(() => bind(editorsize, 'size', editorsize_size_binding_1));

    	const block = {
    		c: function create() {
    			create_component(editorsize.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(editorsize, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const editorsize_changes = {};

    			if (!updating_size && dirty[0] & /*menu*/ 1) {
    				updating_size = true;
    				editorsize_changes.size = /*menu*/ ctx[0].division.size;
    				add_flush_callback(() => updating_size = false);
    			}

    			editorsize.$set(editorsize_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(editorsize.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(editorsize.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(editorsize, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_14.name,
    		type: "if",
    		source: "(419:12) {#if menu.division.type !== \\\"tincture\\\"}",
    		ctx
    	});

    	return block;
    }

    // (428:10) {#if menu.division.type !== "tincture"}
    function create_if_block_13(ctx) {
    	let div;
    	let editortincture;
    	let updating_t1;
    	let current;

    	function editortincture_t1_binding_3(value) {
    		/*editortincture_t1_binding_3*/ ctx[26](value);
    	}

    	let editortincture_props = {};

    	if (/*menu*/ ctx[0].division.t2 !== void 0) {
    		editortincture_props.t1 = /*menu*/ ctx[0].division.t2;
    	}

    	editortincture = new EditorTincture({
    			props: editortincture_props,
    			$$inline: true
    		});

    	binding_callbacks.push(() => bind(editortincture, 't1', editortincture_t1_binding_3));

    	const block = {
    		c: function create() {
    			div = element("div");
    			create_component(editortincture.$$.fragment);
    			attr_dev(div, "class", "subsection svelte-1k0wz0q");
    			add_location(div, file$7, 428, 12, 13646);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    			mount_component(editortincture, div, null);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const editortincture_changes = {};

    			if (!updating_t1 && dirty[0] & /*menu*/ 1) {
    				updating_t1 = true;
    				editortincture_changes.t1 = /*menu*/ ctx[0].division.t2;
    				add_flush_callback(() => updating_t1 = false);
    			}

    			editortincture.$set(editortincture_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(editortincture.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(editortincture.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    			destroy_component(editortincture);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_13.name,
    		type: "if",
    		source: "(428:10) {#if menu.division.type !== \\\"tincture\\\"}",
    		ctx
    	});

    	return block;
    }

    // (434:10) {#if menu.division.type === "pattern"}
    function create_if_block_12(ctx) {
    	let div;
    	let editorpattern;
    	let updating_pattern;
    	let current;

    	function editorpattern_pattern_binding_1(value) {
    		/*editorpattern_pattern_binding_1*/ ctx[27](value);
    	}

    	let editorpattern_props = {
    		t1: /*menu*/ ctx[0].division.t1,
    		t2: /*menu*/ ctx[0].division.t2,
    		size: /*menu*/ ctx[0].division.size
    	};

    	if (/*menu*/ ctx[0].division.pattern !== void 0) {
    		editorpattern_props.pattern = /*menu*/ ctx[0].division.pattern;
    	}

    	editorpattern = new EditorPattern({
    			props: editorpattern_props,
    			$$inline: true
    		});

    	binding_callbacks.push(() => bind(editorpattern, 'pattern', editorpattern_pattern_binding_1));

    	const block = {
    		c: function create() {
    			div = element("div");
    			create_component(editorpattern.$$.fragment);
    			attr_dev(div, "class", "subsection svelte-1k0wz0q");
    			add_location(div, file$7, 434, 12, 13828);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    			mount_component(editorpattern, div, null);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const editorpattern_changes = {};
    			if (dirty[0] & /*menu*/ 1) editorpattern_changes.t1 = /*menu*/ ctx[0].division.t1;
    			if (dirty[0] & /*menu*/ 1) editorpattern_changes.t2 = /*menu*/ ctx[0].division.t2;
    			if (dirty[0] & /*menu*/ 1) editorpattern_changes.size = /*menu*/ ctx[0].division.size;

    			if (!updating_pattern && dirty[0] & /*menu*/ 1) {
    				updating_pattern = true;
    				editorpattern_changes.pattern = /*menu*/ ctx[0].division.pattern;
    				add_flush_callback(() => updating_pattern = false);
    			}

    			editorpattern.$set(editorpattern_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(editorpattern.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(editorpattern.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    			destroy_component(editorpattern);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_12.name,
    		type: "if",
    		source: "(434:10) {#if menu.division.type === \\\"pattern\\\"}",
    		ctx
    	});

    	return block;
    }

    // (445:10) {#if menu.division.type === "semy"}
    function create_if_block_11(ctx) {
    	let div;
    	let editorcharge;
    	let updating_charge;
    	let updating_category;
    	let current;

    	function editorcharge_charge_binding_1(value) {
    		/*editorcharge_charge_binding_1*/ ctx[28](value);
    	}

    	function editorcharge_category_binding_1(value) {
    		/*editorcharge_category_binding_1*/ ctx[29](value);
    	}

    	let editorcharge_props = {
    		type: "semy",
    		t1: /*menu*/ ctx[0].division.t1,
    		t2: /*menu*/ ctx[0].division.t2,
    		size: /*menu*/ ctx[0].division.size
    	};

    	if (/*menu*/ ctx[0].division.charge !== void 0) {
    		editorcharge_props.charge = /*menu*/ ctx[0].division.charge;
    	}

    	if (/*menu*/ ctx[0].division.semy !== void 0) {
    		editorcharge_props.category = /*menu*/ ctx[0].division.semy;
    	}

    	editorcharge = new EditorCharge({
    			props: editorcharge_props,
    			$$inline: true
    		});

    	binding_callbacks.push(() => bind(editorcharge, 'charge', editorcharge_charge_binding_1));
    	binding_callbacks.push(() => bind(editorcharge, 'category', editorcharge_category_binding_1));

    	const block = {
    		c: function create() {
    			div = element("div");
    			create_component(editorcharge.$$.fragment);
    			attr_dev(div, "class", "subsection svelte-1k0wz0q");
    			add_location(div, file$7, 445, 12, 14164);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    			mount_component(editorcharge, div, null);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const editorcharge_changes = {};
    			if (dirty[0] & /*menu*/ 1) editorcharge_changes.t1 = /*menu*/ ctx[0].division.t1;
    			if (dirty[0] & /*menu*/ 1) editorcharge_changes.t2 = /*menu*/ ctx[0].division.t2;
    			if (dirty[0] & /*menu*/ 1) editorcharge_changes.size = /*menu*/ ctx[0].division.size;

    			if (!updating_charge && dirty[0] & /*menu*/ 1) {
    				updating_charge = true;
    				editorcharge_changes.charge = /*menu*/ ctx[0].division.charge;
    				add_flush_callback(() => updating_charge = false);
    			}

    			if (!updating_category && dirty[0] & /*menu*/ 1) {
    				updating_category = true;
    				editorcharge_changes.category = /*menu*/ ctx[0].division.semy;
    				add_flush_callback(() => updating_category = false);
    			}

    			editorcharge.$set(editorcharge_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(editorcharge.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(editorcharge.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    			destroy_component(editorcharge);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_11.name,
    		type: "if",
    		source: "(445:10) {#if menu.division.type === \\\"semy\\\"}",
    		ctx
    	});

    	return block;
    }

    // (473:8) {#if o.above}
    function create_if_block_8(ctx) {
    	let i;
    	let t0;
    	let t1_value = /*$t*/ ctx[3]("editor.aboveCharges") + "";
    	let t1;
    	let t2;

    	const block = {
    		c: function create() {
    			i = element("i");
    			t0 = text("[");
    			t1 = text(t1_value);
    			t2 = text("]");
    			attr_dev(i, "class", "svelte-1k0wz0q");
    			add_location(i, file$7, 473, 10, 14962);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, i, anchor);
    			append_dev(i, t0);
    			append_dev(i, t1);
    			append_dev(i, t2);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty[0] & /*$t*/ 8 && t1_value !== (t1_value = /*$t*/ ctx[3]("editor.aboveCharges") + "")) set_data_dev(t1, t1_value);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(i);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_8.name,
    		type: "if",
    		source: "(473:8) {#if o.above}",
    		ctx
    	});

    	return block;
    }

    // (478:6) {#if section.ordinary[i]}
    function create_if_block_3$1(ctx) {
    	let div3;
    	let t0;
    	let div0;
    	let editorordinary;
    	let updating_ordinary;
    	let t1;
    	let t2;
    	let t3;
    	let div1;
    	let show_if = !["bordure", "orle"].includes(/*o*/ ctx[61].ordinary);
    	let t4;
    	let editorabove;
    	let updating_above;
    	let t5;
    	let div2;
    	let editorshift;
    	let updating_element;
    	let t6;
    	let div3_transition;
    	let current;
    	let if_block0 = /*coa*/ ctx[1].division && create_if_block_7$1(ctx);

    	function editorordinary_ordinary_binding(value) {
    		/*editorordinary_ordinary_binding*/ ctx[32](value, /*o*/ ctx[61]);
    	}

    	let editorordinary_props = {
    		t1: /*coa*/ ctx[1].t1,
    		line: /*o*/ ctx[61].line,
    		t2: /*o*/ ctx[61].t
    	};

    	if (/*o*/ ctx[61].ordinary !== void 0) {
    		editorordinary_props.ordinary = /*o*/ ctx[61].ordinary;
    	}

    	editorordinary = new EditorOrdinary({
    			props: editorordinary_props,
    			$$inline: true
    		});

    	binding_callbacks.push(() => bind(editorordinary, 'ordinary', editorordinary_ordinary_binding));
    	let if_block1 = ordinaries.lined[/*o*/ ctx[61].ordinary] && create_if_block_6$1(ctx);
    	let if_block2 = /*o*/ ctx[61].divided !== "counter" && create_if_block_5$1(ctx);
    	let if_block3 = show_if && create_if_block_4$1(ctx);

    	function editorabove_above_binding(value) {
    		/*editorabove_above_binding*/ ctx[36](value, /*o*/ ctx[61]);
    	}

    	let editorabove_props = {};

    	if (/*o*/ ctx[61].above !== void 0) {
    		editorabove_props.above = /*o*/ ctx[61].above;
    	}

    	editorabove = new EditorAbove({ props: editorabove_props, $$inline: true });
    	binding_callbacks.push(() => bind(editorabove, 'above', editorabove_above_binding));

    	function editorshift_element_binding(value) {
    		/*editorshift_element_binding*/ ctx[37](value, /*o*/ ctx[61], /*each_value_1*/ ctx[62], /*i*/ ctx[60]);
    	}

    	let editorshift_props = {};

    	if (/*o*/ ctx[61] !== void 0) {
    		editorshift_props.element = /*o*/ ctx[61];
    	}

    	editorshift = new EditorShift({ props: editorshift_props, $$inline: true });
    	binding_callbacks.push(() => bind(editorshift, 'element', editorshift_element_binding));

    	const block = {
    		c: function create() {
    			div3 = element("div");
    			if (if_block0) if_block0.c();
    			t0 = space();
    			div0 = element("div");
    			create_component(editorordinary.$$.fragment);
    			t1 = space();
    			if (if_block1) if_block1.c();
    			t2 = space();
    			if (if_block2) if_block2.c();
    			t3 = space();
    			div1 = element("div");
    			if (if_block3) if_block3.c();
    			t4 = space();
    			create_component(editorabove.$$.fragment);
    			t5 = space();
    			div2 = element("div");
    			create_component(editorshift.$$.fragment);
    			t6 = space();
    			attr_dev(div0, "class", "subsection svelte-1k0wz0q");
    			add_location(div0, file$7, 485, 10, 15337);
    			attr_dev(div1, "class", "subsection svelte-1k0wz0q");
    			add_location(div1, file$7, 501, 10, 15852);
    			attr_dev(div2, "class", "subsection svelte-1k0wz0q");
    			add_location(div2, file$7, 508, 10, 16080);
    			attr_dev(div3, "class", "panel svelte-1k0wz0q");
    			add_location(div3, file$7, 478, 8, 15131);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div3, anchor);
    			if (if_block0) if_block0.m(div3, null);
    			append_dev(div3, t0);
    			append_dev(div3, div0);
    			mount_component(editorordinary, div0, null);
    			append_dev(div3, t1);
    			if (if_block1) if_block1.m(div3, null);
    			append_dev(div3, t2);
    			if (if_block2) if_block2.m(div3, null);
    			append_dev(div3, t3);
    			append_dev(div3, div1);
    			if (if_block3) if_block3.m(div1, null);
    			append_dev(div1, t4);
    			mount_component(editorabove, div1, null);
    			append_dev(div3, t5);
    			append_dev(div3, div2);
    			mount_component(editorshift, div2, null);
    			append_dev(div3, t6);
    			current = true;
    		},
    		p: function update(new_ctx, dirty) {
    			ctx = new_ctx;

    			if (/*coa*/ ctx[1].division) {
    				if (if_block0) {
    					if_block0.p(ctx, dirty);

    					if (dirty[0] & /*coa*/ 2) {
    						transition_in(if_block0, 1);
    					}
    				} else {
    					if_block0 = create_if_block_7$1(ctx);
    					if_block0.c();
    					transition_in(if_block0, 1);
    					if_block0.m(div3, t0);
    				}
    			} else if (if_block0) {
    				group_outros();

    				transition_out(if_block0, 1, 1, () => {
    					if_block0 = null;
    				});

    				check_outros();
    			}

    			const editorordinary_changes = {};
    			if (dirty[0] & /*coa*/ 2) editorordinary_changes.t1 = /*coa*/ ctx[1].t1;
    			if (dirty[0] & /*menu*/ 1) editorordinary_changes.line = /*o*/ ctx[61].line;
    			if (dirty[0] & /*menu*/ 1) editorordinary_changes.t2 = /*o*/ ctx[61].t;

    			if (!updating_ordinary && dirty[0] & /*menu*/ 1) {
    				updating_ordinary = true;
    				editorordinary_changes.ordinary = /*o*/ ctx[61].ordinary;
    				add_flush_callback(() => updating_ordinary = false);
    			}

    			editorordinary.$set(editorordinary_changes);

    			if (ordinaries.lined[/*o*/ ctx[61].ordinary]) {
    				if (if_block1) {
    					if_block1.p(ctx, dirty);

    					if (dirty[0] & /*menu*/ 1) {
    						transition_in(if_block1, 1);
    					}
    				} else {
    					if_block1 = create_if_block_6$1(ctx);
    					if_block1.c();
    					transition_in(if_block1, 1);
    					if_block1.m(div3, t2);
    				}
    			} else if (if_block1) {
    				group_outros();

    				transition_out(if_block1, 1, 1, () => {
    					if_block1 = null;
    				});

    				check_outros();
    			}

    			if (/*o*/ ctx[61].divided !== "counter") {
    				if (if_block2) {
    					if_block2.p(ctx, dirty);

    					if (dirty[0] & /*menu*/ 1) {
    						transition_in(if_block2, 1);
    					}
    				} else {
    					if_block2 = create_if_block_5$1(ctx);
    					if_block2.c();
    					transition_in(if_block2, 1);
    					if_block2.m(div3, t3);
    				}
    			} else if (if_block2) {
    				group_outros();

    				transition_out(if_block2, 1, 1, () => {
    					if_block2 = null;
    				});

    				check_outros();
    			}

    			if (dirty[0] & /*menu*/ 1) show_if = !["bordure", "orle"].includes(/*o*/ ctx[61].ordinary);

    			if (show_if) {
    				if (if_block3) {
    					if_block3.p(ctx, dirty);

    					if (dirty[0] & /*menu*/ 1) {
    						transition_in(if_block3, 1);
    					}
    				} else {
    					if_block3 = create_if_block_4$1(ctx);
    					if_block3.c();
    					transition_in(if_block3, 1);
    					if_block3.m(div1, t4);
    				}
    			} else if (if_block3) {
    				group_outros();

    				transition_out(if_block3, 1, 1, () => {
    					if_block3 = null;
    				});

    				check_outros();
    			}

    			const editorabove_changes = {};

    			if (!updating_above && dirty[0] & /*menu*/ 1) {
    				updating_above = true;
    				editorabove_changes.above = /*o*/ ctx[61].above;
    				add_flush_callback(() => updating_above = false);
    			}

    			editorabove.$set(editorabove_changes);
    			const editorshift_changes = {};

    			if (!updating_element && dirty[0] & /*menu*/ 1) {
    				updating_element = true;
    				editorshift_changes.element = /*o*/ ctx[61];
    				add_flush_callback(() => updating_element = false);
    			}

    			editorshift.$set(editorshift_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(if_block0);
    			transition_in(editorordinary.$$.fragment, local);
    			transition_in(if_block1);
    			transition_in(if_block2);
    			transition_in(if_block3);
    			transition_in(editorabove.$$.fragment, local);
    			transition_in(editorshift.$$.fragment, local);

    			add_render_callback(() => {
    				if (!div3_transition) div3_transition = create_bidirectional_transition(div3, slide, {}, true);
    				div3_transition.run(1);
    			});

    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(if_block0);
    			transition_out(editorordinary.$$.fragment, local);
    			transition_out(if_block1);
    			transition_out(if_block2);
    			transition_out(if_block3);
    			transition_out(editorabove.$$.fragment, local);
    			transition_out(editorshift.$$.fragment, local);
    			if (!div3_transition) div3_transition = create_bidirectional_transition(div3, slide, {}, false);
    			div3_transition.run(0);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div3);
    			if (if_block0) if_block0.d();
    			destroy_component(editorordinary);
    			if (if_block1) if_block1.d();
    			if (if_block2) if_block2.d();
    			if (if_block3) if_block3.d();
    			destroy_component(editorabove);
    			destroy_component(editorshift);
    			if (detaching && div3_transition) div3_transition.end();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_3$1.name,
    		type: "if",
    		source: "(478:6) {#if section.ordinary[i]}",
    		ctx
    	});

    	return block;
    }

    // (480:10) {#if coa.division}
    function create_if_block_7$1(ctx) {
    	let div;
    	let editordivided;
    	let updating_divided;
    	let current;

    	function editordivided_divided_binding(value) {
    		/*editordivided_divided_binding*/ ctx[31](value, /*o*/ ctx[61]);
    	}

    	let editordivided_props = {};

    	if (/*o*/ ctx[61].divided !== void 0) {
    		editordivided_props.divided = /*o*/ ctx[61].divided;
    	}

    	editordivided = new EditorDivided({
    			props: editordivided_props,
    			$$inline: true
    		});

    	binding_callbacks.push(() => bind(editordivided, 'divided', editordivided_divided_binding));

    	const block = {
    		c: function create() {
    			div = element("div");
    			create_component(editordivided.$$.fragment);
    			attr_dev(div, "class", "subsection svelte-1k0wz0q");
    			add_location(div, file$7, 480, 12, 15209);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    			mount_component(editordivided, div, null);
    			current = true;
    		},
    		p: function update(new_ctx, dirty) {
    			ctx = new_ctx;
    			const editordivided_changes = {};

    			if (!updating_divided && dirty[0] & /*menu*/ 1) {
    				updating_divided = true;
    				editordivided_changes.divided = /*o*/ ctx[61].divided;
    				add_flush_callback(() => updating_divided = false);
    			}

    			editordivided.$set(editordivided_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(editordivided.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(editordivided.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    			destroy_component(editordivided);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_7$1.name,
    		type: "if",
    		source: "(480:10) {#if coa.division}",
    		ctx
    	});

    	return block;
    }

    // (490:10) {#if ordinaries.lined[o.ordinary]}
    function create_if_block_6$1(ctx) {
    	let div;
    	let editorline;
    	let updating_line;
    	let current;

    	function editorline_line_binding_1(value) {
    		/*editorline_line_binding_1*/ ctx[33](value, /*o*/ ctx[61]);
    	}

    	let editorline_props = {
    		ordinary: /*o*/ ctx[61].ordinary,
    		t1: /*coa*/ ctx[1].t1,
    		t2: /*o*/ ctx[61].t
    	};

    	if (/*o*/ ctx[61].line !== void 0) {
    		editorline_props.line = /*o*/ ctx[61].line;
    	}

    	editorline = new EditorLine({ props: editorline_props, $$inline: true });
    	binding_callbacks.push(() => bind(editorline, 'line', editorline_line_binding_1));

    	const block = {
    		c: function create() {
    			div = element("div");
    			create_component(editorline.$$.fragment);
    			attr_dev(div, "class", "subsection svelte-1k0wz0q");
    			add_location(div, file$7, 490, 12, 15530);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    			mount_component(editorline, div, null);
    			current = true;
    		},
    		p: function update(new_ctx, dirty) {
    			ctx = new_ctx;
    			const editorline_changes = {};
    			if (dirty[0] & /*menu*/ 1) editorline_changes.ordinary = /*o*/ ctx[61].ordinary;
    			if (dirty[0] & /*coa*/ 2) editorline_changes.t1 = /*coa*/ ctx[1].t1;
    			if (dirty[0] & /*menu*/ 1) editorline_changes.t2 = /*o*/ ctx[61].t;

    			if (!updating_line && dirty[0] & /*menu*/ 1) {
    				updating_line = true;
    				editorline_changes.line = /*o*/ ctx[61].line;
    				add_flush_callback(() => updating_line = false);
    			}

    			editorline.$set(editorline_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(editorline.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(editorline.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    			destroy_component(editorline);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_6$1.name,
    		type: "if",
    		source: "(490:10) {#if ordinaries.lined[o.ordinary]}",
    		ctx
    	});

    	return block;
    }

    // (496:10) {#if o.divided !== "counter"}
    function create_if_block_5$1(ctx) {
    	let div;
    	let editortincture;
    	let updating_t1;
    	let current;

    	function editortincture_t1_binding_4(value) {
    		/*editortincture_t1_binding_4*/ ctx[34](value, /*o*/ ctx[61]);
    	}

    	let editortincture_props = {};

    	if (/*o*/ ctx[61].t !== void 0) {
    		editortincture_props.t1 = /*o*/ ctx[61].t;
    	}

    	editortincture = new EditorTincture({
    			props: editortincture_props,
    			$$inline: true
    		});

    	binding_callbacks.push(() => bind(editortincture, 't1', editortincture_t1_binding_4));

    	const block = {
    		c: function create() {
    			div = element("div");
    			create_component(editortincture.$$.fragment);
    			attr_dev(div, "class", "subsection svelte-1k0wz0q");
    			add_location(div, file$7, 496, 12, 15734);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    			mount_component(editortincture, div, null);
    			current = true;
    		},
    		p: function update(new_ctx, dirty) {
    			ctx = new_ctx;
    			const editortincture_changes = {};

    			if (!updating_t1 && dirty[0] & /*menu*/ 1) {
    				updating_t1 = true;
    				editortincture_changes.t1 = /*o*/ ctx[61].t;
    				add_flush_callback(() => updating_t1 = false);
    			}

    			editortincture.$set(editortincture_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(editortincture.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(editortincture.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    			destroy_component(editortincture);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_5$1.name,
    		type: "if",
    		source: "(496:10) {#if o.divided !== \\\"counter\\\"}",
    		ctx
    	});

    	return block;
    }

    // (503:12) {#if !["bordure", "orle"].includes(o.ordinary)}
    function create_if_block_4$1(ctx) {
    	let editorstroke;
    	let updating_element;
    	let current;

    	function editorstroke_element_binding(value) {
    		/*editorstroke_element_binding*/ ctx[35](value, /*o*/ ctx[61], /*each_value_1*/ ctx[62], /*i*/ ctx[60]);
    	}

    	let editorstroke_props = {};

    	if (/*o*/ ctx[61] !== void 0) {
    		editorstroke_props.element = /*o*/ ctx[61];
    	}

    	editorstroke = new EditorStroke({
    			props: editorstroke_props,
    			$$inline: true
    		});

    	binding_callbacks.push(() => bind(editorstroke, 'element', editorstroke_element_binding));

    	const block = {
    		c: function create() {
    			create_component(editorstroke.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(editorstroke, target, anchor);
    			current = true;
    		},
    		p: function update(new_ctx, dirty) {
    			ctx = new_ctx;
    			const editorstroke_changes = {};

    			if (!updating_element && dirty[0] & /*menu*/ 1) {
    				updating_element = true;
    				editorstroke_changes.element = /*o*/ ctx[61];
    				add_flush_callback(() => updating_element = false);
    			}

    			editorstroke.$set(editorstroke_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(editorstroke.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(editorstroke.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(editorstroke, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_4$1.name,
    		type: "if",
    		source: "(503:12) {#if ![\\\"bordure\\\", \\\"orle\\\"].includes(o.ordinary)}",
    		ctx
    	});

    	return block;
    }

    // (462:4) {#each menu.ordinaries as o, i}
    function create_each_block_1$2(ctx) {
    	let div;
    	let t0_value = /*$t*/ ctx[3]("editor.ordinary") + "";
    	let t0;

    	let t1_value = (/*menu*/ ctx[0].ordinaries.length > 1
    	? ` ${/*i*/ ctx[60] + 1}`
    	: "") + "";

    	let t1;
    	let t2;
    	let t3_value = /*translateSafely*/ ctx[8]("ordinaries", /*o*/ ctx[61].ordinary) + "";
    	let t3;
    	let t4;
    	let t5;
    	let editorcontrols;
    	let updating_els;
    	let div_transition;
    	let t6;
    	let if_block1_anchor;
    	let current;
    	let mounted;
    	let dispose;
    	let if_block0 = /*o*/ ctx[61].above && create_if_block_8(ctx);

    	function editorcontrols_els_binding(value) {
    		/*editorcontrols_els_binding*/ ctx[30](value);
    	}

    	let editorcontrols_props = { el: /*o*/ ctx[61], i: /*i*/ ctx[60] };

    	if (/*menu*/ ctx[0].ordinaries !== void 0) {
    		editorcontrols_props.els = /*menu*/ ctx[0].ordinaries;
    	}

    	editorcontrols = new EditorControls({
    			props: editorcontrols_props,
    			$$inline: true
    		});

    	binding_callbacks.push(() => bind(editorcontrols, 'els', editorcontrols_els_binding));
    	let if_block1 = /*section*/ ctx[2].ordinary[/*i*/ ctx[60]] && create_if_block_3$1(ctx);

    	const block = {
    		c: function create() {
    			div = element("div");
    			t0 = text(t0_value);
    			t1 = text(t1_value);
    			t2 = text(": ");
    			t3 = text(t3_value);
    			t4 = space();
    			if (if_block0) if_block0.c();
    			t5 = space();
    			create_component(editorcontrols.$$.fragment);
    			t6 = space();
    			if (if_block1) if_block1.c();
    			if_block1_anchor = empty();
    			attr_dev(div, "class", "section svelte-1k0wz0q");
    			toggle_class(div, "expanded", /*section*/ ctx[2].ordinary[/*i*/ ctx[60]]);
    			add_location(div, file$7, 462, 6, 14621);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    			append_dev(div, t0);
    			append_dev(div, t1);
    			append_dev(div, t2);
    			append_dev(div, t3);
    			append_dev(div, t4);
    			if (if_block0) if_block0.m(div, null);
    			append_dev(div, t5);
    			mount_component(editorcontrols, div, null);
    			insert_dev(target, t6, anchor);
    			if (if_block1) if_block1.m(target, anchor);
    			insert_dev(target, if_block1_anchor, anchor);
    			current = true;

    			if (!mounted) {
    				dispose = listen_dev(div, "click", /*toggleSection*/ ctx[5]("ordinary", /*i*/ ctx[60]), false, false, false);
    				mounted = true;
    			}
    		},
    		p: function update(new_ctx, dirty) {
    			ctx = new_ctx;
    			if ((!current || dirty[0] & /*$t*/ 8) && t0_value !== (t0_value = /*$t*/ ctx[3]("editor.ordinary") + "")) set_data_dev(t0, t0_value);

    			if ((!current || dirty[0] & /*menu*/ 1) && t1_value !== (t1_value = (/*menu*/ ctx[0].ordinaries.length > 1
    			? ` ${/*i*/ ctx[60] + 1}`
    			: "") + "")) set_data_dev(t1, t1_value);

    			if ((!current || dirty[0] & /*menu*/ 1) && t3_value !== (t3_value = /*translateSafely*/ ctx[8]("ordinaries", /*o*/ ctx[61].ordinary) + "")) set_data_dev(t3, t3_value);

    			if (/*o*/ ctx[61].above) {
    				if (if_block0) {
    					if_block0.p(ctx, dirty);
    				} else {
    					if_block0 = create_if_block_8(ctx);
    					if_block0.c();
    					if_block0.m(div, t5);
    				}
    			} else if (if_block0) {
    				if_block0.d(1);
    				if_block0 = null;
    			}

    			const editorcontrols_changes = {};
    			if (dirty[0] & /*menu*/ 1) editorcontrols_changes.el = /*o*/ ctx[61];

    			if (!updating_els && dirty[0] & /*menu*/ 1) {
    				updating_els = true;
    				editorcontrols_changes.els = /*menu*/ ctx[0].ordinaries;
    				add_flush_callback(() => updating_els = false);
    			}

    			editorcontrols.$set(editorcontrols_changes);

    			if (dirty[0] & /*section*/ 4) {
    				toggle_class(div, "expanded", /*section*/ ctx[2].ordinary[/*i*/ ctx[60]]);
    			}

    			if (/*section*/ ctx[2].ordinary[/*i*/ ctx[60]]) {
    				if (if_block1) {
    					if_block1.p(ctx, dirty);

    					if (dirty[0] & /*section*/ 4) {
    						transition_in(if_block1, 1);
    					}
    				} else {
    					if_block1 = create_if_block_3$1(ctx);
    					if_block1.c();
    					transition_in(if_block1, 1);
    					if_block1.m(if_block1_anchor.parentNode, if_block1_anchor);
    				}
    			} else if (if_block1) {
    				group_outros();

    				transition_out(if_block1, 1, 1, () => {
    					if_block1 = null;
    				});

    				check_outros();
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(editorcontrols.$$.fragment, local);

    			add_render_callback(() => {
    				if (!div_transition) div_transition = create_bidirectional_transition(div, slide, {}, true);
    				div_transition.run(1);
    			});

    			transition_in(if_block1);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(editorcontrols.$$.fragment, local);
    			if (!div_transition) div_transition = create_bidirectional_transition(div, slide, {}, false);
    			div_transition.run(0);
    			transition_out(if_block1);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    			if (if_block0) if_block0.d();
    			destroy_component(editorcontrols);
    			if (detaching && div_transition) div_transition.end();
    			if (detaching) detach_dev(t6);
    			if (if_block1) if_block1.d(detaching);
    			if (detaching) detach_dev(if_block1_anchor);
    			mounted = false;
    			dispose();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_each_block_1$2.name,
    		type: "each",
    		source: "(462:4) {#each menu.ordinaries as o, i}",
    		ctx
    	});

    	return block;
    }

    // (525:6) {#if section.charge[i]}
    function create_if_block$4(ctx) {
    	let div4;
    	let div0;
    	let t0;
    	let editorcharge;
    	let updating_charge;
    	let updating_category;
    	let t1;
    	let show_if = !isRaster(/*charge*/ ctx[58].charge) && /*charge*/ ctx[58].divided !== "counter";
    	let t2;
    	let div1;
    	let editorstroke;
    	let updating_element;
    	let t3;
    	let div2;
    	let editorposition;
    	let updating_charge_1;
    	let t4;
    	let div3;
    	let editorshift;
    	let updating_element_1;
    	let div4_transition;
    	let current;
    	let if_block0 = /*coa*/ ctx[1].division && create_if_block_2$2(ctx);

    	function editorcharge_charge_binding_2(value) {
    		/*editorcharge_charge_binding_2*/ ctx[40](value, /*charge*/ ctx[58]);
    	}

    	function editorcharge_category_binding_2(value) {
    		/*editorcharge_category_binding_2*/ ctx[41](value, /*charge*/ ctx[58]);
    	}

    	let editorcharge_props = {
    		type: "charge",
    		t1: /*coa*/ ctx[1].t1,
    		t2: /*charge*/ ctx[58].t,
    		sinister: /*charge*/ ctx[58].sinister,
    		reversed: /*charge*/ ctx[58].reversed,
    		division: /*coa*/ ctx[1].division
    	};

    	if (/*charge*/ ctx[58].charge !== void 0) {
    		editorcharge_props.charge = /*charge*/ ctx[58].charge;
    	}

    	if (/*charge*/ ctx[58].type !== void 0) {
    		editorcharge_props.category = /*charge*/ ctx[58].type;
    	}

    	editorcharge = new EditorCharge({
    			props: editorcharge_props,
    			$$inline: true
    		});

    	binding_callbacks.push(() => bind(editorcharge, 'charge', editorcharge_charge_binding_2));
    	binding_callbacks.push(() => bind(editorcharge, 'category', editorcharge_category_binding_2));
    	let if_block1 = show_if && create_if_block_1$2(ctx);

    	function editorstroke_element_binding_1(value) {
    		/*editorstroke_element_binding_1*/ ctx[43](value, /*charge*/ ctx[58], /*each_value*/ ctx[59], /*i*/ ctx[60]);
    	}

    	let editorstroke_props = {};

    	if (/*charge*/ ctx[58] !== void 0) {
    		editorstroke_props.element = /*charge*/ ctx[58];
    	}

    	editorstroke = new EditorStroke({
    			props: editorstroke_props,
    			$$inline: true
    		});

    	binding_callbacks.push(() => bind(editorstroke, 'element', editorstroke_element_binding_1));

    	function editorposition_charge_binding(value) {
    		/*editorposition_charge_binding*/ ctx[44](value, /*charge*/ ctx[58], /*each_value*/ ctx[59], /*i*/ ctx[60]);
    	}

    	let editorposition_props = {};

    	if (/*charge*/ ctx[58] !== void 0) {
    		editorposition_props.charge = /*charge*/ ctx[58];
    	}

    	editorposition = new EditorPosition({
    			props: editorposition_props,
    			$$inline: true
    		});

    	binding_callbacks.push(() => bind(editorposition, 'charge', editorposition_charge_binding));

    	function editorshift_element_binding_1(value) {
    		/*editorshift_element_binding_1*/ ctx[45](value, /*charge*/ ctx[58], /*each_value*/ ctx[59], /*i*/ ctx[60]);
    	}

    	let editorshift_props = {};

    	if (/*charge*/ ctx[58] !== void 0) {
    		editorshift_props.element = /*charge*/ ctx[58];
    	}

    	editorshift = new EditorShift({ props: editorshift_props, $$inline: true });
    	binding_callbacks.push(() => bind(editorshift, 'element', editorshift_element_binding_1));

    	const block = {
    		c: function create() {
    			div4 = element("div");
    			div0 = element("div");
    			if (if_block0) if_block0.c();
    			t0 = space();
    			create_component(editorcharge.$$.fragment);
    			t1 = space();
    			if (if_block1) if_block1.c();
    			t2 = space();
    			div1 = element("div");
    			create_component(editorstroke.$$.fragment);
    			t3 = space();
    			div2 = element("div");
    			create_component(editorposition.$$.fragment);
    			t4 = space();
    			div3 = element("div");
    			create_component(editorshift.$$.fragment);
    			attr_dev(div0, "class", "subsection svelte-1k0wz0q");
    			add_location(div0, file$7, 526, 10, 16701);
    			attr_dev(div1, "class", "subsection svelte-1k0wz0q");
    			add_location(div1, file$7, 548, 10, 17423);
    			attr_dev(div2, "class", "subsection svelte-1k0wz0q");
    			add_location(div2, file$7, 552, 10, 17527);
    			attr_dev(div3, "class", "subsection svelte-1k0wz0q");
    			add_location(div3, file$7, 556, 10, 17623);
    			attr_dev(div4, "class", "panel svelte-1k0wz0q");
    			add_location(div4, file$7, 525, 8, 16654);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div4, anchor);
    			append_dev(div4, div0);
    			if (if_block0) if_block0.m(div0, null);
    			append_dev(div0, t0);
    			mount_component(editorcharge, div0, null);
    			append_dev(div4, t1);
    			if (if_block1) if_block1.m(div4, null);
    			append_dev(div4, t2);
    			append_dev(div4, div1);
    			mount_component(editorstroke, div1, null);
    			append_dev(div4, t3);
    			append_dev(div4, div2);
    			mount_component(editorposition, div2, null);
    			append_dev(div4, t4);
    			append_dev(div4, div3);
    			mount_component(editorshift, div3, null);
    			current = true;
    		},
    		p: function update(new_ctx, dirty) {
    			ctx = new_ctx;

    			if (/*coa*/ ctx[1].division) {
    				if (if_block0) {
    					if_block0.p(ctx, dirty);

    					if (dirty[0] & /*coa*/ 2) {
    						transition_in(if_block0, 1);
    					}
    				} else {
    					if_block0 = create_if_block_2$2(ctx);
    					if_block0.c();
    					transition_in(if_block0, 1);
    					if_block0.m(div0, t0);
    				}
    			} else if (if_block0) {
    				group_outros();

    				transition_out(if_block0, 1, 1, () => {
    					if_block0 = null;
    				});

    				check_outros();
    			}

    			const editorcharge_changes = {};
    			if (dirty[0] & /*coa*/ 2) editorcharge_changes.t1 = /*coa*/ ctx[1].t1;
    			if (dirty[0] & /*menu*/ 1) editorcharge_changes.t2 = /*charge*/ ctx[58].t;
    			if (dirty[0] & /*menu*/ 1) editorcharge_changes.sinister = /*charge*/ ctx[58].sinister;
    			if (dirty[0] & /*menu*/ 1) editorcharge_changes.reversed = /*charge*/ ctx[58].reversed;
    			if (dirty[0] & /*coa*/ 2) editorcharge_changes.division = /*coa*/ ctx[1].division;

    			if (!updating_charge && dirty[0] & /*menu*/ 1) {
    				updating_charge = true;
    				editorcharge_changes.charge = /*charge*/ ctx[58].charge;
    				add_flush_callback(() => updating_charge = false);
    			}

    			if (!updating_category && dirty[0] & /*menu*/ 1) {
    				updating_category = true;
    				editorcharge_changes.category = /*charge*/ ctx[58].type;
    				add_flush_callback(() => updating_category = false);
    			}

    			editorcharge.$set(editorcharge_changes);
    			if (dirty[0] & /*menu*/ 1) show_if = !isRaster(/*charge*/ ctx[58].charge) && /*charge*/ ctx[58].divided !== "counter";

    			if (show_if) {
    				if (if_block1) {
    					if_block1.p(ctx, dirty);

    					if (dirty[0] & /*menu*/ 1) {
    						transition_in(if_block1, 1);
    					}
    				} else {
    					if_block1 = create_if_block_1$2(ctx);
    					if_block1.c();
    					transition_in(if_block1, 1);
    					if_block1.m(div4, t2);
    				}
    			} else if (if_block1) {
    				group_outros();

    				transition_out(if_block1, 1, 1, () => {
    					if_block1 = null;
    				});

    				check_outros();
    			}

    			const editorstroke_changes = {};

    			if (!updating_element && dirty[0] & /*menu*/ 1) {
    				updating_element = true;
    				editorstroke_changes.element = /*charge*/ ctx[58];
    				add_flush_callback(() => updating_element = false);
    			}

    			editorstroke.$set(editorstroke_changes);
    			const editorposition_changes = {};

    			if (!updating_charge_1 && dirty[0] & /*menu*/ 1) {
    				updating_charge_1 = true;
    				editorposition_changes.charge = /*charge*/ ctx[58];
    				add_flush_callback(() => updating_charge_1 = false);
    			}

    			editorposition.$set(editorposition_changes);
    			const editorshift_changes = {};

    			if (!updating_element_1 && dirty[0] & /*menu*/ 1) {
    				updating_element_1 = true;
    				editorshift_changes.element = /*charge*/ ctx[58];
    				add_flush_callback(() => updating_element_1 = false);
    			}

    			editorshift.$set(editorshift_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(if_block0);
    			transition_in(editorcharge.$$.fragment, local);
    			transition_in(if_block1);
    			transition_in(editorstroke.$$.fragment, local);
    			transition_in(editorposition.$$.fragment, local);
    			transition_in(editorshift.$$.fragment, local);

    			add_render_callback(() => {
    				if (!div4_transition) div4_transition = create_bidirectional_transition(div4, slide, {}, true);
    				div4_transition.run(1);
    			});

    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(if_block0);
    			transition_out(editorcharge.$$.fragment, local);
    			transition_out(if_block1);
    			transition_out(editorstroke.$$.fragment, local);
    			transition_out(editorposition.$$.fragment, local);
    			transition_out(editorshift.$$.fragment, local);
    			if (!div4_transition) div4_transition = create_bidirectional_transition(div4, slide, {}, false);
    			div4_transition.run(0);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div4);
    			if (if_block0) if_block0.d();
    			destroy_component(editorcharge);
    			if (if_block1) if_block1.d();
    			destroy_component(editorstroke);
    			destroy_component(editorposition);
    			destroy_component(editorshift);
    			if (detaching && div4_transition) div4_transition.end();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block$4.name,
    		type: "if",
    		source: "(525:6) {#if section.charge[i]}",
    		ctx
    	});

    	return block;
    }

    // (528:12) {#if coa.division}
    function create_if_block_2$2(ctx) {
    	let editordivided;
    	let updating_divided;
    	let current;

    	function editordivided_divided_binding_1(value) {
    		/*editordivided_divided_binding_1*/ ctx[39](value, /*charge*/ ctx[58]);
    	}

    	let editordivided_props = {
    		raster: isRaster(/*charge*/ ctx[58].charge)
    	};

    	if (/*charge*/ ctx[58].divided !== void 0) {
    		editordivided_props.divided = /*charge*/ ctx[58].divided;
    	}

    	editordivided = new EditorDivided({
    			props: editordivided_props,
    			$$inline: true
    		});

    	binding_callbacks.push(() => bind(editordivided, 'divided', editordivided_divided_binding_1));

    	const block = {
    		c: function create() {
    			create_component(editordivided.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(editordivided, target, anchor);
    			current = true;
    		},
    		p: function update(new_ctx, dirty) {
    			ctx = new_ctx;
    			const editordivided_changes = {};
    			if (dirty[0] & /*menu*/ 1) editordivided_changes.raster = isRaster(/*charge*/ ctx[58].charge);

    			if (!updating_divided && dirty[0] & /*menu*/ 1) {
    				updating_divided = true;
    				editordivided_changes.divided = /*charge*/ ctx[58].divided;
    				add_flush_callback(() => updating_divided = false);
    			}

    			editordivided.$set(editordivided_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(editordivided.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(editordivided.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(editordivided, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_2$2.name,
    		type: "if",
    		source: "(528:12) {#if coa.division}",
    		ctx
    	});

    	return block;
    }

    // (543:10) {#if !isRaster(charge.charge) && charge.divided !== "counter"}
    function create_if_block_1$2(ctx) {
    	let div;
    	let editortincture;
    	let updating_t1;
    	let current;

    	function editortincture_t1_binding_5(value) {
    		/*editortincture_t1_binding_5*/ ctx[42](value, /*charge*/ ctx[58]);
    	}

    	let editortincture_props = {};

    	if (/*charge*/ ctx[58].t !== void 0) {
    		editortincture_props.t1 = /*charge*/ ctx[58].t;
    	}

    	editortincture = new EditorTincture({
    			props: editortincture_props,
    			$$inline: true
    		});

    	binding_callbacks.push(() => bind(editortincture, 't1', editortincture_t1_binding_5));

    	const block = {
    		c: function create() {
    			div = element("div");
    			create_component(editortincture.$$.fragment);
    			attr_dev(div, "class", "subsection svelte-1k0wz0q");
    			add_location(div, file$7, 543, 12, 17300);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    			mount_component(editortincture, div, null);
    			current = true;
    		},
    		p: function update(new_ctx, dirty) {
    			ctx = new_ctx;
    			const editortincture_changes = {};

    			if (!updating_t1 && dirty[0] & /*menu*/ 1) {
    				updating_t1 = true;
    				editortincture_changes.t1 = /*charge*/ ctx[58].t;
    				add_flush_callback(() => updating_t1 = false);
    			}

    			editortincture.$set(editortincture_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(editortincture.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(editortincture.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    			destroy_component(editortincture);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_1$2.name,
    		type: "if",
    		source: "(543:10) {#if !isRaster(charge.charge) && charge.divided !== \\\"counter\\\"}",
    		ctx
    	});

    	return block;
    }

    // (517:4) {#each menu.charges as charge, i}
    function create_each_block$4(ctx) {
    	let div;
    	let t0_value = /*$t*/ ctx[3]("tinctures.charge") + "";
    	let t0;

    	let t1_value = (/*menu*/ ctx[0].charges.length > 1
    	? ` ${/*i*/ ctx[60] + 1}`
    	: "") + "";

    	let t1;
    	let t2;
    	let t3_value = /*translateSafely*/ ctx[8]("charges", /*charge*/ ctx[58].charge) + "";
    	let t3;
    	let t4;
    	let editorcontrols;
    	let updating_els;
    	let div_transition;
    	let t5;
    	let if_block_anchor;
    	let current;
    	let mounted;
    	let dispose;

    	function editorcontrols_els_binding_1(value) {
    		/*editorcontrols_els_binding_1*/ ctx[38](value);
    	}

    	let editorcontrols_props = { el: /*charge*/ ctx[58], i: /*i*/ ctx[60] };

    	if (/*menu*/ ctx[0].charges !== void 0) {
    		editorcontrols_props.els = /*menu*/ ctx[0].charges;
    	}

    	editorcontrols = new EditorControls({
    			props: editorcontrols_props,
    			$$inline: true
    		});

    	binding_callbacks.push(() => bind(editorcontrols, 'els', editorcontrols_els_binding_1));
    	let if_block = /*section*/ ctx[2].charge[/*i*/ ctx[60]] && create_if_block$4(ctx);

    	const block = {
    		c: function create() {
    			div = element("div");
    			t0 = text(t0_value);
    			t1 = text(t1_value);
    			t2 = text(": ");
    			t3 = text(t3_value);
    			t4 = space();
    			create_component(editorcontrols.$$.fragment);
    			t5 = space();
    			if (if_block) if_block.c();
    			if_block_anchor = empty();
    			attr_dev(div, "class", "section svelte-1k0wz0q");
    			toggle_class(div, "expanded", /*section*/ ctx[2].charge[/*i*/ ctx[60]]);
    			add_location(div, file$7, 517, 6, 16272);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    			append_dev(div, t0);
    			append_dev(div, t1);
    			append_dev(div, t2);
    			append_dev(div, t3);
    			append_dev(div, t4);
    			mount_component(editorcontrols, div, null);
    			insert_dev(target, t5, anchor);
    			if (if_block) if_block.m(target, anchor);
    			insert_dev(target, if_block_anchor, anchor);
    			current = true;

    			if (!mounted) {
    				dispose = listen_dev(div, "click", /*toggleSection*/ ctx[5]("charge", /*i*/ ctx[60]), false, false, false);
    				mounted = true;
    			}
    		},
    		p: function update(new_ctx, dirty) {
    			ctx = new_ctx;
    			if ((!current || dirty[0] & /*$t*/ 8) && t0_value !== (t0_value = /*$t*/ ctx[3]("tinctures.charge") + "")) set_data_dev(t0, t0_value);

    			if ((!current || dirty[0] & /*menu*/ 1) && t1_value !== (t1_value = (/*menu*/ ctx[0].charges.length > 1
    			? ` ${/*i*/ ctx[60] + 1}`
    			: "") + "")) set_data_dev(t1, t1_value);

    			if ((!current || dirty[0] & /*menu*/ 1) && t3_value !== (t3_value = /*translateSafely*/ ctx[8]("charges", /*charge*/ ctx[58].charge) + "")) set_data_dev(t3, t3_value);
    			const editorcontrols_changes = {};
    			if (dirty[0] & /*menu*/ 1) editorcontrols_changes.el = /*charge*/ ctx[58];

    			if (!updating_els && dirty[0] & /*menu*/ 1) {
    				updating_els = true;
    				editorcontrols_changes.els = /*menu*/ ctx[0].charges;
    				add_flush_callback(() => updating_els = false);
    			}

    			editorcontrols.$set(editorcontrols_changes);

    			if (dirty[0] & /*section*/ 4) {
    				toggle_class(div, "expanded", /*section*/ ctx[2].charge[/*i*/ ctx[60]]);
    			}

    			if (/*section*/ ctx[2].charge[/*i*/ ctx[60]]) {
    				if (if_block) {
    					if_block.p(ctx, dirty);

    					if (dirty[0] & /*section*/ 4) {
    						transition_in(if_block, 1);
    					}
    				} else {
    					if_block = create_if_block$4(ctx);
    					if_block.c();
    					transition_in(if_block, 1);
    					if_block.m(if_block_anchor.parentNode, if_block_anchor);
    				}
    			} else if (if_block) {
    				group_outros();

    				transition_out(if_block, 1, 1, () => {
    					if_block = null;
    				});

    				check_outros();
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(editorcontrols.$$.fragment, local);

    			add_render_callback(() => {
    				if (!div_transition) div_transition = create_bidirectional_transition(div, slide, {}, true);
    				div_transition.run(1);
    			});

    			transition_in(if_block);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(editorcontrols.$$.fragment, local);
    			if (!div_transition) div_transition = create_bidirectional_transition(div, slide, {}, false);
    			div_transition.run(0);
    			transition_out(if_block);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    			destroy_component(editorcontrols);
    			if (detaching && div_transition) div_transition.end();
    			if (detaching) detach_dev(t5);
    			if (if_block) if_block.d(detaching);
    			if (detaching) detach_dev(if_block_anchor);
    			mounted = false;
    			dispose();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_each_block$4.name,
    		type: "each",
    		source: "(517:4) {#each menu.charges as charge, i}",
    		ctx
    	});

    	return block;
    }

    function create_fragment$7(ctx) {
    	let main;
    	let div0;
    	let previous_key = /*coa*/ ctx[1];
    	let div0_intro;
    	let t0;
    	let div5;
    	let div1;
    	let t1_value = /*$t*/ ctx[3]("tinctures.field") + "";
    	let t1;
    	let t2;
    	let t3;
    	let div2;
    	let t4_value = /*$t*/ ctx[3]("tinctures.division") + "";
    	let t4;
    	let t5;
    	let t6_value = /*translateSafely*/ ctx[8]("divisions", /*menu*/ ctx[0].division.division) + "";
    	let t6;
    	let t7;
    	let t8;
    	let t9;
    	let t10;
    	let div3;
    	let t11_value = /*$t*/ ctx[3]("editor.addOrdinary") + "";
    	let t11;
    	let t12;
    	let div4;
    	let t13_value = /*$t*/ ctx[3]("editor.addCharge") + "";
    	let t13;
    	let div5_intro;
    	let main_outro;
    	let current;
    	let mounted;
    	let dispose;
    	let key_block = create_key_block$1(ctx);
    	let if_block0 = /*section*/ ctx[2].field && create_if_block_16(ctx);
    	let if_block1 = /*section*/ ctx[2].division && create_if_block_9(ctx);
    	let each_value_1 = /*menu*/ ctx[0].ordinaries;
    	validate_each_argument(each_value_1);
    	let each_blocks_1 = [];

    	for (let i = 0; i < each_value_1.length; i += 1) {
    		each_blocks_1[i] = create_each_block_1$2(get_each_context_1$2(ctx, each_value_1, i));
    	}

    	const out = i => transition_out(each_blocks_1[i], 1, 1, () => {
    		each_blocks_1[i] = null;
    	});

    	let each_value = /*menu*/ ctx[0].charges;
    	validate_each_argument(each_value);
    	let each_blocks = [];

    	for (let i = 0; i < each_value.length; i += 1) {
    		each_blocks[i] = create_each_block$4(get_each_context$4(ctx, each_value, i));
    	}

    	const out_1 = i => transition_out(each_blocks[i], 1, 1, () => {
    		each_blocks[i] = null;
    	});

    	const block = {
    		c: function create() {
    			main = element("main");
    			div0 = element("div");
    			key_block.c();
    			t0 = space();
    			div5 = element("div");
    			div1 = element("div");
    			t1 = text(t1_value);
    			t2 = space();
    			if (if_block0) if_block0.c();
    			t3 = space();
    			div2 = element("div");
    			t4 = text(t4_value);
    			t5 = text(": ");
    			t6 = text(t6_value);
    			t7 = space();
    			if (if_block1) if_block1.c();
    			t8 = space();

    			for (let i = 0; i < each_blocks_1.length; i += 1) {
    				each_blocks_1[i].c();
    			}

    			t9 = space();

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].c();
    			}

    			t10 = space();
    			div3 = element("div");
    			t11 = text(t11_value);
    			t12 = space();
    			div4 = element("div");
    			t13 = text(t13_value);
    			attr_dev(div0, "class", "coaContainer svelte-1k0wz0q");
    			add_location(div0, file$7, 335, 2, 10647);
    			attr_dev(div1, "class", "section svelte-1k0wz0q");
    			toggle_class(div1, "expanded", /*section*/ ctx[2].field);
    			add_location(div1, file$7, 343, 4, 10939);
    			attr_dev(div2, "class", "section svelte-1k0wz0q");
    			toggle_class(div2, "expanded", /*section*/ ctx[2].division);
    			add_location(div2, file$7, 390, 4, 12334);
    			attr_dev(div3, "class", "buttonLine svelte-1k0wz0q");
    			add_location(div3, file$7, 563, 4, 17759);
    			attr_dev(div4, "class", "buttonLine svelte-1k0wz0q");
    			add_location(div4, file$7, 564, 4, 17843);
    			attr_dev(div5, "id", "menu");
    			attr_dev(div5, "class", "svelte-1k0wz0q");
    			add_location(div5, file$7, 341, 2, 10820);
    			attr_dev(main, "class", "svelte-1k0wz0q");
    			add_location(main, file$7, 334, 0, 10629);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, main, anchor);
    			append_dev(main, div0);
    			key_block.m(div0, null);
    			append_dev(main, t0);
    			append_dev(main, div5);
    			append_dev(div5, div1);
    			append_dev(div1, t1);
    			append_dev(div5, t2);
    			if (if_block0) if_block0.m(div5, null);
    			append_dev(div5, t3);
    			append_dev(div5, div2);
    			append_dev(div2, t4);
    			append_dev(div2, t5);
    			append_dev(div2, t6);
    			append_dev(div5, t7);
    			if (if_block1) if_block1.m(div5, null);
    			append_dev(div5, t8);

    			for (let i = 0; i < each_blocks_1.length; i += 1) {
    				each_blocks_1[i].m(div5, null);
    			}

    			append_dev(div5, t9);

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].m(div5, null);
    			}

    			append_dev(div5, t10);
    			append_dev(div5, div3);
    			append_dev(div3, t11);
    			append_dev(div5, t12);
    			append_dev(div5, div4);
    			append_dev(div4, t13);
    			current = true;

    			if (!mounted) {
    				dispose = [
    					listen_dev(div1, "click", /*toggleSection*/ ctx[5]("field"), false, false, false),
    					listen_dev(div2, "click", /*toggleSection*/ ctx[5]("division"), false, false, false),
    					listen_dev(div3, "click", /*addOrdinary*/ ctx[6], false, false, false),
    					listen_dev(div4, "click", /*addCharge*/ ctx[7], false, false, false)
    				];

    				mounted = true;
    			}
    		},
    		p: function update(new_ctx, dirty) {
    			ctx = new_ctx;

    			if (dirty[0] & /*coa*/ 2 && safe_not_equal(previous_key, previous_key = /*coa*/ ctx[1])) {
    				group_outros();
    				transition_out(key_block, 1, 1, noop);
    				check_outros();
    				key_block = create_key_block$1(ctx);
    				key_block.c();
    				transition_in(key_block);
    				key_block.m(div0, null);
    			} else {
    				key_block.p(ctx, dirty);
    			}

    			if ((!current || dirty[0] & /*$t*/ 8) && t1_value !== (t1_value = /*$t*/ ctx[3]("tinctures.field") + "")) set_data_dev(t1, t1_value);

    			if (dirty[0] & /*section*/ 4) {
    				toggle_class(div1, "expanded", /*section*/ ctx[2].field);
    			}

    			if (/*section*/ ctx[2].field) {
    				if (if_block0) {
    					if_block0.p(ctx, dirty);

    					if (dirty[0] & /*section*/ 4) {
    						transition_in(if_block0, 1);
    					}
    				} else {
    					if_block0 = create_if_block_16(ctx);
    					if_block0.c();
    					transition_in(if_block0, 1);
    					if_block0.m(div5, t3);
    				}
    			} else if (if_block0) {
    				group_outros();

    				transition_out(if_block0, 1, 1, () => {
    					if_block0 = null;
    				});

    				check_outros();
    			}

    			if ((!current || dirty[0] & /*$t*/ 8) && t4_value !== (t4_value = /*$t*/ ctx[3]("tinctures.division") + "")) set_data_dev(t4, t4_value);
    			if ((!current || dirty[0] & /*menu*/ 1) && t6_value !== (t6_value = /*translateSafely*/ ctx[8]("divisions", /*menu*/ ctx[0].division.division) + "")) set_data_dev(t6, t6_value);

    			if (dirty[0] & /*section*/ 4) {
    				toggle_class(div2, "expanded", /*section*/ ctx[2].division);
    			}

    			if (/*section*/ ctx[2].division) {
    				if (if_block1) {
    					if_block1.p(ctx, dirty);

    					if (dirty[0] & /*section*/ 4) {
    						transition_in(if_block1, 1);
    					}
    				} else {
    					if_block1 = create_if_block_9(ctx);
    					if_block1.c();
    					transition_in(if_block1, 1);
    					if_block1.m(div5, t8);
    				}
    			} else if (if_block1) {
    				group_outros();

    				transition_out(if_block1, 1, 1, () => {
    					if_block1 = null;
    				});

    				check_outros();
    			}

    			if (dirty[0] & /*menu, coa, section, toggleSection, $t, translateSafely*/ 303) {
    				each_value_1 = /*menu*/ ctx[0].ordinaries;
    				validate_each_argument(each_value_1);
    				let i;

    				for (i = 0; i < each_value_1.length; i += 1) {
    					const child_ctx = get_each_context_1$2(ctx, each_value_1, i);

    					if (each_blocks_1[i]) {
    						each_blocks_1[i].p(child_ctx, dirty);
    						transition_in(each_blocks_1[i], 1);
    					} else {
    						each_blocks_1[i] = create_each_block_1$2(child_ctx);
    						each_blocks_1[i].c();
    						transition_in(each_blocks_1[i], 1);
    						each_blocks_1[i].m(div5, t9);
    					}
    				}

    				group_outros();

    				for (i = each_value_1.length; i < each_blocks_1.length; i += 1) {
    					out(i);
    				}

    				check_outros();
    			}

    			if (dirty[0] & /*menu, coa, section, toggleSection, translateSafely, $t*/ 303) {
    				each_value = /*menu*/ ctx[0].charges;
    				validate_each_argument(each_value);
    				let i;

    				for (i = 0; i < each_value.length; i += 1) {
    					const child_ctx = get_each_context$4(ctx, each_value, i);

    					if (each_blocks[i]) {
    						each_blocks[i].p(child_ctx, dirty);
    						transition_in(each_blocks[i], 1);
    					} else {
    						each_blocks[i] = create_each_block$4(child_ctx);
    						each_blocks[i].c();
    						transition_in(each_blocks[i], 1);
    						each_blocks[i].m(div5, t10);
    					}
    				}

    				group_outros();

    				for (i = each_value.length; i < each_blocks.length; i += 1) {
    					out_1(i);
    				}

    				check_outros();
    			}

    			if ((!current || dirty[0] & /*$t*/ 8) && t11_value !== (t11_value = /*$t*/ ctx[3]("editor.addOrdinary") + "")) set_data_dev(t11, t11_value);
    			if ((!current || dirty[0] & /*$t*/ 8) && t13_value !== (t13_value = /*$t*/ ctx[3]("editor.addCharge") + "")) set_data_dev(t13, t13_value);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(key_block);

    			if (!div0_intro) {
    				add_render_callback(() => {
    					div0_intro = create_in_transition(div0, fly, {
    						x: /*isLandscape*/ ctx[4] ? 0 : 1000,
    						y: /*isLandscape*/ ctx[4] ? 1000 : 0,
    						duration: 800
    					});

    					div0_intro.start();
    				});
    			}

    			transition_in(if_block0);
    			transition_in(if_block1);

    			for (let i = 0; i < each_value_1.length; i += 1) {
    				transition_in(each_blocks_1[i]);
    			}

    			for (let i = 0; i < each_value.length; i += 1) {
    				transition_in(each_blocks[i]);
    			}

    			if (!div5_intro) {
    				add_render_callback(() => {
    					div5_intro = create_in_transition(div5, fly, {
    						x: /*isLandscape*/ ctx[4] ? 1000 : 0,
    						y: /*isLandscape*/ ctx[4] ? 0 : 1000,
    						duration: 1000
    					});

    					div5_intro.start();
    				});
    			}

    			if (main_outro) main_outro.end(1);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(key_block);
    			transition_out(if_block0);
    			transition_out(if_block1);
    			each_blocks_1 = each_blocks_1.filter(Boolean_1);

    			for (let i = 0; i < each_blocks_1.length; i += 1) {
    				transition_out(each_blocks_1[i]);
    			}

    			each_blocks = each_blocks.filter(Boolean_1);

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				transition_out(each_blocks[i]);
    			}

    			main_outro = create_out_transition(main, fade, {});
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(main);
    			key_block.d(detaching);
    			if (if_block0) if_block0.d();
    			if (if_block1) if_block1.d();
    			destroy_each(each_blocks_1, detaching);
    			destroy_each(each_blocks, detaching);
    			if (detaching && main_outro) main_outro.end();
    			mounted = false;
    			run_all(dispose);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$7.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function isRaster(charge) {
    	const el = document.getElementById(charge);
    	return el ? el.tagName === "image" : false;
    }

    function instance$7($$self, $$props, $$invalidate) {
    	let $t;
    	let $locale;
    	let $dictionary;
    	let $message;
    	let $tinctures;
    	let $state;
    	let $shield;
    	let $changes;
    	let $history;
    	let $showGrid;
    	let $grid;
    	validate_store(X, 't');
    	component_subscribe($$self, X, $$value => $$invalidate(3, $t = $$value));
    	validate_store(M, 'locale');
    	component_subscribe($$self, M, $$value => $$invalidate(46, $locale = $$value));
    	validate_store(s, 'dictionary');
    	component_subscribe($$self, s, $$value => $$invalidate(47, $dictionary = $$value));
    	validate_store(message, 'message');
    	component_subscribe($$self, message, $$value => $$invalidate(48, $message = $$value));
    	validate_store(tinctures, 'tinctures');
    	component_subscribe($$self, tinctures, $$value => $$invalidate(49, $tinctures = $$value));
    	validate_store(state, 'state');
    	component_subscribe($$self, state, $$value => $$invalidate(50, $state = $$value));
    	validate_store(shield, 'shield');
    	component_subscribe($$self, shield, $$value => $$invalidate(51, $shield = $$value));
    	validate_store(changes, 'changes');
    	component_subscribe($$self, changes, $$value => $$invalidate(11, $changes = $$value));
    	validate_store(history, 'history');
    	component_subscribe($$self, history, $$value => $$invalidate(52, $history = $$value));
    	validate_store(showGrid, 'showGrid');
    	component_subscribe($$self, showGrid, $$value => $$invalidate(12, $showGrid = $$value));
    	validate_store(grid, 'grid');
    	component_subscribe($$self, grid, $$value => $$invalidate(13, $grid = $$value));
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('Editor', slots, []);
    	let { historyId, seed } = $$props;
    	let menu = {};

    	let section = {
    		field: 0,
    		division: 0,
    		ordinary: [],
    		charge: []
    	};

    	const isLandscape = innerWidth > innerHeight;
    	set_store_value(state, $state.transform = null, $state);
    	set_store_value(state, $state.positions = null, $state);
    	let coa = $history[historyId] || generate(seed || undefined); // on load

    	function reroll(historyId) {
    		$$invalidate(1, coa = $history[historyId] || generate(seed || undefined));
    		if (!$history[historyId]) $history.push(coa);
    		changes.reset();
    		defineMenuState();
    	}

    	function edit(coa) {
    		if (!coa.shield) coa.shield = $shield;
    		changes.add(JSON.stringify(coa));
    	}

    	const toggleSection = (name, index) => () => {
    		if (index !== undefined) {
    			$$invalidate(2, section[name][index] = !section[name][index], section);
    		} else {
    			$$invalidate(2, section[name] = !section[name], section);
    		}
    	};

    	// get coa from menu on menu change
    	function update() {
    		// remove see reference as it would be confusing
    		delete coa.seed;

    		// field attributes changed
    		if (menu.field.type === "tincture") $$invalidate(1, coa.t1 = menu.field.t1, coa); else {
    			const type = menu.field.type === "semy"
    			? "semy_of_" + menu.field.charge
    			: menu.field.pattern;

    			const attibutes = [type, menu.field.t1, menu.field.t2];
    			if (menu.field.size !== "standard") attibutes.push(menu.field.size);
    			$$invalidate(1, coa.t1 = attibutes.join("-"), coa);
    		}

    		// division attributes changed
    		if (menu.division.division && menu.division.division !== "no") {
    			$$invalidate(1, coa.division = { division: menu.division.division }, coa);
    			if (divisions[menu.division.division]) $$invalidate(1, coa.division.line = menu.division.line, coa);

    			if (menu.division.type === "tincture") $$invalidate(1, coa.division.t = menu.division.t1, coa); else {
    				const attr0 = menu.division.type === "semy"
    				? "semy_of_" + menu.division.charge
    				: menu.division.pattern;

    				const attibutes = [attr0, menu.division.t1, menu.division.t2];
    				if (menu.division.size !== "standard") attibutes.push(menu.division.size);
    				$$invalidate(1, coa.division.t = attibutes.join("-"), coa);
    			}
    		} else delete coa.division;

    		// ordinary attributes changed
    		if (menu.ordinaries.length) {
    			$$invalidate(
    				1,
    				coa.ordinaries = menu.ordinaries.map(o => {
    					const item = { ordinary: o.ordinary, t: o.t };
    					if (ordinaries.lined[o.ordinary]) item.line = o.line;
    					if (coa.division && o.divided) item.divided = o.divided;
    					if (o.showStroke) item.stroke = o.stroke;
    					if (o.showStroke && o.strokeWidth !== 1) item.strokeWidth = o.strokeWidth;
    					if (o.size && o.size !== 1) item.size = o.size;

    					if (o.x || o.y) {
    						item.x = o.x;
    						item.y = o.y;
    					}

    					if (o.angle) item.angle = o.angle;
    					if (o.above) item.above = true;
    					return item;
    				}),
    				coa
    			);
    		} else delete coa.ordinaries;

    		// charges attributes changed
    		if (menu.charges.length) {
    			$$invalidate(
    				1,
    				coa.charges = menu.charges.map(c => {
    					const item = {
    						charge: c.charge,
    						t: c.t,
    						p: c.p,
    						size: c.size
    					};

    					if (!c.showStroke) item.stroke = "none";
    					if (c.stroke !== "#000000") item.stroke = c.stroke;
    					if (c.divided) item.divided = c.divided;
    					if (c.sinister) item.sinister = 1;
    					if (c.reversed) item.reversed = 1;

    					if (c.x || c.y) {
    						item.x = c.x;
    						item.y = c.y;
    					}

    					if (c.angle) item.angle = c.angle;
    					return item;
    				}),
    				coa
    			);
    		} else delete coa.charges;
    	}

    	function restore() {
    		if (!changes.length()) return;
    		$$invalidate(1, coa = JSON.parse($changes[0]));
    		defineMenuState();
    	}

    	// define initial menu state
    	function defineMenuState() {
    		// Shield
    		if (coa.shield) set_store_value(shield, $shield = coa.shield, $shield);

    		// Field
    		$$invalidate(0, menu.field = getField(), menu);

    		function getField() {
    			const type = isSemy(coa.t1)
    			? "semy"
    			: isPattern(coa.t1) ? "pattern" : "tincture";

    			let t1,
    				t2,
    				pattern = "vair",
    				charge = "lozenge",
    				semy = "conventional",
    				size = "standard";

    			const field = coa.t1.split("-"); // parsed field tincture

    			if (type === "tincture") {
    				t1 = coa.t1;
    				t2 = selectSecondTincture(coa.t1);
    			} else {
    				t1 = field[1];
    				t2 = field[2];
    				size = field[3] || "standard";
    			}

    			if (type === "pattern") pattern = field[0]; else if (type === "semy") {
    				charge = getSemyCharge(field);
    				semy = getSemyType(field);
    			}

    			return {
    				type,
    				t1,
    				t2,
    				pattern,
    				charge,
    				semy,
    				size
    			};
    		}

    		// Division
    		$$invalidate(0, menu.division = getDivision(), menu);

    		function getDivision() {
    			let type = "tincture",
    				division = "no",
    				line = "straight",
    				t1,
    				t2,
    				pattern = "vair",
    				charge = "lozenge",
    				semy = "conventional",
    				size = "standard";

    			if (coa.division) {
    				const tSplit = coa.division.t.split("-"); // parsed division tincture

    				type = isSemy(coa.division.t)
    				? "semy"
    				: isPattern(coa.division.t) ? "pattern" : "tincture";

    				division = coa.division.division;
    				line = coa.division.line || "straight";
    				t1 = type === "tincture" ? coa.division.t : tSplit[1];

    				t2 = type === "tincture"
    				? selectSecondTincture(t1)
    				: tSplit[2];

    				if (type === "pattern") pattern = tSplit[0];

    				if (type === "semy") {
    					charge = getSemyCharge(tSplit);
    					semy = getSemyType(tSplit);
    				}

    				size = tSplit[3] || "standard";
    			} else {
    				t1 = selectSecondTincture(menu.field.t1);
    				t2 = selectSecondTincture(t1);
    			}

    			return {
    				division,
    				line,
    				type,
    				t1,
    				t2,
    				pattern,
    				charge,
    				semy,
    				size
    			};
    		}

    		// Ordinaries
    		$$invalidate(0, menu.ordinaries = getOrdinaries(), menu);

    		function getOrdinaries() {
    			if (!coa.ordinaries) return [];

    			const ordinaries = coa.ordinaries.map(o => {
    				const { ordinary, t } = o;
    				const line = o.line || "straight";
    				const showStroke = Boolean(o.stroke);
    				const stroke = o.stroke || "#000000";
    				const strokeWidth = o.strokeWidth || 1;
    				const size = o.size || 1;
    				const x = o.x || 0;
    				const y = o.y || 0;
    				const angle = o.angle || 0;
    				const divided = o.divided || "";
    				const above = o.above || false;
    				if (angle) set_store_value(state, $state.transform = `rotate(${angle})`, $state);

    				return {
    					ordinary,
    					t,
    					line,
    					showStroke,
    					stroke,
    					strokeWidth,
    					size,
    					x,
    					y,
    					angle,
    					divided,
    					above
    				};
    			});

    			return ordinaries;
    		}

    		// Charges
    		$$invalidate(0, menu.charges = getCharges(), menu);

    		function getCharges() {
    			if (!coa.charges) return [];

    			const charges = coa.charges.map(c => {
    				const { charge, t, p, size } = c;
    				const type = getChargeCategory(charge);
    				const showStroke = c.stroke !== "none";
    				const stroke = c.stroke || "#000000";
    				const divided = c.divided || "";
    				const sinister = c.sinister || false;
    				const reversed = c.reversed || false;
    				const x = c.x || 0;
    				const y = c.y || 0;
    				const angle = c.angle || 0;
    				if (angle) set_store_value(state, $state.transform = `rotate(${angle})`, $state);

    				return {
    					charge,
    					type,
    					showStroke,
    					stroke,
    					divided,
    					t,
    					p,
    					size,
    					sinister,
    					reversed,
    					x,
    					y,
    					angle
    				};
    			});

    			return charges;
    		}

    		function isPattern(string) {
    			return string?.includes("-");
    		}

    		function isSemy(string) {
    			return string?.slice(0, 4) === "semy";
    		}

    		function getSemyCharge(array) {
    			return array[0].split("_of_")[1];
    		}

    		function getChargeCategory(charge) {
    			const type = Object.keys(charges.types).find(type => charges[type][charge] !== undefined);
    			return type || charge;
    		}

    		function getSemyType(array) {
    			const charge = getSemyCharge(array);
    			return getChargeCategory(charge);
    		}

    		function selectSecondTincture(t1) {
    			const metal = t1 === "argent" || t1 === "or";
    			return rw(metal ? $tinctures.colours : $tinctures.metals);
    		}

    		return menu;
    	}

    	function addOrdinary() {
    		const ordinariesList = Object.keys(ordinaries.lined).concat(Object.keys(ordinaries.straight));
    		const ordinary = ra(ordinariesList);
    		const t = rw($tinctures[rw($tinctures.charge)]);

    		const o = {
    			ordinary,
    			t,
    			showStroke: false,
    			stroke: "#000000",
    			strokeWidth: 1,
    			line: "straight",
    			size: 1,
    			x: 0,
    			y: 0,
    			angle: 0,
    			divided: ""
    		};

    		$$invalidate(0, menu.ordinaries = [...menu.ordinaries, o], menu);
    	}

    	function addCharge() {
    		const type = rw(charges.single);
    		const charge = rw(charges[type]);
    		const t = rw($tinctures[rw($tinctures.charge)]);

    		const с = {
    			charge,
    			t,
    			p: "e",
    			showStroke: true,
    			stroke: "#000000",
    			type,
    			size: 1.5,
    			sinister: false,
    			reversed: false,
    			x: 0,
    			y: 0,
    			angle: 0,
    			divided: ""
    		};

    		$$invalidate(0, menu.charges = [...menu.charges, с], menu);
    	}

    	if (!("ontouchstart" in window) && (coa.ordinaries || coa.charges)) {
    		if (!$message) message.info($t("info.tipEditControls"));
    	}

    	const translateSafely = (group, key) => {
    		const isInDictionary = $dictionary?.[$locale]?.[group]?.[key];
    		return isInDictionary ? $t(`${group}.${key}`) : key;
    	};

    	const writable_props = ['historyId', 'seed'];

    	Object_1$3.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<Editor> was created with unknown prop '${key}'`);
    	});

    	function editortype_type_binding(value) {
    		if ($$self.$$.not_equal(menu.field.type, value)) {
    			menu.field.type = value;
    			$$invalidate(0, menu);
    		}
    	}

    	function editorsize_size_binding(value) {
    		if ($$self.$$.not_equal(menu.field.size, value)) {
    			menu.field.size = value;
    			$$invalidate(0, menu);
    		}
    	}

    	function editortincture_t1_binding(value) {
    		if ($$self.$$.not_equal(menu.field.t1, value)) {
    			menu.field.t1 = value;
    			$$invalidate(0, menu);
    		}
    	}

    	function editortincture_t1_binding_1(value) {
    		if ($$self.$$.not_equal(menu.field.t2, value)) {
    			menu.field.t2 = value;
    			$$invalidate(0, menu);
    		}
    	}

    	function editorpattern_pattern_binding(value) {
    		if ($$self.$$.not_equal(menu.field.pattern, value)) {
    			menu.field.pattern = value;
    			$$invalidate(0, menu);
    		}
    	}

    	function editorcharge_charge_binding(value) {
    		if ($$self.$$.not_equal(menu.field.charge, value)) {
    			menu.field.charge = value;
    			$$invalidate(0, menu);
    		}
    	}

    	function editorcharge_category_binding(value) {
    		if ($$self.$$.not_equal(menu.field.semy, value)) {
    			menu.field.semy = value;
    			$$invalidate(0, menu);
    		}
    	}

    	function editordivision_division_binding(value) {
    		if ($$self.$$.not_equal(menu.division.division, value)) {
    			menu.division.division = value;
    			$$invalidate(0, menu);
    		}
    	}

    	function editorline_line_binding(value) {
    		if ($$self.$$.not_equal(menu.division.line, value)) {
    			menu.division.line = value;
    			$$invalidate(0, menu);
    		}
    	}

    	function editortype_type_binding_1(value) {
    		if ($$self.$$.not_equal(menu.division.type, value)) {
    			menu.division.type = value;
    			$$invalidate(0, menu);
    		}
    	}

    	function editorsize_size_binding_1(value) {
    		if ($$self.$$.not_equal(menu.division.size, value)) {
    			menu.division.size = value;
    			$$invalidate(0, menu);
    		}
    	}

    	function editortincture_t1_binding_2(value) {
    		if ($$self.$$.not_equal(menu.division.t1, value)) {
    			menu.division.t1 = value;
    			$$invalidate(0, menu);
    		}
    	}

    	function editortincture_t1_binding_3(value) {
    		if ($$self.$$.not_equal(menu.division.t2, value)) {
    			menu.division.t2 = value;
    			$$invalidate(0, menu);
    		}
    	}

    	function editorpattern_pattern_binding_1(value) {
    		if ($$self.$$.not_equal(menu.division.pattern, value)) {
    			menu.division.pattern = value;
    			$$invalidate(0, menu);
    		}
    	}

    	function editorcharge_charge_binding_1(value) {
    		if ($$self.$$.not_equal(menu.division.charge, value)) {
    			menu.division.charge = value;
    			$$invalidate(0, menu);
    		}
    	}

    	function editorcharge_category_binding_1(value) {
    		if ($$self.$$.not_equal(menu.division.semy, value)) {
    			menu.division.semy = value;
    			$$invalidate(0, menu);
    		}
    	}

    	function editorcontrols_els_binding(value) {
    		if ($$self.$$.not_equal(menu.ordinaries, value)) {
    			menu.ordinaries = value;
    			$$invalidate(0, menu);
    		}
    	}

    	function editordivided_divided_binding(value, o) {
    		if ($$self.$$.not_equal(o.divided, value)) {
    			o.divided = value;
    			$$invalidate(0, menu);
    		}
    	}

    	function editorordinary_ordinary_binding(value, o) {
    		if ($$self.$$.not_equal(o.ordinary, value)) {
    			o.ordinary = value;
    			$$invalidate(0, menu);
    		}
    	}

    	function editorline_line_binding_1(value, o) {
    		if ($$self.$$.not_equal(o.line, value)) {
    			o.line = value;
    			$$invalidate(0, menu);
    		}
    	}

    	function editortincture_t1_binding_4(value, o) {
    		if ($$self.$$.not_equal(o.t, value)) {
    			o.t = value;
    			$$invalidate(0, menu);
    		}
    	}

    	function editorstroke_element_binding(value, o, each_value_1, i) {
    		each_value_1[i] = value;
    		$$invalidate(0, menu);
    	}

    	function editorabove_above_binding(value, o) {
    		if ($$self.$$.not_equal(o.above, value)) {
    			o.above = value;
    			$$invalidate(0, menu);
    		}
    	}

    	function editorshift_element_binding(value, o, each_value_1, i) {
    		each_value_1[i] = value;
    		$$invalidate(0, menu);
    	}

    	function editorcontrols_els_binding_1(value) {
    		if ($$self.$$.not_equal(menu.charges, value)) {
    			menu.charges = value;
    			$$invalidate(0, menu);
    		}
    	}

    	function editordivided_divided_binding_1(value, charge) {
    		if ($$self.$$.not_equal(charge.divided, value)) {
    			charge.divided = value;
    			$$invalidate(0, menu);
    		}
    	}

    	function editorcharge_charge_binding_2(value, charge) {
    		if ($$self.$$.not_equal(charge.charge, value)) {
    			charge.charge = value;
    			$$invalidate(0, menu);
    		}
    	}

    	function editorcharge_category_binding_2(value, charge) {
    		if ($$self.$$.not_equal(charge.type, value)) {
    			charge.type = value;
    			$$invalidate(0, menu);
    		}
    	}

    	function editortincture_t1_binding_5(value, charge) {
    		if ($$self.$$.not_equal(charge.t, value)) {
    			charge.t = value;
    			$$invalidate(0, menu);
    		}
    	}

    	function editorstroke_element_binding_1(value, charge, each_value, i) {
    		each_value[i] = value;
    		$$invalidate(0, menu);
    	}

    	function editorposition_charge_binding(value, charge, each_value, i) {
    		each_value[i] = value;
    		$$invalidate(0, menu);
    	}

    	function editorshift_element_binding_1(value, charge, each_value, i) {
    		each_value[i] = value;
    		$$invalidate(0, menu);
    	}

    	$$self.$$set = $$props => {
    		if ('historyId' in $$props) $$invalidate(9, historyId = $$props.historyId);
    		if ('seed' in $$props) $$invalidate(10, seed = $$props.seed);
    	};

    	$$self.$capture_state = () => ({
    		t: X,
    		dictionary: s,
    		locale: M,
    		fade,
    		fly,
    		slide,
    		changes,
    		grid,
    		history,
    		message,
    		shield,
    		showGrid,
    		state,
    		tinctures,
    		iconedNav,
    		charges,
    		divisions,
    		ordinaries,
    		generate,
    		ra,
    		rw,
    		COA,
    		EditorAbove,
    		EditorCharge,
    		EditorControls,
    		EditorDivided,
    		EditorDivision,
    		EditorLine,
    		EditorOrdinary,
    		EditorPattern,
    		EditorPosition,
    		EditorShift,
    		EditorSize,
    		EditorStroke,
    		EditorTincture,
    		EditorType,
    		historyId,
    		seed,
    		menu,
    		section,
    		isLandscape,
    		coa,
    		reroll,
    		edit,
    		toggleSection,
    		update,
    		restore,
    		defineMenuState,
    		addOrdinary,
    		addCharge,
    		isRaster,
    		translateSafely,
    		$t,
    		$locale,
    		$dictionary,
    		$message,
    		$tinctures,
    		$state,
    		$shield,
    		$changes,
    		$history,
    		$showGrid,
    		$grid
    	});

    	$$self.$inject_state = $$props => {
    		if ('historyId' in $$props) $$invalidate(9, historyId = $$props.historyId);
    		if ('seed' in $$props) $$invalidate(10, seed = $$props.seed);
    		if ('menu' in $$props) $$invalidate(0, menu = $$props.menu);
    		if ('section' in $$props) $$invalidate(2, section = $$props.section);
    		if ('coa' in $$props) $$invalidate(1, coa = $$props.coa);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	$$self.$$.update = () => {
    		if ($$self.$$.dirty[0] & /*$changes*/ 2048) {
    			restore(); // on undo/redo
    		}

    		if ($$self.$$.dirty[0] & /*historyId*/ 512) {
    			reroll(historyId); // on reroll
    		}

    		if ($$self.$$.dirty[0] & /*menu*/ 1) {
    			update(); // on menu update
    		}

    		if ($$self.$$.dirty[0] & /*coa*/ 2) {
    			edit(coa); // on edit
    		}

    		if ($$self.$$.dirty[0] & /*$grid*/ 8192) {
    			localStorage.setItem("grid", $grid); // on grid change
    		}

    		if ($$self.$$.dirty[0] & /*$showGrid*/ 4096) {
    			localStorage.setItem("showGrid", $showGrid); // on grid change
    		}
    	};

    	return [
    		menu,
    		coa,
    		section,
    		$t,
    		isLandscape,
    		toggleSection,
    		addOrdinary,
    		addCharge,
    		translateSafely,
    		historyId,
    		seed,
    		$changes,
    		$showGrid,
    		$grid,
    		editortype_type_binding,
    		editorsize_size_binding,
    		editortincture_t1_binding,
    		editortincture_t1_binding_1,
    		editorpattern_pattern_binding,
    		editorcharge_charge_binding,
    		editorcharge_category_binding,
    		editordivision_division_binding,
    		editorline_line_binding,
    		editortype_type_binding_1,
    		editorsize_size_binding_1,
    		editortincture_t1_binding_2,
    		editortincture_t1_binding_3,
    		editorpattern_pattern_binding_1,
    		editorcharge_charge_binding_1,
    		editorcharge_category_binding_1,
    		editorcontrols_els_binding,
    		editordivided_divided_binding,
    		editorordinary_ordinary_binding,
    		editorline_line_binding_1,
    		editortincture_t1_binding_4,
    		editorstroke_element_binding,
    		editorabove_above_binding,
    		editorshift_element_binding,
    		editorcontrols_els_binding_1,
    		editordivided_divided_binding_1,
    		editorcharge_charge_binding_2,
    		editorcharge_category_binding_2,
    		editortincture_t1_binding_5,
    		editorstroke_element_binding_1,
    		editorposition_charge_binding,
    		editorshift_element_binding_1
    	];
    }

    class Editor extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$7, create_fragment$7, safe_not_equal, { historyId: 9, seed: 10 }, null, [-1, -1, -1]);

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Editor",
    			options,
    			id: create_fragment$7.name
    		});

    		const { ctx } = this.$$;
    		const props = options.props || {};

    		if (/*historyId*/ ctx[9] === undefined && !('historyId' in props)) {
    			console.warn("<Editor> was created without expected prop 'historyId'");
    		}

    		if (/*seed*/ ctx[10] === undefined && !('seed' in props)) {
    			console.warn("<Editor> was created without expected prop 'seed'");
    		}
    	}

    	get historyId() {
    		throw new Error("<Editor>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set historyId(value) {
    		throw new Error("<Editor>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get seed() {
    		throw new Error("<Editor>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set seed(value) {
    		throw new Error("<Editor>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /* src/components/navigation/Gallery.svelte generated by Svelte v3.44.2 */
    const file$6 = "src/components/navigation/Gallery.svelte";

    function get_each_context$3(ctx, list, i) {
    	const child_ctx = ctx.slice();
    	child_ctx[14] = list[i];
    	child_ctx[16] = i;
    	return child_ctx;
    }

    // (33:6) {#key coa}
    function create_key_block(ctx) {
    	let coa;
    	let current;

    	coa = new COA({
    			props: {
    				coa: /*coa*/ ctx[14],
    				i: /*i*/ ctx[16],
    				width: /*width*/ ctx[0],
    				height: /*height*/ ctx[1]
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(coa.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(coa, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const coa_changes = {};
    			if (dirty & /*coas*/ 4) coa_changes.coa = /*coa*/ ctx[14];
    			if (dirty & /*width*/ 1) coa_changes.width = /*width*/ ctx[0];
    			if (dirty & /*height*/ 2) coa_changes.height = /*height*/ ctx[1];
    			coa.$set(coa_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(coa.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(coa.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(coa, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_key_block.name,
    		type: "key",
    		source: "(33:6) {#key coa}",
    		ctx
    	});

    	return block;
    }

    // (31:2) {#each coas as coa, i}
    function create_each_block$3(ctx) {
    	let div1;
    	let previous_key = /*coa*/ ctx[14];
    	let t0;
    	let div0;
    	let svg0;
    	let use0;
    	let t1;
    	let svg1;
    	let use1;
    	let t2;
    	let svg2;
    	let use2;
    	let t3;
    	let current;
    	let mounted;
    	let dispose;
    	let key_block = create_key_block(ctx);

    	function click_handler() {
    		return /*click_handler*/ ctx[8](/*i*/ ctx[16]);
    	}

    	function click_handler_1() {
    		return /*click_handler_1*/ ctx[9](/*i*/ ctx[16]);
    	}

    	function click_handler_2() {
    		return /*click_handler_2*/ ctx[10](/*i*/ ctx[16]);
    	}

    	const block = {
    		c: function create() {
    			div1 = element("div");
    			key_block.c();
    			t0 = space();
    			div0 = element("div");
    			svg0 = svg_element("svg");
    			use0 = svg_element("use");
    			t1 = space();
    			svg1 = svg_element("svg");
    			use1 = svg_element("use");
    			t2 = space();
    			svg2 = svg_element("svg");
    			use2 = svg_element("use");
    			t3 = space();
    			attr_dev(use0, "href", "#dice-icon");
    			add_location(use0, file$6, 36, 44, 1044);
    			attr_dev(svg0, "class", "svelte-1ugrazl");
    			add_location(svg0, file$6, 36, 8, 1008);
    			attr_dev(use1, "href", "#pencil-icon");
    			add_location(use1, file$6, 37, 41, 1117);
    			attr_dev(svg1, "class", "svelte-1ugrazl");
    			add_location(svg1, file$6, 37, 8, 1084);
    			attr_dev(use2, "href", "#download-icon");
    			add_location(use2, file$6, 38, 42, 1193);
    			attr_dev(svg2, "class", "svelte-1ugrazl");
    			add_location(svg2, file$6, 38, 8, 1159);
    			attr_dev(div0, "class", "control svelte-1ugrazl");
    			add_location(div0, file$6, 35, 6, 978);
    			attr_dev(div1, "class", "svelte-1ugrazl");
    			add_location(div1, file$6, 31, 4, 893);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div1, anchor);
    			key_block.m(div1, null);
    			append_dev(div1, t0);
    			append_dev(div1, div0);
    			append_dev(div0, svg0);
    			append_dev(svg0, use0);
    			append_dev(div0, t1);
    			append_dev(div0, svg1);
    			append_dev(svg1, use1);
    			append_dev(div0, t2);
    			append_dev(div0, svg2);
    			append_dev(svg2, use2);
    			append_dev(div1, t3);
    			current = true;

    			if (!mounted) {
    				dispose = [
    					listen_dev(svg0, "click", click_handler, false, false, false),
    					listen_dev(svg1, "click", click_handler_1, false, false, false),
    					listen_dev(svg2, "click", click_handler_2, false, false, false)
    				];

    				mounted = true;
    			}
    		},
    		p: function update(new_ctx, dirty) {
    			ctx = new_ctx;

    			if (dirty & /*coas*/ 4 && safe_not_equal(previous_key, previous_key = /*coa*/ ctx[14])) {
    				group_outros();
    				transition_out(key_block, 1, 1, noop);
    				check_outros();
    				key_block = create_key_block(ctx);
    				key_block.c();
    				transition_in(key_block);
    				key_block.m(div1, t0);
    			} else {
    				key_block.p(ctx, dirty);
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(key_block);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(key_block);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div1);
    			key_block.d(detaching);
    			mounted = false;
    			run_all(dispose);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_each_block$3.name,
    		type: "each",
    		source: "(31:2) {#each coas as coa, i}",
    		ctx
    	});

    	return block;
    }

    function create_fragment$6(ctx) {
    	let main;
    	let main_transition;
    	let current;
    	let each_value = /*coas*/ ctx[2];
    	validate_each_argument(each_value);
    	let each_blocks = [];

    	for (let i = 0; i < each_value.length; i += 1) {
    		each_blocks[i] = create_each_block$3(get_each_context$3(ctx, each_value, i));
    	}

    	const out = i => transition_out(each_blocks[i], 1, 1, () => {
    		each_blocks[i] = null;
    	});

    	const block = {
    		c: function create() {
    			main = element("main");

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].c();
    			}

    			set_style(main, "font-size", /*fontSize*/ ctx[3] + "px");
    			attr_dev(main, "class", "svelte-1ugrazl");
    			add_location(main, file$6, 29, 0, 791);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, main, anchor);

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].m(main, null);
    			}

    			current = true;
    		},
    		p: function update(ctx, [dirty]) {
    			if (dirty & /*download, editCOA, regenerate, coas, width, height*/ 55) {
    				each_value = /*coas*/ ctx[2];
    				validate_each_argument(each_value);
    				let i;

    				for (i = 0; i < each_value.length; i += 1) {
    					const child_ctx = get_each_context$3(ctx, each_value, i);

    					if (each_blocks[i]) {
    						each_blocks[i].p(child_ctx, dirty);
    						transition_in(each_blocks[i], 1);
    					} else {
    						each_blocks[i] = create_each_block$3(child_ctx);
    						each_blocks[i].c();
    						transition_in(each_blocks[i], 1);
    						each_blocks[i].m(main, null);
    					}
    				}

    				group_outros();

    				for (i = each_value.length; i < each_blocks.length; i += 1) {
    					out(i);
    				}

    				check_outros();
    			}

    			if (!current || dirty & /*fontSize*/ 8) {
    				set_style(main, "font-size", /*fontSize*/ ctx[3] + "px");
    			}
    		},
    		i: function intro(local) {
    			if (current) return;

    			for (let i = 0; i < each_value.length; i += 1) {
    				transition_in(each_blocks[i]);
    			}

    			add_render_callback(() => {
    				if (!main_transition) main_transition = create_bidirectional_transition(main, fade, { duration: 500 }, true);
    				main_transition.run(1);
    			});

    			current = true;
    		},
    		o: function outro(local) {
    			each_blocks = each_blocks.filter(Boolean);

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				transition_out(each_blocks[i]);
    			}

    			if (!main_transition) main_transition = create_bidirectional_transition(main, fade, { duration: 500 }, false);
    			main_transition.run(0);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(main);
    			destroy_each(each_blocks, detaching);
    			if (detaching && main_transition) main_transition.end();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$6.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$6($$self, $$props, $$invalidate) {
    	let fontSize;
    	let coas;
    	let $state;
    	let $history;
    	let $matrix;
    	let $matrices;
    	validate_store(state, 'state');
    	component_subscribe($$self, state, $$value => $$invalidate(11, $state = $$value));
    	validate_store(history, 'history');
    	component_subscribe($$self, history, $$value => $$invalidate(7, $history = $$value));
    	validate_store(matrix, 'matrix');
    	component_subscribe($$self, matrix, $$value => $$invalidate(12, $matrix = $$value));
    	validate_store(matrices, 'matrices');
    	component_subscribe($$self, matrices, $$value => $$invalidate(13, $matrices = $$value));
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('Gallery', slots, []);
    	let { gallery } = $$props;
    	let { width } = $$props;
    	let { height } = $$props;

    	function regenerate(i) {
    		set_store_value(state, $state.i = i, $state);
    		set_store_value(matrix, $matrix++, $matrix);
    		set_store_value(matrices, $matrices[$matrix] = $matrices[$matrix - 1].slice(), $matrices);
    		set_store_value(matrices, $matrices[$matrix][$state.i] = $history.length, $matrices);
    	}

    	function editCOA(i) {
    		set_store_value(state, $state.edit = 1, $state);
    		set_store_value(state, $state.c = gallery[i], $state);
    		set_store_value(state, $state.i = i, $state);
    	}

    	const writable_props = ['gallery', 'width', 'height'];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<Gallery> was created with unknown prop '${key}'`);
    	});

    	const click_handler = i => regenerate(i);
    	const click_handler_1 = i => editCOA(i);
    	const click_handler_2 = i => download(i);

    	$$self.$$set = $$props => {
    		if ('gallery' in $$props) $$invalidate(6, gallery = $$props.gallery);
    		if ('width' in $$props) $$invalidate(0, width = $$props.width);
    		if ('height' in $$props) $$invalidate(1, height = $$props.height);
    	};

    	$$self.$capture_state = () => ({
    		history,
    		matrices,
    		matrix,
    		state,
    		download,
    		generate,
    		minmax,
    		fade,
    		COA,
    		gallery,
    		width,
    		height,
    		regenerate,
    		editCOA,
    		coas,
    		fontSize,
    		$state,
    		$history,
    		$matrix,
    		$matrices
    	});

    	$$self.$inject_state = $$props => {
    		if ('gallery' in $$props) $$invalidate(6, gallery = $$props.gallery);
    		if ('width' in $$props) $$invalidate(0, width = $$props.width);
    		if ('height' in $$props) $$invalidate(1, height = $$props.height);
    		if ('coas' in $$props) $$invalidate(2, coas = $$props.coas);
    		if ('fontSize' in $$props) $$invalidate(3, fontSize = $$props.fontSize);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	$$self.$$.update = () => {
    		if ($$self.$$.dirty & /*width*/ 1) {
    			$$invalidate(3, fontSize = minmax(width / 20, 6, 12));
    		}

    		if ($$self.$$.dirty & /*gallery, $history*/ 192) {
    			$$invalidate(2, coas = gallery.map(c => {
    				if (!$history[c]) set_store_value(history, $history[c] = generate(), $history);
    				return $history[c];
    			}));
    		}
    	};

    	return [
    		width,
    		height,
    		coas,
    		fontSize,
    		regenerate,
    		editCOA,
    		gallery,
    		$history,
    		click_handler,
    		click_handler_1,
    		click_handler_2
    	];
    }

    class Gallery extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$6, create_fragment$6, safe_not_equal, { gallery: 6, width: 0, height: 1 });

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Gallery",
    			options,
    			id: create_fragment$6.name
    		});

    		const { ctx } = this.$$;
    		const props = options.props || {};

    		if (/*gallery*/ ctx[6] === undefined && !('gallery' in props)) {
    			console.warn("<Gallery> was created without expected prop 'gallery'");
    		}

    		if (/*width*/ ctx[0] === undefined && !('width' in props)) {
    			console.warn("<Gallery> was created without expected prop 'width'");
    		}

    		if (/*height*/ ctx[1] === undefined && !('height' in props)) {
    			console.warn("<Gallery> was created without expected prop 'height'");
    		}
    	}

    	get gallery() {
    		throw new Error("<Gallery>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set gallery(value) {
    		throw new Error("<Gallery>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get width() {
    		throw new Error("<Gallery>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set width(value) {
    		throw new Error("<Gallery>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get height() {
    		throw new Error("<Gallery>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set height(value) {
    		throw new Error("<Gallery>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /* src/components/navigation/LicenseList.svelte generated by Svelte v3.44.2 */
    const file$5 = "src/components/navigation/LicenseList.svelte";

    function create_fragment$5(ctx) {
    	let select;
    	let option0;
    	let t0_value = /*$t*/ ctx[1](`license.unknown`) + "";
    	let t0;
    	let option1;
    	let t1_value = /*$t*/ ctx[1](`license.proprietary`) + "";
    	let t1;
    	let option2;
    	let t2_value = /*$t*/ ctx[1](`license.copyleft`) + "";
    	let t2;
    	let option3;
    	let t3_value = /*$t*/ ctx[1](`license.publicDomain`) + "";
    	let t3;
    	let option4;
    	let option5;
    	let option6;
    	let option7;
    	let option8;
    	let option9;
    	let mounted;
    	let dispose;

    	const block = {
    		c: function create() {
    			select = element("select");
    			option0 = element("option");
    			t0 = text(t0_value);
    			option1 = element("option");
    			t1 = text(t1_value);
    			option2 = element("option");
    			t2 = text(t2_value);
    			option3 = element("option");
    			t3 = text(t3_value);
    			option4 = element("option");
    			option4.textContent = "CC BY";
    			option5 = element("option");
    			option5.textContent = "CC BY-SA";
    			option6 = element("option");
    			option6.textContent = "CC BY-NC";
    			option7 = element("option");
    			option7.textContent = "CC BY-ND";
    			option8 = element("option");
    			option8.textContent = "CC BY-NC-SA";
    			option9 = element("option");
    			option9.textContent = "CC BY-NC-ND";
    			option0.__value = "Unknown";
    			option0.value = option0.__value;
    			option0.selected = true;
    			add_location(option0, file$5, 6, 2, 147);
    			option1.__value = "Proprietary";
    			option1.value = option1.__value;
    			add_location(option1, file$5, 7, 2, 215);
    			option2.__value = "Copyright Free";
    			option2.value = option2.__value;
    			add_location(option2, file$5, 8, 2, 282);
    			option3.__value = "https://creativecommons.org/publicdomain/zero/1.0";
    			option3.value = option3.__value;
    			add_location(option3, file$5, 9, 2, 349);
    			option4.__value = "https://creativecommons.org/licenses/by/4.0";
    			option4.value = option4.__value;
    			add_location(option4, file$5, 10, 2, 455);
    			option5.__value = "https://creativecommons.org/licenses/by-sa/4.0";
    			option5.value = option5.__value;
    			add_location(option5, file$5, 11, 2, 532);
    			option6.__value = "https://creativecommons.org/licenses/by-nc/4.0";
    			option6.value = option6.__value;
    			add_location(option6, file$5, 12, 2, 615);
    			option7.__value = "https://creativecommons.org/licenses/by-nd/4.0";
    			option7.value = option7.__value;
    			add_location(option7, file$5, 13, 2, 698);
    			option8.__value = "https://creativecommons.org/licenses/by-nc-sa/4.0";
    			option8.value = option8.__value;
    			add_location(option8, file$5, 14, 2, 781);
    			option9.__value = "https://creativecommons.org/licenses/by-nc-nd/4.0";
    			option9.value = option9.__value;
    			add_location(option9, file$5, 15, 2, 870);
    			set_style(select, "width", "10em");
    			if (/*license*/ ctx[0] === void 0) add_render_callback(() => /*select_change_handler*/ ctx[2].call(select));
    			add_location(select, file$5, 5, 0, 95);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, select, anchor);
    			append_dev(select, option0);
    			append_dev(option0, t0);
    			append_dev(select, option1);
    			append_dev(option1, t1);
    			append_dev(select, option2);
    			append_dev(option2, t2);
    			append_dev(select, option3);
    			append_dev(option3, t3);
    			append_dev(select, option4);
    			append_dev(select, option5);
    			append_dev(select, option6);
    			append_dev(select, option7);
    			append_dev(select, option8);
    			append_dev(select, option9);
    			select_option(select, /*license*/ ctx[0]);

    			if (!mounted) {
    				dispose = listen_dev(select, "change", /*select_change_handler*/ ctx[2]);
    				mounted = true;
    			}
    		},
    		p: function update(ctx, [dirty]) {
    			if (dirty & /*$t*/ 2 && t0_value !== (t0_value = /*$t*/ ctx[1](`license.unknown`) + "")) set_data_dev(t0, t0_value);
    			if (dirty & /*$t*/ 2 && t1_value !== (t1_value = /*$t*/ ctx[1](`license.proprietary`) + "")) set_data_dev(t1, t1_value);
    			if (dirty & /*$t*/ 2 && t2_value !== (t2_value = /*$t*/ ctx[1](`license.copyleft`) + "")) set_data_dev(t2, t2_value);
    			if (dirty & /*$t*/ 2 && t3_value !== (t3_value = /*$t*/ ctx[1](`license.publicDomain`) + "")) set_data_dev(t3, t3_value);

    			if (dirty & /*license*/ 1) {
    				select_option(select, /*license*/ ctx[0]);
    			}
    		},
    		i: noop,
    		o: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(select);
    			mounted = false;
    			dispose();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$5.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$5($$self, $$props, $$invalidate) {
    	let $t;
    	validate_store(X, 't');
    	component_subscribe($$self, X, $$value => $$invalidate(1, $t = $$value));
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('LicenseList', slots, []);
    	let { license } = $$props;
    	const writable_props = ['license'];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<LicenseList> was created with unknown prop '${key}'`);
    	});

    	function select_change_handler() {
    		license = select_value(this);
    		$$invalidate(0, license);
    	}

    	$$self.$$set = $$props => {
    		if ('license' in $$props) $$invalidate(0, license = $$props.license);
    	};

    	$$self.$capture_state = () => ({ t: X, license, $t });

    	$$self.$inject_state = $$props => {
    		if ('license' in $$props) $$invalidate(0, license = $$props.license);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [license, $t, select_change_handler];
    }

    class LicenseList extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$5, create_fragment$5, safe_not_equal, { license: 0 });

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "LicenseList",
    			options,
    			id: create_fragment$5.name
    		});

    		const { ctx } = this.$$;
    		const props = options.props || {};

    		if (/*license*/ ctx[0] === undefined && !('license' in props)) {
    			console.warn("<LicenseList> was created without expected prop 'license'");
    		}
    	}

    	get license() {
    		throw new Error("<LicenseList>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set license(value) {
    		throw new Error("<LicenseList>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    const query = document.querySelector.bind(document);
    document.querySelectorAll.bind(document);
    Node.prototype.on = window.on = function (name, fn) {
        this.addEventListener(name, fn);
    };
    Node.prototype.off = window.off = function (name, fn) {
        this.removeEventListener(name, fn);
    };

    /* src/components/navigation/UploadRaster.svelte generated by Svelte v3.44.2 */

    const { Object: Object_1$2 } = globals;
    const file$4 = "src/components/navigation/UploadRaster.svelte";
    const get_default_slot_changes$1 = dirty => ({ dragging: dirty[0] & /*dragging*/ 2 });
    const get_default_slot_context$1 = ctx => ({ dragging: /*dragging*/ ctx[1] });

    function get_each_context$2(ctx, list, i) {
    	const child_ctx = ctx.slice();
    	child_ctx[30] = list[i];
    	return child_ctx;
    }

    // (150:4) {:else}
    function create_else_block$3(ctx) {
    	let label;
    	let t_1;
    	let input;
    	let current;
    	let mounted;
    	let dispose;
    	const default_slot_template = /*#slots*/ ctx[16].default;
    	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[15], get_default_slot_context$1);
    	const default_slot_or_fallback = default_slot || fallback_block$1(ctx);

    	const block = {
    		c: function create() {
    			label = element("label");
    			if (default_slot_or_fallback) default_slot_or_fallback.c();
    			t_1 = space();
    			input = element("input");
    			attr_dev(input, "type", "file");
    			attr_dev(input, "accept", "image/*");
    			attr_dev(input, "class", "svelte-846jl0");
    			add_location(input, file$4, 154, 8, 5457);
    			attr_dev(label, "class", "dragging svelte-846jl0");
    			add_location(label, file$4, 150, 6, 5317);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, label, anchor);

    			if (default_slot_or_fallback) {
    				default_slot_or_fallback.m(label, null);
    			}

    			append_dev(label, t_1);
    			append_dev(label, input);
    			current = true;

    			if (!mounted) {
    				dispose = listen_dev(input, "input", /*onFile*/ ctx[13](getFilesFromInputEvent$1), false, false, false);
    				mounted = true;
    			}
    		},
    		p: function update(ctx, dirty) {
    			if (default_slot) {
    				if (default_slot.p && (!current || dirty[0] & /*$$scope, dragging*/ 32770)) {
    					update_slot_base(
    						default_slot,
    						default_slot_template,
    						ctx,
    						/*$$scope*/ ctx[15],
    						!current
    						? get_all_dirty_from_scope(/*$$scope*/ ctx[15])
    						: get_slot_changes(default_slot_template, /*$$scope*/ ctx[15], dirty, get_default_slot_changes$1),
    						get_default_slot_context$1
    					);
    				}
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(default_slot_or_fallback, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(default_slot_or_fallback, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(label);
    			if (default_slot_or_fallback) default_slot_or_fallback.d(detaching);
    			mounted = false;
    			dispose();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_else_block$3.name,
    		type: "else",
    		source: "(150:4) {:else}",
    		ctx
    	});

    	return block;
    }

    // (91:4) {#if selected}
    function create_if_block$3(ctx) {
    	let svg;
    	let g;
    	let image;
    	let image_x_value;
    	let image_y_value;
    	let image_width_value;
    	let image_height_value;
    	let path;
    	let path_d_value;
    	let rect;
    	let t0;
    	let div17;
    	let div1;
    	let div0;
    	let t2;
    	let input0;
    	let t3;
    	let div3;
    	let div2;
    	let t5;
    	let input1;
    	let t6;
    	let div5;
    	let div4;
    	let t8;
    	let input2;
    	let t9;
    	let div7;
    	let div6;
    	let t11;
    	let input3;
    	let t12;
    	let div9;
    	let div8;
    	let t14;
    	let input4;
    	let t15;
    	let div11;
    	let div10;
    	let t17;
    	let licenselist;
    	let updating_license;
    	let t18;
    	let div13;
    	let div12;
    	let t20;
    	let input5;
    	let t21;
    	let div15;
    	let div14;
    	let t23;
    	let select;
    	let t24;
    	let div16;
    	let button0;
    	let t26;
    	let button1;
    	let current;
    	let mounted;
    	let dispose;

    	function licenselist_license_binding(value) {
    		/*licenselist_license_binding*/ ctx[23](value);
    	}

    	let licenselist_props = {};

    	if (/*license*/ ctx[9] !== void 0) {
    		licenselist_props.license = /*license*/ ctx[9];
    	}

    	licenselist = new LicenseList({ props: licenselist_props, $$inline: true });
    	binding_callbacks.push(() => bind(licenselist, 'license', licenselist_license_binding));
    	let each_value = Object.keys(/*charges*/ ctx[0].types);
    	validate_each_argument(each_value);
    	let each_blocks = [];

    	for (let i = 0; i < each_value.length; i += 1) {
    		each_blocks[i] = create_each_block$2(get_each_context$2(ctx, each_value, i));
    	}

    	const block = {
    		c: function create() {
    			svg = svg_element("svg");
    			g = svg_element("g");
    			image = svg_element("image");
    			path = svg_element("path");
    			rect = svg_element("rect");
    			t0 = space();
    			div17 = element("div");
    			div1 = element("div");
    			div0 = element("div");
    			div0.textContent = "Size:";
    			t2 = space();
    			input0 = element("input");
    			t3 = space();
    			div3 = element("div");
    			div2 = element("div");
    			div2.textContent = "Offset X:";
    			t5 = space();
    			input1 = element("input");
    			t6 = space();
    			div5 = element("div");
    			div4 = element("div");
    			div4.textContent = "Offset Y:";
    			t8 = space();
    			input2 = element("input");
    			t9 = space();
    			div7 = element("div");
    			div6 = element("div");
    			div6.textContent = "Source:";
    			t11 = space();
    			input3 = element("input");
    			t12 = space();
    			div9 = element("div");
    			div8 = element("div");
    			div8.textContent = "Author:";
    			t14 = space();
    			input4 = element("input");
    			t15 = space();
    			div11 = element("div");
    			div10 = element("div");
    			div10.textContent = "License:";
    			t17 = space();
    			create_component(licenselist.$$.fragment);
    			t18 = space();
    			div13 = element("div");
    			div12 = element("div");
    			div12.textContent = "Name:";
    			t20 = space();
    			input5 = element("input");
    			t21 = space();
    			div15 = element("div");
    			div14 = element("div");
    			div14.textContent = "Category:";
    			t23 = space();
    			select = element("select");

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].c();
    			}

    			t24 = space();
    			div16 = element("div");
    			button0 = element("button");
    			button0.textContent = "Add";
    			t26 = space();
    			button1 = element("button");
    			button1.textContent = "Cancel";
    			attr_dev(image, "id", "imageLoaded");
    			attr_dev(image, "x", image_x_value = "" + ((100 - /*size*/ ctx[3]) / 2 + /*offsetX*/ ctx[4] + "%"));
    			attr_dev(image, "y", image_y_value = "" + ((100 - /*size*/ ctx[3]) / 2 + /*offsetY*/ ctx[5] + "%"));
    			attr_dev(image, "width", image_width_value = "" + (/*size*/ ctx[3] + "%"));
    			attr_dev(image, "height", image_height_value = "" + (/*size*/ ctx[3] + "%"));
    			add_location(image, file$4, 101, 10, 3312);
    			attr_dev(path, "d", path_d_value = shieldPaths[/*$shield*/ ctx[12]]);
    			add_location(path, file$4, 102, 10, 3450);
    			attr_dev(rect, "x", "60");
    			attr_dev(rect, "y", "60");
    			attr_dev(rect, "width", "80");
    			attr_dev(rect, "height", "80");
    			add_location(rect, file$4, 103, 10, 3494);
    			attr_dev(g, "fill", "#fff");
    			attr_dev(g, "fill-opacity", ".05");
    			attr_dev(g, "stroke", "#fff");
    			attr_dev(g, "stroke-width", ".5");
    			add_location(g, file$4, 100, 8, 3235);
    			attr_dev(svg, "width", "100%");
    			attr_dev(svg, "height", "100%");
    			attr_dev(svg, "stroke", "#000");
    			attr_dev(svg, "stroke-width", "1");
    			attr_dev(svg, "viewBox", "0 0 200 200");
    			attr_dev(svg, "data-tooltip", "Fit image into the rectangle for best result");
    			add_location(svg, file$4, 91, 6, 3006);
    			attr_dev(div0, "class", "label");
    			add_location(div0, file$4, 109, 10, 3668);
    			attr_dev(input0, "type", "number");
    			attr_dev(input0, "class", "svelte-846jl0");
    			add_location(input0, file$4, 110, 10, 3709);
    			attr_dev(div1, "data-tooltip", "Image size in percents");
    			add_location(div1, file$4, 108, 8, 3602);
    			attr_dev(div2, "class", "label");
    			add_location(div2, file$4, 113, 10, 3844);
    			attr_dev(input1, "type", "number");
    			attr_dev(input1, "class", "svelte-846jl0");
    			add_location(input1, file$4, 114, 10, 3889);
    			attr_dev(div3, "data-tooltip", "Offset by X axis in pixels");
    			add_location(div3, file$4, 112, 8, 3774);
    			attr_dev(div4, "class", "label");
    			add_location(div4, file$4, 117, 10, 4027);
    			attr_dev(input2, "type", "number");
    			attr_dev(input2, "class", "svelte-846jl0");
    			add_location(input2, file$4, 118, 10, 4072);
    			attr_dev(div5, "data-tooltip", "Offset by Y axis in pixels");
    			add_location(div5, file$4, 116, 8, 3957);
    			attr_dev(div6, "class", "label");
    			add_location(div6, file$4, 121, 10, 4208);
    			attr_dev(input3, "class", "svelte-846jl0");
    			add_location(input3, file$4, 122, 10, 4251);
    			attr_dev(div7, "data-tooltip", "Link to the image source");
    			add_location(div7, file$4, 120, 8, 4140);
    			attr_dev(div8, "class", "label");
    			add_location(div8, file$4, 125, 10, 4382);
    			attr_dev(input4, "class", "svelte-846jl0");
    			add_location(input4, file$4, 126, 10, 4425);
    			attr_dev(div9, "data-tooltip", "Image author or source portal name");
    			add_location(div9, file$4, 124, 8, 4304);
    			attr_dev(div10, "class", "label");
    			add_location(div10, file$4, 129, 10, 4535);
    			attr_dev(div11, "data-tooltip", "Image license");
    			add_location(div11, file$4, 128, 8, 4478);
    			attr_dev(div12, "class", "label");
    			add_location(div12, file$4, 133, 10, 4698);
    			attr_dev(input5, "placeholder", "Charge id");
    			input5.required = true;
    			attr_dev(input5, "class", "svelte-846jl0");
    			add_location(input5, file$4, 134, 10, 4739);
    			attr_dev(div13, "data-tooltip", "Charge unique name (id)");
    			add_location(div13, file$4, 132, 8, 4631);
    			attr_dev(div14, "class", "label");
    			add_location(div14, file$4, 137, 10, 4891);
    			attr_dev(select, "class", "svelte-846jl0");
    			if (/*category*/ ctx[7] === void 0) add_render_callback(() => /*select_change_handler*/ ctx[25].call(select));
    			add_location(select, file$4, 138, 10, 4936);
    			attr_dev(div15, "data-tooltip", "Category to put a charge");
    			add_location(div15, file$4, 136, 8, 4823);
    			attr_dev(button0, "class", "svelte-846jl0");
    			add_location(button0, file$4, 145, 10, 5159);
    			attr_dev(button1, "class", "svelte-846jl0");
    			add_location(button1, file$4, 146, 10, 5211);
    			attr_dev(div16, "class", "buttons svelte-846jl0");
    			add_location(div16, file$4, 144, 8, 5127);
    			attr_dev(div17, "class", "inputs svelte-846jl0");
    			add_location(div17, file$4, 107, 6, 3573);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, svg, anchor);
    			append_dev(svg, g);
    			append_dev(g, image);
    			append_dev(g, path);
    			append_dev(g, rect);
    			insert_dev(target, t0, anchor);
    			insert_dev(target, div17, anchor);
    			append_dev(div17, div1);
    			append_dev(div1, div0);
    			append_dev(div1, t2);
    			append_dev(div1, input0);
    			set_input_value(input0, /*size*/ ctx[3]);
    			append_dev(div17, t3);
    			append_dev(div17, div3);
    			append_dev(div3, div2);
    			append_dev(div3, t5);
    			append_dev(div3, input1);
    			set_input_value(input1, /*offsetX*/ ctx[4]);
    			append_dev(div17, t6);
    			append_dev(div17, div5);
    			append_dev(div5, div4);
    			append_dev(div5, t8);
    			append_dev(div5, input2);
    			set_input_value(input2, /*offsetY*/ ctx[5]);
    			append_dev(div17, t9);
    			append_dev(div17, div7);
    			append_dev(div7, div6);
    			append_dev(div7, t11);
    			append_dev(div7, input3);
    			set_input_value(input3, /*source*/ ctx[8]);
    			append_dev(div17, t12);
    			append_dev(div17, div9);
    			append_dev(div9, div8);
    			append_dev(div9, t14);
    			append_dev(div9, input4);
    			set_input_value(input4, /*author*/ ctx[10]);
    			append_dev(div17, t15);
    			append_dev(div17, div11);
    			append_dev(div11, div10);
    			append_dev(div11, t17);
    			mount_component(licenselist, div11, null);
    			append_dev(div17, t18);
    			append_dev(div17, div13);
    			append_dev(div13, div12);
    			append_dev(div13, t20);
    			append_dev(div13, input5);
    			set_input_value(input5, /*name*/ ctx[6]);
    			append_dev(div17, t21);
    			append_dev(div17, div15);
    			append_dev(div15, div14);
    			append_dev(div15, t23);
    			append_dev(div15, select);

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].m(select, null);
    			}

    			select_option(select, /*category*/ ctx[7]);
    			append_dev(div17, t24);
    			append_dev(div17, div16);
    			append_dev(div16, button0);
    			append_dev(div16, t26);
    			append_dev(div16, button1);
    			current = true;

    			if (!mounted) {
    				dispose = [
    					action_destroyer(tooltip.call(null, svg)),
    					listen_dev(input0, "input", /*input0_input_handler*/ ctx[18]),
    					action_destroyer(tooltip.call(null, div1)),
    					listen_dev(input1, "input", /*input1_input_handler*/ ctx[19]),
    					action_destroyer(tooltip.call(null, div3)),
    					listen_dev(input2, "input", /*input2_input_handler*/ ctx[20]),
    					action_destroyer(tooltip.call(null, div5)),
    					listen_dev(input3, "input", /*input3_input_handler*/ ctx[21]),
    					action_destroyer(tooltip.call(null, div7)),
    					listen_dev(input4, "input", /*input4_input_handler*/ ctx[22]),
    					action_destroyer(tooltip.call(null, div9)),
    					action_destroyer(tooltip.call(null, div11)),
    					listen_dev(input5, "input", /*input5_input_handler*/ ctx[24]),
    					action_destroyer(tooltip.call(null, div13)),
    					listen_dev(select, "change", /*select_change_handler*/ ctx[25]),
    					action_destroyer(tooltip.call(null, div15)),
    					listen_dev(button0, "click", /*addCharge*/ ctx[14], false, false, false),
    					listen_dev(button1, "click", /*click_handler_1*/ ctx[26], false, false, false)
    				];

    				mounted = true;
    			}
    		},
    		p: function update(ctx, dirty) {
    			if (!current || dirty[0] & /*size, offsetX*/ 24 && image_x_value !== (image_x_value = "" + ((100 - /*size*/ ctx[3]) / 2 + /*offsetX*/ ctx[4] + "%"))) {
    				attr_dev(image, "x", image_x_value);
    			}

    			if (!current || dirty[0] & /*size, offsetY*/ 40 && image_y_value !== (image_y_value = "" + ((100 - /*size*/ ctx[3]) / 2 + /*offsetY*/ ctx[5] + "%"))) {
    				attr_dev(image, "y", image_y_value);
    			}

    			if (!current || dirty[0] & /*size*/ 8 && image_width_value !== (image_width_value = "" + (/*size*/ ctx[3] + "%"))) {
    				attr_dev(image, "width", image_width_value);
    			}

    			if (!current || dirty[0] & /*size*/ 8 && image_height_value !== (image_height_value = "" + (/*size*/ ctx[3] + "%"))) {
    				attr_dev(image, "height", image_height_value);
    			}

    			if (!current || dirty[0] & /*$shield*/ 4096 && path_d_value !== (path_d_value = shieldPaths[/*$shield*/ ctx[12]])) {
    				attr_dev(path, "d", path_d_value);
    			}

    			if (dirty[0] & /*size*/ 8 && to_number(input0.value) !== /*size*/ ctx[3]) {
    				set_input_value(input0, /*size*/ ctx[3]);
    			}

    			if (dirty[0] & /*offsetX*/ 16 && to_number(input1.value) !== /*offsetX*/ ctx[4]) {
    				set_input_value(input1, /*offsetX*/ ctx[4]);
    			}

    			if (dirty[0] & /*offsetY*/ 32 && to_number(input2.value) !== /*offsetY*/ ctx[5]) {
    				set_input_value(input2, /*offsetY*/ ctx[5]);
    			}

    			if (dirty[0] & /*source*/ 256 && input3.value !== /*source*/ ctx[8]) {
    				set_input_value(input3, /*source*/ ctx[8]);
    			}

    			if (dirty[0] & /*author*/ 1024 && input4.value !== /*author*/ ctx[10]) {
    				set_input_value(input4, /*author*/ ctx[10]);
    			}

    			const licenselist_changes = {};

    			if (!updating_license && dirty[0] & /*license*/ 512) {
    				updating_license = true;
    				licenselist_changes.license = /*license*/ ctx[9];
    				add_flush_callback(() => updating_license = false);
    			}

    			licenselist.$set(licenselist_changes);

    			if (dirty[0] & /*name*/ 64 && input5.value !== /*name*/ ctx[6]) {
    				set_input_value(input5, /*name*/ ctx[6]);
    			}

    			if (dirty[0] & /*charges*/ 1) {
    				each_value = Object.keys(/*charges*/ ctx[0].types);
    				validate_each_argument(each_value);
    				let i;

    				for (i = 0; i < each_value.length; i += 1) {
    					const child_ctx = get_each_context$2(ctx, each_value, i);

    					if (each_blocks[i]) {
    						each_blocks[i].p(child_ctx, dirty);
    					} else {
    						each_blocks[i] = create_each_block$2(child_ctx);
    						each_blocks[i].c();
    						each_blocks[i].m(select, null);
    					}
    				}

    				for (; i < each_blocks.length; i += 1) {
    					each_blocks[i].d(1);
    				}

    				each_blocks.length = each_value.length;
    			}

    			if (dirty[0] & /*category, charges*/ 129) {
    				select_option(select, /*category*/ ctx[7]);
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(licenselist.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(licenselist.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(svg);
    			if (detaching) detach_dev(t0);
    			if (detaching) detach_dev(div17);
    			destroy_component(licenselist);
    			destroy_each(each_blocks, detaching);
    			mounted = false;
    			run_all(dispose);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block$3.name,
    		type: "if",
    		source: "(91:4) {#if selected}",
    		ctx
    	});

    	return block;
    }

    // (152:25)            
    function fallback_block$1(ctx) {
    	let div;
    	let t0;
    	let b;

    	const block = {
    		c: function create() {
    			div = element("div");
    			t0 = text("Drag & Drop image here or ");
    			b = element("b");
    			b.textContent = "browse";
    			add_location(b, file$4, 152, 45, 5413);
    			add_location(div, file$4, 152, 10, 5378);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    			append_dev(div, t0);
    			append_dev(div, b);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: fallback_block$1.name,
    		type: "fallback",
    		source: "(152:25)            ",
    		ctx
    	});

    	return block;
    }

    // (140:12) {#each Object.keys(charges.types) as c}
    function create_each_block$2(ctx) {
    	let option;
    	let t_1_value = /*c*/ ctx[30] + "";
    	let t_1;
    	let option_value_value;

    	const block = {
    		c: function create() {
    			option = element("option");
    			t_1 = text(t_1_value);
    			option.__value = option_value_value = /*c*/ ctx[30];
    			option.value = option.__value;
    			add_location(option, file$4, 140, 14, 5033);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, option, anchor);
    			append_dev(option, t_1);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty[0] & /*charges*/ 1 && t_1_value !== (t_1_value = /*c*/ ctx[30] + "")) set_data_dev(t_1, t_1_value);

    			if (dirty[0] & /*charges*/ 1 && option_value_value !== (option_value_value = /*c*/ ctx[30])) {
    				prop_dev(option, "__value", option_value_value);
    				option.value = option.__value;
    			}
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(option);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_each_block$2.name,
    		type: "each",
    		source: "(140:12) {#each Object.keys(charges.types) as c}",
    		ctx
    	});

    	return block;
    }

    function create_fragment$4(ctx) {
    	let div1;
    	let span;
    	let t1;
    	let div0;
    	let current_block_type_index;
    	let if_block;
    	let current;
    	let mounted;
    	let dispose;
    	const if_block_creators = [create_if_block$3, create_else_block$3];
    	const if_blocks = [];

    	function select_block_type(ctx, dirty) {
    		if (/*selected*/ ctx[2]) return 0;
    		return 1;
    	}

    	current_block_type_index = select_block_type(ctx);
    	if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);

    	const block = {
    		c: function create() {
    			div1 = element("div");
    			span = element("span");
    			span.textContent = "×";
    			t1 = space();
    			div0 = element("div");
    			if_block.c();
    			attr_dev(span, "class", "close svelte-846jl0");
    			add_location(span, file$4, 88, 2, 2883);
    			attr_dev(div0, "class", "container svelte-846jl0");
    			add_location(div0, file$4, 89, 2, 2957);
    			attr_dev(div1, "id", "rasterUpload");
    			attr_dev(div1, "class", "svelte-846jl0");
    			add_location(div1, file$4, 82, 0, 2685);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div1, anchor);
    			append_dev(div1, span);
    			append_dev(div1, t1);
    			append_dev(div1, div0);
    			if_blocks[current_block_type_index].m(div0, null);
    			current = true;

    			if (!mounted) {
    				dispose = [
    					listen_dev(span, "click", /*click_handler*/ ctx[17], false, false, false),
    					listen_dev(div1, "drop", prevent_default(/*onFile*/ ctx[13](getFilesFromDropEvent$1)), false, true, false),
    					listen_dev(div1, "dragover", prevent_default(/*dragover_handler*/ ctx[27]), false, true, false),
    					listen_dev(div1, "dragleave", prevent_default(/*dragleave_handler*/ ctx[28]), false, true, false)
    				];

    				mounted = true;
    			}
    		},
    		p: function update(ctx, dirty) {
    			let previous_block_index = current_block_type_index;
    			current_block_type_index = select_block_type(ctx);

    			if (current_block_type_index === previous_block_index) {
    				if_blocks[current_block_type_index].p(ctx, dirty);
    			} else {
    				group_outros();

    				transition_out(if_blocks[previous_block_index], 1, 1, () => {
    					if_blocks[previous_block_index] = null;
    				});

    				check_outros();
    				if_block = if_blocks[current_block_type_index];

    				if (!if_block) {
    					if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
    					if_block.c();
    				} else {
    					if_block.p(ctx, dirty);
    				}

    				transition_in(if_block, 1);
    				if_block.m(div0, null);
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(if_block);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(if_block);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div1);
    			if_blocks[current_block_type_index].d();
    			mounted = false;
    			run_all(dispose);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$4.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function getFilesFromDropEvent$1({ dataTransfer: { files, items } }) {
    	return files.length
    	? [...files]
    	: items.filter(({ kind }) => kind === "file").map(({ getAsFile }) => getAsFile());
    }

    function getFilesFromInputEvent$1({ target }) {
    	const files = target.files ? [...target.files] : [];
    	target.value = "";
    	return files;
    }

    function loadImage(file) {
    	const reader = new FileReader();

    	reader.onload = function (readerEvent) {
    		const dataURL = readerEvent.target.result;
    		const image = document.getElementById("rasterUpload").querySelector("svg image");
    		image.setAttribute("href", dataURL);
    	};

    	reader.readAsDataURL(file);
    }

    function instance$4($$self, $$props, $$invalidate) {
    	let $t;
    	let $state;
    	let $shield;
    	validate_store(X, 't');
    	component_subscribe($$self, X, $$value => $$invalidate(29, $t = $$value));
    	validate_store(state, 'state');
    	component_subscribe($$self, state, $$value => $$invalidate(11, $state = $$value));
    	validate_store(shield, 'shield');
    	component_subscribe($$self, shield, $$value => $$invalidate(12, $shield = $$value));
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('UploadRaster', slots, ['default']);
    	let dragging = false;
    	let selected = false;
    	let size = 50;
    	let offsetX = 0;
    	let offsetY = 0;
    	let name;
    	let category = "uploaded";
    	let source;
    	let license;
    	let author;

    	const onFile = getFilesFunction => event => {
    		$$invalidate(1, dragging = false);
    		const files = getFilesFunction(event);
    		const file = files.length ? files[0] : [];

    		if (!file.type.match(/image.*/)) {
    			message.error($t("error.notAnImage"));
    			return;
    		}

    		$$invalidate(2, selected = true);
    		message.info($t("info.tipUploadImageSize"));
    		$$invalidate(6, name = camelize(file.name));
    		loadImage(file);
    	};

    	function addCharge() {
    		const allCharges = Object.keys(charges.types).map(type => Object.keys(charges[type])).flat();
    		$$invalidate(6, name = camelize(name));

    		if (!name || document.getElementById(name) || allCharges.includes(name)) {
    			message.error($t("error.notUniqueName"));
    			return;
    		}

    		if (!charges.types[category]) $$invalidate(0, charges.types[category] = 6, charges);
    		if (!charges.single[category]) $$invalidate(0, charges.single[category] = 6, charges);
    		$$invalidate(0, charges[category][name] = 5, charges);

    		// remove stored weighted arrays
    		delete charges.types.array;

    		delete charges.single.array;
    		delete charges[category].array;
    		const image = query("#rasterUpload svg image").cloneNode(true);
    		image.id = name;
    		if (source) image.setAttribute("source", source);
    		if (license) image.setAttribute("license", license);
    		if (author) image.setAttribute("author", author);
    		document.getElementById("charges").appendChild(image);
    		$$invalidate(2, selected = false);
    		set_store_value(state, $state.raster = 0, $state);
    		message.success($t("success.chargeAdded"));
    	}

    	const writable_props = [];

    	Object_1$2.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<UploadRaster> was created with unknown prop '${key}'`);
    	});

    	const click_handler = () => set_store_value(state, $state.raster = 0, $state);

    	function input0_input_handler() {
    		size = to_number(this.value);
    		$$invalidate(3, size);
    	}

    	function input1_input_handler() {
    		offsetX = to_number(this.value);
    		$$invalidate(4, offsetX);
    	}

    	function input2_input_handler() {
    		offsetY = to_number(this.value);
    		$$invalidate(5, offsetY);
    	}

    	function input3_input_handler() {
    		source = this.value;
    		$$invalidate(8, source);
    	}

    	function input4_input_handler() {
    		author = this.value;
    		$$invalidate(10, author);
    	}

    	function licenselist_license_binding(value) {
    		license = value;
    		$$invalidate(9, license);
    	}

    	function input5_input_handler() {
    		name = this.value;
    		$$invalidate(6, name);
    	}

    	function select_change_handler() {
    		category = select_value(this);
    		$$invalidate(7, category);
    		$$invalidate(0, charges);
    	}

    	const click_handler_1 = () => $$invalidate(2, selected = false);
    	const dragover_handler = () => $$invalidate(1, dragging = true);
    	const dragleave_handler = () => $$invalidate(1, dragging = false);

    	$$self.$$set = $$props => {
    		if ('$$scope' in $$props) $$invalidate(15, $$scope = $$props.$$scope);
    	};

    	$$self.$capture_state = () => ({
    		t: X,
    		LicenseList,
    		state,
    		message,
    		shield,
    		charges,
    		shieldPaths,
    		tooltip,
    		camelize,
    		query,
    		dragging,
    		selected,
    		size,
    		offsetX,
    		offsetY,
    		name,
    		category,
    		source,
    		license,
    		author,
    		onFile,
    		getFilesFromDropEvent: getFilesFromDropEvent$1,
    		getFilesFromInputEvent: getFilesFromInputEvent$1,
    		loadImage,
    		addCharge,
    		$t,
    		$state,
    		$shield
    	});

    	$$self.$inject_state = $$props => {
    		if ('dragging' in $$props) $$invalidate(1, dragging = $$props.dragging);
    		if ('selected' in $$props) $$invalidate(2, selected = $$props.selected);
    		if ('size' in $$props) $$invalidate(3, size = $$props.size);
    		if ('offsetX' in $$props) $$invalidate(4, offsetX = $$props.offsetX);
    		if ('offsetY' in $$props) $$invalidate(5, offsetY = $$props.offsetY);
    		if ('name' in $$props) $$invalidate(6, name = $$props.name);
    		if ('category' in $$props) $$invalidate(7, category = $$props.category);
    		if ('source' in $$props) $$invalidate(8, source = $$props.source);
    		if ('license' in $$props) $$invalidate(9, license = $$props.license);
    		if ('author' in $$props) $$invalidate(10, author = $$props.author);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [
    		charges,
    		dragging,
    		selected,
    		size,
    		offsetX,
    		offsetY,
    		name,
    		category,
    		source,
    		license,
    		author,
    		$state,
    		$shield,
    		onFile,
    		addCharge,
    		$$scope,
    		slots,
    		click_handler,
    		input0_input_handler,
    		input1_input_handler,
    		input2_input_handler,
    		input3_input_handler,
    		input4_input_handler,
    		licenselist_license_binding,
    		input5_input_handler,
    		select_change_handler,
    		click_handler_1,
    		dragover_handler,
    		dragleave_handler
    	];
    }

    class UploadRaster extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$4, create_fragment$4, safe_not_equal, {}, null, [-1, -1]);

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "UploadRaster",
    			options,
    			id: create_fragment$4.name
    		});
    	}
    }

    /* src/components/navigation/UploadVector.svelte generated by Svelte v3.44.2 */

    const { Object: Object_1$1 } = globals;
    const file$3 = "src/components/navigation/UploadVector.svelte";
    const get_default_slot_changes = dirty => ({ dragging: dirty[0] & /*dragging*/ 4 });
    const get_default_slot_context = ctx => ({ dragging: /*dragging*/ ctx[2] });

    function get_each_context$1(ctx, list, i) {
    	const child_ctx = ctx.slice();
    	child_ctx[38] = list[i];
    	return child_ctx;
    }

    function get_each_context_1$1(ctx, list, i) {
    	const child_ctx = ctx.slice();
    	child_ctx[41] = list[i];
    	return child_ctx;
    }

    // (213:4) {:else}
    function create_else_block$2(ctx) {
    	let label;
    	let t0;
    	let input;
    	let t1;
    	let button;
    	let current;
    	let mounted;
    	let dispose;
    	const default_slot_template = /*#slots*/ ctx[18].default;
    	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[17], get_default_slot_context);
    	const default_slot_or_fallback = default_slot || fallback_block(ctx);

    	const block = {
    		c: function create() {
    			label = element("label");
    			if (default_slot_or_fallback) default_slot_or_fallback.c();
    			t0 = space();
    			input = element("input");
    			t1 = space();
    			button = element("button");
    			button.textContent = "Download Template";
    			attr_dev(input, "type", "file");
    			attr_dev(input, "accept", ".svg");
    			attr_dev(input, "class", "svelte-1jxwqtv");
    			add_location(input, file$3, 217, 8, 7750);
    			attr_dev(label, "class", "dragging svelte-1jxwqtv");
    			add_location(label, file$3, 213, 6, 7607);
    			attr_dev(button, "class", "template svelte-1jxwqtv");
    			add_location(button, file$3, 219, 6, 7849);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, label, anchor);

    			if (default_slot_or_fallback) {
    				default_slot_or_fallback.m(label, null);
    			}

    			append_dev(label, t0);
    			append_dev(label, input);
    			insert_dev(target, t1, anchor);
    			insert_dev(target, button, anchor);
    			current = true;

    			if (!mounted) {
    				dispose = [
    					listen_dev(input, "input", /*onFile*/ ctx[15](getFilesFromInputEvent), false, false, false),
    					listen_dev(button, "click", downloadTemplate, false, false, false)
    				];

    				mounted = true;
    			}
    		},
    		p: function update(ctx, dirty) {
    			if (default_slot) {
    				if (default_slot.p && (!current || dirty[0] & /*$$scope, dragging*/ 131076)) {
    					update_slot_base(
    						default_slot,
    						default_slot_template,
    						ctx,
    						/*$$scope*/ ctx[17],
    						!current
    						? get_all_dirty_from_scope(/*$$scope*/ ctx[17])
    						: get_slot_changes(default_slot_template, /*$$scope*/ ctx[17], dirty, get_default_slot_changes),
    						get_default_slot_context
    					);
    				}
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(default_slot_or_fallback, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(default_slot_or_fallback, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(label);
    			if (default_slot_or_fallback) default_slot_or_fallback.d(detaching);
    			if (detaching) detach_dev(t1);
    			if (detaching) detach_dev(button);
    			mounted = false;
    			run_all(dispose);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_else_block$2.name,
    		type: "else",
    		source: "(213:4) {:else}",
    		ctx
    	});

    	return block;
    }

    // (135:4) {#if selected}
    function create_if_block$2(ctx) {
    	let svg_1;
    	let g0;
    	let path;
    	let path_d_value;
    	let rect;
    	let g1;
    	let t0;
    	let div1;
    	let div0;
    	let t2;
    	let textarea;
    	let t3;
    	let div19;
    	let div3;
    	let div2;
    	let t5;
    	let input0;
    	let t6;
    	let input1;
    	let t7;
    	let div5;
    	let div4;
    	let t9;
    	let input2;
    	let t10;
    	let input3;
    	let t11;
    	let div7;
    	let div6;
    	let t13;
    	let select0;
    	let t14;
    	let div9;
    	let div8;
    	let t16;
    	let input4;
    	let t17;
    	let div11;
    	let div10;
    	let t19;
    	let input5;
    	let t20;
    	let div13;
    	let div12;
    	let t22;
    	let licenselist;
    	let updating_license;
    	let t23;
    	let div15;
    	let div14;
    	let t25;
    	let input6;
    	let t26;
    	let div17;
    	let div16;
    	let t28;
    	let select1;
    	let t29;
    	let div18;
    	let button0;
    	let t31;
    	let button1;
    	let current;
    	let mounted;
    	let dispose;
    	let each_value_1 = /*tinctureList*/ ctx[14];
    	validate_each_argument(each_value_1);
    	let each_blocks_1 = [];

    	for (let i = 0; i < each_value_1.length; i += 1) {
    		each_blocks_1[i] = create_each_block_1$1(get_each_context_1$1(ctx, each_value_1, i));
    	}

    	function licenselist_license_binding(value) {
    		/*licenselist_license_binding*/ ctx[28](value);
    	}

    	let licenselist_props = {};

    	if (/*license*/ ctx[9] !== void 0) {
    		licenselist_props.license = /*license*/ ctx[9];
    	}

    	licenselist = new LicenseList({ props: licenselist_props, $$inline: true });
    	binding_callbacks.push(() => bind(licenselist, 'license', licenselist_license_binding));
    	let each_value = Object.keys(/*charges*/ ctx[1].types);
    	validate_each_argument(each_value);
    	let each_blocks = [];

    	for (let i = 0; i < each_value.length; i += 1) {
    		each_blocks[i] = create_each_block$1(get_each_context$1(ctx, each_value, i));
    	}

    	const block = {
    		c: function create() {
    			svg_1 = svg_element("svg");
    			g0 = svg_element("g");
    			path = svg_element("path");
    			rect = svg_element("rect");
    			g1 = svg_element("g");
    			t0 = space();
    			div1 = element("div");
    			div0 = element("div");
    			div0.textContent = "SVG Markup:";
    			t2 = space();
    			textarea = element("textarea");
    			t3 = space();
    			div19 = element("div");
    			div3 = element("div");
    			div2 = element("div");
    			div2.textContent = "Translate:";
    			t5 = space();
    			input0 = element("input");
    			t6 = space();
    			input1 = element("input");
    			t7 = space();
    			div5 = element("div");
    			div4 = element("div");
    			div4.textContent = "Scale:";
    			t9 = space();
    			input2 = element("input");
    			t10 = space();
    			input3 = element("input");
    			t11 = space();
    			div7 = element("div");
    			div6 = element("div");
    			div6.textContent = "Tincture:";
    			t13 = space();
    			select0 = element("select");

    			for (let i = 0; i < each_blocks_1.length; i += 1) {
    				each_blocks_1[i].c();
    			}

    			t14 = space();
    			div9 = element("div");
    			div8 = element("div");
    			div8.textContent = "Source:";
    			t16 = space();
    			input4 = element("input");
    			t17 = space();
    			div11 = element("div");
    			div10 = element("div");
    			div10.textContent = "Author:";
    			t19 = space();
    			input5 = element("input");
    			t20 = space();
    			div13 = element("div");
    			div12 = element("div");
    			div12.textContent = "License:";
    			t22 = space();
    			create_component(licenselist.$$.fragment);
    			t23 = space();
    			div15 = element("div");
    			div14 = element("div");
    			div14.textContent = "Name:";
    			t25 = space();
    			input6 = element("input");
    			t26 = space();
    			div17 = element("div");
    			div16 = element("div");
    			div16.textContent = "Category:";
    			t28 = space();
    			select1 = element("select");

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].c();
    			}

    			t29 = space();
    			div18 = element("div");
    			button0 = element("button");
    			button0.textContent = "Upload";
    			t31 = space();
    			button1 = element("button");
    			button1.textContent = "Cancel";
    			attr_dev(path, "d", path_d_value = shieldPaths[/*$shield*/ ctx[12]]);
    			add_location(path, file$3, 146, 10, 5038);
    			attr_dev(rect, "x", "60");
    			attr_dev(rect, "y", "60");
    			attr_dev(rect, "width", "80");
    			attr_dev(rect, "height", "80");
    			add_location(rect, file$3, 147, 10, 5082);
    			attr_dev(g0, "fill", "#fff");
    			attr_dev(g0, "fill-opacity", ".05");
    			attr_dev(g0, "stroke", "#fff");
    			attr_dev(g0, "stroke-width", ".5");
    			add_location(g0, file$3, 145, 8, 4961);
    			add_location(g1, file$3, 149, 8, 5149);
    			attr_dev(svg_1, "width", "100%");
    			attr_dev(svg_1, "height", "100%");
    			attr_dev(svg_1, "fill", /*color*/ ctx[7]);
    			attr_dev(svg_1, "stroke", "#000");
    			attr_dev(svg_1, "stroke-width", "1");
    			attr_dev(svg_1, "viewBox", "0 0 200 200");
    			attr_dev(svg_1, "data-tooltip", "Fit image into the rectangle for best result");
    			add_location(svg_1, file$3, 135, 6, 4711);
    			attr_dev(div0, "class", "label");
    			add_location(div0, file$3, 153, 8, 5202);
    			attr_dev(textarea, "rows", "5");
    			attr_dev(textarea, "class", "svelte-1jxwqtv");
    			add_location(textarea, file$3, 154, 8, 5247);
    			add_location(div1, file$3, 152, 6, 5188);
    			attr_dev(div2, "class", "label");
    			add_location(div2, file$3, 159, 10, 5407);
    			attr_dev(input0, "type", "number");
    			attr_dev(input0, "step", ".1");
    			attr_dev(input0, "class", "paired svelte-1jxwqtv");
    			add_location(input0, file$3, 160, 10, 5453);
    			attr_dev(input1, "type", "number");
    			attr_dev(input1, "step", ".1");
    			attr_dev(input1, "class", "paired svelte-1jxwqtv");
    			add_location(input1, file$3, 161, 10, 5537);
    			attr_dev(div3, "data-tooltip", "Charge translate: X and Y px");
    			add_location(div3, file$3, 158, 8, 5335);
    			attr_dev(div4, "class", "label");
    			add_location(div4, file$3, 165, 10, 5725);
    			attr_dev(input2, "type", "number");
    			attr_dev(input2, "step", ".01");
    			attr_dev(input2, "class", "paired svelte-1jxwqtv");
    			add_location(input2, file$3, 166, 10, 5767);
    			attr_dev(input3, "type", "number");
    			attr_dev(input3, "step", ".01");
    			attr_dev(input3, "class", "paired svelte-1jxwqtv");
    			add_location(input3, file$3, 167, 10, 5852);
    			attr_dev(div5, "data-tooltip", "Charge scale: X and Y, where 1 is default size");
    			add_location(div5, file$3, 164, 8, 5635);
    			attr_dev(div6, "class", "label");
    			add_location(div6, file$3, 174, 10, 6176);
    			attr_dev(select0, "class", "svelte-1jxwqtv");
    			if (/*color*/ ctx[7] === void 0) add_render_callback(() => /*select0_change_handler*/ ctx[25].call(select0));
    			add_location(select0, file$3, 175, 10, 6221);
    			attr_dev(div7, "data-tooltip", "Tincture preview color, does not affect uploaded actual color. Charges must not have exact color defined. In this case charge will support all tunctures");
    			add_location(div7, file$3, 170, 8, 5951);
    			attr_dev(div8, "class", "label");
    			add_location(div8, file$3, 183, 10, 6494);
    			attr_dev(input4, "class", "svelte-1jxwqtv");
    			add_location(input4, file$3, 184, 10, 6537);
    			attr_dev(div9, "data-tooltip", "Link to the image source");
    			add_location(div9, file$3, 182, 8, 6426);
    			attr_dev(div10, "class", "label");
    			add_location(div10, file$3, 187, 10, 6668);
    			attr_dev(input5, "class", "svelte-1jxwqtv");
    			add_location(input5, file$3, 188, 10, 6711);
    			attr_dev(div11, "data-tooltip", "Image author or source portal name");
    			add_location(div11, file$3, 186, 8, 6590);
    			attr_dev(div12, "class", "label");
    			add_location(div12, file$3, 191, 10, 6821);
    			attr_dev(div13, "data-tooltip", "Image license");
    			add_location(div13, file$3, 190, 8, 6764);
    			attr_dev(div14, "class", "label");
    			add_location(div14, file$3, 195, 10, 6984);
    			attr_dev(input6, "placeholder", "Charge id");
    			input6.required = true;
    			attr_dev(input6, "class", "svelte-1jxwqtv");
    			add_location(input6, file$3, 196, 10, 7025);
    			attr_dev(div15, "data-tooltip", "Charge unique name (id)");
    			add_location(div15, file$3, 194, 8, 6917);
    			attr_dev(div16, "class", "label");
    			add_location(div16, file$3, 199, 10, 7177);
    			attr_dev(select1, "class", "svelte-1jxwqtv");
    			if (/*category*/ ctx[6] === void 0) add_render_callback(() => /*select1_change_handler*/ ctx[30].call(select1));
    			add_location(select1, file$3, 200, 10, 7222);
    			attr_dev(div17, "data-tooltip", "Category to put a charge");
    			add_location(div17, file$3, 198, 8, 7109);
    			attr_dev(button0, "class", "svelte-1jxwqtv");
    			add_location(button0, file$3, 208, 10, 7446);
    			attr_dev(button1, "class", "svelte-1jxwqtv");
    			add_location(button1, file$3, 209, 10, 7501);
    			attr_dev(div18, "class", "buttons svelte-1jxwqtv");
    			add_location(div18, file$3, 207, 8, 7414);
    			attr_dev(div19, "class", "inputs svelte-1jxwqtv");
    			add_location(div19, file$3, 157, 6, 5306);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, svg_1, anchor);
    			append_dev(svg_1, g0);
    			append_dev(g0, path);
    			append_dev(g0, rect);
    			append_dev(svg_1, g1);
    			g1.innerHTML = /*svg*/ ctx[4];
    			insert_dev(target, t0, anchor);
    			insert_dev(target, div1, anchor);
    			append_dev(div1, div0);
    			append_dev(div1, t2);
    			append_dev(div1, textarea);
    			set_input_value(textarea, /*svg*/ ctx[4]);
    			insert_dev(target, t3, anchor);
    			insert_dev(target, div19, anchor);
    			append_dev(div19, div3);
    			append_dev(div3, div2);
    			append_dev(div3, t5);
    			append_dev(div3, input0);
    			set_input_value(input0, /*transform*/ ctx[0].e);
    			append_dev(div3, t6);
    			append_dev(div3, input1);
    			set_input_value(input1, /*transform*/ ctx[0].f);
    			append_dev(div19, t7);
    			append_dev(div19, div5);
    			append_dev(div5, div4);
    			append_dev(div5, t9);
    			append_dev(div5, input2);
    			set_input_value(input2, /*transform*/ ctx[0].a);
    			append_dev(div5, t10);
    			append_dev(div5, input3);
    			set_input_value(input3, /*transform*/ ctx[0].d);
    			append_dev(div19, t11);
    			append_dev(div19, div7);
    			append_dev(div7, div6);
    			append_dev(div7, t13);
    			append_dev(div7, select0);

    			for (let i = 0; i < each_blocks_1.length; i += 1) {
    				each_blocks_1[i].m(select0, null);
    			}

    			select_option(select0, /*color*/ ctx[7]);
    			append_dev(div19, t14);
    			append_dev(div19, div9);
    			append_dev(div9, div8);
    			append_dev(div9, t16);
    			append_dev(div9, input4);
    			set_input_value(input4, /*source*/ ctx[8]);
    			append_dev(div19, t17);
    			append_dev(div19, div11);
    			append_dev(div11, div10);
    			append_dev(div11, t19);
    			append_dev(div11, input5);
    			set_input_value(input5, /*author*/ ctx[10]);
    			append_dev(div19, t20);
    			append_dev(div19, div13);
    			append_dev(div13, div12);
    			append_dev(div13, t22);
    			mount_component(licenselist, div13, null);
    			append_dev(div19, t23);
    			append_dev(div19, div15);
    			append_dev(div15, div14);
    			append_dev(div15, t25);
    			append_dev(div15, input6);
    			set_input_value(input6, /*name*/ ctx[5]);
    			append_dev(div19, t26);
    			append_dev(div19, div17);
    			append_dev(div17, div16);
    			append_dev(div17, t28);
    			append_dev(div17, select1);

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].m(select1, null);
    			}

    			select_option(select1, /*category*/ ctx[6]);
    			append_dev(div19, t29);
    			append_dev(div19, div18);
    			append_dev(div18, button0);
    			append_dev(div18, t31);
    			append_dev(div18, button1);
    			current = true;

    			if (!mounted) {
    				dispose = [
    					action_destroyer(tooltip.call(null, svg_1)),
    					listen_dev(textarea, "input", /*textarea_input_handler*/ ctx[20]),
    					listen_dev(input0, "input", /*input0_input_handler*/ ctx[21]),
    					listen_dev(input1, "input", /*input1_input_handler*/ ctx[22]),
    					action_destroyer(tooltip.call(null, div3)),
    					listen_dev(input2, "input", /*input2_input_handler*/ ctx[23]),
    					listen_dev(input3, "input", /*input3_input_handler*/ ctx[24]),
    					action_destroyer(tooltip.call(null, div5)),
    					listen_dev(select0, "change", /*select0_change_handler*/ ctx[25]),
    					action_destroyer(tooltip.call(null, div7)),
    					listen_dev(input4, "input", /*input4_input_handler*/ ctx[26]),
    					action_destroyer(tooltip.call(null, div9)),
    					listen_dev(input5, "input", /*input5_input_handler*/ ctx[27]),
    					action_destroyer(tooltip.call(null, div11)),
    					action_destroyer(tooltip.call(null, div13)),
    					listen_dev(input6, "input", /*input6_input_handler*/ ctx[29]),
    					action_destroyer(tooltip.call(null, div15)),
    					listen_dev(select1, "change", /*select1_change_handler*/ ctx[30]),
    					action_destroyer(tooltip.call(null, div17)),
    					listen_dev(button0, "click", /*addCharge*/ ctx[16], false, false, false),
    					listen_dev(button1, "click", /*click_handler_1*/ ctx[31], false, false, false)
    				];

    				mounted = true;
    			}
    		},
    		p: function update(ctx, dirty) {
    			if (!current || dirty[0] & /*$shield*/ 4096 && path_d_value !== (path_d_value = shieldPaths[/*$shield*/ ctx[12]])) {
    				attr_dev(path, "d", path_d_value);
    			}

    			if (!current || dirty[0] & /*svg*/ 16) g1.innerHTML = /*svg*/ ctx[4];
    			if (!current || dirty[0] & /*color, $colors, tinctureList*/ 24704) {
    				attr_dev(svg_1, "fill", /*color*/ ctx[7]);
    			}

    			if (dirty[0] & /*svg*/ 16) {
    				set_input_value(textarea, /*svg*/ ctx[4]);
    			}

    			if (dirty[0] & /*transform*/ 1 && to_number(input0.value) !== /*transform*/ ctx[0].e) {
    				set_input_value(input0, /*transform*/ ctx[0].e);
    			}

    			if (dirty[0] & /*transform*/ 1 && to_number(input1.value) !== /*transform*/ ctx[0].f) {
    				set_input_value(input1, /*transform*/ ctx[0].f);
    			}

    			if (dirty[0] & /*transform*/ 1 && to_number(input2.value) !== /*transform*/ ctx[0].a) {
    				set_input_value(input2, /*transform*/ ctx[0].a);
    			}

    			if (dirty[0] & /*transform*/ 1 && to_number(input3.value) !== /*transform*/ ctx[0].d) {
    				set_input_value(input3, /*transform*/ ctx[0].d);
    			}

    			if (dirty[0] & /*$colors, tinctureList*/ 24576) {
    				each_value_1 = /*tinctureList*/ ctx[14];
    				validate_each_argument(each_value_1);
    				let i;

    				for (i = 0; i < each_value_1.length; i += 1) {
    					const child_ctx = get_each_context_1$1(ctx, each_value_1, i);

    					if (each_blocks_1[i]) {
    						each_blocks_1[i].p(child_ctx, dirty);
    					} else {
    						each_blocks_1[i] = create_each_block_1$1(child_ctx);
    						each_blocks_1[i].c();
    						each_blocks_1[i].m(select0, null);
    					}
    				}

    				for (; i < each_blocks_1.length; i += 1) {
    					each_blocks_1[i].d(1);
    				}

    				each_blocks_1.length = each_value_1.length;
    			}

    			if (dirty[0] & /*color, $colors, tinctureList*/ 24704) {
    				select_option(select0, /*color*/ ctx[7]);
    			}

    			if (dirty[0] & /*source*/ 256 && input4.value !== /*source*/ ctx[8]) {
    				set_input_value(input4, /*source*/ ctx[8]);
    			}

    			if (dirty[0] & /*author*/ 1024 && input5.value !== /*author*/ ctx[10]) {
    				set_input_value(input5, /*author*/ ctx[10]);
    			}

    			const licenselist_changes = {};

    			if (!updating_license && dirty[0] & /*license*/ 512) {
    				updating_license = true;
    				licenselist_changes.license = /*license*/ ctx[9];
    				add_flush_callback(() => updating_license = false);
    			}

    			licenselist.$set(licenselist_changes);

    			if (dirty[0] & /*name*/ 32 && input6.value !== /*name*/ ctx[5]) {
    				set_input_value(input6, /*name*/ ctx[5]);
    			}

    			if (dirty[0] & /*charges*/ 2) {
    				each_value = Object.keys(/*charges*/ ctx[1].types);
    				validate_each_argument(each_value);
    				let i;

    				for (i = 0; i < each_value.length; i += 1) {
    					const child_ctx = get_each_context$1(ctx, each_value, i);

    					if (each_blocks[i]) {
    						each_blocks[i].p(child_ctx, dirty);
    					} else {
    						each_blocks[i] = create_each_block$1(child_ctx);
    						each_blocks[i].c();
    						each_blocks[i].m(select1, null);
    					}
    				}

    				for (; i < each_blocks.length; i += 1) {
    					each_blocks[i].d(1);
    				}

    				each_blocks.length = each_value.length;
    			}

    			if (dirty[0] & /*category, charges*/ 66) {
    				select_option(select1, /*category*/ ctx[6]);
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(licenselist.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(licenselist.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(svg_1);
    			if (detaching) detach_dev(t0);
    			if (detaching) detach_dev(div1);
    			if (detaching) detach_dev(t3);
    			if (detaching) detach_dev(div19);
    			destroy_each(each_blocks_1, detaching);
    			destroy_component(licenselist);
    			destroy_each(each_blocks, detaching);
    			mounted = false;
    			run_all(dispose);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block$2.name,
    		type: "if",
    		source: "(135:4) {#if selected}",
    		ctx
    	});

    	return block;
    }

    // (215:25)            
    function fallback_block(ctx) {
    	let div;
    	let t0;
    	let b;

    	const block = {
    		c: function create() {
    			div = element("div");
    			t0 = text("Drag & Drop svg file here or ");
    			b = element("b");
    			b.textContent = "browse";
    			add_location(b, file$3, 215, 48, 7706);
    			add_location(div, file$3, 215, 10, 7668);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    			append_dev(div, t0);
    			append_dev(div, b);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: fallback_block.name,
    		type: "fallback",
    		source: "(215:25)            ",
    		ctx
    	});

    	return block;
    }

    // (177:12) {#each tinctureList as tincture}
    function create_each_block_1$1(ctx) {
    	let option;
    	let t_1_value = /*tincture*/ ctx[41] + "";
    	let t_1;
    	let option_value_value;

    	const block = {
    		c: function create() {
    			option = element("option");
    			t_1 = text(t_1_value);
    			option.__value = option_value_value = /*$colors*/ ctx[13][/*tincture*/ ctx[41]];
    			option.value = option.__value;
    			add_location(option, file$3, 177, 14, 6308);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, option, anchor);
    			append_dev(option, t_1);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty[0] & /*$colors*/ 8192 && option_value_value !== (option_value_value = /*$colors*/ ctx[13][/*tincture*/ ctx[41]])) {
    				prop_dev(option, "__value", option_value_value);
    				option.value = option.__value;
    			}
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(option);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_each_block_1$1.name,
    		type: "each",
    		source: "(177:12) {#each tinctureList as tincture}",
    		ctx
    	});

    	return block;
    }

    // (202:12) {#each Object.keys(charges.types) as c}
    function create_each_block$1(ctx) {
    	let option;
    	let t_1_value = /*c*/ ctx[38] + "";
    	let t_1;
    	let option_value_value;

    	const block = {
    		c: function create() {
    			option = element("option");
    			t_1 = text(t_1_value);
    			option.__value = option_value_value = /*c*/ ctx[38];
    			option.value = option.__value;
    			add_location(option, file$3, 202, 14, 7319);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, option, anchor);
    			append_dev(option, t_1);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty[0] & /*charges*/ 2 && t_1_value !== (t_1_value = /*c*/ ctx[38] + "")) set_data_dev(t_1, t_1_value);

    			if (dirty[0] & /*charges*/ 2 && option_value_value !== (option_value_value = /*c*/ ctx[38])) {
    				prop_dev(option, "__value", option_value_value);
    				option.value = option.__value;
    			}
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(option);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_each_block$1.name,
    		type: "each",
    		source: "(202:12) {#each Object.keys(charges.types) as c}",
    		ctx
    	});

    	return block;
    }

    function create_fragment$3(ctx) {
    	let div1;
    	let span;
    	let t1;
    	let div0;
    	let current_block_type_index;
    	let if_block;
    	let current;
    	let mounted;
    	let dispose;
    	const if_block_creators = [create_if_block$2, create_else_block$2];
    	const if_blocks = [];

    	function select_block_type(ctx, dirty) {
    		if (/*selected*/ ctx[3]) return 0;
    		return 1;
    	}

    	current_block_type_index = select_block_type(ctx);
    	if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);

    	const block = {
    		c: function create() {
    			div1 = element("div");
    			span = element("span");
    			span.textContent = "×";
    			t1 = space();
    			div0 = element("div");
    			if_block.c();
    			attr_dev(span, "class", "close svelte-1jxwqtv");
    			add_location(span, file$3, 132, 2, 4588);
    			attr_dev(div0, "class", "container svelte-1jxwqtv");
    			add_location(div0, file$3, 133, 2, 4662);
    			attr_dev(div1, "id", "vectorUpload");
    			attr_dev(div1, "class", "svelte-1jxwqtv");
    			add_location(div1, file$3, 126, 0, 4390);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div1, anchor);
    			append_dev(div1, span);
    			append_dev(div1, t1);
    			append_dev(div1, div0);
    			if_blocks[current_block_type_index].m(div0, null);
    			current = true;

    			if (!mounted) {
    				dispose = [
    					listen_dev(span, "click", /*click_handler*/ ctx[19], false, false, false),
    					listen_dev(div1, "drop", prevent_default(/*onFile*/ ctx[15](getFilesFromDropEvent)), false, true, false),
    					listen_dev(div1, "dragover", prevent_default(/*dragover_handler*/ ctx[32]), false, true, false),
    					listen_dev(div1, "dragleave", prevent_default(/*dragleave_handler*/ ctx[33]), false, true, false)
    				];

    				mounted = true;
    			}
    		},
    		p: function update(ctx, dirty) {
    			let previous_block_index = current_block_type_index;
    			current_block_type_index = select_block_type(ctx);

    			if (current_block_type_index === previous_block_index) {
    				if_blocks[current_block_type_index].p(ctx, dirty);
    			} else {
    				group_outros();

    				transition_out(if_blocks[previous_block_index], 1, 1, () => {
    					if_blocks[previous_block_index] = null;
    				});

    				check_outros();
    				if_block = if_blocks[current_block_type_index];

    				if (!if_block) {
    					if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
    					if_block.c();
    				} else {
    					if_block.p(ctx, dirty);
    				}

    				transition_in(if_block, 1);
    				if_block.m(div0, null);
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(if_block);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(if_block);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div1);
    			if_blocks[current_block_type_index].d();
    			mounted = false;
    			run_all(dispose);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$3.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function getFilesFromDropEvent({ dataTransfer: { files, items } }) {
    	return files.length
    	? [...files]
    	: items.filter(({ kind }) => kind === "file").map(({ getAsFile }) => getAsFile());
    }

    function getFilesFromInputEvent({ target }) {
    	const files = target.files ? [...target.files] : [];
    	target.value = "";
    	return files;
    }

    function downloadTemplate() {
    	fetch("charges/template.svg").then(text => {
    		return text.blob().then(blob => {
    			const a = document.createElement("a");
    			a.href = URL.createObjectURL(blob);
    			a.setAttribute("download", "armoriaChargeTemplate.txt");
    			a.click();
    		});
    	});
    }

    function instance$3($$self, $$props, $$invalidate) {
    	let $t;
    	let $state;
    	let $tinctures;
    	let $shield;
    	let $colors;
    	validate_store(X, 't');
    	component_subscribe($$self, X, $$value => $$invalidate(34, $t = $$value));
    	validate_store(state, 'state');
    	component_subscribe($$self, state, $$value => $$invalidate(11, $state = $$value));
    	validate_store(tinctures, 'tinctures');
    	component_subscribe($$self, tinctures, $$value => $$invalidate(35, $tinctures = $$value));
    	validate_store(shield, 'shield');
    	component_subscribe($$self, shield, $$value => $$invalidate(12, $shield = $$value));
    	validate_store(colors, 'colors');
    	component_subscribe($$self, colors, $$value => $$invalidate(13, $colors = $$value));
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('UploadVector', slots, ['default']);
    	let dragging = false;
    	let selected = false;
    	let svg;
    	let transform = { a: 1, b: 0, c: 0, d: 1, e: 0, f: 0 };
    	let name;
    	let category = "uploaded";
    	let color = "#d7374a";
    	let source;
    	let license;
    	let author;
    	const tinctureList = ["metals", "colours", "stains"].map(type => Object.keys($tinctures[type])).flat();

    	function updateTransform(transform) {
    		if (!svg) return; // on component load
    		const el = document.createElement("html");
    		el.innerHTML = svg;
    		const g = el.querySelector("g");
    		const transformString = Object.values(transform).join(" ");
    		if (transformString === "1 0 0 1 0 0") g.removeAttribute("transform"); else g.setAttribute("transform", "matrix(" + transformString + ")");
    		$$invalidate(4, svg = g.outerHTML);
    	}

    	const onFile = getFilesFunction => event => {
    		$$invalidate(2, dragging = false);
    		const files = getFilesFunction(event);
    		const file = files.length ? files[0] : [];

    		if (!file.type.match(/text.*|svg.*/)) {
    			message.error($t("error.notSvgOrText"));
    			return;
    		}

    		$$invalidate(3, selected = true);
    		$$invalidate(5, name = camelize(file.name));
    		loadImage(file);
    	};

    	function loadImage(file) {
    		const reader = new FileReader();

    		reader.onload = function (readerEvent) {
    			const svgText = readerEvent.target.result;
    			const el = document.createElement("html");
    			el.innerHTML = svgText;

    			// remove sodipodi and inkscape attributes
    			el.querySelectorAll("*").forEach(el => {
    				const attributes = el.getAttributeNames();

    				attributes.forEach(attr => {
    					if (attr.includes("inkscape") || attr.includes("sodipodi")) el.removeAttribute(attr);
    				});
    			});

    			const g = el.querySelector("g");

    			if (!g) {
    				message.error($t("error.incorrectSvg"));
    				$$invalidate(3, selected = false);
    				return;
    			}

    			const consolidated = g.transform.baseVal.consolidate();

    			if (consolidated) {
    				const { a, b, c, d, e, f } = consolidated.matrix;
    				const fix = n => +n.toFixed(4);

    				$$invalidate(0, transform = Object.assign(transform, {
    					a: fix(a),
    					b: fix(b),
    					c: fix(c),
    					d: fix(d),
    					e: fix(e),
    					f: fix(f)
    				}));
    			}

    			g.removeAttribute("id");
    			$$invalidate(4, svg = g.outerHTML);
    		};

    		reader.readAsText(file);
    	}

    	function addCharge() {
    		const allCharges = Object.keys(charges.types).map(type => Object.keys(charges[type])).flat();
    		$$invalidate(5, name = camelize(name));

    		if (!name || document.getElementById(name) || allCharges.includes(name)) {
    			message.error($t("error.notUniqueName"));
    			return;
    		}

    		if (!charges.types[category]) $$invalidate(1, charges.types[category] = 6, charges);
    		if (!charges.single[category]) $$invalidate(1, charges.single[category] = 6, charges);
    		$$invalidate(1, charges[category][name] = 5, charges);
    		const el = document.createElement("html");
    		el.innerHTML = svg;
    		const image = el.querySelector("g");
    		image.id = name;
    		if (source) image.setAttribute("source", source);
    		if (license) image.setAttribute("license", license);
    		if (author) image.setAttribute("author", author);
    		query("defs").insertAdjacentHTML("beforeend", image.outerHTML);
    		$$invalidate(3, selected = false);
    		set_store_value(state, $state.vector = 0, $state);
    		message.success($t("success.chargeAdded"));
    	}

    	const writable_props = [];

    	Object_1$1.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<UploadVector> was created with unknown prop '${key}'`);
    	});

    	const click_handler = () => set_store_value(state, $state.vector = 0, $state);

    	function textarea_input_handler() {
    		svg = this.value;
    		$$invalidate(4, svg);
    	}

    	function input0_input_handler() {
    		transform.e = to_number(this.value);
    		$$invalidate(0, transform);
    	}

    	function input1_input_handler() {
    		transform.f = to_number(this.value);
    		$$invalidate(0, transform);
    	}

    	function input2_input_handler() {
    		transform.a = to_number(this.value);
    		$$invalidate(0, transform);
    	}

    	function input3_input_handler() {
    		transform.d = to_number(this.value);
    		$$invalidate(0, transform);
    	}

    	function select0_change_handler() {
    		color = select_value(this);
    		$$invalidate(7, color);
    		$$invalidate(14, tinctureList);
    	}

    	function input4_input_handler() {
    		source = this.value;
    		$$invalidate(8, source);
    	}

    	function input5_input_handler() {
    		author = this.value;
    		$$invalidate(10, author);
    	}

    	function licenselist_license_binding(value) {
    		license = value;
    		$$invalidate(9, license);
    	}

    	function input6_input_handler() {
    		name = this.value;
    		$$invalidate(5, name);
    	}

    	function select1_change_handler() {
    		category = select_value(this);
    		$$invalidate(6, category);
    		$$invalidate(1, charges);
    	}

    	const click_handler_1 = () => $$invalidate(3, selected = false);
    	const dragover_handler = () => $$invalidate(2, dragging = true);
    	const dragleave_handler = () => $$invalidate(2, dragging = false);

    	$$self.$$set = $$props => {
    		if ('$$scope' in $$props) $$invalidate(17, $$scope = $$props.$$scope);
    	};

    	$$self.$capture_state = () => ({
    		t: X,
    		LicenseList,
    		state,
    		colors,
    		tinctures,
    		message,
    		shield,
    		charges,
    		shieldPaths,
    		camelize,
    		tooltip,
    		query,
    		dragging,
    		selected,
    		svg,
    		transform,
    		name,
    		category,
    		color,
    		source,
    		license,
    		author,
    		tinctureList,
    		updateTransform,
    		onFile,
    		getFilesFromDropEvent,
    		getFilesFromInputEvent,
    		loadImage,
    		addCharge,
    		downloadTemplate,
    		$t,
    		$state,
    		$tinctures,
    		$shield,
    		$colors
    	});

    	$$self.$inject_state = $$props => {
    		if ('dragging' in $$props) $$invalidate(2, dragging = $$props.dragging);
    		if ('selected' in $$props) $$invalidate(3, selected = $$props.selected);
    		if ('svg' in $$props) $$invalidate(4, svg = $$props.svg);
    		if ('transform' in $$props) $$invalidate(0, transform = $$props.transform);
    		if ('name' in $$props) $$invalidate(5, name = $$props.name);
    		if ('category' in $$props) $$invalidate(6, category = $$props.category);
    		if ('color' in $$props) $$invalidate(7, color = $$props.color);
    		if ('source' in $$props) $$invalidate(8, source = $$props.source);
    		if ('license' in $$props) $$invalidate(9, license = $$props.license);
    		if ('author' in $$props) $$invalidate(10, author = $$props.author);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	$$self.$$.update = () => {
    		if ($$self.$$.dirty[0] & /*transform*/ 1) {
    			updateTransform(transform);
    		}
    	};

    	return [
    		transform,
    		charges,
    		dragging,
    		selected,
    		svg,
    		name,
    		category,
    		color,
    		source,
    		license,
    		author,
    		$state,
    		$shield,
    		$colors,
    		tinctureList,
    		onFile,
    		addCharge,
    		$$scope,
    		slots,
    		click_handler,
    		textarea_input_handler,
    		input0_input_handler,
    		input1_input_handler,
    		input2_input_handler,
    		input3_input_handler,
    		select0_change_handler,
    		input4_input_handler,
    		input5_input_handler,
    		licenselist_license_binding,
    		input6_input_handler,
    		select1_change_handler,
    		click_handler_1,
    		dragover_handler,
    		dragleave_handler
    	];
    }

    class UploadVector extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$3, create_fragment$3, safe_not_equal, {}, null, [-1, -1]);

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "UploadVector",
    			options,
    			id: create_fragment$3.name
    		});
    	}
    }

    function flip(node, { from, to }, params = {}) {
        const style = getComputedStyle(node);
        const transform = style.transform === 'none' ? '' : style.transform;
        const [ox, oy] = style.transformOrigin.split(' ').map(parseFloat);
        const dx = (from.left + from.width * ox / to.width) - (to.left + ox);
        const dy = (from.top + from.height * oy / to.height) - (to.top + oy);
        const { delay = 0, duration = (d) => Math.sqrt(d) * 120, easing = cubicOut } = params;
        return {
            delay,
            duration: is_function(duration) ? duration(Math.sqrt(dx * dx + dy * dy)) : duration,
            easing,
            css: (t, u) => {
                const x = u * dx;
                const y = u * dy;
                const sx = t + u * from.width / to.width;
                const sy = t + u * from.height / to.height;
                return `transform: ${transform} translate(${x}px, ${y}px) scale(${sx}, ${sy});`;
            }
        };
    }

    /* src/components/navigation/Tinctures.svelte generated by Svelte v3.44.2 */

    const { Object: Object_1 } = globals;
    const file$2 = "src/components/navigation/Tinctures.svelte";

    function get_each_context(ctx, list, i) {
    	const child_ctx = ctx.slice();
    	child_ctx[29] = list[i].t;
    	child_ctx[30] = list[i].type;
    	child_ctx[31] = list;
    	child_ctx[32] = i;
    	return child_ctx;
    }

    function get_each_context_1(ctx, list, i) {
    	const child_ctx = ctx.slice();
    	child_ctx[33] = list[i];
    	return child_ctx;
    }

    function get_each_context_2(ctx, list, i) {
    	const child_ctx = ctx.slice();
    	child_ctx[36] = list[i];
    	return child_ctx;
    }

    function get_each_context_3(ctx, list, i) {
    	const child_ctx = ctx.slice();
    	child_ctx[30] = list[i];
    	return child_ctx;
    }

    function get_each_context_4(ctx, list, i) {
    	const child_ctx = ctx.slice();
    	child_ctx[30] = list[i];
    	return child_ctx;
    }

    // (120:10) {#each Object.keys($tinctures.field) as type (type)}
    function create_each_block_4(key_1, ctx) {
    	let th;
    	let t_1_value = /*$t*/ ctx[5](`tinctures.${/*type*/ ctx[30]}`) + "";
    	let t_1;

    	const block = {
    		key: key_1,
    		first: null,
    		c: function create() {
    			th = element("th");
    			t_1 = text(t_1_value);
    			add_location(th, file$2, 120, 12, 3927);
    			this.first = th;
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, th, anchor);
    			append_dev(th, t_1);
    		},
    		p: function update(new_ctx, dirty) {
    			ctx = new_ctx;
    			if (dirty[0] & /*$t, $tinctures*/ 34 && t_1_value !== (t_1_value = /*$t*/ ctx[5](`tinctures.${/*type*/ ctx[30]}`) + "")) set_data_dev(t_1, t_1_value);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(th);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_each_block_4.name,
    		type: "each",
    		source: "(120:10) {#each Object.keys($tinctures.field) as type (type)}",
    		ctx
    	});

    	return block;
    }

    // (129:12) {#each Object.keys($tinctures[element]) as type (type)}
    function create_each_block_3(key_1, ctx) {
    	let td;
    	let input;
    	let input_min_value;
    	let input_value_value;
    	let t0;
    	let span;
    	let t1;
    	let t2_value = /*getTotalChance*/ ctx[3](/*element*/ ctx[36]) + "";
    	let t2;
    	let mounted;
    	let dispose;

    	function change_handler(...args) {
    		return /*change_handler*/ ctx[16](/*element*/ ctx[36], /*type*/ ctx[30], ...args);
    	}

    	const block = {
    		key: key_1,
    		first: null,
    		c: function create() {
    			td = element("td");
    			input = element("input");
    			t0 = space();
    			span = element("span");
    			t1 = text("/ ");
    			t2 = text(t2_value);
    			attr_dev(input, "type", "number");

    			attr_dev(input, "min", input_min_value = /*mandatoryTypes*/ ctx[6].includes(/*type*/ ctx[30])
    			? 1
    			: 0);

    			attr_dev(input, "max", "100");
    			attr_dev(input, "step", "1");
    			input.value = input_value_value = /*$tinctures*/ ctx[1][/*element*/ ctx[36]][/*type*/ ctx[30]];
    			attr_dev(input, "class", "svelte-1hhbgsp");
    			add_location(input, file$2, 130, 16, 4260);
    			attr_dev(span, "class", "totalChance svelte-1hhbgsp");
    			add_location(span, file$2, 138, 16, 4584);
    			attr_dev(td, "class", "svelte-1hhbgsp");
    			add_location(td, file$2, 129, 14, 4239);
    			this.first = td;
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, td, anchor);
    			append_dev(td, input);
    			append_dev(td, t0);
    			append_dev(td, span);
    			append_dev(span, t1);
    			append_dev(span, t2);

    			if (!mounted) {
    				dispose = listen_dev(input, "change", change_handler, false, false, false);
    				mounted = true;
    			}
    		},
    		p: function update(new_ctx, dirty) {
    			ctx = new_ctx;

    			if (dirty[0] & /*$tinctures*/ 2 && input_min_value !== (input_min_value = /*mandatoryTypes*/ ctx[6].includes(/*type*/ ctx[30])
    			? 1
    			: 0)) {
    				attr_dev(input, "min", input_min_value);
    			}

    			if (dirty[0] & /*$tinctures*/ 2 && input_value_value !== (input_value_value = /*$tinctures*/ ctx[1][/*element*/ ctx[36]][/*type*/ ctx[30]])) {
    				prop_dev(input, "value", input_value_value);
    			}

    			if (dirty[0] & /*getTotalChance*/ 8 && t2_value !== (t2_value = /*getTotalChance*/ ctx[3](/*element*/ ctx[36]) + "")) set_data_dev(t2, t2_value);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(td);
    			mounted = false;
    			dispose();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_each_block_3.name,
    		type: "each",
    		source: "(129:12) {#each Object.keys($tinctures[element]) as type (type)}",
    		ctx
    	});

    	return block;
    }

    // (126:8) {#each ["field", "division", "charge"] as element (element)}
    function create_each_block_2(key_1, ctx) {
    	let tr;
    	let td;
    	let t0_value = /*$t*/ ctx[5](`tinctures.${/*element*/ ctx[36]}`) + "";
    	let t0;
    	let t1;
    	let each_blocks = [];
    	let each_1_lookup = new Map();
    	let t2;
    	let each_value_3 = Object.keys(/*$tinctures*/ ctx[1][/*element*/ ctx[36]]);
    	validate_each_argument(each_value_3);
    	const get_key = ctx => /*type*/ ctx[30];
    	validate_each_keys(ctx, each_value_3, get_each_context_3, get_key);

    	for (let i = 0; i < each_value_3.length; i += 1) {
    		let child_ctx = get_each_context_3(ctx, each_value_3, i);
    		let key = get_key(child_ctx);
    		each_1_lookup.set(key, each_blocks[i] = create_each_block_3(key, child_ctx));
    	}

    	const block = {
    		key: key_1,
    		first: null,
    		c: function create() {
    			tr = element("tr");
    			td = element("td");
    			t0 = text(t0_value);
    			t1 = space();

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].c();
    			}

    			t2 = space();
    			attr_dev(td, "class", "svelte-1hhbgsp");
    			add_location(td, file$2, 127, 12, 4119);
    			add_location(tr, file$2, 126, 10, 4102);
    			this.first = tr;
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, tr, anchor);
    			append_dev(tr, td);
    			append_dev(td, t0);
    			append_dev(tr, t1);

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].m(tr, null);
    			}

    			append_dev(tr, t2);
    		},
    		p: function update(new_ctx, dirty) {
    			ctx = new_ctx;
    			if (dirty[0] & /*$t*/ 32 && t0_value !== (t0_value = /*$t*/ ctx[5](`tinctures.${/*element*/ ctx[36]}`) + "")) set_data_dev(t0, t0_value);

    			if (dirty[0] & /*getTotalChance, mandatoryTypes, $tinctures, changeElementChance*/ 202) {
    				each_value_3 = Object.keys(/*$tinctures*/ ctx[1][/*element*/ ctx[36]]);
    				validate_each_argument(each_value_3);
    				validate_each_keys(ctx, each_value_3, get_each_context_3, get_key);
    				each_blocks = update_keyed_each(each_blocks, dirty, get_key, 1, ctx, each_value_3, each_1_lookup, tr, destroy_block, create_each_block_3, t2, get_each_context_3);
    			}
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(tr);

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].d();
    			}
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_each_block_2.name,
    		type: "each",
    		source: "(126:8) {#each [\\\"field\\\", \\\"division\\\", \\\"charge\\\"] as element (element)}",
    		ctx
    	});

    	return block;
    }

    // (151:12) {:else}
    function create_else_block$1(ctx) {
    	let button;
    	let t_1_value = /*$t*/ ctx[5]("tinctures.add") + "";
    	let t_1;
    	let mounted;
    	let dispose;

    	const block = {
    		c: function create() {
    			button = element("button");
    			t_1 = text(t_1_value);
    			add_location(button, file$2, 151, 14, 4951);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, button, anchor);
    			append_dev(button, t_1);

    			if (!mounted) {
    				dispose = listen_dev(button, "click", /*addTincture*/ ctx[10], false, false, false);
    				mounted = true;
    			}
    		},
    		p: function update(ctx, dirty) {
    			if (dirty[0] & /*$t*/ 32 && t_1_value !== (t_1_value = /*$t*/ ctx[5]("tinctures.add") + "")) set_data_dev(t_1, t_1_value);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(button);
    			mounted = false;
    			dispose();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_else_block$1.name,
    		type: "else",
    		source: "(151:12) {:else}",
    		ctx
    	});

    	return block;
    }

    // (149:12) {#if addLine.show}
    function create_if_block_2$1(ctx) {
    	let button;
    	let t_1_value = /*$t*/ ctx[5]("tinctures.apply") + "";
    	let t_1;
    	let mounted;
    	let dispose;

    	const block = {
    		c: function create() {
    			button = element("button");
    			t_1 = text(t_1_value);
    			add_location(button, file$2, 149, 14, 4848);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, button, anchor);
    			append_dev(button, t_1);

    			if (!mounted) {
    				dispose = listen_dev(button, "click", /*applyAddTincture*/ ctx[13], false, false, false);
    				mounted = true;
    			}
    		},
    		p: function update(ctx, dirty) {
    			if (dirty[0] & /*$t*/ 32 && t_1_value !== (t_1_value = /*$t*/ ctx[5]("tinctures.apply") + "")) set_data_dev(t_1, t_1_value);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(button);
    			mounted = false;
    			dispose();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_2$1.name,
    		type: "if",
    		source: "(149:12) {#if addLine.show}",
    		ctx
    	});

    	return block;
    }

    // (167:10) {#each ["name", "type", "color", "chance", "remove"] as header}
    function create_each_block_1(ctx) {
    	let th;
    	let t_1_value = /*$t*/ ctx[5](`tinctures.${/*header*/ ctx[33]}`) + "";
    	let t_1;

    	const block = {
    		c: function create() {
    			th = element("th");
    			t_1 = text(t_1_value);
    			add_location(th, file$2, 167, 12, 5387);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, th, anchor);
    			append_dev(th, t_1);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty[0] & /*$t*/ 32 && t_1_value !== (t_1_value = /*$t*/ ctx[5](`tinctures.${/*header*/ ctx[33]}`) + "")) set_data_dev(t_1, t_1_value);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(th);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_each_block_1.name,
    		type: "each",
    		source: "(167:10) {#each [\\\"name\\\", \\\"type\\\", \\\"color\\\", \\\"chance\\\", \\\"remove\\\"] as header}",
    		ctx
    	});

    	return block;
    }

    // (173:8) {#if addLine.show}
    function create_if_block_1$1(ctx) {
    	let tr;
    	let td0;
    	let input0;
    	let input0_placeholder_value;
    	let t0;
    	let td1;
    	let select;
    	let option0;
    	let t1_value = /*$t*/ ctx[5]("tinctures.metals") + "";
    	let t1;
    	let option1;
    	let t2_value = /*$t*/ ctx[5]("tinctures.colours") + "";
    	let t2;
    	let option2;
    	let t3_value = /*$t*/ ctx[5]("tinctures.stains") + "";
    	let t3;
    	let t4;
    	let td2;
    	let input1;
    	let t5;
    	let td3;
    	let input2;
    	let t6;
    	let td4;
    	let span;
    	let tr_transition;
    	let current;
    	let mounted;
    	let dispose;

    	const block = {
    		c: function create() {
    			tr = element("tr");
    			td0 = element("td");
    			input0 = element("input");
    			t0 = space();
    			td1 = element("td");
    			select = element("select");
    			option0 = element("option");
    			t1 = text(t1_value);
    			option1 = element("option");
    			t2 = text(t2_value);
    			option2 = element("option");
    			t3 = text(t3_value);
    			t4 = space();
    			td2 = element("td");
    			input1 = element("input");
    			t5 = space();
    			td3 = element("td");
    			input2 = element("input");
    			t6 = space();
    			td4 = element("td");
    			span = element("span");
    			span.textContent = "×";
    			attr_dev(input0, "type", "text");
    			attr_dev(input0, "placeholder", input0_placeholder_value = /*$t*/ ctx[5]("tinctures.name"));
    			attr_dev(input0, "class", "svelte-1hhbgsp");
    			add_location(input0, file$2, 175, 14, 5574);
    			attr_dev(td0, "class", "svelte-1hhbgsp");
    			add_location(td0, file$2, 174, 12, 5555);
    			option0.__value = "metals";
    			option0.value = option0.__value;
    			add_location(option0, file$2, 179, 16, 5757);
    			option1.__value = "colours";
    			option1.value = option1.__value;
    			add_location(option1, file$2, 180, 16, 5830);
    			option2.__value = "stains";
    			option2.value = option2.__value;
    			add_location(option2, file$2, 181, 16, 5905);
    			attr_dev(select, "class", "svelte-1hhbgsp");
    			if (/*addLine*/ ctx[2].type === void 0) add_render_callback(() => /*select_change_handler*/ ctx[18].call(select));
    			add_location(select, file$2, 178, 14, 5706);
    			attr_dev(td1, "class", "svelte-1hhbgsp");
    			add_location(td1, file$2, 177, 12, 5687);
    			attr_dev(input1, "type", "color");
    			attr_dev(input1, "class", "svelte-1hhbgsp");
    			add_location(input1, file$2, 185, 14, 6035);
    			attr_dev(td2, "class", "svelte-1hhbgsp");
    			add_location(td2, file$2, 184, 12, 6016);
    			attr_dev(input2, "type", "number");
    			attr_dev(input2, "min", "0");
    			attr_dev(input2, "max", "100");
    			attr_dev(input2, "step", "1");
    			attr_dev(input2, "class", "svelte-1hhbgsp");
    			add_location(input2, file$2, 188, 14, 6134);
    			attr_dev(td3, "class", "svelte-1hhbgsp");
    			add_location(td3, file$2, 187, 12, 6115);
    			attr_dev(span, "class", "actionButton svelte-1hhbgsp");
    			add_location(span, file$2, 191, 14, 6262);
    			attr_dev(td4, "class", "svelte-1hhbgsp");
    			add_location(td4, file$2, 190, 12, 6243);
    			add_location(tr, file$2, 173, 10, 5522);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, tr, anchor);
    			append_dev(tr, td0);
    			append_dev(td0, input0);
    			set_input_value(input0, /*addLine*/ ctx[2].name);
    			append_dev(tr, t0);
    			append_dev(tr, td1);
    			append_dev(td1, select);
    			append_dev(select, option0);
    			append_dev(option0, t1);
    			append_dev(select, option1);
    			append_dev(option1, t2);
    			append_dev(select, option2);
    			append_dev(option2, t3);
    			select_option(select, /*addLine*/ ctx[2].type);
    			append_dev(tr, t4);
    			append_dev(tr, td2);
    			append_dev(td2, input1);
    			set_input_value(input1, /*addLine*/ ctx[2].color);
    			append_dev(tr, t5);
    			append_dev(tr, td3);
    			append_dev(td3, input2);
    			set_input_value(input2, /*addLine*/ ctx[2].chance);
    			append_dev(tr, t6);
    			append_dev(tr, td4);
    			append_dev(td4, span);
    			current = true;

    			if (!mounted) {
    				dispose = [
    					listen_dev(input0, "input", /*input0_input_handler*/ ctx[17]),
    					listen_dev(select, "change", /*select_change_handler*/ ctx[18]),
    					listen_dev(input1, "input", /*input1_input_handler*/ ctx[19]),
    					listen_dev(input2, "input", /*input2_input_handler*/ ctx[20]),
    					listen_dev(span, "click", /*cancelAddTincture*/ ctx[11], false, false, false)
    				];

    				mounted = true;
    			}
    		},
    		p: function update(ctx, dirty) {
    			if (!current || dirty[0] & /*$t*/ 32 && input0_placeholder_value !== (input0_placeholder_value = /*$t*/ ctx[5]("tinctures.name"))) {
    				attr_dev(input0, "placeholder", input0_placeholder_value);
    			}

    			if (dirty[0] & /*addLine*/ 4 && input0.value !== /*addLine*/ ctx[2].name) {
    				set_input_value(input0, /*addLine*/ ctx[2].name);
    			}

    			if ((!current || dirty[0] & /*$t*/ 32) && t1_value !== (t1_value = /*$t*/ ctx[5]("tinctures.metals") + "")) set_data_dev(t1, t1_value);
    			if ((!current || dirty[0] & /*$t*/ 32) && t2_value !== (t2_value = /*$t*/ ctx[5]("tinctures.colours") + "")) set_data_dev(t2, t2_value);
    			if ((!current || dirty[0] & /*$t*/ 32) && t3_value !== (t3_value = /*$t*/ ctx[5]("tinctures.stains") + "")) set_data_dev(t3, t3_value);

    			if (dirty[0] & /*addLine*/ 4) {
    				select_option(select, /*addLine*/ ctx[2].type);
    			}

    			if (dirty[0] & /*addLine*/ 4) {
    				set_input_value(input1, /*addLine*/ ctx[2].color);
    			}

    			if (dirty[0] & /*addLine*/ 4 && to_number(input2.value) !== /*addLine*/ ctx[2].chance) {
    				set_input_value(input2, /*addLine*/ ctx[2].chance);
    			}
    		},
    		i: function intro(local) {
    			if (current) return;

    			add_render_callback(() => {
    				if (!tr_transition) tr_transition = create_bidirectional_transition(tr, fade, {}, true);
    				tr_transition.run(1);
    			});

    			current = true;
    		},
    		o: function outro(local) {
    			if (!tr_transition) tr_transition = create_bidirectional_transition(tr, fade, {}, false);
    			tr_transition.run(0);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(tr);
    			if (detaching && tr_transition) tr_transition.end();
    			mounted = false;
    			run_all(dispose);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_1$1.name,
    		type: "if",
    		source: "(173:8) {#if addLine.show}",
    		ctx
    	});

    	return block;
    }

    // (202:14) {#if DEFAULT_COLORS[tinctureName] && $colors[tinctureName] !== DEFAULT_COLORS[tinctureName]}
    function create_if_block$1(ctx) {
    	let svg;
    	let use;
    	let svg_data_tooltip_value;
    	let mounted;
    	let dispose;

    	function click_handler() {
    		return /*click_handler*/ ctx[22](/*tinctureName*/ ctx[29]);
    	}

    	const block = {
    		c: function create() {
    			svg = svg_element("svg");
    			use = svg_element("use");
    			attr_dev(use, "href", "#undo-icon");
    			add_location(use, file$2, 209, 18, 7123);
    			attr_dev(svg, "width", "12");
    			attr_dev(svg, "height", "12");
    			attr_dev(svg, "data-tooltip", svg_data_tooltip_value = /*$t*/ ctx[5]("tooltip.undoColorChange"));
    			attr_dev(svg, "class", "svelte-1hhbgsp");
    			add_location(svg, file$2, 202, 16, 6840);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, svg, anchor);
    			append_dev(svg, use);

    			if (!mounted) {
    				dispose = [
    					listen_dev(svg, "click", click_handler, false, false, false),
    					action_destroyer(tooltip.call(null, svg))
    				];

    				mounted = true;
    			}
    		},
    		p: function update(new_ctx, dirty) {
    			ctx = new_ctx;

    			if (dirty[0] & /*$t*/ 32 && svg_data_tooltip_value !== (svg_data_tooltip_value = /*$t*/ ctx[5]("tooltip.undoColorChange"))) {
    				attr_dev(svg, "data-tooltip", svg_data_tooltip_value);
    			}
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(svg);
    			mounted = false;
    			run_all(dispose);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block$1.name,
    		type: "if",
    		source: "(202:14) {#if DEFAULT_COLORS[tinctureName] && $colors[tinctureName] !== DEFAULT_COLORS[tinctureName]}",
    		ctx
    	});

    	return block;
    }

    // (196:8) {#each tData as { t: tinctureName, type }
    function create_each_block(key_1, ctx) {
    	let tr;
    	let td0;
    	let t0_value = /*getTinctureName*/ ctx[15](/*tinctureName*/ ctx[29]) + "";
    	let t0;
    	let t1;
    	let td1;
    	let t2_value = /*$t*/ ctx[5](`tinctures.${/*type*/ ctx[30]}`) + "";
    	let t2;
    	let t3;
    	let td2;
    	let input0;
    	let input0_data_tooltip_value;
    	let t4;
    	let t5;
    	let td3;
    	let input1;
    	let input1_value_value;
    	let t6;
    	let span0;
    	let t7;
    	let t8_value = /*getTotalChance*/ ctx[3](/*type*/ ctx[30]) + "";
    	let t8;
    	let t9;
    	let td4;
    	let span1;
    	let t11;
    	let rect;
    	let stop_animation = noop;
    	let mounted;
    	let dispose;

    	function input0_input_handler_1() {
    		/*input0_input_handler_1*/ ctx[21].call(input0, /*tinctureName*/ ctx[29]);
    	}

    	let if_block = DEFAULT_COLORS[/*tinctureName*/ ctx[29]] && /*$colors*/ ctx[0][/*tinctureName*/ ctx[29]] !== DEFAULT_COLORS[/*tinctureName*/ ctx[29]] && create_if_block$1(ctx);

    	function change_handler_1(...args) {
    		return /*change_handler_1*/ ctx[23](/*type*/ ctx[30], /*tinctureName*/ ctx[29], ...args);
    	}

    	function click_handler_1() {
    		return /*click_handler_1*/ ctx[24](/*tinctureName*/ ctx[29], /*type*/ ctx[30]);
    	}

    	const block = {
    		key: key_1,
    		first: null,
    		c: function create() {
    			tr = element("tr");
    			td0 = element("td");
    			t0 = text(t0_value);
    			t1 = space();
    			td1 = element("td");
    			t2 = text(t2_value);
    			t3 = space();
    			td2 = element("td");
    			input0 = element("input");
    			t4 = space();
    			if (if_block) if_block.c();
    			t5 = space();
    			td3 = element("td");
    			input1 = element("input");
    			t6 = space();
    			span0 = element("span");
    			t7 = text("/ ");
    			t8 = text(t8_value);
    			t9 = space();
    			td4 = element("td");
    			span1 = element("span");
    			span1.textContent = "×";
    			t11 = space();
    			attr_dev(td0, "class", "svelte-1hhbgsp");
    			add_location(td0, file$2, 197, 12, 6487);
    			attr_dev(td1, "class", "svelte-1hhbgsp");
    			add_location(td1, file$2, 198, 12, 6540);
    			attr_dev(input0, "type", "color");
    			attr_dev(input0, "data-tooltip", input0_data_tooltip_value = /*$t*/ ctx[5]("tooltip.changeColor"));
    			attr_dev(input0, "class", "svelte-1hhbgsp");
    			add_location(input0, file$2, 200, 14, 6606);
    			attr_dev(td2, "class", "svelte-1hhbgsp");
    			add_location(td2, file$2, 199, 12, 6587);
    			attr_dev(input1, "type", "number");
    			attr_dev(input1, "min", "0");
    			attr_dev(input1, "max", "100");
    			attr_dev(input1, "step", "1");
    			input1.value = input1_value_value = /*$tinctures*/ ctx[1][/*type*/ ctx[30]][/*tinctureName*/ ctx[29]];
    			attr_dev(input1, "class", "svelte-1hhbgsp");
    			add_location(input1, file$2, 214, 14, 7241);
    			attr_dev(span0, "class", "totalChance svelte-1hhbgsp");
    			add_location(span0, file$2, 222, 14, 7524);
    			attr_dev(td3, "class", "svelte-1hhbgsp");
    			add_location(td3, file$2, 213, 12, 7222);
    			attr_dev(span1, "class", "actionButton svelte-1hhbgsp");
    			add_location(span1, file$2, 225, 14, 7631);
    			attr_dev(td4, "class", "svelte-1hhbgsp");
    			add_location(td4, file$2, 224, 12, 7612);
    			add_location(tr, file$2, 196, 10, 6457);
    			this.first = tr;
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, tr, anchor);
    			append_dev(tr, td0);
    			append_dev(td0, t0);
    			append_dev(tr, t1);
    			append_dev(tr, td1);
    			append_dev(td1, t2);
    			append_dev(tr, t3);
    			append_dev(tr, td2);
    			append_dev(td2, input0);
    			set_input_value(input0, /*$colors*/ ctx[0][/*tinctureName*/ ctx[29]]);
    			append_dev(td2, t4);
    			if (if_block) if_block.m(td2, null);
    			append_dev(tr, t5);
    			append_dev(tr, td3);
    			append_dev(td3, input1);
    			append_dev(td3, t6);
    			append_dev(td3, span0);
    			append_dev(span0, t7);
    			append_dev(span0, t8);
    			append_dev(tr, t9);
    			append_dev(tr, td4);
    			append_dev(td4, span1);
    			append_dev(tr, t11);

    			if (!mounted) {
    				dispose = [
    					listen_dev(input0, "input", input0_input_handler_1),
    					action_destroyer(tooltip.call(null, input0)),
    					listen_dev(input1, "change", change_handler_1, false, false, false),
    					listen_dev(span1, "click", click_handler_1, false, false, false)
    				];

    				mounted = true;
    			}
    		},
    		p: function update(new_ctx, dirty) {
    			ctx = new_ctx;
    			if (dirty[0] & /*tData*/ 16 && t0_value !== (t0_value = /*getTinctureName*/ ctx[15](/*tinctureName*/ ctx[29]) + "")) set_data_dev(t0, t0_value);
    			if (dirty[0] & /*$t, tData*/ 48 && t2_value !== (t2_value = /*$t*/ ctx[5](`tinctures.${/*type*/ ctx[30]}`) + "")) set_data_dev(t2, t2_value);

    			if (dirty[0] & /*$t*/ 32 && input0_data_tooltip_value !== (input0_data_tooltip_value = /*$t*/ ctx[5]("tooltip.changeColor"))) {
    				attr_dev(input0, "data-tooltip", input0_data_tooltip_value);
    			}

    			if (dirty[0] & /*$colors, tData*/ 17) {
    				set_input_value(input0, /*$colors*/ ctx[0][/*tinctureName*/ ctx[29]]);
    			}

    			if (DEFAULT_COLORS[/*tinctureName*/ ctx[29]] && /*$colors*/ ctx[0][/*tinctureName*/ ctx[29]] !== DEFAULT_COLORS[/*tinctureName*/ ctx[29]]) {
    				if (if_block) {
    					if_block.p(ctx, dirty);
    				} else {
    					if_block = create_if_block$1(ctx);
    					if_block.c();
    					if_block.m(td2, null);
    				}
    			} else if (if_block) {
    				if_block.d(1);
    				if_block = null;
    			}

    			if (dirty[0] & /*$tinctures, tData*/ 18 && input1_value_value !== (input1_value_value = /*$tinctures*/ ctx[1][/*type*/ ctx[30]][/*tinctureName*/ ctx[29]])) {
    				prop_dev(input1, "value", input1_value_value);
    			}

    			if (dirty[0] & /*getTotalChance, tData*/ 24 && t8_value !== (t8_value = /*getTotalChance*/ ctx[3](/*type*/ ctx[30]) + "")) set_data_dev(t8, t8_value);
    		},
    		r: function measure() {
    			rect = tr.getBoundingClientRect();
    		},
    		f: function fix() {
    			fix_position(tr);
    			stop_animation();
    		},
    		a: function animate() {
    			stop_animation();
    			stop_animation = create_animation(tr, rect, flip, {});
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(tr);
    			if (if_block) if_block.d();
    			mounted = false;
    			run_all(dispose);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_each_block.name,
    		type: "each",
    		source: "(196:8) {#each tData as { t: tinctureName, type }",
    		ctx
    	});

    	return block;
    }

    function create_fragment$2(ctx) {
    	let div2;
    	let span;
    	let t1;
    	let div0;
    	let table0;
    	let thead0;
    	let tr0;
    	let th;
    	let t2;
    	let each_blocks_3 = [];
    	let each0_lookup = new Map();
    	let t3;
    	let tbody0;
    	let each_blocks_2 = [];
    	let each1_lookup = new Map();
    	let t4;
    	let tfoot;
    	let tr1;
    	let td0;
    	let t5;
    	let td1;
    	let t6;
    	let td2;
    	let button;
    	let t7_value = /*$t*/ ctx[5]("tinctures.restore") + "";
    	let t7;
    	let t8;
    	let div1;
    	let table1;
    	let thead1;
    	let tr2;
    	let t9;
    	let tbody1;
    	let t10;
    	let each_blocks = [];
    	let each3_lookup = new Map();
    	let div2_transition;
    	let current;
    	let mounted;
    	let dispose;
    	let each_value_4 = Object.keys(/*$tinctures*/ ctx[1].field);
    	validate_each_argument(each_value_4);
    	const get_key = ctx => /*type*/ ctx[30];
    	validate_each_keys(ctx, each_value_4, get_each_context_4, get_key);

    	for (let i = 0; i < each_value_4.length; i += 1) {
    		let child_ctx = get_each_context_4(ctx, each_value_4, i);
    		let key = get_key(child_ctx);
    		each0_lookup.set(key, each_blocks_3[i] = create_each_block_4(key, child_ctx));
    	}

    	let each_value_2 = ["field", "division", "charge"];
    	validate_each_argument(each_value_2);
    	const get_key_1 = ctx => /*element*/ ctx[36];
    	validate_each_keys(ctx, each_value_2, get_each_context_2, get_key_1);

    	for (let i = 0; i < 3; i += 1) {
    		let child_ctx = get_each_context_2(ctx, each_value_2, i);
    		let key = get_key_1(child_ctx);
    		each1_lookup.set(key, each_blocks_2[i] = create_each_block_2(key, child_ctx));
    	}

    	function select_block_type(ctx, dirty) {
    		if (/*addLine*/ ctx[2].show) return create_if_block_2$1;
    		return create_else_block$1;
    	}

    	let current_block_type = select_block_type(ctx);
    	let if_block0 = current_block_type(ctx);
    	let each_value_1 = ["name", "type", "color", "chance", "remove"];
    	validate_each_argument(each_value_1);
    	let each_blocks_1 = [];

    	for (let i = 0; i < 5; i += 1) {
    		each_blocks_1[i] = create_each_block_1(get_each_context_1(ctx, each_value_1, i));
    	}

    	let if_block1 = /*addLine*/ ctx[2].show && create_if_block_1$1(ctx);
    	let each_value = /*tData*/ ctx[4];
    	validate_each_argument(each_value);
    	const get_key_2 = ctx => /*tinctureName*/ ctx[29];
    	validate_each_keys(ctx, each_value, get_each_context, get_key_2);

    	for (let i = 0; i < each_value.length; i += 1) {
    		let child_ctx = get_each_context(ctx, each_value, i);
    		let key = get_key_2(child_ctx);
    		each3_lookup.set(key, each_blocks[i] = create_each_block(key, child_ctx));
    	}

    	const block = {
    		c: function create() {
    			div2 = element("div");
    			span = element("span");
    			span.textContent = "×";
    			t1 = space();
    			div0 = element("div");
    			table0 = element("table");
    			thead0 = element("thead");
    			tr0 = element("tr");
    			th = element("th");
    			t2 = space();

    			for (let i = 0; i < each_blocks_3.length; i += 1) {
    				each_blocks_3[i].c();
    			}

    			t3 = space();
    			tbody0 = element("tbody");

    			for (let i = 0; i < 3; i += 1) {
    				each_blocks_2[i].c();
    			}

    			t4 = space();
    			tfoot = element("tfoot");
    			tr1 = element("tr");
    			td0 = element("td");
    			t5 = space();
    			td1 = element("td");
    			if_block0.c();
    			t6 = space();
    			td2 = element("td");
    			button = element("button");
    			t7 = text(t7_value);
    			t8 = space();
    			div1 = element("div");
    			table1 = element("table");
    			thead1 = element("thead");
    			tr2 = element("tr");

    			for (let i = 0; i < 5; i += 1) {
    				each_blocks_1[i].c();
    			}

    			t9 = space();
    			tbody1 = element("tbody");
    			if (if_block1) if_block1.c();
    			t10 = space();

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].c();
    			}

    			attr_dev(span, "class", "close svelte-1hhbgsp");
    			add_location(span, file$2, 112, 2, 3710);
    			add_location(th, file$2, 118, 10, 3845);
    			add_location(tr0, file$2, 117, 8, 3830);
    			add_location(thead0, file$2, 116, 6, 3814);
    			add_location(tbody0, file$2, 124, 6, 4015);
    			attr_dev(td0, "class", "svelte-1hhbgsp");
    			add_location(td0, file$2, 146, 10, 4769);
    			attr_dev(td1, "colspan", "2");
    			attr_dev(td1, "class", "svelte-1hhbgsp");
    			add_location(td1, file$2, 147, 10, 4786);
    			add_location(button, file$2, 155, 12, 5086);
    			attr_dev(td2, "colspan", "2");
    			attr_dev(td2, "class", "svelte-1hhbgsp");
    			add_location(td2, file$2, 154, 10, 5057);
    			add_location(tr1, file$2, 145, 8, 4754);
    			attr_dev(tfoot, "class", "svelte-1hhbgsp");
    			add_location(tfoot, file$2, 144, 6, 4738);
    			attr_dev(table0, "class", "svelte-1hhbgsp");
    			add_location(table0, file$2, 115, 4, 3800);
    			attr_dev(div0, "id", "left");
    			add_location(div0, file$2, 114, 2, 3780);
    			add_location(tr2, file$2, 165, 8, 5296);
    			add_location(thead1, file$2, 164, 6, 5280);
    			add_location(tbody1, file$2, 171, 6, 5477);
    			attr_dev(table1, "id", "tincturesTable");
    			attr_dev(table1, "class", "svelte-1hhbgsp");
    			add_location(table1, file$2, 163, 4, 5246);
    			attr_dev(div1, "id", "right");
    			add_location(div1, file$2, 162, 2, 5225);
    			attr_dev(div2, "id", "tinctures");
    			attr_dev(div2, "class", "svelte-1hhbgsp");
    			add_location(div2, file$2, 111, 0, 3665);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div2, anchor);
    			append_dev(div2, span);
    			append_dev(div2, t1);
    			append_dev(div2, div0);
    			append_dev(div0, table0);
    			append_dev(table0, thead0);
    			append_dev(thead0, tr0);
    			append_dev(tr0, th);
    			append_dev(tr0, t2);

    			for (let i = 0; i < each_blocks_3.length; i += 1) {
    				each_blocks_3[i].m(tr0, null);
    			}

    			append_dev(table0, t3);
    			append_dev(table0, tbody0);

    			for (let i = 0; i < 3; i += 1) {
    				each_blocks_2[i].m(tbody0, null);
    			}

    			append_dev(table0, t4);
    			append_dev(table0, tfoot);
    			append_dev(tfoot, tr1);
    			append_dev(tr1, td0);
    			append_dev(tr1, t5);
    			append_dev(tr1, td1);
    			if_block0.m(td1, null);
    			append_dev(tr1, t6);
    			append_dev(tr1, td2);
    			append_dev(td2, button);
    			append_dev(button, t7);
    			append_dev(div2, t8);
    			append_dev(div2, div1);
    			append_dev(div1, table1);
    			append_dev(table1, thead1);
    			append_dev(thead1, tr2);

    			for (let i = 0; i < 5; i += 1) {
    				each_blocks_1[i].m(tr2, null);
    			}

    			append_dev(table1, t9);
    			append_dev(table1, tbody1);
    			if (if_block1) if_block1.m(tbody1, null);
    			append_dev(tbody1, t10);

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].m(tbody1, null);
    			}

    			current = true;

    			if (!mounted) {
    				dispose = [
    					listen_dev(span, "click", /*closeTincturesScreen*/ ctx[12], false, false, false),
    					listen_dev(button, "click", /*restoreDefault*/ ctx[14], false, false, false)
    				];

    				mounted = true;
    			}
    		},
    		p: function update(ctx, dirty) {
    			if (dirty[0] & /*$t, $tinctures*/ 34) {
    				each_value_4 = Object.keys(/*$tinctures*/ ctx[1].field);
    				validate_each_argument(each_value_4);
    				validate_each_keys(ctx, each_value_4, get_each_context_4, get_key);
    				each_blocks_3 = update_keyed_each(each_blocks_3, dirty, get_key, 1, ctx, each_value_4, each0_lookup, tr0, destroy_block, create_each_block_4, null, get_each_context_4);
    			}

    			if (dirty[0] & /*$tinctures, getTotalChance, mandatoryTypes, changeElementChance, $t*/ 234) {
    				each_value_2 = ["field", "division", "charge"];
    				validate_each_argument(each_value_2);
    				validate_each_keys(ctx, each_value_2, get_each_context_2, get_key_1);
    				each_blocks_2 = update_keyed_each(each_blocks_2, dirty, get_key_1, 1, ctx, each_value_2, each1_lookup, tbody0, destroy_block, create_each_block_2, null, get_each_context_2);
    			}

    			if (current_block_type === (current_block_type = select_block_type(ctx)) && if_block0) {
    				if_block0.p(ctx, dirty);
    			} else {
    				if_block0.d(1);
    				if_block0 = current_block_type(ctx);

    				if (if_block0) {
    					if_block0.c();
    					if_block0.m(td1, null);
    				}
    			}

    			if ((!current || dirty[0] & /*$t*/ 32) && t7_value !== (t7_value = /*$t*/ ctx[5]("tinctures.restore") + "")) set_data_dev(t7, t7_value);

    			if (dirty[0] & /*$t*/ 32) {
    				each_value_1 = ["name", "type", "color", "chance", "remove"];
    				validate_each_argument(each_value_1);
    				let i;

    				for (i = 0; i < 5; i += 1) {
    					const child_ctx = get_each_context_1(ctx, each_value_1, i);

    					if (each_blocks_1[i]) {
    						each_blocks_1[i].p(child_ctx, dirty);
    					} else {
    						each_blocks_1[i] = create_each_block_1(child_ctx);
    						each_blocks_1[i].c();
    						each_blocks_1[i].m(tr2, null);
    					}
    				}

    				for (; i < 5; i += 1) {
    					each_blocks_1[i].d(1);
    				}
    			}

    			if (/*addLine*/ ctx[2].show) {
    				if (if_block1) {
    					if_block1.p(ctx, dirty);

    					if (dirty[0] & /*addLine*/ 4) {
    						transition_in(if_block1, 1);
    					}
    				} else {
    					if_block1 = create_if_block_1$1(ctx);
    					if_block1.c();
    					transition_in(if_block1, 1);
    					if_block1.m(tbody1, t10);
    				}
    			} else if (if_block1) {
    				group_outros();

    				transition_out(if_block1, 1, 1, () => {
    					if_block1 = null;
    				});

    				check_outros();
    			}

    			if (dirty[0] & /*removeTincture, tData, getTotalChance, $tinctures, changeTinctureChance, $t, $colors, getTinctureName*/ 33595) {
    				each_value = /*tData*/ ctx[4];
    				validate_each_argument(each_value);
    				for (let i = 0; i < each_blocks.length; i += 1) each_blocks[i].r();
    				validate_each_keys(ctx, each_value, get_each_context, get_key_2);
    				each_blocks = update_keyed_each(each_blocks, dirty, get_key_2, 1, ctx, each_value, each3_lookup, tbody1, fix_and_destroy_block, create_each_block, null, get_each_context);
    				for (let i = 0; i < each_blocks.length; i += 1) each_blocks[i].a();
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(if_block1);

    			if (local) {
    				add_render_callback(() => {
    					if (!div2_transition) div2_transition = create_bidirectional_transition(div2, fade, {}, true);
    					div2_transition.run(1);
    				});
    			}

    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(if_block1);

    			if (local) {
    				if (!div2_transition) div2_transition = create_bidirectional_transition(div2, fade, {}, false);
    				div2_transition.run(0);
    			}

    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div2);

    			for (let i = 0; i < each_blocks_3.length; i += 1) {
    				each_blocks_3[i].d();
    			}

    			for (let i = 0; i < 3; i += 1) {
    				each_blocks_2[i].d();
    			}

    			if_block0.d();
    			destroy_each(each_blocks_1, detaching);
    			if (if_block1) if_block1.d();

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].d();
    			}

    			if (detaching && div2_transition) div2_transition.end();
    			mounted = false;
    			run_all(dispose);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$2.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$2($$self, $$props, $$invalidate) {
    	let tData;
    	let getTotalChance;
    	let $t;
    	let $colors;
    	let $tinctures;
    	let $state;
    	validate_store(X, 't');
    	component_subscribe($$self, X, $$value => $$invalidate(5, $t = $$value));
    	validate_store(colors, 'colors');
    	component_subscribe($$self, colors, $$value => $$invalidate(0, $colors = $$value));
    	validate_store(tinctures, 'tinctures');
    	component_subscribe($$self, tinctures, $$value => $$invalidate(1, $tinctures = $$value));
    	validate_store(state, 'state');
    	component_subscribe($$self, state, $$value => $$invalidate(26, $state = $$value));
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('Tinctures', slots, []);

    	const addLine = {
    		show: false,
    		name: "",
    		type: "colours",
    		color: "#96C8FA",
    		chance: 3
    	};

    	const mandatoryTypes = ["metals", "colours"];

    	// remove stored weighted array
    	for (const key in $tinctures) {
    		delete $tinctures[key].array;
    	}

    	const types = ["metals", "colours", "stains"];

    	// don't lock options on load
    	let loaded = [];

    	function lock(key, value) {
    		if (loaded.includes(key)) localStorage.setItem(key, JSON.stringify(value)); else loaded.push(key);
    	}

    	function changeElementChance(element, type, event) {
    		const target = event.target;
    		const newValue = +target.value;
    		const min = +target.min;

    		if (isNaN(newValue)) {
    			message.error($t("error.mustBeNumber"));
    			return;
    		}

    		if (newValue < min) {
    			message.error($t("error.valueCannotBeThatLow"));
    			target.value = String(min);
    			return;
    		}

    		set_store_value(tinctures, $tinctures[element][type] = newValue, $tinctures);
    	}

    	function changeTinctureChance(type, tinctureName, event) {
    		const target = event.target;
    		const newValue = +target.value;

    		if (isNaN(newValue)) {
    			message.error($t("error.mustBeNumber"));
    			return;
    		}

    		if (newValue < 1) {
    			const typeTinctures = { ...$tinctures[type] };
    			typeTinctures[tinctureName] = 0;
    			const totalChance = Object.values(typeTinctures).reduce((a, b) => a + b, 0);

    			if (totalChance < 1) {
    				message.error($t("error.totalChanceMustNotBeZero"));
    				target.value = String(1);
    				return;
    			}
    		}

    		set_store_value(tinctures, $tinctures[type][tinctureName] = newValue, $tinctures);
    	}

    	function removeTincture(tinctureName, type) {
    		if (type === "metals" || type === "colours") {
    			const typeItems = Object.keys($tinctures[type]);

    			if (typeItems.length < 3) {
    				message.error($t("error.tinctureRemove"));
    				return;
    			}
    		}

    		delete $tinctures[type][tinctureName];
    		tinctures.set($tinctures);
    	}

    	function addTincture() {
    		$$invalidate(2, addLine.show = true, addLine);
    		message.info($t("info.tipAddTincture"), 8000);
    	}

    	function cancelAddTincture() {
    		$$invalidate(2, addLine.show = false, addLine);
    	}

    	function closeTincturesScreen() {
    		set_store_value(state, $state.tinctures = 0, $state);
    	}

    	function applyAddTincture() {
    		const name = camelize(addLine.name);

    		if (!name || $colors[name]) {
    			message.error($t("error.nonUniqueTincture"));
    			return;
    		}

    		set_store_value(tinctures, $tinctures[addLine.type][name] = addLine.chance, $tinctures);
    		set_store_value(colors, $colors[name] = addLine.color, $colors);
    		$$invalidate(2, addLine.show = false, addLine);
    		$$invalidate(2, addLine.name = "", addLine);
    		message.info($t("success.tinctureAdded"));
    	}

    	function restoreDefault() {
    		set_store_value(tinctures, $tinctures = JSON.parse(JSON.stringify(DEFAULT_TINCTURES)), $tinctures);
    		set_store_value(colors, $colors = JSON.parse(JSON.stringify(DEFAULT_COLORS)), $colors);
    		localStorage.removeItem("tinctures");
    		localStorage.removeItem("colors");
    		loaded = [];
    		message.info($t("info.restoredDefaults"));
    	}

    	function getTinctureName(tinctureName) {
    		const translated = $t(`tinctures.${tinctureName}`);

    		return translated.startsWith("tinctures.")
    		? tinctureName
    		: translated;
    	}

    	const writable_props = [];

    	Object_1.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<Tinctures> was created with unknown prop '${key}'`);
    	});

    	const change_handler = (element, type, event) => changeElementChance(element, type, event);

    	function input0_input_handler() {
    		addLine.name = this.value;
    		$$invalidate(2, addLine);
    	}

    	function select_change_handler() {
    		addLine.type = select_value(this);
    		$$invalidate(2, addLine);
    	}

    	function input1_input_handler() {
    		addLine.color = this.value;
    		$$invalidate(2, addLine);
    	}

    	function input2_input_handler() {
    		addLine.chance = to_number(this.value);
    		$$invalidate(2, addLine);
    	}

    	function input0_input_handler_1(tinctureName) {
    		$colors[tinctureName] = this.value;
    		colors.set($colors);
    		($$invalidate(4, tData), $$invalidate(1, $tinctures));
    	}

    	const click_handler = tinctureName => set_store_value(colors, $colors[tinctureName] = DEFAULT_COLORS[tinctureName], $colors);
    	const change_handler_1 = (type, tinctureName, event) => changeTinctureChance(type, tinctureName, event);
    	const click_handler_1 = (tinctureName, type) => removeTincture(tinctureName, type);

    	$$self.$capture_state = () => ({
    		t: X,
    		fade,
    		flip,
    		colors,
    		tinctures,
    		state,
    		message,
    		camelize,
    		tooltip,
    		DEFAULT_COLORS,
    		DEFAULT_TINCTURES,
    		addLine,
    		mandatoryTypes,
    		types,
    		loaded,
    		lock,
    		changeElementChance,
    		changeTinctureChance,
    		removeTincture,
    		addTincture,
    		cancelAddTincture,
    		closeTincturesScreen,
    		applyAddTincture,
    		restoreDefault,
    		getTinctureName,
    		getTotalChance,
    		tData,
    		$t,
    		$colors,
    		$tinctures,
    		$state
    	});

    	$$self.$inject_state = $$props => {
    		if ('loaded' in $$props) loaded = $$props.loaded;
    		if ('getTotalChance' in $$props) $$invalidate(3, getTotalChance = $$props.getTotalChance);
    		if ('tData' in $$props) $$invalidate(4, tData = $$props.tData);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	$$self.$$.update = () => {
    		if ($$self.$$.dirty[0] & /*$tinctures*/ 2) {
    			$$invalidate(4, tData = types.map(type => Object.keys($tinctures[type]).map(tincture => ({ t: tincture, type }))).flat());
    		}

    		if ($$self.$$.dirty[0] & /*$tinctures*/ 2) {
    			lock("tinctures", $tinctures);
    		}

    		if ($$self.$$.dirty[0] & /*$colors*/ 1) {
    			lock("colors", $colors);
    		}

    		if ($$self.$$.dirty[0] & /*$tinctures*/ 2) {
    			$$invalidate(3, getTotalChance = type => {
    				const chances = Object.values($tinctures[type]);
    				return chances.reduce((a, b) => a + b, 0);
    			});
    		}
    	};

    	return [
    		$colors,
    		$tinctures,
    		addLine,
    		getTotalChance,
    		tData,
    		$t,
    		mandatoryTypes,
    		changeElementChance,
    		changeTinctureChance,
    		removeTincture,
    		addTincture,
    		cancelAddTincture,
    		closeTincturesScreen,
    		applyAddTincture,
    		restoreDefault,
    		getTinctureName,
    		change_handler,
    		input0_input_handler,
    		select_change_handler,
    		input1_input_handler,
    		input2_input_handler,
    		input0_input_handler_1,
    		click_handler,
    		change_handler_1,
    		click_handler_1
    	];
    }

    class Tinctures extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$2, create_fragment$2, safe_not_equal, {}, null, [-1, -1]);

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Tinctures",
    			options,
    			id: create_fragment$2.name
    		});
    	}
    }

    /* src/components/Message.svelte generated by Svelte v3.44.2 */
    const file$1 = "src/components/Message.svelte";

    function create_fragment$1(ctx) {
    	let div;
    	let t;
    	let div_intro;
    	let div_outro;
    	let current;
    	let mounted;
    	let dispose;

    	const block = {
    		c: function create() {
    			div = element("div");
    			t = text(/*text*/ ctx[0]);
    			attr_dev(div, "class", "" + (null_to_empty(/*type*/ ctx[1]) + " svelte-1txtc79"));
    			add_location(div, file$1, 14, 0, 382);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    			append_dev(div, t);
    			current = true;

    			if (!mounted) {
    				dispose = listen_dev(div, "click", /*click_handler*/ ctx[2], false, false, false);
    				mounted = true;
    			}
    		},
    		p: noop,
    		i: function intro(local) {
    			if (current) return;

    			add_render_callback(() => {
    				if (div_outro) div_outro.end(1);
    				div_intro = create_in_transition(div, fly, { y: 200, duration: 500 });
    				div_intro.start();
    			});

    			current = true;
    		},
    		o: function outro(local) {
    			if (div_intro) div_intro.invalidate();
    			div_outro = create_out_transition(div, fade, { duration: 300 });
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    			if (detaching && div_outro) div_outro.end();
    			mounted = false;
    			dispose();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$1.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$1($$self, $$props, $$invalidate) {
    	let $message;
    	validate_store(message, 'message');
    	component_subscribe($$self, message, $$value => $$invalidate(3, $message = $$value));
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('Message', slots, []);
    	const { text, type, timeout } = $message;

    	onMount(async () => {
    		const textOnMount = $message.text;

    		setTimeout(
    			() => {
    				if ($message?.text === textOnMount) message.clear();
    			},
    			timeout
    		);
    	});

    	const writable_props = [];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<Message> was created with unknown prop '${key}'`);
    	});

    	const click_handler = () => message.clear();

    	$$self.$capture_state = () => ({
    		onMount,
    		fly,
    		fade,
    		message,
    		text,
    		type,
    		timeout,
    		$message
    	});

    	return [text, type, click_handler];
    }

    class Message extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$1, create_fragment$1, safe_not_equal, {});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Message",
    			options,
    			id: create_fragment$1.name
    		});
    	}
    }

    const localesPath = "./locales/";
    const fallbackLocale = "en";
    const registerSupportedLocales = async () => {
        const manifest = await fetcher(`${localesPath}manifest.json`)();
        const { files, languages } = manifest;
        const file = files[0];
        if (!languages?.length || !file) {
            console.error("Could not load languages from manifest");
            isTextReady.set(true);
            return;
        }
        for (const language of languages) {
            y(language, fetcher(`${localesPath}${language}${file}`));
        }
        const storedLocale = localStorage.getItem("locale");
        const preferredLocale = storedLocale || navigator.language;
        const shortLocale = preferredLocale.split("-")[0];
        const initialLocale = languages.find((language) => language === preferredLocale || language === shortLocale) || fallbackLocale;
        await $({ fallbackLocale, initialLocale });
        isTextReady.set(true);
    };
    registerSupportedLocales();

    /* src/components/App.svelte generated by Svelte v3.44.2 */

    const { console: console_1 } = globals;
    const file = "src/components/App.svelte";

    // (115:0) {:else}
    function create_else_block(ctx) {
    	let div;
    	let header;
    	let navbar;
    	let t0;
    	let current_block_type_index;
    	let if_block0;
    	let t1;
    	let t2;
    	let t3;
    	let t4;
    	let t5;
    	let t6;
    	let current;
    	navbar = new Navbar({ $$inline: true });
    	const if_block_creators = [create_if_block_7, create_else_block_1];
    	const if_blocks = [];

    	function select_block_type_1(ctx, dirty) {
    		if (/*$state*/ ctx[5].edit) return 0;
    		return 1;
    	}

    	current_block_type_index = select_block_type_1(ctx);
    	if_block0 = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
    	let if_block1 = /*$state*/ ctx[5].about && create_if_block_6(ctx);
    	let if_block2 = /*$state*/ ctx[5].license && create_if_block_5(ctx);
    	let if_block3 = /*$state*/ ctx[5].raster && create_if_block_4(ctx);
    	let if_block4 = /*$state*/ ctx[5].vector && create_if_block_3(ctx);
    	let if_block5 = /*$state*/ ctx[5].tinctures && create_if_block_2(ctx);
    	let if_block6 = /*$message*/ ctx[7] && create_if_block_1(ctx);

    	const block = {
    		c: function create() {
    			div = element("div");
    			header = element("header");
    			create_component(navbar.$$.fragment);
    			t0 = space();
    			if_block0.c();
    			t1 = space();
    			if (if_block1) if_block1.c();
    			t2 = space();
    			if (if_block2) if_block2.c();
    			t3 = space();
    			if (if_block3) if_block3.c();
    			t4 = space();
    			if (if_block4) if_block4.c();
    			t5 = space();
    			if (if_block5) if_block5.c();
    			t6 = space();
    			if (if_block6) if_block6.c();
    			add_location(header, file, 116, 4, 4009);
    			set_style(div, "background-color", /*$background*/ ctx[6]);
    			attr_dev(div, "class", "svelte-flez0f");
    			add_location(div, file, 115, 2, 3959);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    			append_dev(div, header);
    			mount_component(navbar, header, null);
    			append_dev(div, t0);
    			if_blocks[current_block_type_index].m(div, null);
    			append_dev(div, t1);
    			if (if_block1) if_block1.m(div, null);
    			append_dev(div, t2);
    			if (if_block2) if_block2.m(div, null);
    			append_dev(div, t3);
    			if (if_block3) if_block3.m(div, null);
    			append_dev(div, t4);
    			if (if_block4) if_block4.m(div, null);
    			append_dev(div, t5);
    			if (if_block5) if_block5.m(div, null);
    			append_dev(div, t6);
    			if (if_block6) if_block6.m(div, null);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			let previous_block_index = current_block_type_index;
    			current_block_type_index = select_block_type_1(ctx);

    			if (current_block_type_index === previous_block_index) {
    				if_blocks[current_block_type_index].p(ctx, dirty);
    			} else {
    				group_outros();

    				transition_out(if_blocks[previous_block_index], 1, 1, () => {
    					if_blocks[previous_block_index] = null;
    				});

    				check_outros();
    				if_block0 = if_blocks[current_block_type_index];

    				if (!if_block0) {
    					if_block0 = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
    					if_block0.c();
    				} else {
    					if_block0.p(ctx, dirty);
    				}

    				transition_in(if_block0, 1);
    				if_block0.m(div, t1);
    			}

    			if (/*$state*/ ctx[5].about) {
    				if (if_block1) {
    					if (dirty & /*$state*/ 32) {
    						transition_in(if_block1, 1);
    					}
    				} else {
    					if_block1 = create_if_block_6(ctx);
    					if_block1.c();
    					transition_in(if_block1, 1);
    					if_block1.m(div, t2);
    				}
    			} else if (if_block1) {
    				group_outros();

    				transition_out(if_block1, 1, 1, () => {
    					if_block1 = null;
    				});

    				check_outros();
    			}

    			if (/*$state*/ ctx[5].license) {
    				if (if_block2) {
    					if (dirty & /*$state*/ 32) {
    						transition_in(if_block2, 1);
    					}
    				} else {
    					if_block2 = create_if_block_5(ctx);
    					if_block2.c();
    					transition_in(if_block2, 1);
    					if_block2.m(div, t3);
    				}
    			} else if (if_block2) {
    				group_outros();

    				transition_out(if_block2, 1, 1, () => {
    					if_block2 = null;
    				});

    				check_outros();
    			}

    			if (/*$state*/ ctx[5].raster) {
    				if (if_block3) {
    					if (dirty & /*$state*/ 32) {
    						transition_in(if_block3, 1);
    					}
    				} else {
    					if_block3 = create_if_block_4(ctx);
    					if_block3.c();
    					transition_in(if_block3, 1);
    					if_block3.m(div, t4);
    				}
    			} else if (if_block3) {
    				group_outros();

    				transition_out(if_block3, 1, 1, () => {
    					if_block3 = null;
    				});

    				check_outros();
    			}

    			if (/*$state*/ ctx[5].vector) {
    				if (if_block4) {
    					if (dirty & /*$state*/ 32) {
    						transition_in(if_block4, 1);
    					}
    				} else {
    					if_block4 = create_if_block_3(ctx);
    					if_block4.c();
    					transition_in(if_block4, 1);
    					if_block4.m(div, t5);
    				}
    			} else if (if_block4) {
    				group_outros();

    				transition_out(if_block4, 1, 1, () => {
    					if_block4 = null;
    				});

    				check_outros();
    			}

    			if (/*$state*/ ctx[5].tinctures) {
    				if (if_block5) {
    					if (dirty & /*$state*/ 32) {
    						transition_in(if_block5, 1);
    					}
    				} else {
    					if_block5 = create_if_block_2(ctx);
    					if_block5.c();
    					transition_in(if_block5, 1);
    					if_block5.m(div, t6);
    				}
    			} else if (if_block5) {
    				group_outros();

    				transition_out(if_block5, 1, 1, () => {
    					if_block5 = null;
    				});

    				check_outros();
    			}

    			if (/*$message*/ ctx[7]) {
    				if (if_block6) {
    					if (dirty & /*$message*/ 128) {
    						transition_in(if_block6, 1);
    					}
    				} else {
    					if_block6 = create_if_block_1(ctx);
    					if_block6.c();
    					transition_in(if_block6, 1);
    					if_block6.m(div, null);
    				}
    			} else if (if_block6) {
    				group_outros();

    				transition_out(if_block6, 1, 1, () => {
    					if_block6 = null;
    				});

    				check_outros();
    			}

    			if (!current || dirty & /*$background*/ 64) {
    				set_style(div, "background-color", /*$background*/ ctx[6]);
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(navbar.$$.fragment, local);
    			transition_in(if_block0);
    			transition_in(if_block1);
    			transition_in(if_block2);
    			transition_in(if_block3);
    			transition_in(if_block4);
    			transition_in(if_block5);
    			transition_in(if_block6);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(navbar.$$.fragment, local);
    			transition_out(if_block0);
    			transition_out(if_block1);
    			transition_out(if_block2);
    			transition_out(if_block3);
    			transition_out(if_block4);
    			transition_out(if_block5);
    			transition_out(if_block6);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    			destroy_component(navbar);
    			if_blocks[current_block_type_index].d();
    			if (if_block1) if_block1.d();
    			if (if_block2) if_block2.d();
    			if (if_block3) if_block3.d();
    			if (if_block4) if_block4.d();
    			if (if_block5) if_block5.d();
    			if (if_block6) if_block6.d();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_else_block.name,
    		type: "else",
    		source: "(115:0) {:else}",
    		ctx
    	});

    	return block;
    }

    // (113:0) {#if $state.view}
    function create_if_block(ctx) {
    	let viewer;
    	let current;

    	viewer = new Viewer({
    			props: {
    				c: /*$state*/ ctx[5].c,
    				seed: /*seed*/ ctx[3],
    				coaSize: /*coaSize*/ ctx[4]
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(viewer.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(viewer, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const viewer_changes = {};
    			if (dirty & /*$state*/ 32) viewer_changes.c = /*$state*/ ctx[5].c;
    			if (dirty & /*seed*/ 8) viewer_changes.seed = /*seed*/ ctx[3];
    			if (dirty & /*coaSize*/ 16) viewer_changes.coaSize = /*coaSize*/ ctx[4];
    			viewer.$set(viewer_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(viewer.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(viewer.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(viewer, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block.name,
    		type: "if",
    		source: "(113:0) {#if $state.view}",
    		ctx
    	});

    	return block;
    }

    // (122:4) {:else}
    function create_else_block_1(ctx) {
    	let gallery_1;
    	let current;

    	gallery_1 = new Gallery({
    			props: {
    				gallery: /*gallery*/ ctx[2],
    				width: /*width*/ ctx[0],
    				height: /*height*/ ctx[1]
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(gallery_1.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(gallery_1, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const gallery_1_changes = {};
    			if (dirty & /*gallery*/ 4) gallery_1_changes.gallery = /*gallery*/ ctx[2];
    			if (dirty & /*width*/ 1) gallery_1_changes.width = /*width*/ ctx[0];
    			if (dirty & /*height*/ 2) gallery_1_changes.height = /*height*/ ctx[1];
    			gallery_1.$set(gallery_1_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(gallery_1.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(gallery_1.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(gallery_1, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_else_block_1.name,
    		type: "else",
    		source: "(122:4) {:else}",
    		ctx
    	});

    	return block;
    }

    // (121:4) {#if $state.edit}
    function create_if_block_7(ctx) {
    	let editor;
    	let current;

    	editor = new Editor({
    			props: {
    				historyId: /*$state*/ ctx[5].c,
    				seed: /*seed*/ ctx[3]
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(editor.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(editor, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const editor_changes = {};
    			if (dirty & /*$state*/ 32) editor_changes.historyId = /*$state*/ ctx[5].c;
    			if (dirty & /*seed*/ 8) editor_changes.seed = /*seed*/ ctx[3];
    			editor.$set(editor_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(editor.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(editor.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(editor, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_7.name,
    		type: "if",
    		source: "(121:4) {#if $state.edit}",
    		ctx
    	});

    	return block;
    }

    // (124:4) {#if $state.about}
    function create_if_block_6(ctx) {
    	let about;
    	let current;
    	about = new About({ $$inline: true });

    	const block = {
    		c: function create() {
    			create_component(about.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(about, target, anchor);
    			current = true;
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(about.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(about.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(about, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_6.name,
    		type: "if",
    		source: "(124:4) {#if $state.about}",
    		ctx
    	});

    	return block;
    }

    // (125:4) {#if $state.license}
    function create_if_block_5(ctx) {
    	let license;
    	let current;
    	license = new License({ $$inline: true });

    	const block = {
    		c: function create() {
    			create_component(license.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(license, target, anchor);
    			current = true;
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(license.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(license.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(license, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_5.name,
    		type: "if",
    		source: "(125:4) {#if $state.license}",
    		ctx
    	});

    	return block;
    }

    // (126:4) {#if $state.raster}
    function create_if_block_4(ctx) {
    	let uploadraster;
    	let current;
    	uploadraster = new UploadRaster({ $$inline: true });

    	const block = {
    		c: function create() {
    			create_component(uploadraster.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(uploadraster, target, anchor);
    			current = true;
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(uploadraster.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(uploadraster.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(uploadraster, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_4.name,
    		type: "if",
    		source: "(126:4) {#if $state.raster}",
    		ctx
    	});

    	return block;
    }

    // (127:4) {#if $state.vector}
    function create_if_block_3(ctx) {
    	let uploadvector;
    	let current;
    	uploadvector = new UploadVector({ $$inline: true });

    	const block = {
    		c: function create() {
    			create_component(uploadvector.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(uploadvector, target, anchor);
    			current = true;
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(uploadvector.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(uploadvector.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(uploadvector, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_3.name,
    		type: "if",
    		source: "(127:4) {#if $state.vector}",
    		ctx
    	});

    	return block;
    }

    // (128:4) {#if $state.tinctures}
    function create_if_block_2(ctx) {
    	let tinctures;
    	let current;
    	tinctures = new Tinctures({ $$inline: true });

    	const block = {
    		c: function create() {
    			create_component(tinctures.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(tinctures, target, anchor);
    			current = true;
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(tinctures.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(tinctures.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(tinctures, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_2.name,
    		type: "if",
    		source: "(128:4) {#if $state.tinctures}",
    		ctx
    	});

    	return block;
    }

    // (130:4) {#if $message}
    function create_if_block_1(ctx) {
    	let message_1;
    	let current;
    	message_1 = new Message({ $$inline: true });

    	const block = {
    		c: function create() {
    			create_component(message_1.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(message_1, target, anchor);
    			current = true;
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(message_1.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(message_1.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(message_1, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_1.name,
    		type: "if",
    		source: "(130:4) {#if $message}",
    		ctx
    	});

    	return block;
    }

    function create_fragment(ctx) {
    	let current_block_type_index;
    	let if_block;
    	let t_1;
    	let windowevents;
    	let current;
    	const if_block_creators = [create_if_block, create_else_block];
    	const if_blocks = [];

    	function select_block_type(ctx, dirty) {
    		if (/*$state*/ ctx[5].view) return 0;
    		return 1;
    	}

    	current_block_type_index = select_block_type(ctx);
    	if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
    	windowevents = new WindowEvents({ $$inline: true });

    	const block = {
    		c: function create() {
    			if_block.c();
    			t_1 = space();
    			create_component(windowevents.$$.fragment);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			if_blocks[current_block_type_index].m(target, anchor);
    			insert_dev(target, t_1, anchor);
    			mount_component(windowevents, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, [dirty]) {
    			let previous_block_index = current_block_type_index;
    			current_block_type_index = select_block_type(ctx);

    			if (current_block_type_index === previous_block_index) {
    				if_blocks[current_block_type_index].p(ctx, dirty);
    			} else {
    				group_outros();

    				transition_out(if_blocks[previous_block_index], 1, 1, () => {
    					if_blocks[previous_block_index] = null;
    				});

    				check_outros();
    				if_block = if_blocks[current_block_type_index];

    				if (!if_block) {
    					if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
    					if_block.c();
    				} else {
    					if_block.p(ctx, dirty);
    				}

    				transition_in(if_block, 1);
    				if_block.m(t_1.parentNode, t_1);
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(if_block);
    			transition_in(windowevents.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(if_block);
    			transition_out(windowevents.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if_blocks[current_block_type_index].d(detaching);
    			if (detaching) detach_dev(t_1);
    			destroy_component(windowevents, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance($$self, $$props, $$invalidate) {
    	let $state;
    	let $matrices;
    	let $t;
    	let $history;
    	let $matrix;
    	let $shield;
    	let $size;
    	let $locale;
    	let $background;
    	let $message;
    	validate_store(state, 'state');
    	component_subscribe($$self, state, $$value => $$invalidate(5, $state = $$value));
    	validate_store(matrices, 'matrices');
    	component_subscribe($$self, matrices, $$value => $$invalidate(11, $matrices = $$value));
    	validate_store(X, 't');
    	component_subscribe($$self, X, $$value => $$invalidate(12, $t = $$value));
    	validate_store(history, 'history');
    	component_subscribe($$self, history, $$value => $$invalidate(13, $history = $$value));
    	validate_store(matrix, 'matrix');
    	component_subscribe($$self, matrix, $$value => $$invalidate(8, $matrix = $$value));
    	validate_store(shield, 'shield');
    	component_subscribe($$self, shield, $$value => $$invalidate(14, $shield = $$value));
    	validate_store(size, 'size');
    	component_subscribe($$self, size, $$value => $$invalidate(9, $size = $$value));
    	validate_store(M, 'locale');
    	component_subscribe($$self, M, $$value => $$invalidate(15, $locale = $$value));
    	validate_store(background, 'background');
    	component_subscribe($$self, background, $$value => $$invalidate(6, $background = $$value));
    	validate_store(message, 'message');
    	component_subscribe($$self, message, $$value => $$invalidate(7, $message = $$value));
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('App', slots, []);
    	let quantity;
    	let width;
    	let height;
    	let gallery = [];
    	let seed = undefined;
    	let coaSize = 200;
    	set_store_value(M, $locale = "en", $locale); // fallback locale
    	checkLoadParameters(); // on load

    	function handleMatrixChange() {
    		const l = $history.length;

    		// reroll is clicked
    		if (!$matrices[$matrix]) {
    			if ($state.edit) {
    				// generate new coa
    				set_store_value(matrices, $matrices[$matrix] = $matrices[$matrix - 1].slice(), $matrices);

    				set_store_value(matrices, $matrices[$matrix][$state.i] = l, $matrices);
    				$$invalidate(3, seed = undefined); // use once
    			} else {
    				// reroll gallery
    				set_store_value(matrices, $matrices[$matrix] = Array.from({ length: quantity }, (_, i) => l + i++), $matrices);
    			}

    			// change shield if it's not locked (manually selected)
    			if (!localStorage.getItem("shield")) {
    				set_store_value(shield, $shield = rw(shields[rw(shields.types)]), $shield);
    			}
    		}

    		// add additional coas to matrix if size is smaller
    		if ($matrices[$matrix].length < quantity) {
    			const m = $matrices[$matrix];
    			set_store_value(matrices, $matrices[$matrix] = [...Array(quantity).keys()].map(i => m[i] !== undefined ? m[i] : l + i), $matrices);
    		}

    		$$invalidate(2, gallery = $matrices[$matrix].slice(0, quantity)); // trim gallery if size was bigger

    		// on coa edit or view mode
    		if ($state.edit || $state.view) set_store_value(state, $state.c = $matrices[$matrix][$state.i], $state);
    	}

    	function checkLoadParameters() {
    		const url = new URL(window.location.href);
    		const viewParam = url.searchParams.get("view") === "1";
    		const sizeParam = +url.searchParams.get("size");
    		const coaParam = url.searchParams.get("coa");
    		const seedParam = url.searchParams.get("seed");
    		const from = url.searchParams.get("from");
    		if (!coaParam && !seedParam) return; // no predefined coa, regular flow (generate gallery)

    		if (coaParam) {
    			// exact coa to render
    			if (!validateJSON(coaParam)) return;

    			$history.push(JSON.parse(coaParam));
    		} else if (seedParam) {
    			$$invalidate(3, seed = seedParam);
    		}

    		if (coaParam || seedParam) {
    			if (from === "FMG") {
    				message.info($t("info.tipFromFmg"), 10000);
    			}

    			set_store_value(matrices, $matrices[0] = [0], $matrices);

    			if (viewParam) {
    				if (sizeParam) $$invalidate(4, coaSize = sizeParam);
    				set_store_value(state, $state.view = 1, $state); // open in view only mode
    			} else {
    				set_store_value(state, $state.edit = 1, $state); // open in edit mode
    			}
    		}
    	}

    	function validateJSON(text) {
    		try {
    			JSON.parse(text);
    			return true;
    		} catch(error) {
    			console.error(error);
    			message.error(error.message);
    			return false;
    		}
    	}

    	// define number and size of coas to display
    	function defineGallerySize(desiredSize) {
    		const width = window.innerWidth;
    		const height = window.innerHeight - 60;
    		const numberX = Math.ceil(width / desiredSize);
    		const w = Math.floor(width / numberX);
    		const numberY = Math.floor(height / w);
    		const h = Math.floor(height / numberY);
    		return [numberX * numberY, w, h];
    	}

    	const writable_props = [];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console_1.warn(`<App> was created with unknown prop '${key}'`);
    	});

    	$$self.$capture_state = () => ({
    		t: X,
    		locale: M,
    		WindowEvents,
    		Navbar,
    		About,
    		License,
    		Viewer,
    		Editor,
    		Gallery,
    		UploadRaster,
    		UploadVector,
    		Tinctures,
    		Message,
    		background,
    		size,
    		history,
    		matrices,
    		matrix,
    		state,
    		message,
    		shield,
    		shields,
    		rw,
    		quantity,
    		width,
    		height,
    		gallery,
    		seed,
    		coaSize,
    		handleMatrixChange,
    		checkLoadParameters,
    		validateJSON,
    		defineGallerySize,
    		$state,
    		$matrices,
    		$t,
    		$history,
    		$matrix,
    		$shield,
    		$size,
    		$locale,
    		$background,
    		$message
    	});

    	$$self.$inject_state = $$props => {
    		if ('quantity' in $$props) quantity = $$props.quantity;
    		if ('width' in $$props) $$invalidate(0, width = $$props.width);
    		if ('height' in $$props) $$invalidate(1, height = $$props.height);
    		if ('gallery' in $$props) $$invalidate(2, gallery = $$props.gallery);
    		if ('seed' in $$props) $$invalidate(3, seed = $$props.seed);
    		if ('coaSize' in $$props) $$invalidate(4, coaSize = $$props.coaSize);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	$$self.$$.update = () => {
    		if ($$self.$$.dirty & /*$size*/ 512) {
    			$$invalidate(0, [quantity, width, height] = defineGallerySize($size), width, ($$invalidate(1, height), $$invalidate(9, $size)));
    		}

    		if ($$self.$$.dirty & /*$matrix, $size*/ 768) {
    			handleMatrixChange();
    		}
    	};

    	return [
    		width,
    		height,
    		gallery,
    		seed,
    		coaSize,
    		$state,
    		$background,
    		$message,
    		$matrix,
    		$size
    	];
    }

    class App extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance, create_fragment, safe_not_equal, {});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "App",
    			options,
    			id: create_fragment.name
    		});
    	}
    }

    const app = new App({
      target: document.body,
      props: {}
    });

    return app;

})();
//# sourceMappingURL=bundle.js.map
